[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            common_elements.append(test_tup1[i])\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    \n    # Find the intersection of the two sets and convert back to a list\n    similar_set = set_tup1.intersection(set_tup2)\n    similar_list = list(similar_set)\n    \n    # Return the shared elements\n    return similar_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Initialize an empty list to store the shared elements\n    shared_elements = []\n\n    # Loop through each element of the first tuple and compare it to each element of the second tuple\n    for element in test_tup1:\n        if element in test_tup2:\n            # If the element is present in both tuples, add it to the shared_elements list\n            shared_elements.append(element)\n\n    # Return the shared_elements list\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return [i for i in range(2, n+1) if primes[i]]"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, else False.\n    '''\n    # First, check if n is less than 2\n    if n < 2:\n        return True\n\n    # Create a list of all numbers from 2 to n (inclusive)\n    primes = [True] * (n+1)\n    primes[0] = False\n    primes[1] = False\n\n    # Use the Sieve of Eratosthenes algorithm to find all primes up to sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Check if n is prime\n    if primes[n]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether n is not a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = hq.heappop(nums)\n    for _ in range(n-1):\n        hq.heappush(nums, hq.heappop(nums))\n    return [largest] + nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function finds the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers into a min-heap\n    heap = hq.nsmallest(n, nums)\n    # Remove the smallest n elements from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the first n elements of the list\n    heap = nums[:n]\n    heapq.heapify(heap)\n\n    # Iterate over the remaining elements of the list\n    for i in range(n, len(nums)):\n        # If the current element is greater than the maximum element in the heap, replace the maximum element with the current element\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n\n    # Return the heap as a list of the n largest integers\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # convert the list of numbers into a max heap\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n\n    # pop the maximum n numbers from the heap and return them in a list\n    return [hq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap from the first n elements of the list\n    heap = hq.nsmallest(n, nums)\n    # append the remaining elements of the list to the min-heap\n    for num in nums[n:]:\n        heapq.heappush(heap, num)\n    # return the heap as a list in descending order\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to store the largest n elements\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    # Return the largest n elements as a list\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Convert the list of numbers to a max heap\n    max_heap = [hq.heappushpop(nums, -num) for num in nums[:n]]\n\n    # Return the max heap in descending order\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the given list of numbers\n    nums_heap = hq.nlargest(n,nums)\n    # return the heap as a list\n    return list(nums_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns the n largest integers from the list.\n    '''\n    # Convert the list to a min-heap\n    hq.heapify(nums)\n    # Remove the first n elements from the heap and convert it back to a list\n    result = [hq.heappop(nums) for i in range(n)]\n    # Return the result list\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    max_heap = [None] * n\n    heapq.heapify(max_heap)\n\n    # Push the first n elements of the input list into the max-heap\n    for num in nums[:n]:\n        heapq.heappush(max_heap, -num)\n\n    # Pop and append the remaining elements of the input list into the max-heap\n    for num in nums[n:]:\n        heapq.heappush(max_heap, -heapq.heappop(max_heap))\n\n    # Return the n largest integers in descending order\n    return [-num for num in max_heap]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given integer x to binary and find the number of bits present in the binary representation\n    binary_representation = bin(x)[2:]\n    num_bits = len(binary_representation)\n\n    # Iterate through all possible pairs of bits in the binary representation\n    for i in range(0,num_bits):\n        for j in range(i+1,num_bits):\n            if binary_representation[i]!= binary_representation[j]:\n                return True\n\n    # If we reach here, all pairs of bits differ at only one bit position\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary string\n    binary_x = bin(x)[2:]\n    \n    # find the first bit position where x and y differ\n    for i in range(len(binary_x)):\n        if binary_x[i]!= binary_x[i+1]:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # convert binary representation of x to a list\n    x = [int(i) for i in bin(x)[2:]]\n\n    # sort the binary representation of x\n    x.sort()\n\n    # convert sorted binary representation of x back to a binary number\n    result = int(''.join(str(i) for i in x), 2)\n\n    # check if the result is a power of 2\n    if result == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0 "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Convert x to binary\n    bin_x = bin(x)[2:]\n\n    # Count the number of bits that differ from the binary representation of 1\n    count = 0\n    for i in range(len(bin_x)):\n        if bin_x[i]!= '0':\n            count += 1\n            if count > 1:\n                return False\n    \n    # If all bits differ from 1, the number is a power of 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        if x & 1 == 1: \n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the two numbers to binary strings\n    bin_str1 = bin(x)[2:]\n    bin_str2 = bin(x)[2:]\n    \n    # Check if both binary strings have the same length\n    if len(bin_str1)!= len(bin_str2):\n        return False\n    \n    # Count the number of different bits in the binary strings\n    count = 0\n    for i in range(len(bin_str1)):\n        if bin_str1[i]!= bin_str2[i]:\n            count += 1\n            \n    # Check if the number of different bits is one\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Iterate through the bits of x and check if they differ at only one position\n    for i in range(32): \n        if ((x & (1 << i))!= ((x & (x-1)) & (1 << i))): \n            return False\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # remove all punctuations from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # split the text into words\n    words = text.split()\n    # initialize an empty list to store the results\n    results = []\n    # loop through the words\n    for word in words:\n        # check if the length of the word is at least 4\n        if len(word) >= 4:\n            # append the word to the results list\n            results.append(word)\n    # return the results list\n    return results"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regular expressions to find all words which are at least 4 characters long\n    regex = r'\\b\\w{4,}\\b'\n    words = re.findall(regex, text)\n    \n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # remove all non-alphanumeric characters and convert to lowercase\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text.lower())\n\n    # split the text into words using whitespace as the delimiter\n    words = text.split()\n\n    # create an empty list to store the long words\n    long_words = []\n\n    # loop through each word\n    for word in words:\n        # check if the length of the word is at least 4\n        if len(word) >= 4:\n            # add the word to the list of long words\n            long_words.append(word)\n\n    # return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall('\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Square the element and append it to a new list\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    n = len(str)  # length of the string \n    min_rotations = float('inf')  # initialize minimum number of rotations to be infinity \n    for i in range(n):  # iterate through all possible rotations of the string \n        temp = str[i:] + str[:i]  # reverse the current rotation \n        if temp == str:  # check if the reversed rotation is same as the original string \n            min_rotations = min(min_rotations, i)  # update minimum number of rotations if necessary \n    return min_rotations  # return the minimum number of rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # create a list of tuples, where each tuple contains a character and its frequency in the string\n    char_freq = []\n    for char, count in freq.items():\n        char_freq.append((char, count))\n\n    # sort the list of tuples by frequency in descending order\n    char_freq.sort(key=lambda x: x[1], reverse=True)\n\n    # calculate the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for i in range(len(str)):\n        # if the character at the current position is not the same as the character at the next position, add 1 to the count\n        if str[i]!= str[i+1]:\n            min_rotations += 1\n        # if the character at the current position is the same as the character at the next position, check if the next position's count is greater than 1\n        else:\n            if i+1 < len(str) and freq[str[i+1]] > 1:\n                # if it is, rotate the string by 1 character to the right and check if the character at the current position is still the same as the character at the new position\n                freq[str[i+1]] -= 1\n                freq[str[i]] += 1\n                if str[i]!= str[i+1]:\n                    min_rotations += 1\n                freq[str[i+1]] += 1\n                freq[str[i]] -= 1\n                i -= 1\n\n    # if the minimum number of rotations is greater than 0, return the number of rotations, otherwise, return 0\n    return min_rotations if min_rotations > 0 else 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        temp = str[i] + str[j] + str[k] + str[l] + str[m]\n                        if temp == str:\n                            count += 1\n                            if count > max_count:\n                                max_count = count\n                            temp = str[m] + str[l] + str[k] + str[j] + str[i]\n                            if temp == str:\n                                count += 1\n                                if count > max_count:\n                                    max_count = count\n    return max_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(1, n):\n        for j in range(n-i):\n            if str[j:j+i] == str[j+i:j+2*i]:\n                min_rotations = max(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    # Create a list of all possible rotations of the input string\n    rotations = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            rotations.append(str[i:j])\n\n    # Find the minimum number of rotations\n    min_rotations = 999999999999999999999999999999\n    for rotation in rotations:\n        if rotation == str:\n            # If the rotation is equal to the original string, update the minimum number of rotations\n            min_rotations = min(min_rotations, len(str) - len(rotation))\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n\n    Args:\n        str: (str) - The input string to be rotated.\n\n    Returns:\n        (int) - The minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n <= 1:\n        return 0\n\n    max_length = 0\n    for i in range(1, n):\n        if str[i]!= str[0]:\n            max_length = max(max_length, i)\n        if max_length == 0:\n            break\n\n    if max_length == 0:\n        return 0\n    else:\n        return n // max_length\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    while str!= str[::-1]: \n        count += 1\n        str = str[1:n] + str[0:n-1]\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    count = 0 \n    max_count = 0 \n    for i in range(1, n): \n        if str[i] == str[(i+n-1) % n]: \n            count += 1 \n            max_count = max(max_count, count) \n            count = 0 \n    return max_count \n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if the input string is empty or contains only one character\n    if len(str) <= 1:\n        return 0\n    \n    # initialize two variables to store the length of the string and the index of the last character\n    n = len(str)\n    last = n - 1\n    \n    # loop through the characters in the string and compare them with the last character\n    for i in range(n):\n        if str[i]!= str[last]:\n            # if the characters are not equal, return the minimum number of rotations required\n            return i + 1\n        else:\n            # if the characters are equal, update the last character index and decrement the count of rotations\n            last = i\n            n -= 1\n    \n    # if the characters are not equal, return the minimum number of rotations required\n    return n + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n-1):\n        if str[i] > str[i+1]:\n            return i+1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # find the first occurrence of the given character\n    i = s.find(ch)\n    \n    # if the character is not found, return an empty string\n    if i == -1:\n        return \"\"\n    \n    # remove the first occurrence of the character and return the rest of the string\n    return s[:i] + s[i+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0]==ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1]==ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character exists in the string\n    if ch not in s:\n        return s\n    \n    # remove first occurrence\n    if s.find(ch) == 0:\n        return s[1:]\n    \n    # remove last occurrence\n    if s.find(ch) == len(s)-1:\n        return s[:-1]\n    \n    # remove all occurrences\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Removing last occurrence of character\n    if s.rfind(ch) == len(s)-1:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if string contains the given character\n    if ch in s:\n        # Remove the first occurrence\n        s = s.replace(ch, '', 1)\n        # Remove the last occurrence\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present in the string\n    if ch in s: \n        # Split the string into two parts using the character as a separator\n        s1,s2 = s.split(ch) \n        # Check if the character is present at the beginning of the second part\n        if ch in s2: \n            # Split the second part into two parts using the character as a separator\n            s3,s4 = s2.split(ch) \n            # Return the first part of the string with the character removed\n            return s1+s4 \n        # If the character is not present at the beginning of the second part, \n        # then check if it is present at the end of the first part\n        elif ch in s1: \n            # Split the first part into two parts using the character as a separator\n            s5,s6 = s1.split(ch) \n            # Return the second part of the string with the character removed\n            return s5+s6 \n    # If the character is not present in the string, then return the original string\n    else: \n        return s \n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the character is present in the string\n    if ch not in s:\n        return \"Character is not present in the string\"\n    # Remove first occurrence of the character\n    if s.startswith(ch):\n        return s.lstrip(ch)\n    # Remove last occurrence of the character\n    elif s.endswith(ch):\n        return s.rstrip(ch)\n    else:\n        return \"No occurrences found\""
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        s = s[1:]\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Iterate through the matrix\n    for i in range(len(M)):\n        # Find the sum of the i-th row\n        row_sum = sum(M[i])\n        # Sort the i-th row in ascending order\n        M[i].sort()\n        # Reverse the sorted i-th row\n        M[i].reverse()\n        # Subtract the sum of the i-th row from the sum of all rows to get the final index\n        M[i] = [x - row_sum for x in M[i]]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M_sorted = [[float('inf')] * n for i in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                M_sorted[i][j] = min(M_sorted[i][j], M[i][k] + M[k][j])\n\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_M = []\n\n    # Find the sum of all rows in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix based on the sum of each row\n    sorted_M = [M[i] for i in sorted(range(len(M)), key=lambda j: row_sums[j])]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix and calculate the sum of its elements\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Loop through each row of the matrix and assign the row with the corresponding sum to the corresponding position in the new matrix\n    new_M = []\n    for i in range(len(M)):\n        row = []\n        for j in range(len(M[i])):\n            row.append(M[i][j])\n        index = row_sums.index(sum(row))\n        new_M.append(row)\n\n    # Return the new matrix sorted in ascending order\n    return new_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i][j], M[j][j] = M[j][j], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the maximum sum of any row in the matrix\n    max_sum = max(sum(row) for row in M)\n    # Initialize the sorted matrix to the input matrix\n    sorted_M = M[:]\n    # Loop through each row in the matrix and place it in the sorted matrix based on its sum\n    for i in range(len(sorted_M)):\n        for j in range(len(sorted_M[i])):\n            # Calculate the sum of the current row and check if it is equal to the maximum sum\n            row_sum = sum(sorted_M[i])\n            if row_sum == max_sum:\n                # If it is, append the current row to the sorted matrix in the correct position\n                sorted_M[i].append(sorted_M.pop(i))\n                # Set the index of the sorted row to the length of the sorted matrix\n                sorted_M.insert(i, sorted_M[i])\n                # Break out of the inner loop and continue with the next row\n                break\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Find the row with the smallest sum\n        min_sum = float('inf')\n        min_index = -1\n        for j in range(n):\n            if i == j:\n                continue\n            row_sum = sum(M[j])\n            if row_sum < min_sum:\n                min_sum = row_sum\n                min_index = j\n        # Swap the elements in the row with the smallest sum with the first element of the row\n        M[i], M[min_index] = M[min_index], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Create a list to store the sum of each row\n    row_sums = []\n\n    # Iterate through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        # Append the row sum to the list\n        row_sums.append(row_sum)\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Create a new matrix with the sorted row sums\n    sorted_M = []\n    for row in M:\n        sorted_row = []\n        for num in row:\n            for i in range(len(row_sums)):\n                if row_sums[i] == sum(row):\n                    sorted_row.append(row[row.index(num)])\n                    row_sums.pop(i)\n                    break\n        sorted_M.append(sorted_row)\n\n    return sorted_M\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    print(\"The Volume of the Triangular Prism is: \", V)\n    "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h) / 3.0\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = l * b\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    volume = l * b * h\n\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5*l*b*h"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])|_[a-z](?=[A-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])([A-Z])'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'\\b[a-z]+_[a-z]+\\b'\n    return re.search(regex, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'^[a-z]+_[a-z]+$'\n\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?i)[a-z]+(_[a-z]+)*\"\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'(?<![a-z])([a-z])_+(?![a-z])'\n    matches = re.findall(pattern, text)\n\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z])([A-Z])'\n    result = re.findall(pattern, text)\n    return bool(result)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string) # convert string to list of characters\n    \n    # create a list to store the characters to be removed\n    to_remove = []\n    \n    # iterate through the string and find characters to be removed\n    for char in string:\n        if char in string[1:]:\n            to_remove.append(char)\n    \n    # remove the characters from the list\n    for char in to_remove:\n        string.remove(char)\n    \n    # convert the list back to a string\n    result = ''.join(string)\n    \n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS): \n        if string.count(chr(i)) == 0: \n            result = ''.join([chr(j) for j in range(NO_OF_CHARS) if chr(j) not in string]) \n            return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    str_set = set(string)\n    for i in range(no_of_chars):\n        if i not in str_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string, char_list):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    for char in string:\n        if char not in char_list:\n            result += char\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Define the set of characters to be removed from the first string\n    chars_to_remove = set(string)\n    # Iterate through the characters of the second string and add them to the set of characters to be removed if not present in the first string\n    for char in string:\n        if char not in chars_to_remove:\n            chars_to_remove.add(char)\n    # Create a new string with all the characters of the first string which are not present in the second string\n    new_string = ''.join(c for c in string if c not in chars_to_remove)\n    # Return the new string\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    This function takes a string and a list of characters to be removed as input.\n    It then returns a new string with the removed characters.\n    \"\"\"\n    return ''.join([char for char in string if char not in remove_chars])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for char in string:\n        if char not in list_string:\n            list_string.append(char)\n    return ''.join(list_string)\n\ndef remove_chars(string, list_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for char in string:\n        if char not in list_chars:\n            list_string.append(char)\n    return ''.join(list_string)\n\ndef main():\n    string = input(\"Enter a string: \")\n    list_chars = input(\"Enter the characters to be removed: \")\n\n    string_without_chars = str_to_list(string)\n    list_without_chars = str_to_list(list_chars)\n\n    print(\"String without characters:\", string_without_chars)\n    print(\"List without characters:\", list_without_chars)\n\n    string_without_chars = remove_chars(string, list_without_chars)\n    print(\"String without characters:\", string_without_chars)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n\n    for char in string:\n        if char not in char_list:\n            char_list.remove(char)\n\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string, remove_string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list\n    string_list = list(string)\n\n    # iterate over each character in the string list\n    for i in range(len(string_list)):\n        # check if the current character is in the remove_string\n        if string_list[i] in remove_string:\n            # if the character is in the remove_string, remove it from the string list\n            string_list.pop(i)\n            i -= 1 # decrement the index to avoid a list index error\n\n    # convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # loop through the array and add each unique number to the set\n    for num in arraynums:\n        if num in unique_nums:\n            return True\n        unique_nums.add(num)\n\n    # if we get here, there were no duplicates in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to keep track of unique elements\n    unique_nums = set(arraynums)\n    # Check if there are any duplicate elements\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        print(\"The array doesn't contain any duplicate element.\")\n    else:\n        print(\"The array contains at least one duplicate element.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_map = {}\n    for num in arraynums:\n        if num in hash_map:\n            return True\n        else:\n            hash_map[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if not arraynums:\n        return False\n\n    # sort the array in ascending order\n    arraynums.sort()\n\n    # compare adjacent elements in the sorted array\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) < 2:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n\n    # Loop through each element in the array and update its frequency in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Loop through the dictionary to check for any duplicate elements\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 1 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 5 or x == 10 or x == 25 or x == 50 or x == 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # define the list of possible numbers that can be woodballs\n    woodballs = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n\n    # check if the number is in the list of woodballs\n    if x in woodballs:\n        # if the number is in the list, it's a woodball\n        return True\n    else:\n        # otherwise, it's not a woodball\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x >= 1000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 100 and x < 1000: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    This function checks if a given number is a Woodall number or not.\n    '''\n    def is_prime(n):\n        '''\n        This function checks if a given number is prime or not.\n        '''\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def is_abundant(n):\n        '''\n        This function checks if a given number is abundant or not.\n        '''\n        abundant_numbers = [12, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]\n        for num in abundant_numbers:\n            if num > n:\n                break\n            if n % num == 0:\n                return True\n        return False\n    \n    if is_prime(x):\n        return True\n    elif is_abundant(x):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 5 == 0 and x % 10 == 3:\n        print(\"The number is a woodball.\")\n    else:\n        print(\"The number is not a woodball.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    elif x == 1 or x == 3 or x == 5 or x == 7 or x == 9 or x == 11 or x == 13 or x == 15 or x == 17 or x == 19 or x == 21 or x == 23 or x == 25:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < 2 * (int(str(num)[::-1]))\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n\n    return reverse - num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # get the reverse of the input number\n    num_reverse = 0\n    while num > 0:\n        num_reverse = num_reverse * 10 + num % 10\n        num //= 10\n\n    # check if the reverse of the input number is one less than twice the reverse of the input number\n    if num_reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    temp = num\n\n    while temp!= 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n\n    if rev_num == num + 2:\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = 0\n    temp_num = num\n    \n    while temp_num > 0:\n        remainder = temp_num % 10\n        reversed_num = reversed_num * 10 + remainder\n        temp_num //= 10\n    \n    if reversed_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the given number to a string\n    str_num = str(num)\n    # convert the string to a list of characters\n    char_list = list(str_num)\n    # reverse the list of characters\n    char_list.reverse()\n    # convert the list of characters back to a string\n    rev_str_num = ''.join(char_list)\n    # check if the original string is one less than twice its reverse\n    if num == int(rev_str_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # reverse the number\n    rev_num = str(num)[::-1]\n    # convert the reversed number to integer\n    rev_num = int(rev_num)\n    # check if the original number is one less than twice its reverse\n    if num - 1 < 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    if num == reverse_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num!= (rev_num * 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Get the reverse of the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    # Check if the reverse is one less than twice the original number\n    if rev_num == 2 * num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed by the digits.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n\n    # Initialize a variable to store the maximum number formed\n    max_num = 0\n\n    # Iterate over each digit in the list\n    for digit in arr:\n\n        # Convert the digit to its corresponding integer value\n        digit_int = int(digit)\n\n        # Iterate over each number between 0 and the digit itself\n        for num in range(digit_int+1):\n\n            # Combine the digit and the number to form a number that can be formed with the given list of digits\n            new_num = num * digit_int + digit_int\n\n            # Update the maximum number if this new number is greater than the current maximum number\n            if new_num > max_num:\n                max_num = new_num\n\n    # Return the maximum number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed by those digits.\n\n    Args:\n    arr (list): A list of digits to be used to form the largest number.\n\n    Returns:\n    int: The largest number that can be formed by the given list of digits.\n    '''\n\n    # sort the list of digits in decreasing order\n    arr.sort(reverse=True)\n\n    # initialize a variable to keep track of the number formed\n    num = 0\n\n    # loop through the sorted list of digits\n    for digit in arr:\n        # if the digit is 0, add 0 to the number\n        if digit == 0:\n            num = 0\n        # if the digit is 1, add 1 to the number\n        elif digit == 1:\n            num += 1\n        # if the digit is 2, add 10 to the number\n        elif digit == 2:\n            num += 10\n        # if the digit is 3, add 100 to the number\n        elif digit == 3:\n            num += 100\n        # if the digit is 4, add 1000 to the number\n        elif digit == 4:\n            num += 1000\n        # if the digit is 5, add 10000 to the number\n        elif digit == 5:\n            num += 10000\n        # if the digit is 6, add 100000 to the number\n        elif digit == 6:\n            num += 100000\n        # if the digit is 7, add 1000000 to the number\n        elif digit == 7:\n            num += 1000000\n        # if the digit is 8, add 10000000 to the number\n        elif digit == 8:\n            num += 10000000\n        # if the digit is 9, add 100000000 to the number\n        elif digit == 9:\n            num += 100000000\n\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    :param arr: a list of digits, e.g. [1, 3, 4, 5]\n    :return: the largest number that can be formed with the given list of digits\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            temp = arr[:i] + arr[i+1:j] + arr[j:]\n            num = int(''.join(map(str, temp)))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    num = 0\n    for i in range(len(arr)):\n        num += arr[i] * (10**(len(arr)-i-1))\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sorting the list of digits in descending order\n    arr.sort(reverse=True)\n\n    # initializing the maximum number\n    max_num = 0\n\n    # traversing through the sorted list of digits\n    for digit in arr:\n        # calculating the sum of digits\n        total_sum = 0\n        while digit!= 0:\n            total_sum += digit % 10\n            digit //= 10\n\n        # updating the maximum number if the sum is greater than the current maximum number\n        if total_sum > max_num:\n            max_num = total_sum\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, digit)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sorting the digits in descending order\n    max_num = 0 # Initializing max number variable to 0\n    power = 0 # Initializing power variable to 0\n    \n    for i in arr: # Iterating through the digits\n        max_num += i * (10**power) # Calculating the maximum number formed with the current digit and power\n        power += 1 # Increasing the power\n    \n    return max_num # Returning the maximum number formed with the given digits"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def is_valid(num, index, max_num):\n        '''\n        Checks if the current number can be formed by adding the next digit in the list\n        to the current number and if the sum is less than or equal to the current max_num.\n        '''\n        if num + arr[index] <= max_num:\n            return True\n        else:\n            return False\n    \n    def find_max(arr, start, end):\n        '''\n        Finds the maximum number in the given range of digits using a recursive approach.\n        '''\n        if start == end:\n            return int(arr[start])\n        elif start > end:\n            return None\n        \n        mid = (start + end) // 2\n        max1 = find_max(arr, start, mid)\n        max2 = find_max(arr, mid + 1, end)\n        \n        if max1 is None:\n            return max2\n        elif max2 is None:\n            return max1\n        \n        return max(max1, max2)\n    \n    max_num = find_max(arr, 0, len(arr) - 1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the input array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables\n    max_num = 0\n    power = 1\n\n    # Traverse through the array and find the largest power of 10\n    for i in range(len(arr)):\n        temp = power\n        while temp < arr[i]:\n            temp *= 10\n        power = temp\n\n    # Multiply the power by the largest power of 10 to get the maximum number\n    max_num = power * arr[0]\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, and False otherwise.\n    '''\n    return (x < 0 and y >= 0) or (x >= 0 and y < 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both zero\"\n    elif x == 0:\n        return \"Negative\"\n    elif y == 0:\n        return \"Positive\"\n    else:\n        if x > 0 and y > 0:\n            return \"Both positive\"\n        elif x > 0 and y < 0:\n            return \"Positive and negative\"\n        elif x < 0 and y > 0:\n            return \"Negative and positive\"\n        else:\n            return \"Both negative\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        print(\"Both numbers have opposite signs.\")\n    else:\n        print(\"Both numbers have same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if the two integers have opposite signs\n    and False otherwise.\n    '''\n    # Check if the first integer is greater than the second integer\n    if x > y:\n        # If the first integer is greater than the second integer, check if both integers have the same sign\n        if x == abs(x) and y == abs(y):\n            return True\n        else:\n            return False\n    else:\n        # If the first integer is less than the second integer, check if both integers have the same sign\n        if y == abs(y) and x == abs(x):\n            return True\n        else:\n            return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(\"The signs are opposite\")\n    else:\n        print(\"The signs are not opposite\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    # check if x and y are equal\n    if x == y:\n        return \"The two numbers are equal.\"\n\n    # if x is greater than y\n    elif x > y:\n        return \"The first number is greater than the second number.\"\n\n    # if x is less than y\n    else:\n        return \"The first number is less than the second number.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    #checking the signs of both numbers\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have the same sign\"\n    else:\n        return \"Both numbers have the opposite signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    return (x*y) < 0"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    a = 1\n    b = 1\n    for i in range(n//2):\n        a += 1\n        b += 1\n        c = a + b\n        if n - c + 1 == 0:\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        i = 1\n        j = 2 * i + 1\n        oct_n = i + j\n        while i <= n:\n            j = 2 * i + 1\n            oct_n = i + j\n            i += 1\n        return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    This function checks whether a given number is an octagonal number or not.\n    '''\n    # Calculating the square of the number\n    square = n ** 2\n    # Finding the sum of the cubes of digits of the square\n    sum_cubes = sum(int(digit) ** 3 for digit in str(square))\n    # Comparing the sum with the square\n    if sum_cubes == square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if i**2 + i**3 == n:\n            return True\n    return False\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The {}-th octagonal number is: {}\".format(n, is_octagonal(n)))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n\n    An octagonal number is a positive integer which is the sum of the squares of its sides.\n    \"\"\"\n    side_length = int(n ** 0.5)\n    return (side_length * (side_length + 1) * (2 * side_length + 1)) == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n*(8*n + 1)/6"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_octagonal_helper(num):\n        if num < 1:\n            return False\n        elif num == 1 or num == 8:\n            return True\n        elif num % 2 == 0:\n            return is_octagonal_helper(num // 2)\n        else:\n            return is_octagonal_helper(3 * num + 1)\n\n    return is_octagonal_helper(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # initialize variables \n    count = 0\n    total_count = 0\n    octagonal_count = 0\n\n    # calculate the total number of squares \n    total_squares = (n * (n + 1)) / 2\n\n    # loop through the squares \n    for i in range(1, total_squares + 1):\n        # check if the square is an octagonal number \n        if i * i == total_squares:\n            octagonal_count += 1\n            if octagonal_count == n:\n                return i\n            count += 1\n            if count == n:\n                break"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    while n > 0:\n        if n % 2 == 0:\n            a *= 2\n        else:\n            a += 2\n        n //= 2\n    return a\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th octagonal number is: {is_octagonal(n)}\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1: \n        return False\n    elif n == 1: \n        return True\n    else:\n        i = 1\n        while i*i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n    dp[0] = 1\n    \n    for i in range(1, n):\n        dp[i] = dp[i-1] + 1\n        \n        if s[i-1].isdigit():\n            dp[i] += dp[i-2]\n    \n    for i in range(n-1, 0, -1):\n        if s[i-1].isdigit():\n            count += dp[i]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the frequency of substrings\n    freq = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring and calculate its sum of digits\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n\n            # Update the frequency of substrings with the given sum\n            freq[digit_sum] += 1\n\n    # Return the total number of substrings with the given sum\n    return sum(freq.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            # calculate the sum of digits of the substring\n            substring_sum = sum(int(digit) for digit in substring)\n            if substring_sum == len(substring):\n                count_dict[substring] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    count = 0\n\n    # Loop through each character of the string\n    for i in range(len(s)):\n        # Create a substring from the current character to the end of the string\n        substring = s[i:]\n        # Remove all non-digit characters from the substring\n        substring = ''.join(filter(str.isdigit, substring))\n        # Add the length of the substring to the count\n        count += len(substring)\n        # Add the count of the substring to the count of the sum of digits equal to the length of the substring\n        d[sum(int(digit) for digit in substring)] += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings for each substring with sum of digits equal to its length\n    substrings_with_sum = defaultdict(int)\n\n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                # Add the count of substrings for this substring to the dictionary\n                substrings_with_sum[s[i:j+1]] += 1\n\n    # Return the total count of substrings with sum of digits equal to their length\n    return sum(substrings_with_sum.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a defaultdict to store the count of substrings with each length\n    substring_count = defaultdict(int)\n\n    # Loop through each substring in the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                # Add 1 to the count of substrings with the current length\n                substring_count[len(s[i:j+1])] += 1\n\n    # Return the dictionary of substring counts\n    return substring_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j-i] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    count = 0\n    \n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            digits_sum = sum(digits)\n            \n            if digits_sum == len(digits):\n                substrings[substring] += 1\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits_count = defaultdict(int)\n    for i in range(len(s)):\n        digits_count[int(s[i])] += 1\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += digits_count[int(s[i])]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(d) for d in substring)\n            if sum_of_digits == len(substring):\n                count_dict[substring] += 1\n    return count_dict"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first element in the list\n    smallest = xs[0]\n    \n    # iterate through the rest of the elements in the list\n    for x in xs[1:]:\n        # check if the current element is smaller than the current smallest number\n        if x < smallest:\n            # update the smallest number to the current element\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    This function finds the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs[1:]:\n            if num < smallest:\n                smallest = num\n        return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples by their first element\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables for the maximum difference and the current difference\n    max_diff = float('-inf')\n    curr_diff = float('-inf')\n\n    # Loop over the sorted list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current and the next tuples\n        curr_diff = abs(test_list[i+1][0] - test_list[i][0])\n\n        # Update the maximum difference if necessary\n        max_diff = max(max_diff, curr_diff)\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create an empty dictionary to store pairs\n    pairs = {}\n\n    # iterate through the list of tuples\n    for pair in test_list:\n        # get the difference between the pair and the current maximum difference\n        diff = max(pair) - min(pair)\n\n        # add the pair to the dictionary if it's not already there\n        if diff not in pairs or pairs[diff] < pair:\n            pairs[diff] = pair\n\n    # find the maximum difference\n    max_diff = max(pairs.keys())\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    test_list (list of tuples): A list of tuples containing integers.\n\n    Returns:\n    int: The maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables for the maximum and current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Update the current difference for the current pair\n        curr_diff = abs(test_list[i][1] - test_list[i+1][1])\n\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n\n    # initialize two variables to store the minimum and maximum values of a pair\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # iterate through the list of tuples\n    for pair in test_list:\n        # calculate the difference between the pair of values\n        diff = pair[1] - pair[0]\n\n        # update the minimum and maximum values of the pair\n        min_val = min(min_val, diff)\n        max_val = max(max_val, diff)\n\n    # return the maximum difference\n    return max_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum difference between available pairs in the list.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables to store the current minimum and maximum values\n    current_min = float('inf')\n    current_max = float('-inf')\n\n    # Iterate through the list of tuples\n    for item in test_list:\n        # Get the current value and its absolute value\n        value = abs(item[0])\n\n        # If the value is less than the current minimum, update the minimum value\n        if value < current_min:\n            current_min = value\n\n        # If the value is greater than the current maximum, update the maximum value\n        elif value > current_max:\n            current_max = value\n\n    # Return the maximum difference between the available pairs\n    return current_max - current_min"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize the maximum difference as 0\n    max_diff = 0\n\n    # Loop through each pair in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the values\n            diff = abs(test_list[i][0] - test_list[j][0])\n\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize two variables to store the maximum and minimum values\n    max_diff = 0\n    min_diff = 0\n\n    # Iterate over the sorted list and calculate the difference between adjacent pairs\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        max_diff = max(max_diff, diff)\n        min_diff = min(min_diff, diff)\n\n    return max_diff, min_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a new list to store the tuples sorted by the second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten(data):\n        if isinstance(data, list):\n            return [x for sublist in data for x in flatten(sublist)]\n        else:\n            return [data]\n    \n    flattened_list = flatten(data_list)\n    sum_of_flattened_list = sum(flattened_list)\n    \n    return sum_of_flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Define a helper function to flatten a list\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                yield from flatten_list(item)\n        else:\n            yield data_list\n\n    # Flatten the list and sum its elements\n    flattened_list = list(flatten_list(data_list))\n    total = sum(flattened_list)\n\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list, result_list=[]):\n        for item in data_list:\n            if isinstance(item, list):\n                flatten_list(item, result_list)\n            else:\n                result_list.append(item)\n        return result_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(nested_list):\n        flat_list = []\n        for item in nested_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    def sum_flat_list(flat_list):\n        if not flat_list:\n            return 0\n        else:\n            return flat_list[0] + sum_flat_list(flat_list[1:])\n\n    flattened_list = flatten(data_list)\n    return sum_flat_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if type(item) == list:\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(data_list[0])\n    else:\n        return 0"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    # Recursive case: append the first element of the list and recursively call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Flatten a list by concatenating all its elements.\n        '''\n        return [item for sublist in lst for item in sublist]\n\n    def sum_flattened(lst):\n        '''\n        Sum all the flattened elements of a list.\n        '''\n        total = 0\n        for item in flatten(lst):\n            total += item\n        return total\n\n    return sum_flattened(data_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as an input and returns the count of positive numbers present in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers present in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of integers as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and counts the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a list of the first n Bell numbers\n    bell_numbers = [1] * n\n    # Initialize a variable to store the number of ways to partition the set\n    ways = 1\n    \n    # Calculate the number of ways to partition the set\n    for i in range(n):\n        # Calculate the number of ways to partition the set up to the i-th Bell number\n        ways *= bell_numbers[i]\n        # Calculate the number of ways to partition the set up to the (i+1)-th Bell number\n        ways //= (i+1)\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of partitions to find.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    # initialize the variables for the Bell numbers and the number of ways to partition\n    bell_numbers = [0] * (n + 1)\n    ways_to_partition = 0\n\n    # loop through the Bell numbers and count the ways to partition\n    for i in range(2, n + 1):\n        bell_numbers[i] = 1\n        for j in range(1, i):\n            if j <= bell_numbers[j]:\n                bell_numbers[i] += bell_numbers[j]\n\n    # loop through the Bell numbers and find the number of ways to partition\n    for i in range(n, 0, -1):\n        ways_to_partition += bell_numbers[i]\n\n    return ways_to_partition\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Define a recursive function to calculate the number of ways to partition the set of Bell numbers.\n    def partition_ways(n):\n        # Base case: if n is 1, there is only one way to partition the set of Bell numbers.\n        if n == 1:\n            return 1\n        # Recursive case: find the number of ways to partition the set of Bell numbers up to a certain index.\n        else:\n            return (2 * partition_ways(n - 1)) + (2 * partition_ways(n - 2)) + 1\n    \n    # Call the recursive function to calculate the number of ways to partition the set of Bell numbers.\n    return partition_ways(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n*bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return n * bell_number(n-1) // (n+1)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * (n - 1) + bell_number(n - 1)\n\ndef partition(numbers):\n    if len(numbers) == 0:\n        return 1\n    elif len(numbers) == 1:\n        return 2\n    else:\n        count = 0\n        for i in range(1, len(numbers)):\n            if numbers[i] < numbers[0]:\n                count += partition(numbers[:i] + numbers[i+1:])\n        return count\n\ndef partition_bell_numbers(n):\n    bell_numbers = [bell_number(i) for i in range(n+1)]\n    return partition(bell_numbers)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        result = 1\n        for i in range(3, n+1):\n            result *= i\n        return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Initialize the DP table\n    dp = [0] * (n+1)\n    \n    # Base case: dp[0] = 1\n    dp[0] = 1\n    \n    # Fill in the DP table\n    for i in range(1, n+1):\n        dp[i] = 0\n        for j in range(i):\n            if i % j == 0:\n                dp[i] += dp[j]\n    \n    # Return the DP table\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the result list and variables\n    result = [0] * (n+1)\n    result[0] = 1\n    result[1] = 1\n    result[2] = 1\n    \n    # Iterate over all the numbers from 3 to n\n    for i in range(3, n+1):\n        # Iterate over all the previous values\n        for j in range(i):\n            # If the previous value is even and the current value is odd, add 1 to the result list\n            if result[j] % 2 == 0 and result[i] % 2 == 1:\n                result[i] += 1\n                break\n    \n    # Return the final result\n    return result[-1]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # check if all elements in the array are the same\n    if A[0] == A[-1]:\n        return True\n    \n    # check if array is monotonic in the sense that increasing values are followed by decreasing values\n    for i in range(1, len(A)):\n        if A[i] >= A[i-1]:\n            return False\n    \n    # if all elements are decreasing, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) < 2:\n        return True\n\n    # check if the array is a single element\n    if len(A) == 2:\n        return A[0] <= A[1]\n\n    # initialize variables to store the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n\n    # iterate over the array starting from the second element\n    for i in range(1, len(A)-1):\n        # check if the current element is greater than the previous element\n        if A[i] > A[i-1]:\n            # if it's not, then the array is not monotonic\n            return False\n        # check if the current element is less than the next element\n        elif A[i] < A[i+1]:\n            # if it's not, then the array is not monotonic\n            return False\n\n    # if the loop completes without returning False, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n        elif A[i] < A[i + 1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    \n    # Check if the first and last elements of the array are same\n    if A[0] == A[-1]:\n        return False\n    \n    # Check if the array is monotonic by comparing adjacent elements\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    \n    # If the loop completes without returning False, it means the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    \n    if A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    else: \n        if A[0] <= A[1]: \n            for i in range(1, len(A)-1): \n                if A[i] <= A[i-1] or A[i] >= A[i+1]: \n                    return False\n            return True\n        else:\n            for i in range(1, len(A)-1): \n                if A[i] >= A[i-1] or A[i] <= A[i+1]: \n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1] or A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1] or A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    elif A[0] <= A[1] and A[1] <= A[2]:\n        return is_Monotonic(A[1:])\n    elif A[0] >= A[1] and A[1] >= A[2]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    n = len(A) \n    \n    # check if the array is monotonic in increasing order\n    for i in range(1, n): \n        if A[i] < A[i-1]: \n            return False\n    \n    # check if the array is monotonic in decreasing order\n    for i in range(n-2, -1, -1): \n        if A[i] > A[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if s is a sublist of l\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while j < len(s):\n        if s[j] == l[i]:\n            i += 1\n        j += 1\n    return i == len(s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the length of the sublist is greater than the length of the list\n    if len(s) > len(l):\n        return False\n    \n    # Loop through the list and check if each element is present in the sublist\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    l (list): the main list to search in\n    s (list): the sublist to search for\n\n    Returns:\n    bool: True if the sublist is found in the list, False otherwise\n    \"\"\"\n    for sub_elem in s:\n        if sub_elem not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n\n    for elem in l:\n        if elem == s[0]:\n            if s == l[l.index(elem):]:\n                return True\n            elif is_sublist(l[l.index(elem)+1:], s[1:]):\n                return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s in l:\n        return True\n    else:\n        for i in l:\n            if is_sublist(i, s):\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)):\n        if s == l[i:i+len(s)]:\n            return True\n\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n        \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Check if the given input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return False\n    \n    # Check if all the tuples in the list have the same length\n    for i, t in enumerate(Input):\n        if len(t)!= len(Input[0]):\n            return False\n    \n    # If all the checks passed, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(Input)):\n        # check if the length of the current tuple is equal to the length of the first tuple\n        if len(Input[i])!= len(Input[0]):\n            # if not, return False\n            return False\n    # if all tuples have equal lengths, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == len(Input[0]):\n            count += 1\n        else:\n            return False\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list or not\n    if isinstance(Input, list) == False:\n        print(\"Error: Input should be a list\")\n        return\n\n    # Check if all the tuples have equal length or not\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    for tup in Input:\n        if len(set(tup))!= len(tup):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Set the maximum number of passes and the minimum gap\n    max_passes = 1000\n    min_gap = 1\n\n    # Iterate until the gap is less than the minimum gap\n    while min_gap > 1:\n\n        # Set the gap to the average of the current gap and the minimum gap\n        gap = (min_gap + max_gap) // 2\n\n        # Iterate over the list\n        for i in range(len(nums) - gap):\n\n            # If the element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n        # Update the max_gap and min_gap values\n        max_gap = gap\n        min_gap = gap // 2\n\n        # Check if the max_passes has been reached\n        if max_passes == 0:\n            break\n        max_passes -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    \n    # Initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        if not swapped:\n            break\n        \n        gap = int(gap/1.3)\n        \n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a simple sorting algorithm that has a time complexity of O(n^2).\n    '''\n\n    # Initialize variables for the algorithm\n    n = len(nums)\n    min_val = nums[0]\n    max_val = nums[n-1]\n    range_size = max_val - min_val + 1\n\n    # Perform the algorithm\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n\n    # Print the sorted array\n    print(\"Sorted array is:\", nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        gap = (gap * 10) // 13\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define the range of iterations and the gap\n    range_size = len(nums)\n    gap = range_size // 2\n\n    # while the gap is greater than 0\n    while gap > 0:\n        # for each iteration of the gap\n        for i in range(gap):\n            # if the element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # swap them\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n        # shrink the gap\n        gap = (gap + range_size // gap) // 2\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function sorts a list of elements using the comb sort algorithm.\n\n    :param nums: A list of integers to be sorted.\n    :return: The sorted list of integers.\n    \"\"\"\n\n    n = len(nums)\n\n    while True:\n        sorted_flag = True\n\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                sorted_flag = False\n\n        if sorted_flag:\n            break\n\n        n -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Define the function variables\n    gap = len(nums)\n    swapped = True\n    i = 0\n\n    # Loop until the list is sorted\n    while swapped:\n        # Set the swapped flag to False\n        swapped = False\n\n        # Loop through the list\n        for j in range(i, gap):\n            # Check if the current element is greater than the next element\n            if nums[j] > nums[j + 1]:\n                # Swap the elements\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                # Set the swapped flag to True\n                swapped = True\n\n        # Decrease the gap\n        gap = int(gap / 1.3)\n\n        # Check if the gap is too small\n        if gap < 1:\n            gap = 1\n\n        # Reset the i index\n        i = 0\n\n        # Loop through the list again\n        for j in range(i, len(nums) - gap):\n            # Check if the current element is greater than the next element\n            if nums[j] > nums[j + gap]:\n                # Swap the elements\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                # Set the swapped flag to True\n                swapped = True\n\n        # Increase the i index\n        i += gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    max_iter = 1000\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n\n        \n        for i in range(max_iter):\n            if gap == 1:\n                break\n            \n            swap_indices = []\n            \n            for j in range(n - gap):\n                if nums[j] > nums[j + gap]:\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                    swap_indices.append(j)\n                    swapped = True\n            \n            if not swapped:\n                break\n            \n            gap = len(swap_indices)\n        \n        n = max_iter - gap\n        \n        if n == 0:\n            break\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb_sort algorithm.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    This algorithm works by repeatedly swapping adjacent elements if they are in the wrong order,\n    until the list is sorted.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = 1\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap = int(gap / 1.3)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the square of the number\n    square = n*n\n    # check if the square is an integer\n    if square.is_integer():\n        # calculate the difference of the squares\n        diff = n*n - square\n        # check if the difference is an integer\n        if diff.is_integer():\n            print(\"Yes, the number can be represented as the difference of two squares.\")\n        else:\n            print(\"No, the number cannot be represented as the difference of two squares.\")\n    else:\n        print(\"No, the number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_square(num):\n    return num >= 0 and int(num ** 0.5) ** 2 == num\n\ndef dif_Square(n):\n    if is_square(n):\n        num1 = int(n ** 0.5)\n        num2 = n - num1 ** 2\n        if is_square(num1) and is_square(num2) and num2 > 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is a positive integer\n    if n <= 0:\n        return False\n\n    # Check for two adjacent squares\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            if (n//i)**2 == n:\n                return True\n            if (n//i)**2 == n+i:\n                return True\n\n    # If no two adjacent squares, check for one non-adjacent square\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            if (n//i)**2!= n:\n                return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    # check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return \"Invalid input\"\n    \n    # calculate the square of n\n    square = n**2\n    \n    # calculate the difference of squares\n    diff = square - (2*square)\n    \n    # check if the difference is a square\n    if diff**2 == square:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The given number to be checked.\n\n    Returns:\n    bool: True if the given number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n\n    # Check if the number is divisible by 4\n    if n % 4!= 0:\n        return False\n\n    # Check if the number has a factor of 4 in its decimal representation\n    decimal_representation = str(n)\n    if any(int(decimal_representation[i:i+2]) % 4 == 0 for i in range(0, len(decimal_representation), 2)):\n        return False\n\n    # Check if the number can be written as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(1, int(n**0.5) + 1):\n            if i + j == n:\n                return True\n            if i**2 + j**2 == n:\n                return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    a, b = 0, n\n    while b > 0:\n        a += b\n        b //= 2\n    while a * a > n:\n        a //= 2\n    return a"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2+1):\n        if n%i == 0 and n//i == i**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (i ** 2) + (n ** 2) == n ** 4:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Define helper function to check if a number can be expressed as a sum of two squares\n    def is_sum_of_two_squares(num):\n        for i in range(int(num ** 0.5) + 1):\n            if num - i ** 2 == i ** 2:\n                return True\n        return False\n\n    # Check if n can be expressed as a difference of two squares\n    if is_sum_of_two_squares(n):\n        return \"Yes, it can be represented as the difference of two squares.\"\n    else:\n        return \"No, it cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Calculate the square of the difference between n and 1\n    difference = (n - 1) ** 2\n\n    # Check whether the square of the difference is equal to n\n    if difference ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check if it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    seen = set()\n    for i in range(n):\n        # Check if this color appears in the current pattern\n        if colors[i] in patterns[i]:\n            # If it does, we add it to the set of seen colors\n            seen.add(colors[i])\n            # If we have seen all the colors in the current pattern,\n            # then we can start checking the next pattern\n            if len(seen) == len(patterns[i]):\n                return True\n    # If we get here, we haven't seen all the colors in all the patterns\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    # Define a function to check whether two lists are equal\n    def lists_are_equal(list1, list2):\n        return sorted(list1) == sorted(list2)\n\n    # Check whether the colors and patterns lists are the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check whether the colors and patterns lists have the same elements\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    # Check whether all the colors are different\n    for color in colors:\n        if color in colors[1:]:\n            return False\n\n    # Check whether the patterns are in the same order as the colors\n    for i in range(len(patterns) - 1):\n        if patterns[i] > patterns[i+1]:\n            return False\n\n    # Check whether the patterns are valid\n    for pattern in patterns:\n        if pattern not in [1, 2, 3]:\n            return False\n\n    # Check whether the patterns are in the same order as the colors\n    for i in range(len(patterns) - 1):\n        if patterns[i] > patterns[i+1]:\n            return False\n\n    # If all the checks pass, it means that the patterns are valid and follow the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the number of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize the index and count of the colors in each pattern\n    pattern_indices = {}\n    pattern_counts = {}\n\n    # Iterate over the patterns and calculate the indices and counts of the colors in each pattern\n    for pattern in patterns:\n        pattern_indices[pattern[0]] = 0\n        pattern_counts[pattern[0]] = 0\n        for color in pattern:\n            pattern_indices[color] += 1\n            if color in pattern_counts:\n                pattern_counts[color] += 1\n            else:\n                pattern_counts[color] = 1\n\n    # Iterate over the colors and check if the index and count of the colors are same in each pattern\n    for color in colors:\n        if color not in pattern_indices or color not in pattern_counts:\n            return False\n        if pattern_indices[color]!= pattern_counts[color]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    for i in range(len(colors)):\n        sequence.append(colors[i])\n    for pattern in patterns:\n        if pattern in sequence:\n            sequence.remove(pattern)\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to keep track of the current pattern\n    current_pattern = 0\n\n    # Iterate through the patterns array\n    for i in range(len(patterns)):\n        if patterns[i] == colors[i]:\n            # If the current pattern is the same as the next pattern, increment the counter\n            current_pattern += 1\n        else:\n            # If the current pattern is different from the next pattern, reset the counter to 0\n            current_pattern = 0\n\n        # Check if the counter has reached the length of the pattern (i.e. the whole pattern was matched)\n        if current_pattern == len(patterns[i]):\n            # If it has, return True\n            return True\n\n        # Check if the counter has reached the length of the color array (i.e. all patterns have been matched)\n        if i == len(colors)-1 and current_pattern!= len(patterns[i]):\n            # If it has, return True\n            return True\n\n    # If the loop has finished without returning True, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = [0]*10 # initialize count array with 0's\n    for color in colors:\n        count[color] += 1\n    for i in range(len(patterns)):\n        if patterns[i]!= count[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the number of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # initialize the index of the current pattern\n    index = 0\n    \n    # loop through the colors and patterns\n    for color in colors:\n        # check if the current color matches the current pattern in the patterns array\n        if color == patterns[index]:\n            # if the color matches, increment the index\n            index += 1\n            # if the index reaches the length of the patterns array, the sequence is valid and we can return True\n            if index == len(patterns):\n                return True\n        # if the color doesn't match, we need to restart the index from the beginning\n        else:\n            index = 0\n            \n    # if we make it through the loop without finding a match, the sequence is invalid and we can return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize a counter for the number of matches\n    count = 0\n\n    # Iterate through each pattern in the patterns array\n    for pattern in patterns:\n        # Initialize a counter for the number of colors in the pattern\n        colors_in_pattern = 0\n\n        # Iterate through each color in the colors array\n        for color in colors:\n            # If the color matches the current pattern, increment the counter for colors in the pattern\n            if color == pattern:\n                colors_in_pattern += 1\n                # If the counter for colors in the pattern reaches the total number of colors in the pattern, increment the count\n                if colors_in_pattern == len(pattern):\n                    count += 1\n\n    # Return True if there are at least two patterns with the same sequence of colors, False otherwise\n    return count >= 2"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    for i in range(n - 1):\n        if colors[i] == colors[i+1]:\n            continue\n        for j in range(len(patterns)):\n            if patterns[j][0] == colors[i] and patterns[j][1] == colors[i+1]:\n                break\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    pattern_count = {}\n    current_pattern = []\n    pattern_index = 0\n\n    # Loop through the colors array\n    for color in colors:\n        # Check if the current color is the same as the next in the sequence\n        if color == patterns[pattern_index]:\n            # If it is, add it to the current pattern and increment the pattern index\n            current_pattern.append(color)\n            pattern_index += 1\n\n            # If we have reached the end of the sequence, return True\n            if pattern_index == len(patterns):\n                return True\n\n        # If we have exhausted the sequence and still have not found the same pattern, return False\n        elif pattern_index == len(patterns):\n            return False\n\n        # If we have found a different pattern, check if it has already been encountered before\n        elif color in pattern_count:\n            # If it has, return False\n            if pattern_count[color] >= patterns[pattern_count[color]]:\n                return False\n\n            # If it hasn't, increment its count\n            else:\n                pattern_count[color] += 1\n\n        # If we haven't found a pattern yet, initialize its count\n        else:\n            pattern_count[color] = 1\n            current_pattern.append(color)\n            pattern_index += 1\n\n    # If we've gone through the entire sequence without finding the same pattern, return False\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes in a list of tuples and a number K and returns a list of all tuples that have all elements divisible by K from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K and returns a list of all tuples in the input list of tuples that have all elements divisible by K.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    found_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(elem % K == 0 for elem in test_list[i]) and all(elem % K == 0 for elem in test_list[j]):\n                found_tuples.append(test_list[i] + test_list[j])\n    return found_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if sum(1 for num in tuple if num % K == 0) == len(tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    # Create a set of K even integers to represent the range of divisors\n    divisors = set([2*i + 1 for i in range(int(K/2) + 1)])\n    # Create an empty set to store the tuples with all elements divisible by K\n    result = set()\n    # Loop through all tuples in the test list\n    for t in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in t):\n            # Check if all elements are divisible by 2*K\n            if all(x % 2*K == 0 for x in t):\n                # Add the tuple to the result set\n                result.add(t)\n    # Return the result set\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if test_list[i][0] % K == 0 and test_list[j][0] % K == 0 and test_list[k][0] % K == 0:\n                    result.append(test_list[i][1:3])\n                    result.append(test_list[j][1:3])\n                    result.append(test_list[k][1:3])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            print(tup)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, and False otherwise.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function takes a string s as input and returns True if the length of the word is odd, else False.\n    '''\n    words = s.split()  # split the string by whitespace\n    for word in words:\n        if len(word) % 2!= 0:  # check if length is odd\n            return True\n    return False  # if all words have even length, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Initialize a variable to store the length of the word\n    word_length = 0\n    \n    # Loop through each character in the string\n    for char in s:\n        # If the character is a space, reset the word_length to 0\n        if char =='':\n            word_length = 0\n        # If the character is a letter, increment the word_length\n        elif char.isalpha():\n            word_length += 1\n    \n    # Check whether the word_length is odd or even\n    if word_length % 2 == 1:\n        print(\"The word has an odd length.\")\n    else:\n        print(\"The word has an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"has odd length\")\n        else:\n            print(word, \"has even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the sentence into words\n    for word in words:  # iterate over the words in the sentence\n        if len(word) % 2 == 0:  # check if the length of the word is even\n            return False  # if it is even, return False\n    return True  # if no words are even, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    This function checks whether the length of the word is odd or not.\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n    # Initialize a variable to store the length of the longest word\n    longest_len = 0\n    # Loop through each word and check its length\n    for word in words:\n        len_word = len(word)\n        # If the length of the word is greater than the current longest length, update the variable\n        if len_word > longest_len:\n            longest_len = len_word\n    # Check if the length of the longest word is odd or not\n    if longest_len % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return \"The length of word is odd\"\n    return \"The length of word is even\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for i in word:\n        if len(i) % 2 == 0:\n            print(f\"{i} is an even length word.\")\n        else:\n            print(f\"{i} is an odd length word.\")\n    return word"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = (n - 1) * (n - 2) * (n - 3) * 6\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # initialize a variable for the number of cubes\n    num_cubes = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the cube of the current number\n        cube = i**3\n        \n        # if the cube is greater than or equal to n, increment num_cubes\n        if cube >= n:\n            num_cubes += 1\n    \n    # return the value of num_cubes\n    return num_cubes"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result += 2*i\n    return result\n\nn = 10\nprint(tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 4\n    c = 6\n    d = 10\n    for i in range(1, n+1):\n        tetrahedral = a*b*c*d\n        if i == n:\n            print(tetrahedral)\n        a += 1\n        b += 5\n        c += 6\n        d += 4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 8\n    else:\n        return 4 * (n - 1) + 8"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_count = 0\n    for i in range(1, n+1):\n        tetrahedral_count += i*i*i*i\n    return tetrahedral_count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * (n**3) - 6 * (n**2) + n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n\n    The nth tetrahedral number is defined as the sum of the (n-1)th Catalan number and the 2nd Catalan number.\n    \"\"\"\n    # Define the Catalan numbers as a list\n    catalan_numbers = [0, 1]\n\n    # Define the function to find the nth Catalan number\n    def catalan_number(n):\n        \"\"\"\n        Helper function to find the nth Catalan number.\n        \"\"\"\n        result = 1\n        for i in range(1, n+1):\n            result *= (4*i - 1) // (2*i - 1)\n        return result\n\n    # Calculate the sum of the nth Catalan number and the 2nd Catalan number\n    nth_tetrahedral = catalan_numbers[0] + catalan_numbers[1]\n\n    # Add the sum of the nth Catalan number and the 2nd Catalan number to n to get the nth tetrahedral number\n    for i in range(2, n+1):\n        nth_tetrahedral += catalan_numbers[i]\n\n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    # recursive case\n    else:\n        return 4 * n + tetrahedral_number(n-1)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4 / 3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize the character variable to an empty string\n    char = ''\n\n    # Loop through each character of the string\n    for i in range(len(strr)):\n        # Convert the character to its ASCII value\n        ascii_val = ord(strr[i])\n        # Add the ASCII value to the character variable modulo 26\n        char += chr((ascii_val + 1) % 26)\n\n    # Return the character as a string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    char = 0\n    for i in strr:\n        char += ord(i)\n\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0  \n    for char in strr:  \n        ascii_val += ord(char)  \n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_val = 0\n    for i in range(len(strr)):\n        ascii_val += ord(strr[i])\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0  \n    for char in strr:  \n        result += ord(char)  \n    return chr((result % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert string to list of characters\n    char_list = list(strr)\n    # Initialize a variable to store the final character\n    final_char = \"\"\n    # Loop through each character in the list\n    for char in char_list:\n        # Convert each character to its ASCII value and add to the final character\n        final_char += chr(ord(char) % 26 + ord('a'))\n    # Return the final character\n    return final_char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_list = [1, 1]\n        for i in range(3, n+1):\n            if sequence_list[i-1] == sequence_list[i-3]:\n                sequence_list.append(1)\n            else:\n                sequence_list.append(0)\n        return sequence_list[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 0, 0, 0, 0, 1, 1]\n    if n == 1:\n        return sequence[0]\n    elif n > 1:\n        for i in range(2, n + 1):\n            sequence.append(sequence[i - 1] ^ sequence[i - 2])\n        return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    seq = 1\n    for i in range(n): \n        seq += seq\n    return seq"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        else:\n            sequence.append(2*sequence[i-1])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    sequence = []\n    for i in range(n):\n        sequence.append(2**i)\n\n    return sequence[n-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 259695496911122455, 420196140727489463, 6798916376386"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n):\n        sequence.append(4 * (len(sequence) - 1) + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(n-1):\n        seq.append(seq[i]*2)\n    return seq[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius as input and returns the surface area of a sphere with that radius.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere based on its radius.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Use the formula for the surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Calculate the surface area of a sphere using the formula:\n    \n    surface area = 4 * pi * r^2\n    \n    \"\"\"\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_num = ((n * (3 * n - 1)) // 2) + 1\n    return centered_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # find the number of rows and columns in the hexagonal grid\n    rows = n // 2\n    cols = n // 2\n\n    # initialize the centered hexagonal number to 1\n    hexagonal_num = 1\n\n    # loop through the rows and columns\n    for row in range(rows):\n        for col in range(cols):\n            # calculate the current number using row and column indices\n            current_num = (row + 1) * (2 * col + 1) + (2 * row + 1) * col\n\n            # if the current number is even, square it and add it to the total\n            if current_num % 2 == 0:\n                hexagonal_num += current_num ** 2\n\n            # otherwise, subtract the square of the current number from the total\n            else:\n                hexagonal_num -= current_num ** 2\n\n    # return the centered hexagonal number\n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Check if the input is an integer\n    if type(n)!= int:\n        return \"Input should be an integer.\"\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    \n    # Check if n is odd\n    if n % 2 == 0:\n        return \"Input should be an odd number.\"\n    \n    # Initialize variables for finding centered hexagonal number\n    a = 1\n    b = 1\n    count = 1\n    \n    # Find centered hexagonal number\n    while count < n:\n        a += 2\n        b += 1\n        count += 2\n    \n    # Calculate centered hexagonal number\n    centered_hex = a + b\n    \n    # Return centered hexagonal number\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 24\n    d = 32\n    e = 40\n    \n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            print(i, end=' ')\n        elif i % 3 == 0:\n            print(a, end=' ')\n            a += 4\n        elif i % 3 == 1:\n            print(b, end=' ')\n            b += 2\n        elif i % 3 == 2:\n            print(c, end=' ')\n            c -= 2\n            d -= 2\n        else:\n            print(\"Invalid input\")\n    return\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # The first centered hexagonal number is 0.\n    if n == 0:\n        return 0\n    \n    # Calculate the number of rows and columns needed to cover the area.\n    num_rows = (n - 1) // 2\n    num_cols = (2 * n - 1) // 3\n    \n    # Calculate the number of squares in each row and column.\n    num_squares_row = 2 * num_cols - 1\n    num_squares_col = 2 * num_rows - 1\n    \n    # The centered hexagonal number is the sum of the squares of the row and column numbers.\n    return (num_squares_row + num_squares_col) % 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 6\n        else:\n            return centered_hexagonal_number_helper(n-1) + centered_hexagonal_number_helper(n-2) + centered_hexagonal_number_helper(n-3)\n    \n    return centered_hexagonal_number_helper(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The centered hexagonal number for n is\", centered_hexagonal_number(n))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Centered hexagonal numbers are also centered square numbers\n    # We can find the nth centered square number by finding the nth centered hexagonal number and adding 2/3\n    centered_hex_num = centered_hexagonal_number(n) + 2/3\n    # Convert the centered hexagonal number to the corresponding centered square number by taking the square root and multiplying by 2\n    centered_square_num = centered_hex_num * centered_hex_num\n    return centered_square_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n\n    The centered hexagonal number is defined as:\n\n    hex(n) = 2 * sqrt(3) * (-1)^(n-1) * (-1)^(2n-1) * ((-1)^(n+2) - (-1)^(n+1))\n\n    where sqrt(3) = 1.7320508075688772.\n    '''\n\n    import math\n\n    sqrt3 = math.sqrt(3)\n\n    centered_num = 2 * sqrt3 * (-1)**(n-1) * (-1)**(2*n-1) * ((-1)**(n+2) - (-1)**(n+1))\n\n    return centered_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    def centered_hexagonal_helper(num, k):\n        if num == 0:\n            return 0\n        elif num % 2 == 0:\n            if num < 10:\n                return k * num\n            else:\n                return (k * (num // 2) + k) * (num // 2)\n        else:\n            if num < 10:\n                return k * (num * 3) + k\n            else:\n                return (k * (num // 2) + k) * (num // 2)\n\n    num = 1\n    for i in range(n):\n        num += centered_hexagonal_helper(num, i + 1)\n    return num"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.defaultdict(int)\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n\n    Returns:\n        dict: A merged dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged = {}\n    for key in dict1:\n        merged[key] = dict1[key]\n    for key in dict2:\n        if key not in merged:\n            merged[key] = dict2[key]\n    for key in dict3:\n        if key not in merged:\n            merged[key] = dict3[key]\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge dict1 and dict2 into a new dictionary\n    merged_dict = {**dict1, **dict2}\n    \n    # Update the merged dictionary with the values of dict3\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as an argument and returns the frequency of all the elements in the list.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary containing the frequency of all the elements in the list.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int) # Using defaultdict from collections module\n    for item in list1:\n        freq_dict[item] += 1 # Incrementing the frequency count of the element\n    return freq_dict # Returning the dictionary of frequency count of all the elements in the list\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for num in list1:\n        freq_dict[num] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n\n    for item in list1:\n        freq[item] += 1\n\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    for i in range(1, N+1):\n        if abs(i - N) < diff:\n            diff = abs(i - N)\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(1, N+1):\n        if i < 10:\n            print(f\"{i:2d}\", end=\" \")\n        else:\n            print(f\"{i:3d}\", end=\" \")\n    print()\n\n    for i in range(10, N+1):\n        if i < 100:\n            print(f\"{i:3d}\", end=\" \")\n        else:\n            print(f\"{i:4d}\", end=\" \")\n    print()"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N - 1\n    for i in range(N, 0, -1):\n        if (N - i) % 2 == 0:\n            smallest = i\n            break\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for num in range(N, 0, -1):\n        if abs(num - N) < abs(min_num - N):\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    closest = None\n    \n    for i in range(1, N+1):\n        diff = abs(N-i)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N + 1\n    for num in range(N-1, -1, -1):\n        if num < min_num:\n            min_num = num\n        if num + 1 == min_num:\n            break\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if i - smallest >= 2:\n            return smallest\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    closest_num = None\n    \n    for num in range(1, N):\n        if num < min_num:\n            min_num = num\n            closest_num = num\n        elif num < closest_num:\n            closest_num = num\n            \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    # Initialize variables\n    min_diff = float('inf')\n    closest_num = -1\n\n    # Loop through all numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(i-N)\n\n        # Check if the current difference is smaller than the minimum difference\n        if diff < min_diff:\n            # Update the minimum difference and the closest number\n            min_diff = diff\n            closest_num = i\n\n    # Return the closest number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = 0\n    for i in range(1, N+1):\n        if i < N:\n            smallest = i\n        else:\n            return smallest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # create an empty dictionary to store the lengths of each word\n    lengths = {}\n\n    # loop through the list of words and update the lengths dictionary\n    for word in list1:\n        lengths[word] = len(word)\n\n    # find the longest word in the list and return its length\n    return max(lengths, key=lengths.get)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # initialize a variable to store the length of the longest word\n    longest_word_length = 0\n\n    # loop through each word in the list\n    for word in list1:\n\n        # find the length of the current word\n        current_word_length = len(word)\n\n        # update the variable if the length is greater than the current longest length\n        if current_word_length > longest_word_length:\n            longest_word_length = current_word_length\n\n    # return the length of the longest word\n    return longest_word_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Split the given string into a list of words\n    words = str1.split()\n\n    # Convert the sub_str to lowercase to make the comparison case-insensitive\n    sub_str = sub_str.lower()\n\n    # Iterate over the list of words and check if any of them contain the sub_str\n    for word in words:\n        if word.lower() in sub_str:\n            return True\n\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the string {str1}.\")\n    else:\n        print(f\"{sub_str} is not present in the string {str1}.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function checks if a given string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1) == type(sub_str) == list:\n        for item in str1:\n            if sub_str in item:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments:\n        str1: A string that we want to check for substrings in.\n        sub_str: A string that we want to check if it is present in str1.\n    \n    This function returns a boolean value indicating whether str1 contains sub_str as a substring or not.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert sub_str to lowercase\n    sub_str = sub_str.lower()\n\n    # Loop through the list of strings\n    for string in str1:\n        # Convert string to lowercase\n        string = string.lower()\n\n        # Check if sub_str is present in string\n        if sub_str in string:\n            # If present, print the index of string where sub_str is found\n            print(string.index(sub_str))\n            # Break the loop as only one string should match\n            break\n"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        return str1 in sub_str\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1 or n > 1000:\n        raise ValueError(\"Input must be between 1 and 1000\")\n    if n % 2 == 0:\n        raise ValueError(\"Input must be odd\")\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n):\n        if i%2 == 0:\n            n -= 1\n            if n == 0:\n                return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n%2 == 0:\n        return False\n    else:\n        for i in range(1, int(n/2) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is divisible by 15\n    if n % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # Check if the given number is divisible by 4\n    elif n % 4 == 0:\n        return True\n\n    # Check if the given number is divisible by 6\n    elif n % 6 == 0:\n        return True\n\n    # Check if the given number is divisible by 8\n    elif n % 8 == 0:\n        return True\n\n    # Check if the given number is divisible by 9\n    elif n % 9 == 0:\n        return True\n\n    # Check if the given number is divisible by 12\n    elif n % 12 == 0:\n        return True\n\n    # Check if the given number is divisible by 15\n    elif n % 15 == 0:\n        return True\n\n    # Check if the given number is divisible by 20\n    elif n % 20 == 0:\n        return True\n\n    # If none of the above conditions are satisfied, then it is not undulating\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # if the number is even\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a * power(a, b - 1)\n    else:\n        return 1 / power(a, -b)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples by second value\n    test_list.sort(key=itemgetter(1))\n    # return the index of the first tuple with the smallest second value\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # Create a new list with only the second value\n    second_values = [x[1] for x in test_list]\n\n    # Sort the second_values list in ascending order\n    sorted_values = sorted(second_values)\n\n    # Create a new list with the index of each tuple and the second value of each tuple\n    index_list = [(i, sorted_values[i]) for i in range(len(sorted_values))]\n\n    # Sort the index_list in ascending order based on the second value\n    sorted_list = sorted(index_list, key=itemgetter(1))\n\n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, i)(test_list))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, 0)(test_list[i]))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Create a list of tuples with only the second value and sort it based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Iterate through the sorted list and return the index of the first tuple with the smallest second value\n    for i in range(len(sorted_list)):\n        if sorted_list[i][1] == min(sorted_list, key=itemgetter(1))[1]:\n            return i\n    # If the list is empty, return -1 to indicate that no minimum value was found\n    return -1"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_minimum(test_list):\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_length:\n                min_length = len(lst[i][j])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Initialize a variable to store the minimum length\n    min_length = None\n    \n    # Loop through the list of lists\n    for sublist in lst:\n        \n        # Find the length of the current sublist\n        length = len(sublist)\n        \n        # If the current length is smaller than the minimum length, update the minimum length\n        if min_length is None or length < min_length:\n            min_length = length\n            \n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 999999999  # initialize min_length to a high value\n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in lst:\n        lengths.append(len(sublist))\n    min_length = min(lengths)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize variables to store the length of the smallest list and its index\n    min_len = None\n    min_index = None\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # Check if the length of the sublist is smaller than the current smallest length\n        if len(lst[i]) < min_len or min_len is None:\n            # Update the current smallest length and its index\n            min_len = len(lst[i])\n            min_index = i\n\n    # Return the length of the smallest sublist\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = 1\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors += 2\n            if i!= n // i:\n                divisors += 2\n    return divisors"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2 or n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    else:\n        count = 0\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n                if i == n//i:\n                    count += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + divisor(n-1)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            freq.update(frequency_lists(item))\n        elif item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    flattened_list = [num for sublist in list1 for num in sublist]\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate through each element in the flattened list\n    for num in flattened_list:\n        # Check if the element is already in the dictionary\n        if num in freq_dict:\n            # Increment the frequency count by 1\n            freq_dict[num] += 1\n        else:\n            # Add the element to the dictionary with a frequency count of 1\n            freq_dict[num] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n    \n    # iterate through each element in the flattened list\n    for item in list1:\n        # check if the item is already in the dictionary\n        if item in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[item] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element\n    frequency = {}\n    # iterate through the flattened list of lists\n    for item in list1:\n        # check if the item is already in the dictionary\n        if item in frequency:\n            # increment the frequency of the item by 1\n            frequency[item] += 1\n        else:\n            # add the item to the dictionary with a frequency of 1\n            frequency[item] = 1\n    # return the dictionary of frequencies\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list and add it to the dictionary if it's not already there\n    for elem in list1:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # count frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Base case\n    if n == 0: \n        return '0' \n    # Recursive case\n    else: \n        # Convert the last digit of the decimal to binary\n        last_digit = n % 2 \n        # Convert the rest of the decimal number to binary\n        rest = decimal_to_binary(n // 2) \n        # Append the last digit of the binary number to the rest of the binary number\n        return str(last_digit) + rest "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary = decimal_to_binary(n//2)\n        if n%2 == 0:\n            return binary + \"0\"\n        else:\n            return binary + \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    binary_string = ''\n    while n > 0:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n    # loop through each bit of the decimal number\n    while n > 0:\n        # get the remainder when n is divided by 2\n        remainder = n % 2\n        # convert the remainder to a string and add it to the binary string\n        binary = str(remainder) + binary\n        # divide n by 2 to remove the rightmost bit\n        n = n // 2\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary using bitwise operations\n    binary_number = bin(n)[2:]\n\n    # Add leading zeros to binary number if necessary\n    if len(binary_number) % 4!= 0:\n        binary_number = '0' * (4 - len(binary_number) % 4) + binary_number\n\n    # Reverse the binary number and return it as a string\n    return binary_number[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return ''\n    elif n % 2 == 0:\n        binary = decimal_to_binary(n // 2)\n        return binary + '0'\n    else:\n        binary = decimal_to_binary(n // 2)\n        return binary + '1'"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    for i in range(10**n-1, 10**(n-1)-1, -1):\n        if str(i)[::-1] == str(i):\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    num_list = list(num_str)\n\n    for i in range(len(num_list)):\n        if num_list[i] < num_list[-i - 1]:\n            for j in range(i + 1, len(num_list)):\n                if num_list[j] < num_list[-j - 1]:\n                    num_list[i], num_list[j] = num_list[j], num_list[i]\n                    break\n\n    next_palindrome = int(''.join(num_list))\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    digits = [int(d) for d in str(num)]\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] >= 9:\n            digits[i] = 0\n            continue\n        digits[i] += 1\n        break\n    next_num = int(''.join(str(d) for d in digits))\n    return next_num\n\ndef main():\n    \"\"\"\n    Main function to test the next_smallest_palindrome function.\n    \"\"\"\n    num = int(sys.argv[1])\n    result = next_smallest_palindrome(num)\n    print(result)\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Initialize the smallest palindrome and its difference\n    smallest_palindrome = num * 10\n    diff = 10 - num\n\n    # Iterate until we find the next smallest palindrome\n    while diff >= 1:\n        smallest_palindrome += diff\n        diff -= 1\n\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    smallest = 10**9 + 1\n    while True:\n        if is_palindrome(smallest):\n            if int(str(smallest)) < num:\n                break\n        smallest += 1\n    return smallest - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    n = len(num_str)\n    next_num = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            palindrome = int(num_str[i:j])\n            if palindrome > next_num and palindrome % 2 == 0:\n                next_num = palindrome\n                break\n    return next_num\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n    return primes\n\ndef next_smallest_palindrome(num):\n    primes = sieve_of_eratosthenes(10**6)\n    for i in range(num, 1, -1):\n        for j in range(1, len(primes)):\n            if primes[j] and (i - j) < 0:\n                return i - j\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Find the maximum index of the digits of the input integer\n    max_index = len(num_str) - 1\n\n    # Iterate over the digits of the input integer from right to left\n    for i in range(max_index, -1, -1):\n\n        # Find the next smallest palindrome\n        if num_str[i] == '0' or (num_str[i] - 1) % 10 == num_str[i]:\n\n            # If the next digit is zero, skip to the next digit\n            if num_str[i] == '0':\n                continue\n\n            # Find the smallest palindrome starting from the next digit\n            next_palindrome = ''\n            for j in range(i + 1, max_index + 1):\n                next_palindrome += str(j)\n                if next_palindrome >= num_str[i]:\n                    break\n\n            # Convert the next palindrome to an integer\n            next_palindrome_int = int(next_palindrome)\n\n            # If the next palindrome is smaller than the current input integer, return it\n            if next_palindrome_int < num:\n                return next_palindrome_int\n\n    # If no palindrome is found, return the input integer\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    palindrome = True\n    for i in range(len(num_str)):\n        if num_str[i]!= num_str[-i-1]:\n            palindrome = False\n            break\n    if palindrome:\n        return 10**(len(num_str)-1)\n    else:\n        return int(str(num+1))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    if num < 0:\n        num = -num\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def get_next_smallest_palindrome(n):\n        if n == 0:\n            return 1\n        while True:\n            n -= 1\n            if is_palindrome(n):\n                return n\n\n    return get_next_smallest_palindrome(num)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid == k:\n                return arr[mid - 1]\n            elif mid < k:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes in an array and a number k and returns the kth element of the array,\n    assuming 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    if k > len(arr) or k < 1:\n        return None\n    else:\n        # Find the index of the pivot element\n        pivot_index = (k - 1) // 2\n        # Find the pivot element\n        pivot = arr[pivot_index]\n        # Partition the array around the pivot\n        left = [x for x in arr[:pivot_index] if x < pivot]\n        middle = [x for x in arr[pivot_index] if x == pivot]\n        right = [x for x in arr[pivot_index+1:] if x > pivot]\n        # Combine the left and middle partitions into the result\n        result = left + middle + right\n        # If the pivot is in the middle, return it\n        if k == len(arr) // 2:\n            return pivot\n        elif k < len(arr) // 2:\n            # If k is in the left partition, recursively search the left partition\n            return kth_element(left, k)\n        else:\n            # If k is in the right partition, recursively search the right partition\n            return kth_element(right, k - len(arr) // 2)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return 'Invalid input'\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        mid = n // 2\n        if k < mid + 1:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    This function takes two arguments:\n    arr: a list of integers representing the array to search in\n    k: the index (1-based) of the element to be searched for in the array\n    \n    This function uses binary search to find the kth element in the array.\n    \n    It returns the kth element in the array if it exists, otherwise it returns None.\n    \"\"\"\n    # Convert the first element of the array to a tuple for binary search\n    first_element = (arr[0], arr[0])\n    # Calculate the middle index of the array\n    mid = len(arr) // 2\n    \n    # Recursive binary search function\n    def binary_search(low, high):\n        # Base case: if low is greater than high, then kth element is not in array\n        if low > high:\n            return None\n        \n        # Calculate the middle index of the array\n        mid = (low + high) // 2\n        \n        # If the middle element is equal to k, then return it\n        if first_element[0] == arr[mid]:\n            return mid\n        \n        # If the middle element is less than k, then search in the right half of the array\n        elif first_element[0] < arr[mid]:\n            return binary_search(mid+1, high)\n        \n        # If the middle element is greater than k, then search in the left half of the array\n        else:\n            return binary_search(low, mid-1)\n    \n    # Call the binary search function with the lower bound at 0 and the upper bound at the middle index\n    result = binary_search(0, mid)\n    \n    # Check if the result is None, which means kth element is not in the array\n    if result is None:\n        return None\n    \n    # Otherwise, return the kth element\n    else:\n        return arr[result-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0:\n        raise ValueError(\"k must be a positive integer\")\n    elif k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is greater than the length of the array\n    if k > len(arr):\n        print(\"Error: k is greater than the length of the array.\")\n        return None\n    \n    # Initialize two pointers, one starting from the first element and the other from the last element\n    left = 1\n    right = len(arr)\n    \n    # Keep track of the current index of the left pointer\n    current = left\n    \n    # Loop until the left pointer is less than or equal to the kth element\n    while left <= right:\n        # Calculate the midpoint of the current subarray\n        mid = (left + right) // 2\n        \n        # If the kth element is in the current subarray, update the index of the left pointer and exit the loop\n        if arr[mid-1] < arr[mid] and arr[mid] < arr[mid+1]:\n            current = mid\n            break\n        \n        # If the kth element is in the left half of the current subarray, update the left pointer to mid+1\n        elif arr[mid-1] < arr[mid]:\n            left = mid+1\n        \n        # If the kth element is in the right half of the current subarray, update the right pointer to mid-1\n        else:\n            right = mid-1\n    \n    # If the kth element is not found, return None\n    if current == left:\n        return None\n    \n    # Return the kth element from the array using 1-based indexing\n    return arr[current-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Error: k is greater than the size of the array.\")\n        return\n    \n    # Initialize two pointers: one at the beginning of the array and the other at the end\n    left = 0\n    right = n - 1\n    \n    # Repeat until the two pointers meet in the middle\n    while left < right:\n        # Calculate the midpoint index\n        mid = (left + right) // 2\n        \n        # If the midpoint element is equal to k-1, return it\n        if arr[mid] == k-1:\n            return arr[mid]\n        \n        # If the midpoint element is greater than k-1, move the left pointer to the right\n        elif arr[mid] > k-1:\n            right = mid - 1\n        \n        # If the midpoint element is less than k-1, move the right pointer to the left\n        else:\n            left = mid + 1\n    \n    # If the two pointers meet in the middle and the element at the midpoint index is k-1, return it\n    return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError('Invalid index')\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        elif i < len(word) - 1:\n            camel_word += word[i]\n        else:\n            camel_word += word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            result += '_'\n        result += char.lower()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), *word[1:].split('_'), word[-1].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word[0].isupper():\n        return word[0].lower() + word[1:]\n    else:\n        return word[0].lower() + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    words = word.split(\"_\")\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # split the word into individual words\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    \n    first_char = word[0]\n    rest_of_word = word[1:]\n    camel_case_word = first_char.lower() + rest_of_word.title()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), *word[1:].lower().split('_')])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().replace('_','').split())"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join([word[0].lower(), word[1:].capitalize()])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the Eulerian number a(0, 0) to 1\n    a = 1\n\n    # Loop through all the possible values of m\n    for i in range(1, n + 1):\n        # Compute the value of a(i, m) as the sum of all values of a(i-1, j) for j=1,..., m\n        a_i_m = 0\n        for j in range(1, m + 1):\n            a_i_m += a * a_i_m // (j * (j - 1))\n        # Update the value of a(i, m)\n        a = a_i_m\n\n    # Return the final value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    # define the factorial function\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    # calculate the number of primes less than n\n    def count_primes(n):\n        count = 0\n        for i in range(2, n):\n            if factorial(i - 1) % i == 0:\n                count += 1\n        return count\n\n    # calculate the number of divisors of n\n    def num_divisors(n):\n        divisors = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors += 1\n                if n // i!= i:\n                    divisors += 1\n        return divisors\n\n    # calculate the Eulerian number using the above functions\n    eulerian = factorial(n) // (factorial(m) * factorial(n - m))\n    eulerian = eulerian / factorial(n + m - 2)\n\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n    \n    def sum_of_divisors_and_square(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors) ** 2\n    \n    def sum_of_divisors_and_cube(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors) ** 3\n    \n    def sum_of_divisors_and_fourth_power(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors) ** 4\n    \n    def sum_of_divisors_and_fiveth_power(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors) ** 5\n    \n    def sum_of_divisors_and_sixth_power(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors) ** 6\n    \n    a_1 = sum_of_divisors(n) + sum_of_divisors_and_fourth_power(n) + sum_of_divisors_and_sixth_power(n)\n    a_2 = sum_of_divisors(m) + sum_of_divisors_and_fourth_power(m) + sum_of_divisors_and_sixth_power(m)\n    a_3 = sum_of_divisors(n) + sum_of_divisors(m) + sum_of_divisors_and_square(n) + sum_of_divisors_and_square(m)\n    a_4 = sum_of_divisors_and_cube(n) + sum_of_divisors_and_cube(m) + sum_of_divisors_and_square(n) + sum_of_divisors_and_square(m)\n    a_5 = sum_of_divisors_and_fiveth_power(n) + sum_of_divisors_and_fiveth_power(m) + sum_of_divisors_and_fourth_power(n) + sum_of_divisors_and_fourth_power(m)\n    a_6 = sum_of_divisors_and_sixth_power(n) + sum_of_divisors_and_sixth_power(m) + sum_of_divisors_and_fiveth_power(n) + sum_of_divisors_and_fiveth_power(m)\n    a_7 = sum_of_divisors_and_fourth_power(n) + sum_of_divisors_and_fourth_power(m) + sum_of_divisors_and_sixth_power(n) + sum_of_divisors_and_sixth_power(m)\n    a_8 = sum_of_divisors(n) + sum_of_divisors(m) + sum_of_divisors_and_fourth_power(n) + sum_of_divisors_and_fourth_power(m)\n    \n    a_9 = a_1 + a_2 + a_3 + a_4 + a_5 + a_6 + a_7 + a_8\n    \n    return a_9"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix\n    matrix = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the matrix with the values\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == j:\n                matrix[i][j] = 1\n            elif i == 1 or j == 1:\n                matrix[i][j] = 0\n            elif i == j - 1:\n                matrix[i][j] = matrix[i - 1][j]\n            else:\n                matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1]\n\n    # Print the matrix\n    for row in matrix:\n        print(row)\n\n    # Find the Eulerian number a(n, m)\n    a = matrix[n][m]\n\n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    elif n == 0 or m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for j in range(n+1)] for i in range(m+1)]\n    a[0][0] = 1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n    return a[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    \n    for i in range(1, n+1):\n        a += i * (m - i + 1)\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    elif n == 1 or m == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 1\n    a = 1\n\n    # Loop through each row and column\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            # Calculate the index of the neighboring cell in the current row\n            k = i + j - 1\n\n            # Check if the neighboring cell exists and has the same row and column\n            if 1 <= k <= n*m and a % (k // m)!= (k // m) // m:\n                a *= k // m\n\n    # Return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [1] * (n+1)\n    a[0] = 0\n    for i in range(1, n+1):\n        a[i] = a[i-1] + m\n    return a[n]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Args:\n    input_list: A list of lists containing strings.\n\n    Returns:\n    A sorted list of lists containing the sorted sublists of strings.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_true(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool and item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if type(i) is bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup += (test_list[i],)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to tuple\n    test_tup = tuple(test_list)\n    # concatenate the two tuples\n    result_tup = test_tup + test_list\n    return result_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Get the length of the test_list\n    list_length = len(test_list)\n    # Create a new tuple with the same elements as the test_tup\n    new_tup = test_tup + (test_list,)\n    # Slice the new tuple to the desired length\n    new_tup_slice = new_tup[:list_length]\n    # Return the sliced tuple\n    return new_tup_slice"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Append the lists to the tuples\n    test_tup = test_tup + test_list\n    # Convert the tuples back to lists\n    test_list = list(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Check if the given list and tuple have the same length\n    if len(test_list) == len(test_tup):\n        # Append the given list to the given tuple and return the new tuple\n        return test_tup + test_list\n    else:\n        # Raise an error if the given list and tuple have different lengths\n        raise ValueError(\"The two lists must have the same length.\")"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # initialize an empty heap\n    heap = []\n    # insert the first two numbers into the heap\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    # insert the third number into the heap\n    heapq.heappush(heap, num3)\n    # initialize an empty result list\n    result = []\n    # pop the smallest number from the heap and append it to the result\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Concatenate the lists\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while len(merged_list)!= 0:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and returns a single sorted list.\n    \"\"\"\n    # merge the two sorted lists\n    merged_list = num1 + num2\n    heapq.heapify(merged_list)\n    # merge the third sorted list\n    merged_list.extend(num3)\n    heapq.heapify(merged_list)\n    # extract the minimum element from the merged list\n    return heapq.heappop(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the two first lists into a single list\n    merged_list = num1 + num2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Merge the sorted list with the third list\n    final_list = sorted_list + num3\n    # Return the final list\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    all_numbers = num1 + num2 + num3\n    \n    # Use a heap to sort the combined list\n    heapq.heapify(all_numbers)\n    \n    # Return the sorted list as a new list\n    return [heapq.heappop(all_numbers) for _ in range(len(all_numbers))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the list in ascending order\n    sorted_list = []\n    for item in merged_list:\n        heapq.heappush(sorted_list, item)\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    for num in num1:\n        heapq.heappush(heap1, -num)\n    for num in num2:\n        heapq.heappush(heap2, -num)\n    for num in num3:\n        heapq.heappush(heap3, -num)\n    \n    result = []\n    while heap1 and heap2 and heap3:\n        if -heap1[0] > -heap2[0]:\n            if -heap1[0] > -heap3[0]:\n                heapq.heappush(result, -heap1[0])\n                heapq.heappop(heap1)\n            else:\n                heapq.heappush(result, -heap3[0])\n                heapq.heappop(heap3)\n        elif -heap2[0] > -heap1[0]:\n            if -heap2[0] > -heap3[0]:\n                heapq.heappush(result, -heap2[0])\n                heapq.heappop(heap2)\n            else:\n                heapq.heappush(result, -heap3[0])\n                heapq.heappop(heap3)\n        else:\n            if -heap3[0] > -heap1[0]:\n                heapq.heappush(result, -heap3[0])\n                heapq.heappop(heap3)\n            else:\n                heapq.heappush(result, -heap1[0])\n                heapq.heappop(heap1)\n    \n    if heap1:\n        result += [-num for num in heap1]\n    if heap2:\n        result += [-num for num in heap2]\n    if heap3:\n        result += [-num for num in heap3]\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the three lists\n    sorted_list1 = sorted(num1)\n    sorted_list2 = sorted(num2)\n    sorted_list3 = sorted(num3)\n\n    # Merge the sorted lists\n    merged_list = []\n    i, j, k = 0, 0, 0\n    while i < len(sorted_list1) and j < len(sorted_list2) and k < len(sorted_list3):\n        if sorted_list1[i] < sorted_list2[j]:\n            if sorted_list3[k] < sorted_list1[i]:\n                merged_list.append(sorted_list1[i])\n                i += 1\n            else:\n                merged_list.append(sorted_list3[k])\n                k += 1\n        elif sorted_list2[j] < sorted_list3[k]:\n            merged_list.append(sorted_list2[j])\n            j += 1\n        else:\n            merged_list.append(sorted_list3[k])\n            k += 1\n\n    # Add any remaining elements to the merged list\n    merged_list += sorted_list1[i:]\n    merged_list += sorted_list2[j:]\n    merged_list += sorted_list3[k:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Use a min heap to sort the list in ascending order\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Extract the sorted list and return it\n    sorted_list = []\n    while len(min_heap) > 0:\n        sorted_list.append(heapq.heappop(min_heap))\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 0\n\n    odd_count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        odd_count += s.count('1')\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # function to rotate a binary string by k positions\n    def rotate(s, k):\n        return s[k:] + s[:k]\n\n    # initialize variables\n    count = 0\n\n    # loop through the given number of rotations\n    for i in range(n):\n\n        # loop through the binary string and check for odd values\n        for j in range(len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n\n        # rotate the binary string to the right\n        s = rotate(s, 1)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = ''\n    for char in s:\n        binary_string += str(int(char))\n    for _ in range(n):\n        binary_string = binary_string[1:] + binary_string[0]\n    return sum(int(bit) for bit in binary_string if int(bit) % 2!= 0)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers when rotating s n times.\n    \"\"\"\n    # Convert binary string to list of digits\n    s_list = [int(d) for d in s]\n    \n    # Initialize count to 0\n    count = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Rotate list of digits by 1\n        s_list = s_list[1:] + [s_list[0]]\n        \n        # Count number of odd digits in rotated list\n        for d in s_list:\n            if d % 2!= 0:\n                count += 1\n    \n    # Return count of odd digits\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return odd_Equivalent(s + s, n-1) + int(s[-1]) - 1"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Check if the input string is a binary string\n    if not s.replace(' ', '').replace('0', '').replace('1', '').isdigit():\n        return \"Input string must be a binary string.\"\n    \n    # Convert the input string into a list of characters\n    s = list(s)\n    \n    # Initialize the number of odd values to 0\n    count = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Initialize a temporary list to store the odd values\n        temp = []\n        \n        # Loop through the input string\n        for j in range(len(s)):\n            # Add the current character to the temporary list if it's odd\n            if s[j] == '1':\n                temp.append(s[j])\n        \n        # Convert the temporary list back into a string and remove any extra spaces\n        s = ''.join(temp)\n        \n        # Check if the length of the input string is equal to the length of the temporary list\n        if len(s) == len(temp):\n            # If it is, the length of the input string has become the length of the temporary list, so we know there are no more odd values to rotate\n            break\n    \n    # Loop through the input string again to count the number of odd values\n    for j in range(len(s)):\n        # Add the current character to the count if it's odd\n        if s[j] == '1':\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n): \n        s = s[-1] + s[:-1]\n        if int(s, 2) % 2 == 1: \n            count += 1\n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    num_odd = 0\n    i = 0\n    # Convert the binary string to a list of characters\n    s_list = list(s)\n    # Loop through the list of characters\n    while i < n:\n        # If the current character is odd, increment num_odd\n        if s_list[i] == '1':\n            num_odd += 1\n        # Rotate the list of characters\n        s_list = s_list[-1:] + s_list[:-1]\n        i += 1\n    return num_odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for _ in range(n):\n        s = ''.join(sorted(s))\n    for i in range(len(s)):\n        if s[i] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables to store the count of odd numbers and the original binary string\n    odd_count = 0\n    binary_str = str(s)\n\n    # If the number of rotations is even, we need to rotate the binary string n/2 times\n    if n % 2 == 0:\n        n = n // 2\n\n    # Iterate n times\n    for i in range(n):\n        # Convert the binary string to a list of digits\n        digit_list = [int(x) for x in binary_str]\n\n        # Reverse the list of digits\n        digit_list.reverse()\n\n        # Convert the reversed list of digits to a binary string\n        binary_str = ''.join([str(digit) for digit in digit_list])\n\n        # Count the number of odd digits in the binary string\n        odd_count += sum([1 for digit in binary_str if digit % 2!= 0])\n\n    # Return the count of odd numbers\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    # Initialize a dictionary to store the count of elements in each list\n    counts = {}\n    \n    # Iterate through the nested list and count the elements\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in counts:\n                counts[element] += 1\n            else:\n                counts[element] = 1\n                \n    # Create a new list to store the common elements\n    common_elements = []\n    \n    # Iterate through the dictionary and add the common elements to the new list\n    for element, count in counts.items():\n        if count == nestedlist.__len__() and element not in common_elements:\n            common_elements.append(element)\n    \n    # Return the new list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # create an empty dictionary to store common elements\n    common_dict = {}\n\n    # loop through each element of the nested list\n    for item in nestedlist:\n        # check if the item is a list\n        if isinstance(item, list):\n            # if the item is a list, loop through each element of the sublist and add it to the dictionary\n            for subitem in item:\n                # add the subitem to the dictionary if it does not already exist\n                if subitem not in common_dict:\n                    common_dict[subitem] = True\n\n    # create a new list to store the common elements\n    common_list = []\n\n    # loop through each key in the dictionary\n    for key in common_dict:\n        # add the key to the list if it is not already in it\n        if key not in common_list:\n            common_list.append(key)\n\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # loop through the nested list and check if the element is common for each nested list\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j and nestedlist[i] in nestedlist[j]:\n                print(f\"Element {nestedlist[i]} is common in nested list {i} and {j}\")\n    # return the list of common elements\n    return nestedlist"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set to store common elements\n    common = set()\n\n    # loop through each list in the nested list\n    for lst in nestedlist:\n        # loop through each element in the list\n        for elem in lst:\n            # if the element is in the set, add it to the common set\n            if elem in common:\n                common.remove(elem)\n            else:\n                common.add(elem)\n\n    # return the common set\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # convert the nested list into a set to get unique elements\n    unique_list = set(sum(nestedlist, []))\n\n    # initialize an empty set to store common elements\n    common_set = set()\n\n    # loop through each element in the unique list\n    for element in unique_list:\n\n        # check if the element is present in all the nested lists\n        present = True\n        for nestedlist_set in nestedlist:\n            if element not in nestedlist_set:\n                present = False\n                break\n\n        # if the element is present in all the nested lists, add it to the common set\n        if present:\n            common_set.add(element)\n\n    # convert the common set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    # Loop through each nested list\n    for lst in nestedlist:\n        # Loop through each element in the current list\n        for elem in lst:\n            # If the element is not already in the set, add it\n            if elem not in common_set:\n                common_set.add(elem)\n    # Return the common elements in a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    def find_common_elements(list1, list2):\n        '''\n        This function finds the common elements in two lists.\n        '''\n        common = []\n        for i in list1:\n            if i in list2 and i not in common:\n                common.append(i)\n        return common\n\n    common_elements = []\n    for i in nestedlist:\n        common_elements += find_common_elements(i, common_elements)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of the common elements between all the sublists.\n\n    Example:\n    Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\n    Output: [4, 5, 6]\n    '''\n\n    # Iterate through each sublist and find the common elements\n    common = []\n    for sublist in nestedlist:\n        for i in range(len(sublist)):\n            if sublist[i] in common:\n                common.remove(sublist[i])\n            else:\n                common.append(sublist[i])\n\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    if text.isdigit():\n        return True\n    elif len(text) > 1 and text[0] == '-' and text[1:].isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # Initialize a variable to store the result\n    result = True\n\n    # Loop through each dictionary in the list\n    for i in range(len(list1)):\n\n        # Check if the current dictionary is empty\n        if not list1[i]:\n\n            # If the current dictionary is empty, set the result to False\n            result = False\n\n            # Break out of the loop since all dictionaries are empty\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    for dict1 in list1:\n        if len(dict1)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each number in the tuple\n    for num in nums:\n        # add the number to the result\n        result += num\n\n    # return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize a variable to store the sum of the tuple's elements\n    total = 0\n    \n    # iterate through each element in the tuple\n    for num in nums:\n        # check if the element is a positive integer\n        if num > 0:\n            # add the positive integer to the total\n            total += num\n    \n    # return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n\n    # initialize the result variable\n    result = 0\n    \n    # loop through each number in the tuple\n    for num in nums:\n        \n        # check if the number is negative\n        if num < 0:\n            # if so, raise an error message\n            raise ValueError(\"Tuple contains negative numbers.\")\n        \n        # add the positive number to the result\n        result += num\n        \n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Calculate the sum of the list\n    total = sum(nums_list)\n    # Return the sum as an integer\n    return int(total)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each row in the list\n    for row in test_list:\n        # loop through each element in the row\n        for element in row:\n            # check if the element is convertible to a float\n            try:\n                # try to convert the element to a float\n                float(element)\n            except ValueError:\n                # if it fails, print a message and continue to the next element in the row\n                print(\"Error: Unable to convert element to float.\")\n                continue\n            # if the element is convertible to a float, convert it to a float and append it to the row\n            row.append(float(element))\n    # return the modified list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            new_list.extend(list_to_float(item))\n        elif isinstance(item, (int, float, complex)):\n            new_list.append(float(item))\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                item = float(item)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n            except ValueError:\n                subitem = float(subitem)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Split the string on the space character\n    list_of_strings = string.split()\n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    # convert each word to lowercase\n    words = [word.lower() for word in words]\n    # return the list of lowercase words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    # binary search to find the index of the first occurrence of the element\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    # return the element at the index we found\n    return arr[left]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of elements\n    freq = {}\n    \n    # Iterate over the array\n    for num in arr:\n        # If the number is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the number is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n    \n    # Iterate over the dictionary to find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == arr[1]:\n        return search(arr[1:])\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n        return arr[-1]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            else:\n                unique_element = None\n                break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to keep track of elements\n    freq_dict = {}\n\n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Find the element that appears only once\n    for num, count in freq_dict.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = [0] * 1000000\n    \n    for i in range(n):\n        count[arr[i]] += 1\n        if count[arr[i]] == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return None\n    else:\n        return arr[arr.index(max(arr)) if max(arr) in arr else -1]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == n - 1 or arr[i]!= arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0] * lst[j][1]) > max_product:\n                max_product = abs(lst[i][0] * lst[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Find the maximum absolute product between any two numbers in the list\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers in the pair\n            diff = abs(list1[i][0] - list1[j][0])\n            # Update the maximum product if the current pair's product is greater than the current maximum\n            if diff * list1[i][1] * list1[j][1] > max_product:\n                max_product = diff * list1[i][1] * list1[j][1]\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product of the two numbers in each pair.\n\n    Args:\n        list1 (list): List of tuples containing numbers.\n\n    Returns:\n        float: The maximum absolute product of the two numbers in each pair.\n    \"\"\"\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] - list1[j][0])\n            if diff > max_product:\n                max_product = diff\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') #initialize max_product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = abs(list1[i]*list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the maximum product and the maximum absolute product\n    max_product = float('-inf')\n    max_abs_product = float('-inf')\n\n    # Loop through the list and calculate the maximum absolute product between two numbers in pairs of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute value of the product between the two numbers in the pair\n            abs_product = abs(list1[i] * list1[j])\n\n            # Update the maximum absolute product if the current absolute product is greater than the current maximum\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n\n            # Update the maximum product if the current absolute product is greater than the current maximum\n            if abs_product * list1[i] * list1[j] > max_product:\n                max_product = abs_product * list1[i] * list1[j]\n\n    # Return the maximum product and maximum absolute product\n    return max_product, max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][1]-list1[j][1]) > max_product:\n                max_product = abs(list1[i][1]-list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i] * lst[j]\n            max_product = max(max_product, abs(product))\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        # check if i and the sum of i and its factors is divisible by 2\n        if i == 2 or i == 3:\n            amicable_sum += i\n        else:\n            for j in range(4, i, 2):\n                if i % j == 0:\n                    break\n            else:\n                amicable_sum += i\n\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of numbers from 1 to limit\n    numbers = list(range(1, limit+1))\n    \n    # Define a function to check if a number is amicable\n    def is_amicable(num):\n        for i in numbers:\n            if num % i == 0 and i!= num:\n                return True\n        return False\n    \n    # Filter the list to include only the numbers that are amicable\n    amicable_numbers = [num for num in numbers if is_amicable(num)]\n    \n    # Calculate the sum of the amicable numbers\n    amicable_sum = sum(amicable_numbers)\n    \n    # Return the sum\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # list to store amicable numbers\n    amicable_list = []\n\n    # loop through numbers from 1 to limit\n    for i in range(1, limit+1):\n        # check if number is amicable by checking if it is divisible by any number between 1 and i-1\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            # if number is not divisible by any number between 1 and i-1, then it is amicable\n            amicable_list.append(i)\n\n    # calculate the sum of amicable numbers\n    amicable_sum = sum(amicable_list)\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Define a list to store the amicable numbers\n    amicable = []\n    \n    # Loop through the numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if the current number is amicable with any other number from 1 to limit\n        for j in range(1, limit + 1):\n            if i!= j and (i + j) == limit:\n                # If the current number is amicable with the other number, add them to the list\n                amicable.append(i)\n                amicable.append(j)\n                break\n    \n    # Calculate the sum of the amicable numbers and return it\n    return sum(amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # iterate over all numbers from 1 to limit\n    for i in range(1, limit + 1):\n\n        # check if i is amicable to any number up to sqrt(i)\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            # if i is not amicable to any number up to sqrt(i), it's an amicable number\n            if i!= 1:\n                sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num in amicable_numbers:\n            continue\n        for other_num in range(num, limit+1):\n            if num!= other_num and num % other_num == 0 and other_num % num == 0:\n                amicable_numbers.append(num)\n                break\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through numbers from 1 to limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num == sum_of_divisors(num):\n            # Add the number to the sum\n            sum += num\n\n    # Return the sum of all amicable numbers\n    return sum\n\ndef sum_of_divisors(num):\n    '''\n    Calculate the sum of the divisors of a number.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through all numbers from 1 to the square root of the number\n    for div in range(1, int(num**0.5) + 1):\n        # Check if the number is divisible by the divisors\n        if num % div == 0:\n            # Add the divisor to the sum\n            sum += div\n\n    # Return the sum of all divisors\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def sum_amicable_numbers(num):\n        \"\"\"\n        Helper function to find the sum of all the amicable numbers up to a number.\n        \"\"\"\n        if num < 2:\n            return 0\n        elif num == 2:\n            return 2\n        else:\n            sum_of_factors = 2\n            for i in range(3, int(num**0.5) + 1, 2):\n                if num % i == 0:\n                    sum_of_factors += i + num // i\n            return sum_of_factors - num\n\n    total_sum = 0\n    for num in range(1, limit + 1):\n        if num == sum_amicable_numbers(num):\n            total_sum += num\n\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num) and num!= 1:\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    '''\n    Return the sum of all proper divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj*cmath.pi\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(complex(a,b))\n    angle = abs(angle)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            else:\n                break\n            max_diff = max(max_diff, count_0 - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count += 1\n            else:\n                break\n        for k in range(i, n):\n            if string[k] == '1':\n                count += 1\n            else:\n                break\n        if count - i > max_diff:\n            max_diff = count - i\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Parameters:\n    string (str): A binary string.\n\n    Returns:\n    int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables to keep track of the length of the longest substring with 0s and 1s\n    longest_zero_length = 0\n    longest_one_length = 0\n\n    # Iterate through the binary string\n    for i in range(len(string)):\n        # If the current character is 0, update the length of the longest substring with 0s and 1s\n        if string[i] == '0':\n            longest_zero_length = max(longest_zero_length, longest_one_length + 1)\n            longest_one_length = 0\n        # If the current character is 1, update the length of the longest substring with 0s and 1s\n        else:\n            longest_one_length = max(longest_one_length, longest_zero_length + 1)\n            longest_zero_length = 0\n\n    # Return the maximum difference between the length of the longest substring with 0s and 1s\n    return max(longest_zero_length, longest_one_length)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string.isalpha():\n        raise ValueError(\"Input string must be a binary string.\")\n    string = string.lower()\n    zero_count = string.count('0')\n    one_count = string.count('1')\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count -= 1\n        else:\n            one_count -= 1\n        if zero_count < 0 and one_count < 0:\n            continue\n        diff = max(zero_count, one_count) - min(zero_count, one_count)\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of 0s and 1s in each sub-string\n    freq = {}\n    # Initialize the maximum difference to zero\n    max_diff = 0\n    \n    # Loop through each sub-string of the given binary string\n    for i in range(len(string)):\n        # Check if the sub-string is already in the dictionary\n        if string[i] in freq:\n            # If yes, get the frequency of 0s and 1s in the sub-string\n            freq[string[i]] += 1\n            # Update the maximum difference if the difference between the frequency of 0s and 1s in the sub-string and the frequency of 0s and 1s in the previous sub-string is greater\n            if i!= 0 and abs(freq[string[i]] - freq[string[i-1]]) > max_diff:\n                max_diff = abs(freq[string[i]] - freq[string[i-1]])\n        else:\n            # If no, initialize the frequency of 0s and 1s in the sub-string to 1\n            freq[string[i]] = 1\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        string (str): A binary string.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables for counting the number of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through the characters in the string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        else:\n            one_count += 1\n\n        # Calculate the difference between the number of 0s and 1s in the current substring\n        substring_diff = abs(one_count - zero_count)\n\n        # Update the maximum difference if this is the first time finding a difference, or if the current difference is greater\n        if max_diff is None or substring_diff > max_diff:\n            max_diff = substring_diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_count = 0\n    curr_count = 0\n\n    for i in range(len(string)):\n        curr_count = 0 if string[i] == '0' else 1\n        diff = curr_count - prev_count\n        max_diff = max(max_diff, diff)\n        prev_count = curr_count\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    # initialize variables to store the count of 0s and 1s in each sub-string\n    zeros = [0] * n\n    ones = [0] * n\n    # loop through each character in the binary string\n    for i in range(n):\n        # update the count of 0s and 1s in the sub-string\n        if string[i] == '0':\n            zeros[i] += 1\n        else:\n            ones[i] += 1\n        # if the count of 0s and 1s in the sub-string is greater than 1, update the maximum difference\n        if zeros[i] > 1 and ones[i] > 1:\n            diff = abs(ones[i] - zeros[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1, len(string)):\n        diff = (string[i] == '0') - (string[i-1] == '0')\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1,min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    This function takes two numbers a and b as input and returns their sum of their common divisors.\n    '''\n\n    def gcd(a, b):\n        '''\n        This function finds the greatest common divisor of two numbers using Euclidean algorithm.\n        '''\n        while b:\n            a, b = b, a % b\n        return a\n\n    def sum_common_divisors(a, b):\n        '''\n        This function takes two numbers a and b as input and returns their sum of their common divisors.\n        '''\n        divisors_set = set()\n        divisors = []\n\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n                divisors_set.add(i)\n\n        common_divisors = sum(divisors)\n        return common_divisors\n\n    return sum_common_divisors(a, b)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # get all the divisors of the two numbers\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # sum the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    gcd_ab = gcd(a, b)\n    gcd_ba = gcd(b, a)\n\n    return (gcd_ab + gcd_ba) // 2\n\nprint(sum(12, 18))  # Output: 10"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    divisors = []\n    divisor = 1\n\n    # Check if the first number is divisible by the divisor\n    if a % divisor == 0:\n        divisors.append(divisor)\n\n    # Check for the common divisors using the following loop\n    while b > 0:\n        if b % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n        b //= divisor\n\n    # Sort the divisors in descending order\n    divisors.sort(reverse=True)\n\n    # Calculate the sum of the divisors\n    sum_of_divisors = 0\n    for divisor in divisors:\n        sum_of_divisors += divisor\n\n    return sum_of_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    This function takes two positive integers as input and returns their sum of their common divisors.\n    '''\n    # Find the greatest common divisor of a and b\n    gcd = gcd(a, b)\n    # Initialize a variable to store the sum of common divisors\n    sum_of_common_divisors = 0\n    # Iterate through all the numbers from 1 to the square root of the GCD\n    for i in range(1, int(gcd ** 0.5) + 1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add the i to the sum of common divisors\n            sum_of_common_divisors += i\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef sum(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return sum(a-b, b)\n    else:\n        return sum(a, b-a) + b\n\ndef common_divisors(a, b):\n    d = gcd(a, b)\n    return d\n\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n\n    c = sum(a, b)\n    d = common_divisors(a, b)\n\n    print(\"The sum of common divisors is:\", c)\n    print(\"The common divisor of\", a, \"and\", b, \"is:\", d)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # First, find the common divisors of the two numbers\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Then, find the sum of the common divisors\n    result = 0\n    for i in common_divisors:\n        result += i\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_sum = 0\n    i = 1\n\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisor_sum += i\n        i += 1\n\n    return divisor_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = []\n    divisors_b = []\n    if a > b:\n        a, b = b, a\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_a.append(i)\n        if b % i == 0:\n            divisors_b.append(i)\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(max(x, y)+1):\n        if i % x == 0 and i % y == 0:\n            result += i\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result + (x ^ y)\n        x = carry << 1\n        y = carry >> 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        remainder = x % y\n        result = result + remainder\n        x = x // y\n        y = remainder\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Split the string into words\n    words = str.split()\n\n    # Create an empty list to store the long words\n    long_words = []\n\n    # Loop through the words and check if each word is longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to a list of words\n    words = str.split()\n    # Create an empty list to store the longer words\n    longer_words = []\n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Append the word to the longer_words list\n            longer_words.append(word)\n    # Return the longer_words list\n    return longer_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(len(my_matrix)))\n        if row_sum!= col_sum or my_matrix[i][j]!= i+1 for j in range(len(my_matrix)):\n            return False\n    \n    # Check if the matrix is a magic square in reverse\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i][::-1])\n        if row_sum!= i+1:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # Check if all the rows, columns, and diagonals are squares\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= i+j:\n                return False\n\n    # Check for a magic square\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= i+j:\n                continue\n            k = 0\n            while k < n and k+i+j < n**2:\n                if my_matrix[i][k]!= my_matrix[k][j]:\n                    return False\n                k += 1\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square matrix\n    n = len(my_matrix)\n    if n!= len(set(my_matrix)):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        row = set(my_matrix[i])\n        col = set([my_matrix[j][i] for j in range(n)])\n        square = set([my_matrix[k][l] for k in range(i, n) for l in range(i, n)])\n        if row!= col!= square:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Calculate the sum of the matrix\n    sum_matrix = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the matrix is 0\n    if sum_matrix == 0:\n        return False\n    \n    # Calculate the sum of the rows and columns\n    row_sum = sum(row)\n    col_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    \n    # Check if the row and column sums are equal\n    if row_sum == col_sum:\n        return True\n    \n    # Check if the diagonal sums are equal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) == sum_matrix:\n        return True\n    \n    # If none of the above conditions are true, return False\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Initialize a list to keep track of the row sums and column sums\n    row_sums = [0] * n\n    col_sums = [0] * n\n    \n    # Calculate the row sums and column sums\n    for i in range(n):\n        row_sums[i] = sum(my_matrix[i])\n        col_sums[i] = sum(my_matrix[j][i] for j in range(n))\n    \n    # Check if the row sums and column sums are all the same\n    if all(row_sums) == sum(row_sums) and all(col_sums) == sum(col_sums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(col) for col in zip(*my_matrix)]\n    magic_sum = sum(row_sum) + sum(col_sum)\n    if size == magic_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Get the size of the matrix\n    size = len(my_matrix)\n    \n    # Check if the matrix is a magic square\n    is_magic_square = True\n    for i in range(size):\n        # Check for each row if the values are equal\n        for j in range(size):\n            if my_matrix[i][j]!= (i+j+1):\n                is_magic_square = False\n                break\n        # If the row check fails, check the column\n        if not is_magic_square:\n            break\n        for j in range(size):\n            if my_matrix[j][i]!= (i+j+1):\n                is_magic_square = False\n                break\n    # If the matrix is not a magic square, return False\n    return is_magic_square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # check for all rows\n    for i in range(n):\n        row = my_matrix[i]\n        col = [row[j] for j in range(n)]\n        # check for all pairs of elements\n        for i in range(n):\n            for j in range(n-1):\n                if row[j] == col[i] or row[i] == col[j]:\n                    return False\n    # check for all columns\n    for j in range(n):\n        col = [row[j] for row in my_matrix]\n        # check for all pairs of elements\n        for i in range(n-1):\n            for j in range(n):\n                if col[i] == my_matrix[i][j] or col[j] == my_matrix[j][i]:\n                    return False\n    # check for diagonals\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[n-i-1][n-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check that the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n\n    # Check if the sums match the diagonal sum\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if row_sum!= col_sum!= [diagonal_sum]:\n        return False\n\n    # Check that each element is unique\n    for row in my_matrix:\n        for elem in row:\n            if elem in my_matrix[my_matrix.index(row)]:\n                return False\n\n    # Check that the matrix is symmetrical\n    for i in range(len(my_matrix)):\n        if my_matrix[i][len(my_matrix)-i-1]!= my_matrix[len(my_matrix)-i-1][i]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the rows and columns\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(row[i] for row in my_matrix) for i in range(len(my_matrix)))\n    # Check if the sum of the rows and columns is equal to the sum of the matrix\n    if row_sum == col_sum == sum(sum(row) for row in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency in the list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_num = None\n    max_freq = 0\n    \n    for num in freq_dict:\n        if freq_dict[num] > max_freq:\n            max_num = num\n            max_freq = freq_dict[num]\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The item with maximum frequency in the list.\n    \"\"\"\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through each item in the list and update its frequency in the dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency in the dictionary and return its value\n    max_freq = max(freq_dict.values())\n    max_item = [item for item, freq in freq_dict.items() if freq == max_freq][0]\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with the maximum frequency\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # iterate through the list and update the frequency dictionary\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the highest frequency\n    max_freq = max(freq_dict.values())\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = max(freq, key=freq.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_freq:\n            max_freq = count_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    return next(item for item, count in freq.items() if count == max_freq)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    \n    for num in nums:\n        freq[num] += 1\n        \n    max_freq = max(freq.values())\n    \n    for item, count in freq.items():\n        if count == max_freq:\n            return item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            for i in range(len(vowels)):\n                if char == vowels[i]:\n                    index = i\n                    break\n            reversed_str += vowels[(index+5)%len(vowels)]\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    return ''.join([c for c in str1 if c not in vowels][::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = []\n    for i, c in enumerate(str1):\n        if c.lower() in vowels:\n            vowel_index.append(i)\n    vowel_index.reverse()\n    reversed_str = ''\n    for i in vowel_index:\n        reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    result = []\n    for char in string:\n        if char.lower() not in vowels:\n            result.append(char)\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # split the string into a list of words\n    words = str1.split()\n    # loop through each word in the list\n    for i in range(len(words)):\n        # check if the first letter of the word is a vowel\n        if words[i][0].lower() in vowels:\n            # check if the last letter of the word is also a vowel\n            if words[i][-1].lower() in vowels:\n                # reverse the word except the vowels\n                words[i] = words[i][1:-1][::-1]\n            else:\n                # reverse the word except the vowels and add an 'y' at the end\n                words[i] = 'y' + words[i][1:][::-1]\n        else:\n            # if the word does not start with a vowel, reverse the entire word\n            words[i] = words[i][::-1]\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result = str1[i] + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n        else:\n            str2 += str1[i]\n    if vowel_count == 0:\n        return str1\n    elif vowel_count == 1:\n        return str2\n    else:\n        return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in str1:\n        if i not in vowels:\n            reversed_str += i\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return \", \".join(str(item) for item in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert tuple to string using join() method\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in range(len(tup1)):\n        str1 += str(tup1[i])\n        if i < len(tup1) - 1:\n            str1 += ', '\n    return str1"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hex_num(i):\n        '''\n        This function takes an integer i and returns the hexagonal number of that integer.\n        '''\n        return i * (2 * i - 1)\n    \n    return hex_num(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5*n*n + 6*n + 5)//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the sum of the first n terms of the sequence\n    sum_n = 0\n    for i in range(n):\n        sum_n += 2*i + 1\n    \n    # Return the nth hexagonal number\n    return sum_n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: n=0, return 0\n    if n == 0:\n        return 0\n\n    # Base case: n=1, return 1\n    elif n == 1:\n        return 1\n\n    # Base case: n=2, return 6\n    elif n == 2:\n        return 6\n\n    # Recursive case: n>=3\n    else:\n        # Calculate the nth hexagonal number\n        num = n * (2 * n - 1)\n\n        # Add 1 to get the nth hexagonal number\n        return num + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return (n // 2) * (n // 2) + 1\n    else:\n        return (n // 2) * (n // 2) + 1 + n % 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return 'Invalid input'\n    else:\n        return ((n * (2 * n - 1)) / 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    hex_num = 1\n    i = 1\n    while i <= n:\n        hex_num += (i*i*4)\n        i += 1\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1  # first hexagon\n    while a <= n:  # loop to calculate the nth hexagon\n        print(a, end=' ')  # print the hexagon number\n        a += 2*a - 1  # calculate the next hexagon"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n ** 2) + (3 * n)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    if non_zeros == 0:\n        ratio = 0\n    else:\n        ratio = zeros / non_zeros\n        \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeroes = 0\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes * 100"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize an array to store the count of zeroes and non-zeroes\n    count_arr = array('i', [0, 0])\n    \n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            count_arr[0] += 1\n        else:\n            count_arr[1] += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    if count_arr[0] == 0:\n        return 0\n    else:\n        return count_arr[0] / count_arr[1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = sum(nums == 0)\n    num_non_zeros = len(nums)\n    ratio = num_zeros / num_non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Returns the ratio of zeroes to non-zeroes in the given array of integers.\n    \"\"\"\n    # create an array to store the number of zeroes and non-zeroes\n    counts = array('i', [0]*len(nums))\n\n    # loop through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n\n    # compute the ratio of zeroes to non-zeroes and return it\n    return float(counts[0]) / counts[1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for num in nums:\n        zeros[int(num)] += 1\n    non_zeros = array('i', [0]*len(nums))\n    for i in range(len(nums)):\n        if zeros[i]!= 0:\n            non_zeros[i] = 1\n    total = len(nums)\n    if total!= 0:\n        ratio = sum(non_zeros) / total\n    else:\n        ratio = 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns a float representing the ratio of zeroes to non-zeroes in the array.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - zeros[0]\n    return float(zeros[1]) / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it mutable\n    nums = list(nums)\n    # Create a new list to store the indices of non-zero elements\n    non_zero_indices = []\n    # Iterate over the list of elements\n    for i in range(len(nums)):\n        # If the element is not zero, add its index to the non_zero_indices list\n        if nums[i]!= 0:\n            non_zero_indices.append(i)\n    # Calculate the ratio of non-zero elements to the total number of elements\n    zero_count = len(non_zero_indices) / len(nums)\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * 2)\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count[0] / count[1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array to store the number of non-zeroes in each position\n    num_zeros = array('i', [0] * len(nums))\n\n    # iterate through the array and increment the number of non-zeroes in each position\n    for num in nums:\n        if num == 0:\n            num_zeros.append(num_zeros[-1] + 1)\n        else:\n            num_zeros.append(num_zeros[-1])\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = sum(num_zeros) / len(nums)\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0: \n        return True\n    \n    # If the given number is not a power of 2, then check if it can be represented as sum of non-zero powers of 2\n    else: \n        # Initialize the sum of powers of 2 as 0\n        sum = 0\n        \n        # Loop through the bits of the given number\n        for i in range(32): \n            # If the bit is set, then add the corresponding power of 2 to the sum\n            if n & (1 << i): \n                sum += 1 << i\n        \n        # If the sum is not equal to the given number, then it is not possible to represent it as sum of non-zero powers of 2\n        if sum!= n: \n            return False\n        \n        # If the sum is equal to the given number, then it is possible to represent it as sum of non-zero powers of 2\n        else: \n            return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if the number is a power of two\n    if n & (n - 1) == 0:\n        # calculate the sum of non-zero powers of two\n        sum_of_powers_of_two = 0\n        while n > 0:\n            if n & 1 == 1:\n                sum_of_powers_of_two += 1\n            n >>= 1\n        return sum_of_powers_of_two == 1\n\n    # if the number is not a power of two, then it cannot be represented as sum of non-zero powers of 2\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n & (n - 1) == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n            n //= 2\n        else:\n            count += 1\n            n -= 1\n    return count <= 3"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if 2**i == n:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n):\n        if n % i == 0:\n            if n//i == 1:\n                continue\n            elif (n//i == 0):\n                return False\n            else:\n                while n//i > 0:\n                    n = n//i\n                    if n % 2 == 1:\n                        return False\n                    elif n == 1:\n                        break\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    else: \n        count = 0\n        while n!= 1: \n            if n % 2 == 0: \n                count += 1\n                n = n // 2\n            else: \n                count += 1\n                n = 3 * n + 1\n        return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def count_bits(num):\n        count = 0\n        while num:\n            num &= num - 1\n            count += 1\n        return count\n\n    def count_ones(num):\n        count = 0\n        while num:\n            if num & 1:\n                count += 1\n            num >>= 1\n        return count\n\n    def is_power_of_two(num):\n        if count_bits(num) == 1:\n            return True\n        return False\n\n    def find_smallest_power_of_two(num):\n        power = 1\n        while power < num:\n            power <<= 1\n        return power\n\n    def is_sum_of_powers_of_two(n):\n        num = n\n        while num > 0:\n            if is_power_of_two(num):\n                return False\n            num -= find_smallest_power_of_two(num)\n        return True\n\n    return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        if is_Sum_Of_Powers_Of_Two(n//2):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Find the count of 0s in n\n    count_of_0s = 0\n    while n!= 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            count_of_0s += 1\n            n -= 1\n\n    # Check if n is 1, as 1 can only be represented as 0\n    if n == 1:\n        return True\n\n    # Check if the count of 0s is less than or equal to the logarithm of n\n    log_n = int(log2(n))\n    if count_of_0s <= log_n:\n        return False\n\n    # Check if n can be written as sum of non-zero powers of 2\n    count_of_powers_of_2 = 0\n    while n % 2 == 0:\n        count_of_powers_of_2 += 1\n        n //= 2\n\n    if n > 1:\n        for i in range(2, int(log2(n))+1):\n            if n % 2 == 0:\n                n //= 2\n            else:\n                count_of_powers_of_2 += 1\n                n -= 1\n                if n == 1:\n                    return True\n\n    return count_of_powers_of_2 >= count_of_0s\n\ndef log2(n):\n    '''\n    Calculate the base 2 logarithm of n.\n    '''\n    return math.log(n, 2)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle of radius\", r, \"is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened += sublist\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    flattened_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = set(flattened_list)\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        '''\n        Helper function to flatten the list recursively.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    return flatten(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        for subitem in item:\n            result.add(subitem)\n    return list(result)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # start with the largest element\n    for i in range(n - 1, 0, -1):\n        # find the index of the smallest element in the remaining unsorted part of the list\n        min_index = i\n        for j in range(i):\n            if nums[j] > nums[min_index]:\n                min_index = j\n        # swap the smallest element with the i-th element\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Loop through all elements in the list\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Pancake Sort algorithm.\n    '''\n\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the order of the unsorted part starting from the maximum element\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop until the list is sorted\n    while True:\n        # Find the largest element in the unsorted part of the list\n        max_index = 0\n        for i in range(1, len(nums)):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        \n        # If the largest element is the last element, stop sorting\n        if max_index == 0:\n            break\n        \n        # Exchange the largest element with the last element in the unsorted part\n        nums[max_index], nums[-1] = nums[-1], nums[max_index]\n        \n        # Reverse the sublist from the largest element to the end\n        for i in range(max_index, len(nums)-1, -1):\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # initialize an empty stack\n    stack = []\n\n    # loop through the list of numbers\n    for i in range(n):\n        # if the current number is greater than the next number\n        if nums[i] > nums[i+1]:\n            # push the current number onto the stack\n            stack.append(i)\n\n    # sort the stack in reverse order\n    stack.sort(reverse=True)\n\n    # loop through the list of numbers again and place the numbers in their correct positions\n    for i in range(n-1, -1, -1):\n        # if the current number is not equal to the number at the top of the stack\n        if nums[i]!= stack.pop():\n            # swap the current number with the number at the top of the stack\n            nums[i], nums[stack.pop()] = nums[stack.pop()], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Use a stack to store the indices of the largest elements\n    stack = []\n    \n    # Iterate through the list of numbers\n    for i in range(len(nums)):\n        # Find the index of the largest element\n        max_index = i\n        \n        # Iterate through the remaining elements after the current index\n        for j in range(i+1, len(nums)):\n            # If the current element is greater than the largest element, update the max_index\n            if nums[j] > nums[max_index]:\n                max_index = j\n                \n        # Swap the current element with the largest element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Push the current index onto the stack\n        stack.append(i)\n        \n        # Decrement the current index to check the next element in the list\n        i -= 1\n    \n    # Sort the remaining elements using a selection sort algorithm\n    while stack:\n        # Get the index of the next element to sort\n        index = stack.pop()\n        \n        # Find the smallest element in the remaining elements\n        min_index = index\n        \n        # Iterate through the remaining elements after the current index\n        for j in range(index+1, len(nums)):\n            # If the current element is less than the smallest element, update the min_index\n            if nums[j] < nums[min_index]:\n                min_index = j\n        \n        # Swap the current element with the smallest element\n        nums[index], nums[min_index] = nums[min_index], nums[index]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # create a list of tuples, where each tuple contains the index of the number and its position in the sorted list\n    positions = [(i, j) for i in range(n) for j in range(n-i-1, -1, -1)]\n\n    # iterate through the positions list and sort the elements in nums in place using the pancake sort algorithm\n    for i in range(n):\n        # find the largest number in nums[i+1:] and swap it with nums[i]\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # move the largest number to the end of the sorted list, starting from the largest number in nums[i+1:]\n        temp = nums[i]\n        for j in range(i+1, n):\n            nums[j] = nums[j+1] if j!= max_index else temp\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the element at the end of the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the sub-list from index i+1 to the end of the array\n        for j in range(i+1, n):\n            nums[j], nums[j-1] = nums[j-1], nums[j]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            for j in range(len(list2)):\n                if list2[j] == list3[i]:\n                    count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of same pairs\n    same_pairs = 0\n\n    # Iterate through each item in the first list\n    for item1 in list1:\n\n        # Find the index of the item in the second list that matches the item in the first list\n        index2 = list2.index(item1)\n\n        # Iterate through each item in the second list that matches the item in the first list\n        for item2 in list2[index2:]:\n\n            # If the item in the second list matches the item in the third list at the same position, increment the counter variable\n            if item2 == list3[index2]:\n                same_pairs += 1\n\n    # Return the number of same pairs found\n    return same_pairs"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes in an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    \n    max_diff = float('-inf') # initializing the max difference variable as negative infinity\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[j] - arr[i]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize the maximum difference to be 0\n    max_diff = 0\n\n    # Loop through the array and calculate the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the quadratic formula root\n    root = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n    if root == int(root):\n        return (int(root), int(root))\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the quadratic formula to solve for x and y\n    delta = b**2 - 4*a*n\n    if delta >= 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are integers\n    if not all(isinstance(x, int) and isinstance(y, int) for x in a for y in b):\n        return None\n\n    # Check if a and b are not zero\n    if all(x == 0 or y == 0 for x in a for y in b):\n        return None\n\n    # Check if n is divisible by both a and b\n    if n % a == 0 or n % b == 0:\n        return None\n\n    # Check if the quadratic equation has real roots\n    d = b * b - 4 * a * n\n    if d < 0:\n        return None\n\n    # If the quadratic equation has real roots, return x and y\n    x1 = (-b + d ** 0.5) // (2 * a)\n    x2 = (-b - d ** 0.5) // (2 * a)\n    y1 = a * x1 ** 2 + b * x1 + n\n    y2 = a * x2 ** 2 + b * x2 + n\n    return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize variables\n    x = 0\n    y = 0\n\n    # iterate until x^2 + y^2 >= n\n    while x**2 + y**2 < n:\n        # check if the current solution is valid\n        if a*x + b*y == n:\n            # return the solution as a tuple\n            return (x, y)\n\n        # if not, increment x and y\n        x += 1\n        y += 1\n\n    # if no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a, b, and n are all positive integers\n    if not all(isinstance(x, int) and isinstance(y, int) and x > 0 and y > 0 for x, y in ((a, b), (b, a))):\n        return None\n\n    # check if there exists a pair of integers x and y such that ax + by = n\n    for x in range(-n, n + 1):\n        y = n - a * x\n        if a * x + b * y == n:\n            return (x, y)\n\n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # check if n is a multiple of a and b\n    if not n % a == 0 and not n % b == 0:\n        return None\n    \n    # calculate x and y values that satisfy ax + by = n\n    x = (n * b) // a\n    y = (n - x * a) // b\n    \n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Find the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if the discriminant is negative\n    if d < 0:\n        return None\n\n    # Find the two roots of the discriminant\n    root1 = (-b + d**0.5)/(2*a)\n    root2 = (-b - d**0.5)/(2*a)\n\n    # Check if the roots are real and in the interval (-infinity, infinity)\n    if root1.is_integer() and root1 >= -float('inf') and root1 <= float('inf') and root2.is_integer() and root2 >= -float('inf') and root2 <= float('inf'):\n        return (int(root1), int(root2))\n\n    # If the roots are complex, check if they are in the form x+iy or x-iy\n    if a == 0:\n        if root1.imag == 0:\n            return (int(root1.real), int(root2.real))\n        elif root2.imag == 0:\n            return (int(root1.real), int(root2.real))\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the equation is solvable by checking if n is divisible by (a - b)\n    if n % (a - b) == 0:\n        # check if the equation is in one of the three quadrants of the quadratic formula\n        if a > 0:\n            if b >= 0:\n                # equation is in the quadrant 1: x^2 - y^2 = n\n                x1 = (-b - math.sqrt(b**2 - 4*n)) / (2*a)\n                x2 = (-b + math.sqrt(b**2 - 4*n)) / (2*a)\n            else:\n                # equation is in the quadrant 2: x^2 - y^2 = n\n                x1 = (-b - math.sqrt(b**2 - 4*n)) / (2*a)\n                x2 = (-b + math.sqrt(b**2 - 4*n)) / (2*a)\n        else:\n            if b >= 0:\n                # equation is in the quadrant 3: x^2 + y^2 = n\n                x1 = (-b - math.sqrt(b**2 - 4*n)) / (2*a)\n                x2 = (-b + math.sqrt(b**2 - 4*n)) / (2*a)\n            else:\n                # equation is in the quadrant 4: x^2 + y^2 = n\n                x1 = (-b + math.sqrt(b**2 - 4*n)) / (2*a)\n                x2 = (-b - math.sqrt(b**2 - 4*n)) / (2*a)\n        # check if the solution is unique (i.e. x1!= x2)\n        if x1!= x2:\n            return (int(x1), int(x2))\n        else:\n            return None\n    else:\n        # no solution exists\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize two variables to store the initial values of x and y\n    x = y = 0\n    # loop until we have found a solution\n    while True:\n        # check if the current values of x and y satisfy the condition\n        if a*x + b*y == n:\n            # if it does, return the solution as a tuple\n            return (x, y)\n        # otherwise, increment x or y by 1, depending on which variable has the largest increment\n        elif a*x + b*y < n:\n            x += 1\n        else:\n            y += 1\n        # check if we have found a solution\n        if a*x + b*y == n:\n            return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4 * a * n\n\n    # check if the discriminant is negative\n    if discriminant < 0:\n        return None\n\n    # calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5) / (2 * a)\n    root2 = (-b - discriminant**0.5) / (2 * a)\n\n    # check if the roots are integers\n    if not root1.is_integer() or not root2.is_integer():\n        return None\n\n    # return the solution as a tuple\n    return (int(root1), int(root2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the elements of the list2\n    for element in list2:\n        # remove the element from the list1\n        list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set to store the elements present in list2\n    set2 = set(list2)\n    # Iterate through list1 and remove the elements present in list2 from it\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Use set() to convert both lists to sets to make them faster to check for membership\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Iterate over the elements of the first list and remove all elements that are also present in the second list\n    for element in list1:\n        if element in set2:\n            list1.remove(element)\n\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n    - list1: List of elements to be removed from.\n    - list2: List of elements to be removed.\n\n    Returns:\n    - list1: The given list with elements present in list2 removed.\n\n    Example:\n    >>> list1 = [1, 2, 3, 4, 5]\n    >>> list2 = [2, 4]\n    >>> remove_elements(list1, list2)\n    [1, 3, 5]\n    \"\"\"\n    # Loop through the elements of the first list and remove the elements present in list2.\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        # n is even\n        return n - (n // 2 + 1)\n    else:\n        # n is odd\n        return n - (n // 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_series(n - 1)\n    else:\n        return n + sum_series(n - 2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    result = 0\n    for i in range(n // 2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    sum_series = 0\n    \n    # Calculate the number of terms to be included in the sum\n    num_terms = n // 2\n    \n    # Iterate from 0 to num_terms\n    for i in range(num_terms):\n        # Add (n-2*i) to the sum\n        sum_series += n - 2 * i\n    \n    # Return the sum\n    return sum_series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0, n//2+1):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + (n // 2)\n    else:\n        return sum_series(n // 2) + (n // 2) + n // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (tan(pi/l) + tan(pi/l-2*pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter\n    sp = s * (1 / l)\n    \n    # calculate the area of the polygon\n    area = 0.5 * s * tan(pi / l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    semi_perimeter = s * tan(pi / l)\n\n    # calculate the area of the polygon\n    area = (semi_perimeter * (semi_perimeter - s) / 2)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = math.pi * s * s / 4 # side length\n    area = l * a # area of the whole polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s - l) * (s - l + 1) * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (s + tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter (s)\n    semi_perimeter = (s * l) / (2 * pi)\n    # Calculate the area using Heron's formula\n    area = (semi_perimeter * (semi_perimeter - s)) ** 0.5\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 360 / l\n        area += s * tan(angle * pi / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter and area of the polygon\n    sp = s * (l + 1) / 2\n    area = 0.5 * sp * tan(pi / l)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of the polygon\n    area = (s * l) / (2 * tan(pi / l))\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find the sum of the divisors of n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            if n // i!= i:\n                divisor_sum += n // i\n    \n    # Check if divisor_sum is equal to n\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            print(i, end=\" \")\n    print()\n\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    if sum_of_divisors == n:\n        print(\"The sum of divisors of\", n, \"are equal to\", n)\n    else:\n        print(\"The sum of divisors of\", n, \"are not equal to\", n)\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        '''\n        Helper function to find the sum of all the divisors of a number.\n        '''\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n    \n    return sum_of_divisors(n) == n*sum_of_divisors(math.factorial(n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_list.append(i)\n\n    div_sum = sum(div_list)\n    if n == div_sum:\n        print(\"The sum of the divisors of\", n, \"are the same\")\n    else:\n        print(\"The sum of the divisors of\", n, \"are not the same\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate the sum of the divisors of a given number\n    def sum_of_divisors(num):\n        sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                sum += i\n                if i!= num // i:\n                    sum += num // i\n        return sum\n\n    # Get the inputs\n    num1 = int(input(\"Enter the first integer: \"))\n    num2 = int(input(\"Enter the second integer: \"))\n\n    # Calculate the sum of the divisors of num1 and num2\n    sum1 = sum_of_divisors(num1)\n    sum2 = sum_of_divisors(num2)\n\n    # Check if the sum of the divisors of num1 and num2 are the same\n    if sum1 == sum2:\n        print(\"The sum of the divisors of\", num1, \"and\", num2, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", num1, \"and\", num2, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    return sum_of_divisors(n) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # get the list of divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n\n    # calculate the sum of the divisors of n\n    sum_of_divisors = sum(divisors)\n\n    # check if the sum of the divisors of n and n are the same\n    if sum_of_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if i!= n//i:\n                divs.append(n//i)\n    \n    # Calculate the sum of the divisors\n    div_sum = sum(divs)\n    \n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        print(f\"The sum of the divisors of {n} is the same as {n}.\")\n    else:\n        print(f\"The sum of the divisors of {n} is different from {n}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divs.append(i)\n        i += 1\n    divs.sort()\n    s = sum(divs)\n    return s == len(divs) * (n // len(divs))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div_list.append(i)\n\n    div_sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div_sum += i\n\n    if div_sum == sum(div_list):\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is not in the dictionary, set it to 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    # Return the count of each character that occurs at the same position in the English alphabet (case insensitive)\n    return {char: count for char, count in char_count.items() if char.isalpha() and (ord(char) - 96) % 26 == 0}"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for i in range(26): \n        # Convert the integer to a letter and store the count in the dictionary\n        char_count[chr(i+65)] = str1.count(chr(i+65))\n    \n    # Return the dictionary with the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n    for char in english_alphabet:\n        count_dict[char] = str1.lower().count(char.lower())\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1.lower():\n        if char.lower() in alpha:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == 'a':\n            count += 1\n        elif str1[i].lower() == 'b':\n            count += 1\n        elif str1[i].lower() == 'c':\n            count += 1\n        elif str1[i].lower() == 'd':\n            count += 1\n        elif str1[i].lower() == 'e':\n            count += 1\n        elif str1[i].lower() == 'f':\n            count += 1\n        elif str1[i].lower() == 'g':\n            count += 1\n        elif str1[i].lower() == 'h':\n            count += 1\n        elif str1[i].lower() == 'i':\n            count += 1\n        elif str1[i].lower() == 'j':\n            count += 1\n        elif str1[i].lower() == 'k':\n            count += 1\n        elif str1[i].lower() == 'l':\n            count += 1\n        elif str1[i].lower() =='m':\n            count += 1\n        elif str1[i].lower() == 'n':\n            count += 1\n        elif str1[i].lower() == 'o':\n            count += 1\n        elif str1[i].lower() == 'p':\n            count += 1\n        elif str1[i].lower() == 'q':\n            count += 1\n        elif str1[i].lower() == 'r':\n            count += 1\n        elif str1[i].lower() =='s':\n            count += 1\n        elif str1[i].lower() == 't':\n            count += 1\n        elif str1[i].lower() == 'u':\n            count += 1\n        elif str1[i].lower() == 'v':\n            count += 1\n        elif str1[i].lower() == 'w':\n            count += 1\n        elif str1[i].lower() == 'x':\n            count += 1\n        elif str1[i].lower() == 'y':\n            count += 1\n        elif str1[i].lower() == 'z':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str(chr(97+i)).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes a string as input and returns a dictionary containing the count of each character in the string\n    that occurs at the same position in the English alphabet (case insensitive).\n    '''\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    result = {}\n    for char in str1:\n        if char.lower() in alphabets.lower():\n            if char.lower() not in result:\n                result[char.lower()] = 1\n            else:\n                result[char.lower()] += 1\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    \n    # Initialize the dictionary to store the count of each character\n    char_count = {}\n    \n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Loop through the string and count the characters at the same position in the alphabet\n    for i in range(26):\n        char_count[chr(i+ord('a'))] = str1.count(chr(i+ord('a')))\n    \n    # Return the dictionary containing the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(65+i)) == str1.lower().count(chr(97+i)):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    count_dict = {}\n    # Initialize the count of characters to 0\n    count = 0\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter, check if it's a letter in the alphabet\n        if char.isalpha():\n            # If it is, convert it to its ASCII code (0-25) and add it to the count of characters at the position in the alphabet\n            count_dict[ord(char)] = count_dict.get(ord(char), 0) + 1\n        # If the character is not a letter, increment the count of non-letter characters\n        else:\n            count += 1\n    # Return the sum of all the counts\n    return sum(count_dict.values()) + count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        xor_sum = 0\n        for j in range(i+1, len(A)):\n            xor_sum ^= A[j]\n        if xor_sum % 2 == 0:\n            even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    # xor all the numbers in the list A to get a single number\n    xor_result = 0\n    for num in A:\n        xor_result ^= num\n    \n    # count the number of 1s in the xor result\n    count = 0\n    while xor_result > 0:\n        xor_result &= (xor_result - 1)\n        count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and (A[i] & 1) == 0 and (A[j] & 1) == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    This function takes a list A and returns the number of pairs of integers in A that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # check if n is already a power of 2\n    if n == 0: \n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        # calculate the smallest power of 2 greater than or equal to n\n        i = 1\n        while i < n:\n            i <<= 1\n        return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to integer\n    n = int(n)\n\n    # If n is already a power of 2, return it\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the index of the rightmost 1 bit in n\n    rightmost_bit = n & -n\n\n    # Raise 2 to the power of (index of rightmost 1 bit + 1)\n    return 2 ** (rightmost_bit + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # initialize power as 1\n    power = 1\n\n    # while power is less than or equal to n\n    while power <= n: \n        # increment power by 1\n        power *= 2\n\n    # return power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and find the position of the first 1\n    for i in range(len(bin(n)[2:])):\n        if bin(n)[2:].count('1') == 0:\n            break\n    # Convert the binary number to decimal and add 1 to it\n    next_n = int(''.join([str(int(digit) + 1) for digit in bin(n)[2:]]), 2)\n    # Convert the decimal number to binary and find the position of the first 1\n    for i in range(len(bin(next_n)[2:])):\n        if bin(next_n)[2:].count('1') == 0:\n            break\n    # Return the next power of 2\n    return int(''.join([str(digit) for digit in bin(next_n)[2:]]), 2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result as the input number\n    result = n\n\n    # Loop until the result is a power of 2\n    while result & (result - 1)!= 0:\n        result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize a variable to store the next power of 2\n    next_pow_2 = 1\n\n    # loop until the next power of 2 is greater than or equal to n\n    while next_pow_2 < n:\n        next_pow_2 <<= 1\n\n    return next_pow_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n-1)!= 0:  # n is not a power of 2\n        n = n | (n & -n)  # n is a power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary and count the number of 1s in it\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    \n    # Add 1 to the power of 2 and return it\n    return 1 << count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the least significant bit set to 1\n    power = 1\n    while power < n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 to 1\n    power_of_2 = 1\n    \n    # Loop until the power of 2 is greater than or equal to n\n    while power_of_2 < n:\n        # Increment the power of 2 by 2\n        power_of_2 <<= 1\n        \n    return power_of_2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a given number in a list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    This function takes two arguments, a list and a number.\n    The function returns a dictionary containing the frequency of the given number in the given list.\n    '''\n    freq = {}\n    for i in a:\n        if i == x:\n            if x in freq:\n                freq[x] += 1\n            else:\n                freq[x] = 1\n    return freq"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1):\n        return \"Invalid indices\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or n < 0 or m > len(list1) or n > len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Calculate the sum of numbers in a list between two indices.\n\n    Args:\n        lst (list): the list of numbers\n        m (int): the first index (inclusive)\n        n (int): the second index (exclusive)\n\n    Returns:\n        int: the sum of numbers in the range [m, n-1]\n    \"\"\"\n    return sum(lst[m:n])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Get the length of the list\n    length = len(list1)\n    \n    # Check if the indices are within range\n    if m < 0 or m >= length or n < 0 or n >= length:\n        return \"Invalid indices\"\n    \n    # Calculate the sum of the numbers in the range\n    sum = sum(list1[m:n+1])\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the half perimeter of the pentagon using Heron's formula\n    h = (a + math.sqrt(3)*a**2) / 2\n    # Return the perimeter of the pentagon using the formula for a right triangle\n    return 5*h"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a + 5 * math.sqrt(3)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # finding the area of a regular pentagon\n    area = (5/2) * math.pow(a, 2)\n    # finding the perimeter of the polygon\n    perimeter = 5 * a\n    # returning the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    "
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' or char == 'd' or char == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    \n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # create an empty list to store all data types\n    data_types = []\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # if element is a list or tuple, recursively call the function to check its data type\n        if type(element) == list or type(element) == tuple:\n            data_types.append(check_type(element))\n        # if element is not a list or tuple, append its data type to the list\n        else:\n            data_types.append(type(element))\n    # return True if all the elements in the tuple have same data type, False otherwise\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is empty or not\n    if len(test_tuple) == 0:\n        return \"Tuple is empty\"\n    \n    # initialize variable to store the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # iterate through the rest of the tuple elements\n    for element in test_tuple[1:]:\n        # check if the data type of the current element is same as the first element\n        if not isinstance(element, type(first_element)):\n            return \"All elements in the tuple should have same data type\"\n    \n    # if all the elements in the tuple have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set([type(i) for i in test_tuple])\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize count variable to keep count of unique data types\n    count = 0\n    # loop through each element in tuple\n    for item in test_tuple:\n        # check if the type of the current element is the same as the type of the first element in the tuple\n        if type(item) == type(test_tuple[0]):\n            count += 1\n        else:\n            # if the types are not the same, return False since the data types in the tuple are not the same\n            return False\n    # if the loop completes without returning False, then all the elements in the tuple have the same data type\n    if count == len(test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_tuple)\n\n    # get the first element in the list\n    first_element = test_list[0]\n\n    # loop through the list and compare the data type of each element to the first element\n    for element in test_list:\n        if not isinstance(element, type(first_element)):\n            # if any element is of different data type, return False\n            return False\n\n    # if all the elements are of same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n    for element in test_tuple:\n        data_types.add(type(element).__name__)\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element in the tuple\n    first_element = test_tuple[0]\n    # get the data type of the first element\n    data_type = type(first_element)\n    # loop through the rest of the tuple elements\n    for element in test_tuple[1:]:\n        # check if the element data type is the same as the first element data type\n        if type(element)!= data_type:\n            # if not, return False\n            return False\n    # if all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n\n    # initialize a set to store the data types of all elements in the tuple\n    data_types = set()\n\n    # iterate through each element in the tuple and add its data type to the set\n    for element in test_tuple:\n        data_types.add(type(element).__name__)\n\n    # check if the set has only one element - if so, all elements in the tuple have the same data type\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # create a set of data types to store all the unique data types in the tuple\n    data_types = set()\n    # iterate through the tuple elements and add the data type to the set\n    for element in test_tuple:\n        data_types.add(type(element).__name__)\n    # check if the length of the set is 1, i.e., all elements in the tuple have same data type\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count of x to zero\n    count = 0\n    # Initialize the current element to x\n    curr_elem = x\n    # Initialize the left pointer to zero\n    left = 0\n    # Initialize the right pointer to n-1\n    right = n-1\n    # Loop through the array\n    while left <= right:\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n        # Check if the element at the midpoint is equal to x\n        if arr[mid] == x:\n            # If the count is zero, set the count to 1 and continue\n            if count == 0:\n                count = 1\n                curr_elem = x\n                continue\n            # Otherwise, check if the count is greater than n/2\n            elif count > n // 2:\n                # If it is, return True\n                return True\n            # Otherwise, decrement the count and update the current element\n            else:\n                count -= 1\n                curr_elem = x\n        # If the element at the midpoint is less than x, update the left pointer\n        elif arr[mid] < x:\n            left = mid + 1\n        # Otherwise, update the right pointer\n        else:\n            right = mid - 1\n    # If the count is zero, return False\n    if count == 0:\n        return False\n    # Otherwise, return True\n    else:\n        return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count of occurrences of x to 0\n    count = 0\n\n    # Iterate through the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than n/2, return True\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        n = n & (n - 1)  # clears the least significant bit set to 1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n % 2 == 1: \n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        n &= (n-1) # clear the least significant bit set to 1\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        n (int): The number to count the set bits in.\n\n    Returns:\n        int: The number of set bits in n.\n\n    Example:\n        >>> count_Set_Bits(13)\n        4\n\n        >>> count_Set_Bits(7)\n        3\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the characters which have odd index values.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create a list of indices of odd values in the string\n    indices = [i for i, x in enumerate(str) if x % 2!= 0]\n    # iterate through the indices and remove the characters from the string\n    for i in indices[::-1]:\n        str = str[:i] + str[i+1:]\n    return str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns their minimum value.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of those three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return 0\n    mask = 1 << n - 1\n    if (l & mask) == 0 and (r & mask) == 0:\n        return all_Bits_Set_In_The_Given_Range(n - 1, l, r)\n    else:\n        return 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Use a loop to iterate over each bit position of the given range\n    for i in range(l, r + 1):\n        # Check if the bit is set in the given number\n        if n & (1 << i):\n            # If it is set, return False immediately\n            return False\n\n    # If all the bits are unset in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check whether all bits are set in the given range\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            print(f\"{i}th bit is unset in the given range.\")\n            return False\n    # If all bits are unset in the given range\n    print(\"All bits are set in the given range.\")\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Check if the given range is valid or not\n    if l > r or l < 0 or r >= n:\n        return False\n\n    # Initialize a variable to store the count of set bits in the given range\n    count = 0\n\n    # Iterate through the given range and count the number of set bits\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n\n    # Check if the count of set bits in the given range is equal to n-1\n    return count == n - 1"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a boolean variable to check if all the bits are set or not\n    is_all_bits_set = True\n\n    # Iterate through each bit in the given range\n    for i in range(l, r+1):\n        # If the bit is set, set the boolean variable to False\n        if n & (1 << i):\n            is_all_bits_set = False\n            break\n\n    # Return the boolean value\n    return is_all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & i).count('1')!= len(bin(n & i)):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if n is a power of 2\n    if n & (n - 1)!= 0:\n        return \"n is not a power of 2\"\n\n    # initialize count of unset bits\n    count = 0\n\n    # iterate through all possible values of n\n    for i in range(l, r + 1):\n        if n & i == 0:\n            count += 1\n\n    # check if all the bits are unset in the given range\n    if count == n:\n        return \"All bits are set in the given range\"\n    else:\n        return \"Some bits are set in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters, n, l, and r. n is the integer number, \n    l is the lower bound of the range and r is the upper bound of the range.\n    This function returns True if all the bits are set in the given range, and False otherwise.\n    '''\n    # Convert the integer n to binary string using the bin() function\n    bin_n = bin(n)[2:]\n    # Check if the length of the binary string is less than the range\n    if len(bin_n) < r:\n        return False\n    # Initialize the count variable to 0\n    count = 0\n    # Iterate through the binary string from left to right\n    for i in range(len(bin_n)):\n        # If the binary digit is 1, increment the count by 1\n        if bin_n[i] == '1':\n            count += 1\n            # Check if the count is equal to the range length\n            if count == r:\n                return True\n    # If the loop completes without returning True, then all bits are unset in the given range\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l > r:\n        return True\n\n    i = l\n    while i <= r:\n        bit = n & (1 << i)\n        if bit!= 0:\n            return False\n        i += 1\n\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Step 1: Count the number of negative and positive elements\n    neg_count = sum(1 for num in arr[:n] if num < 0)\n    pos_count = sum(1 for num in arr[:n] if num >= 0)\n\n    # Step 2: Determine the position of the negative elements\n    neg_pos_map = {}\n    for i in range(n):\n        if arr[i] < 0:\n            neg_pos_map[arr[i]] = i\n\n    # Step 3: Determine the position of the positive elements\n    pos_start_index = n\n    for i in range(pos_count):\n        if i < neg_count:\n            pos_start_index += 1\n        else:\n            arr[pos_start_index] = arr[i]\n            pos_start_index += 1\n\n    # Step 4: Re-arrange the array based on the position map\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_pos_map[arr[i]]] = arr[neg_pos_map[arr[i]]], arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = 0\n    negative = 0\n    for i in range(n):\n        if arr[i] > 0:\n            positive += 1\n        elif arr[i] < 0:\n            negative += 1\n        else:\n            continue\n    \n    if negative > positive:\n        return \"Cannot re-arrange array\"\n    \n    for i in range(n):\n        if arr[i] > 0:\n            if negative > 0:\n                arr[i], arr[negative-1] = arr[negative-1], arr[i]\n                negative -= 1\n        else:\n            if positive > 0:\n                arr[i], arr[positive-1] = arr[positive-1], arr[i]\n                positive -= 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a list to store the negative elements\n    negatives = []\n    # Create a list to store the positive elements\n    positives = []\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is negative\n        if arr[i] < 0:\n            # Add it to the negative list\n            negatives.append(arr[i])\n        # If the current element is positive\n        else:\n            # Add it to the positive list\n            positives.append(arr[i])\n    # Combine the lists\n    combined = negatives + positives\n    # Shuffle the combined list\n    import random\n    random.shuffle(combined)\n    # Separate the negative and positive elements\n    negatives = combined[:n]\n    positives = combined[n:]\n    # Combine the negative and positive elements\n    result = negatives + positives\n    # Return the result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers for positive and negative elements\n    pos = 0\n    neg = 0\n\n    # iterate through the array and count the number of positive and negative elements\n    for i in range(n):\n        if arr[i] >= 0:\n            pos += 1\n        else:\n            neg += 1\n\n    # swap the first n elements with the first positive elements and the last n elements with the last negative elements\n    for i in range(n):\n        if pos > 0:\n            # swap with the first positive element\n            arr[i], arr[pos-1] = arr[pos-1], arr[i]\n            pos -= 1\n        else:\n            # swap with the last negative element\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    \n    # Counting the number of negative and positive elements in the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n            \n    # If the number of negative elements is less than the number of positive elements, swap the elements\n    if neg_count < pos_count:\n        for i in range(n):\n            if arr[i] < 0:\n                j = i+1\n                while j < n and arr[j] >= 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    j += 1\n            else:\n                break\n            \n    # If the number of negative elements is greater than the number of positive elements, swap the elements in reverse order\n    else:\n        for i in range(n-1, -1, -1):\n            if arr[i] < 0:\n                j = i+1\n                while j < n and arr[j] >= 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    j += 1\n            else:\n                break\n            \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n    \n    # Iterate through the array and append negative and positive elements to their respective lists\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    \n    # Concatenate the negative and positive lists into a single list\n    result = neg + pos\n    \n    # Iterate through the result list and reverse the order of negative and positive elements, if n is greater than the length of the original array\n    if n > len(arr):\n        for i in range(len(result)):\n            if i < n:\n                if isinstance(result[i], int):\n                    result[i] = -result[i]\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # create two empty lists to store the negative and positive elements\n    neg = []\n    pos = []\n    \n    # loop through the array and add elements to the appropriate list based on their sign\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    \n    # combine the negative and positive lists into one and sort it in descending order\n    sorted_list = neg + pos\n    sorted_list.sort(reverse=True)\n    \n    # re-arrange the array to start with the first n elements from the sorted list and move all the remaining elements to the end\n    arr[:n] = sorted_list[:n]\n    arr[n:] = sorted_list[n:]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two lists, one for negative elements and the other for positive elements\n    neg = []\n    pos = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n\n    # Sort the lists according to their absolute values\n    neg.sort(reverse=True)\n    pos.sort()\n\n    # Merge the two sorted lists and re-arrange the elements in the original array\n    i = 0\n    j = 0\n    for k in range(n):\n        if neg[i] < pos[j]:\n            arr[k] = neg[i]\n            i += 1\n        else:\n            arr[k] = pos[j]\n            j += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for num in arr:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n    negative.sort()\n    positive.sort()\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Count the number of negative and positive elements in the array\n    pos_count = sum(1 for x in arr if x > 0)\n    neg_count = sum(1 for x in arr if x < 0)\n\n    # If n is greater than the total number of elements, return the original array\n    if n > pos_count + neg_count:\n        return arr\n\n    # Initialize two lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Loop through the array and add elements to the appropriate list\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_list.append(arr[i])\n        else:\n            neg_list.append(arr[i])\n\n    # Combine the negative and positive lists into a single list\n    combined_list = neg_list + pos_list\n\n    # Shuffle the combined list\n    combined_list = shuffle(combined_list)\n\n    # Split the combined list into two equal parts\n    new_arr = combined_list[:n]\n    remain_arr = combined_list[n:]\n\n    # Combine the new and remaining arrays\n    new_arr += remain_arr\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace blank spaces with the character\n    str2 = str1.replace(\" \",char)\n    #return the string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Use a list comprehension to iterate through each character in the string\n    # Replace blank spaces with the specified character\n    new_str = ''.join([char if char!='' else str1[i] for i in range(len(str1))])\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ', char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create an empty list to store the n largest items\n    heap = []\n    \n    # Iterate through the input list and add each element to the heap\n    for item in list1:\n        heapq.heappush(heap, item)\n        \n        # If the heap size exceeds n, remove the smallest item\n        while len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Return the n largest items in the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []  # create an empty heap\n    for item in list1:\n        heapq.heappush(heap, item)  # add each item to the heap\n    \n    result = []\n    while len(heap) > 0 and len(result) < n:\n        result.append(heapq.heappop(heap))  # pop and add the largest item to the result list\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    \n    # Convert list to a min-heap\n    for num in list1:\n        heapq.heappush(heap, -num)\n    \n    # Pop the n largest elements from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n\n    return [num for num in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n\n    # Insert first n elements of the list into the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n\n    # Remove the smallest elements from the heap and add the next n elements\n    for i in range(n, len(list1)):\n        heapq.heappushpop(heap, list1[i])\n\n    # Return the largest n elements from the heap\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n to store the n largest items from the list\n    min_heap = []\n    for i in range(n):\n        if list1[i] > min_heap[0]:\n            heapq.heappushpop(min_heap, -list1[i])\n        else:\n            heapq.heappush(min_heap, -list1[i])\n    \n    # Convert the min heap to a regular list\n    result = []\n    while min_heap:\n        result.append(-heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*pi*(r**2)*h\n    print(\"The lateral surface area of a cylinder with radius r =\",r,\"and height h =\",h,\"is:\",area)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    return 2*3.14159*(r**2)+(2*r*h)+(2*h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # calculate the lateral surface area of the cylinder\n    lateral_area = 2 * r * h\n\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the area of the lateral surface\n    area = math.pi*(r**2)+(2*math.pi*r*h)\n    \n    # return the area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h\n    print(\"The lateral surface area of the cylinder is: \", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    surface_area = 2 * r * h\n    print(\"The lateral surface area of the cylinder is:\", surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = math.pi\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r * h * 3.14"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # return the cube of the side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to keep track of the even bits\n    even_bits = 0\n\n    # Iterate over each bit of the given number\n    for i in range(32):\n        # Check if the i-th bit is even\n        if (n & (1 << i))!= 0:\n            # If it is, set the i-th bit of the even_bits variable\n            even_bits |= (1 << i)\n\n    # Return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    # Initialize an empty list to store the even bits of the number\n    even_bits = []\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and check if it's even\n        if int(char) % 2 == 0:\n            # If it's even, add it to the list of even bits\n            even_bits.append(int(char))\n    # Convert the list of even bits to a string and add it to the end of the original number\n    even_bits_str = str(even_bits)\n    result = num_str + even_bits_str\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of the operation\n    result = 0\n    \n    # Iterate through each bit in the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the corresponding bit in the result to 1\n        if bit == '0':\n            result |= 1 << int(bit)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, append '1' to the result string\n        if int(bit) % 2 == 0:\n            result += '1'\n        else:\n            result += '0'\n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate through the binary string and check if each bit is even or not\n    for bit in binary:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            result += '0'\n        else:\n            result += '1'\n    # Convert the binary string to an integer and return the result\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the result bit to 1\n        if int(bit) == 0:\n            result |= (1 << int(bit))\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    \n    # loop through each bit of the given number\n    for i in range(32):\n        # check if the i-th bit of the given number is even\n        if (n >> i) & 1 == 0:\n            # if it's even, set the i-th bit of the result to 1\n            result |= 1 << i\n    \n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize the result as 0\n    result = 0\n\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]: \n        # Check if the bit is even\n        if int(bit) == 0:\n            # If it's even, set the corresponding bit of the result to 1\n            result |= 1 << int(bit)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number with even bits set\n    even_n = 0\n    \n    # Loop through each bit of the given number and set it to 1 if it is even\n    for i in range(32):\n        if (n & (1 << i))!= 0:\n            even_n |= 1 << i\n    \n    # Return the even number with even bits set\n    return even_n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    count_dict = {}\n\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n\n    # Return the dictionary of counts\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Counter object to count the occurrences of each tuple\n    count_obj = Counter(test_list)\n\n    # Return the dictionary with the count of each tuple\n    return dict(count_obj)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # iterate over the list of tuples\n    for tup in test_list:\n\n        # check if the tuple already exists in the dictionary\n        if tup in count_dict:\n\n            # increment the count if it does\n            count_dict[tup] += 1\n\n        # if the tuple does not exist, add it to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # return the dictionary with the count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    unique_tuples = set(tuple(i) for i in test_list)\n    counter = Counter(unique_tuples)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    counts = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in counts:\n            # If it is, increment the count by 1\n            counts[tup] += 1\n        else:\n            # If not, add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if substr and len(substr) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n\n    # loop through all possible substrings of length i+1\n    for i in range(n+1):\n        # if the substring is non-empty, count it\n        if i > 0 and str[i-1]!='':\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    n = len(str)\n\n    for i in range(n): \n        for j in range(i, n): \n            substring = str[i:j+1]\n            if substring and substring.strip(): \n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize an empty list to store the substrings\n    substrings = []\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is not a whitespace character\n        if str[i]!='' and str[i]!= '\\t' and str[i]!= '\\n' and str[i]!= '\\r':\n            # Initialize an empty substring to store the characters in the substring\n            substring = ''\n            # Loop through each subsequent character in the string\n            for j in range(i+1, len(str)+1):\n                # Check if the current character is not a whitespace character\n                if str[j-1]!='' and str[j-1]!= '\\t' and str[j-1]!= '\\n' and str[j-1]!= '\\r':\n                    # Append the current character to the substring\n                    substring += str[j-1]\n                else:\n                    # If the current character is a whitespace character, break out of the loop\n                    break\n            # If the length of the substring is greater than 0, add it to the list of substrings\n            if len(substring) > 0:\n                substrings.append(substring)\n\n    # Return the number of non-empty substrings\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    sequence = []\n    sequence.append(2)\n    for i in range(2, n+1):\n        if sequence[-1] + sequence[-2] <= m:\n            sequence.append(sequence[-1] + sequence[-2])\n            if len(sequence) == n:\n                total_sequences += 1\n        else:\n            sequence.append(max(sequence[-1] - 1, 2))\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def is_valid(seq, prev_elem, curr_elem, n):\n        if len(seq) == n:\n            return True\n        if curr_elem < prev_elem * 2 or curr_elem > m:\n            return False\n        return is_valid(seq + [curr_elem], curr_elem, prev_elem, n)\n\n    count = 0\n    prev_elem = 1\n    curr_elem = 2\n    while curr_elem <= m:\n        seq = [prev_elem]\n        if is_valid(seq, prev_elem, curr_elem, n):\n            count += 1\n        prev_elem = curr_elem\n        curr_elem = prev_elem + 2\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 3:\n        return 0\n    total = 1\n    prev = 2\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            total *= (i//2)\n        else:\n            total *= (i//2) + 1\n        total //= (m-i)\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        temp = m + (i+1) * (i+1)\n        if temp < m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, m + 1):\n        if (i * 2) <= m:\n            count += get_total_number_of_sequences(i, n - 1)\n    return count\n\n\nm = int(input(\"Enter a positive integer: \"))\nn = int(input(\"Enter a positive integer: \"))\n\nprint(\"The total number of sequences of length\", n, \"is:\", get_total_number_of_sequences(m, n))"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    sequence = [1]\n    while len(sequence) < n:\n        if sequence[-1] >= 2*sequence[-2] and sequence[-1] <= m:\n            sequence.append(sequence[-1]+1)\n            count += 1\n        else:\n            sequence.pop()\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # initialize the total number of sequences to 0\n    total_sequences = 0\n\n    # loop through each length n from 1 to m\n    for i in range(1,m+1):\n\n        # loop through each length n-1 from 1 to i-1\n        for j in range(1,i):\n\n            # calculate the sum of the jth element and all previous elements\n            current_sum = j\n\n            # loop through each previous element from i-1 to j-1\n            for k in range(j-1,i-1):\n\n                # if the current element is greater than or equal to twice the previous element but less than or equal to m, add it to the current sum\n                if k*2 <= m and k*2+1 <= m:\n                    current_sum += k*2\n\n            # if the current sum is greater than or equal to n, add it to the total number of sequences\n            if current_sum >= n:\n                total_sequences += 1\n\n    # return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    for i in range(1,m+1):\n        if i>=2*total_sequences and i<=m:\n            total_sequences+=1\n            if total_sequences==n:\n                return total_sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # initialize the number of sequences to zero\n    num_sequences = 0\n    \n    # loop through each number from m to n-1\n    for i in range(m, n):\n        \n        # check if the current number is greater than or equal to twice the previous number and less than or equal to m\n        if i >= 2*m and i <= m:\n            \n            # if the current number meets the condition, increment the number of sequences by 1\n            num_sequences += 1\n            \n    # return the total number of sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = float('-inf')\n    for i in range(m, 0, -1):\n        if i % 2 == 0 and i >= 2 * prev <= m:\n            count += 1\n        prev = i\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        raise ValueError('List 2 must be longer than list 1')\n    \n    list1.pop()\n    for element in list2:\n        list1.append(element)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2 = list2[1:]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the lengths of the two lists are equal\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists, replaces the last element of the first list with the elements of the second list, and returns the resulting list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        return list1[:-1] + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    for item in list2:\n        list1.append(item)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length1 = len(list1)\n    # Get the last element of the first list\n    last_element1 = list1[length1-1]\n    # Add the elements of the second list to the last element of the first list\n    list1[length1-1] = list1[length1-1] + list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # get the length of the first list\n    length = len(list1)\n    # loop through the list1 from the second to the last element\n    for i in range(length-1, -1, -1):\n        list1[i] = list2[0]\n        # shift the list2 to the left\n        del list2[0]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # If the length of the second list is less than the length of the first list, append all the elements of the second list to the first list\n    if len(list2) < len(list1):\n        list1.extend(list2)\n\n    # If the length of the second list is equal to or greater than the length of the first list, replace the last element of the first list with the elements of the second list\n    else:\n        list1[-1] = list2\n\n    # Return the modified first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n\n    Args:\n    list1 (list): The first list to replace.\n    list2 (list): The list to use as the replacement.\n\n    Returns:\n    None\n    \"\"\"\n    # Check if the second list is empty\n    if not list2:\n        return\n\n    # Remove the last element from the first list\n    last_element = list1.pop()\n\n    # Append the elements from the second list to the first list\n    list1.extend(list2)\n\n    # Add the last element back to the first list\n    list1.append(last_element)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    total_chars = len(str1)\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for char in str1:\n        total_chars += 1\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes in a number N as input and returns the next perfect square greater than N.\n    '''\n    # function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    # find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # check if the square root is a perfect square\n    if is_perfect_square(sqrt_N):\n        sqrt_N += 1\n\n    # find the next perfect square\n    next_square = 4 * sqrt_N ** 2\n\n    # return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_prime(N):\n        i = N+1\n        while not is_prime(i):\n            i += 1\n        return i\n    \n    def is_next_prime_square(N):\n        i = next_prime(N)\n        while not is_prime(i):\n            i = next_prime(i)\n        return i*i == N\n    \n    i = N+1\n    while not is_next_prime_square(i):\n        i += 1\n    \n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        return num == int(num**0.5 + 0.5)**2\n\n    def is_greater_than_N(num):\n        return num > N\n\n    def next_square(num):\n        square = num**2\n        while square < N or not is_perfect_square(square):\n            square += 1\n        return square\n\n    def next_greater_square(num):\n        square = num**2\n        while square < N or not is_perfect_square(square):\n            square += 1\n        while not is_greater_than_N(square):\n            square += 1\n        return square\n\n    return next_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N <= 1:\n        return 2\n\n    if N % 4 == 0:\n        return N + 2\n\n    N = int(math.sqrt(N))\n    N += 1\n\n    while True:\n        N *= 2\n        if N > N:\n            return 1 << 31"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n    next_sqrt_N = int(math.sqrt(sqrt_N))\n    while next_sqrt_N ** 2 <= N:\n        sqrt_N = next_sqrt_N\n        next_sqrt_N += 1\n    return sqrt_N ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if the given number is already a perfect square\n    if math.sqrt(N) ** 2 == N:\n        # If it is, then return the largest number less than or equal to the given number\n        return max(int(i) ** 2 for i in range(int(math.sqrt(N)), N))\n    else:\n        # If not, then find the next perfect square greater than the given number\n        while True:\n            N += 1\n            if math.sqrt(N) ** 2 == N:\n                return int(math.sqrt(N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = N\n    while True:\n        num *= 10\n        num = int(num)\n        num = math.sqrt(2*num+1)\n        if num > N:\n            return num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    root = int(math.sqrt(N))\n    while root ** 2 <= N:\n        root += 1\n    return root ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return math.sqrt(num) == int(math.sqrt(num))\n\n    def is_next_square(num):\n        return is_prime(num+2) and is_square(num+2)\n\n    count = 0\n    next_num = N + 2\n    while not is_next_square(next_num):\n        count += 1\n        next_num += 2\n\n    return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if N is a perfect square\n    if (int(math.sqrt(N)) * int(math.sqrt(N)) == N):\n        # If N is a perfect square, check if it's greater than the square root of N\n        if int(math.sqrt(N)) < N:\n            # If it's greater than the square root of N, then find the next perfect square greater than the square root of N\n            next_square = int(math.sqrt(N)) + 1\n        else:\n            # If it's less than the square root of N, then find the next perfect square greater than the square root of N - 1\n            next_square = int(math.sqrt(N)) - 1\n\n        # Check if the next perfect square is less than the square root of N + 1\n        while (int(math.sqrt(next_square)) * int(math.sqrt(next_square)) < N + 1):\n            next_square += 1\n\n        # If the next perfect square is less than the square root of N + 1, then return the next perfect square\n        if (int(math.sqrt(next_square)) * int(math.sqrt(next_square)) == N + 1):\n            return next_square\n        else:\n            # If the next perfect square is greater than the square root of N + 1, then find the next perfect square less than the square root of N + 1\n            next_square = int(math.sqrt(N + 1))\n            while (int(math.sqrt(next_square)) * int(math.sqrt(next_square)) >= N + 1):\n                next_square -= 1\n\n            # Return the next perfect square\n            return next_square\n\n    # If N is not a perfect square, then return the square root of N + 1\n    return int(math.sqrt(N + 1))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    # check if array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n\n    # initialize the maximum sum with the first element\n    max_sum = arr[0]\n\n    # iterate over the array from second to last\n    for i in range(1, len(arr) - 1):\n        # check if the current element is decreasing and the next one is increasing\n        if arr[i] < arr[i + 1] and arr[i + 1] < arr[i - 1]:\n            # calculate the maximum sum for this subsequence\n            sub_sum = 0\n            for j in range(i, len(arr) - 1):\n                sub_sum += arr[j]\n            # update the maximum sum if necessary\n            max_sum = max(max_sum, sub_sum)\n\n    # return the maximum sum found\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize the variables for the first and last elements of the array\n    first = arr[0]\n    last = arr[n-1]\n    # Initialize the variables for the maximum sum and the maximum sum ending at the last element\n    max_ending_at_last = first\n    max_sum_ending_at_last = first\n    # Initialize the variables for the maximum sum and the maximum sum ending at the second last element\n    max_ending_at_second_last = first\n    max_sum_ending_at_second_last = first\n    # Loop through the array and find the maximum sum ending at each element\n    for i in range(1, n-1):\n        # Check if the element is increasing\n        if arr[i] > arr[i-1]:\n            # Check if the maximum sum ending at the last element is greater than the sum of the current element and the last element\n            if max_ending_at_last > arr[i] + last:\n                max_ending_at_last = arr[i] + last\n                max_sum_ending_at_last = arr[i] + last\n            # Check if the maximum sum ending at the second last element is greater than the sum of the current element and the second last element\n            if max_ending_at_second_last > arr[i] + arr[i-1]:\n                max_ending_at_second_last = arr[i] + arr[i-1]\n                max_sum_ending_at_second_last = arr[i] + arr[i-1]\n    # Return the maximum sum ending at the last element\n    return max_sum_ending_at_last"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum = float('-inf')\n    min_sum = float('inf')\n    current_sum = 0\n    bitonic = False\n    \n    for i in range(n):\n        if bitonic and arr[i] < arr[i-1]:\n            current_sum += arr[i]\n        elif not bitonic and arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n            bitonic = True\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        if current_sum < min_sum:\n            min_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return None\n    \n    # Initialize variables for the left and right subarrays\n    left = [float('-inf')] * n\n    right = [float('-inf')] * n\n    \n    # Initialize variables for the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Traverse the array from left to right and update the left and right subarrays\n    for i in range(n):\n        curr_sum += arr[i]\n        left[i] = max(curr_sum, left[i])\n        \n    # Traverse the array from right to left and update the right subarray\n    for i in range(n-2, -1, -1):\n        curr_sum -= arr[i]\n        right[i] = max(curr_sum, right[i])\n        \n    # Traverse the left and right subarrays and update the maximum subarray sum\n    for i in range(n):\n        curr_sum = max(left[i], right[i])\n        max_sum = max(curr_sum, max_sum)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum_bitonic = max_sum_decreasing = float('-inf')\n    for i in range(n):\n        if i % 2 == 0:\n            max_sum_bitonic = max(max_sum_bitonic, max_sum_decreasing + arr[i])\n        else:\n            max_sum_decreasing = max(max_sum_decreasing, max_sum_bitonic + arr[i])\n    return max_sum_bitonic\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    max_sum = float('-inf')\n    prev_diff = float('-inf')\n\n    for i in range(n):\n        if i == 0 or (arr[i] < arr[i - 1] and prev_diff < 0):\n            max_sum = max(max_sum, arr[i])\n            prev_diff = 0\n        elif i == n - 1 or (arr[i] > arr[i + 1] and prev_diff > 0):\n            max_sum = max(max_sum, arr[i])\n            prev_diff = 0\n        else:\n            prev_diff = arr[i] - arr[i - 1]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    max_sum = arr[0]\n    current_sum = arr[0]\n    \n    # Loop through the array from the second element to the last element\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            current_sum += arr[i]\n        else:\n            current_sum = arr[i]\n            \n        # Update the maximum sum if the current sum is greater than the maximum sum so far\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        left_max = max_sum(arr[:n//2])\n        right_max = max_sum(arr[n//2:])\n        return max(arr[0] + left_max, arr[n-1] + right_max, left_max + right_max)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 2:\n        return max(arr)\n    else:\n        # check for increasing subsequence\n        increasing = True\n        for i in range(n-1):\n            if arr[i] >= arr[i+1]:\n                increasing = False\n                break\n        if increasing:\n            return max(arr)\n        else:\n            # check for decreasing subsequence\n            decreasing = True\n            for i in range(n-1):\n                if arr[i] <= arr[i+1]:\n                    decreasing = False\n                    break\n            if decreasing:\n                return max(arr)\n            else:\n                # check for increasing and decreasing subsequences\n                increasing_decreasing = True\n                for i in range(n-2):\n                    if arr[i] > arr[i+1] and arr[i+1] > arr[i+2]:\n                        increasing_decreasing = False\n                        break\n                if increasing_decreasing:\n                    return max(arr)\n                else:\n                    # check for decreasing and increasing subsequences\n                    decreasing_increasing = True\n                    for i in range(n-2):\n                        if arr[i] < arr[i+1] and arr[i+1] < arr[i+2]:\n                            decreasing_increasing = False\n                            break\n                    if decreasing_increasing:\n                        return max(arr)\n                    else:\n                        # check for increasing, decreasing and increasing subsequences\n                        increasing_decreasing_increasing = True\n                        for i in range(n-3):\n                            if arr[i] > arr[i+1] > arr[i+2] and arr[i+1] > arr[i+3] and arr[i+2] > arr[i+3]:\n                                increasing_decreasing_increasing = False\n                                break\n                        if increasing_decreasing_increasing:\n                            return max(arr)\n                        else:\n                            # check for decreasing, increasing and increasing subsequences\n                            decreasing_increasing_increasing = True\n                            for i in range(n-3):\n                                if arr[i] < arr[i+1] < arr[i+2] and arr[i+1] < arr[i+3] and arr[i+2] < arr[i+3]:\n                                    decreasing_increasing_increasing = False\n                                    break\n                            if decreasing_increasing_increasing:\n                                return max(arr)\n                            else:\n                                # check for increasing, decreasing, and increasing subsequences\n                                increasing_decreasing_increasing_increasing = True\n                                for i in range(n-4):\n                                    if arr[i] > arr[i+1] > arr[i+2] > arr[i+3] and arr[i+1] > arr[i+4] and arr[i+2] > arr[i+4] and arr[i+3] > arr[i+4]:\n                                        increasing_decreasing_increasing_increasing = False\n                                        break\n                                if increasing_decreasing_increasing_increasing:\n                                    return max(arr)\n                                else:\n                                    # check for decreasing, increasing, and increasing subsequences\n                                    decreasing_increasing_increasing_increasing = True\n                                    for i in range(n-4):\n                                        if arr[i] < arr[i+1] < arr[i+2] < arr[i+3] and arr[i+1] < arr[i+4] and arr[i+2] < arr[i+4] and arr[i+3] < arr[i+4]:\n                                            decreasing_increasing_increasing_increasing = False\n                                            break\n                                    if decreasing_increasing_increasing_increasing:\n                                        return max(arr)\n                                    else:\n                                        # check for increasing, decreasing, decreasing and increasing subsequences\n                                        increasing_decreasing_decreasing_increasing = True\n                                        for i in range(n-5):\n                                            if arr[i] > arr[i+1] > arr[i+2] > arr[i+3] > arr[i+4] and arr[i+1] > arr[i+5] and arr[i+2] > arr[i+5] and arr[i+3] > arr[i+5] and arr[i+4] > arr[i+5]:\n                                                increasing_decreasing_decreasing_increasing = False\n                                                break\n                                        if increasing_decreasing_decreasing_increasing:\n                                            return max(arr)\n                                        else:\n                                            # check for decreasing, increasing, decreasing and increasing subsequences\n                                            decreasing_increasing_decreasing_increasing = True\n                                            for"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize two variables to store the maximum sum of subsequences\n    # up to the current index and the maximum sum of subsequences\n    # ending at the previous index.\n    # These variables will be used to calculate the maximum sum of the\n    # subsequence for the current index.\n    up, down = float('-inf'), float('-inf')\n\n    # Initialize an array to store the maximum sum of the subsequence\n    # for each index. This array will be used to calculate the maximum\n    # sum of the subsequence for the entire array.\n    max_sum_arr = [0] * n\n\n    # Calculate the maximum sum of the subsequence up to each index.\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            up = max(up + arr[i], down)\n        else:\n            down = max(up, down + arr[i])\n        max_sum_arr[i] = up\n\n    # Calculate the maximum sum of the entire array using the\n    # max_sum_arr array and the first element of the array.\n    max_sum = max_sum_arr[1]\n\n    # Find the index of the maximum sum in the max_sum_arr array.\n    max_sum_index = max_sum_arr.index(max_sum)\n\n    # Calculate the maximum sum of the subsequence ending at the\n    # maximum sum index.\n    max_sum_ending_at_max_sum = 0\n    for i in range(max_sum_index - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            max_sum_ending_at_max_sum = max(max_sum_ending_at_max_sum, up)\n            up = max(up + arr[i], down)\n        else:\n            max_sum_ending_at_max_sum = max(max_sum_ending_at_max_sum, down)\n            down = max(up, down + arr[i])\n    max_sum_ending_at_max_sum = max(max_sum_ending_at_max_sum, down)\n\n    # Return the maximum sum of the entire array.\n    return max(max_sum, max_sum_ending_at_max_sum)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    x = 1.0\n    y = number / x\n    n = 1\n    m = 2\n\n    # Iterate until the difference between x and y is less than a small tolerance\n    while abs(x - y) > 0.000001:\n        # Update the values of x and y\n        x = y\n        y = number / x\n        # Update the iteration count and tolerance\n        n += 1\n        m += 2\n\n    # Return the square root and the number of iterations\n    return x, n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 0\n    x1 = number / 2\n    xn = 0\n\n    while abs(xn - x0) > 0.0001:\n        xn = 0.5 * (x0 + x1)\n        x0 = x1\n        x1 = xn\n\n    return xn"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Convert the input number to a float to allow for decimal points in the input\n    number = float(number)\n    # Initialize variables for the current approximation and the difference between the original number and the approximation\n    current_approximation = number / 2.0\n    difference = abs(number - current_approximation)\n    # Loop until the difference between the original number and the approximation is less than a certain tolerance\n    while difference > 1e-10:\n        # Compute the next approximation by adding the original number divided by the difference\n        next_approximation = (number / current_approximation) + number\n        # Update the current approximation and the difference between the original number and the approximation\n        current_approximation = next_approximation\n        difference = abs(number - current_approximation)\n    # Return the final approximation\n    return current_approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        guess_square = guess * guess\n        if guess_square == number:\n            break\n        if guess_square > number:\n            guess -= (guess_square - number) / (2 * guess)\n        else:\n            guess += (number - guess_square) / (2 * guess)\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    y = (number + x / number) / 2.0\n    while abs(y - x) > 1e-10:\n        x = y\n        y = (number + x / number) / 2.0\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    x = 1\n    y = number / x\n\n    while abs(x - y) > 0.000001:\n        x = y\n        y = (number / x) + (number / x)\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number / 2\n    y = x\n    \n    # loop until the absolute difference between x and y is less than or equal to the epsilon value\n    while abs(x - y) > 1e-15:\n        x = (x + y) / 2\n        y = number / x\n    \n    # return the final value of x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0.5 * (number + number ** 0.5)\n    while True:\n        if abs(root ** 2 - number) < 1e-6:\n            break\n        root += number / root\n    return root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number / 2\n    y = 1\n    z = 0\n    count = 0\n\n    # loop until the difference between x and y is below a certain threshold\n    while abs(x - y) > 0.000001:\n        # compute the new approximation\n        z = (x + y) / 2\n        count += 1\n        # update x and y\n        x = y\n        y = z\n\n    # print the result\n    print(\"Number of iterations:\", count)\n    print(\"Approximation:\", z)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \n    This method is an iterative method that uses the Babylonian method to find\n    the square root of a number. The idea is to start with an initial estimate\n    for the square root and then compute the next estimate by multiplying the\n    current estimate by 0.5.\n    \n    The algorithm converges very quickly for well-behaved input values. It\n    takes O(log n) time for each iteration, but eventually converges to a\n    very accurate approximation of the square root.\n    \n    Args:\n    number (float): the number for which to compute the square root\n    \n    Returns:\n    float: the square root of the input number\n    \"\"\"\n    \n    # check if the number is negative\n    if number < 0:\n        raise ValueError(\"The input number must be non-negative\")\n    \n    # initialize the initial estimate for the square root\n    x = number / 2\n    \n    # compute the square root by iterating the Babylonian method\n    while abs(x*x - number) > 1e-12:\n        x = (x + number / x) / 2\n    \n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    lps_arr = [0] * n\n\n    # Compute the length of the longest palindromic subsequence for all prefixes of the string\n    for i in range(1, n):\n        # If the current character is same as the previous character, expand the palindrome\n        if str[i] == str[i - 1]:\n            lps_arr[i] = lps_arr[i - 1] + 2\n        # If the current character is different from the previous character, check if it can be part of a palindrome\n        else:\n            # If it can be part of a palindrome, expand the palindrome by one more character\n            if lps_arr[i - 1] > 0:\n                lps_arr[i] = lps_arr[i - 1] + 2\n            # If it can't be part of a palindrome, expand the palindrome by one character\n            else:\n                lps_arr[i] = 1\n\n    # Return the length of the longest palindromic subsequence\n    return lps_arr[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(string):\n    n = len(string)\n    lps_length = 1\n    max_length = 1\n\n    # Calculate length of the LPS for odd length strings\n    for i in range(1, n, 2):\n        if string[i] == string[i - lps_length]:\n            lps_length += 1\n        else:\n            lps_length = 1\n\n        if lps_length > max_length:\n            max_length = lps_length\n\n    # Calculate length of the LPS for even length strings\n    for i in range(0, n - 1, 2):\n        if string[i] == string[i + 1]:\n            lps_length += 2\n        else:\n            lps_length = 1\n\n        if lps_length > max_length:\n            max_length = lps_length\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Convert the string to a set to avoid duplicates\n    s = set(s)\n\n    # Initialize the longest palindromic subsequence length and start index\n    lps_length = 0\n    start_index = 0\n\n    # Iterate over each character in the string\n    for i, char in enumerate(s):\n        # Compute the length of the longest palindromic subsequence ending at the current character\n        # by finding the length of the longest palindromic subsequence ending at the previous character\n        # and extending it with the current character\n        prev_length = lps_length\n\n        # If the current character is the first character in the string,\n        # or if the previous character and the current character are the same,\n        # then the longest palindromic subsequence length is simply 1\n        if i == 0 or s[i - 1] == char:\n            lps_length = 1\n\n        # If the current character is the last character in the string,\n        # or if the current character and the next character are the same,\n        # then the longest palindromic subsequence length is the maximum of 1 (for the current character)\n        # and the length of the longest palindromic subsequence ending at the previous character\n        elif i == len(s) - 1 or s[i + 1] == char:\n            lps_length = max(lps_length, prev_length + 1)\n\n        # If the current character is not the first or last character in the string,\n        # then the longest palindromic subsequence length is the maximum of the length of the longest palindromic subsequence ending at the previous character\n        # and the length of the longest palindromic subsequence ending at the previous character plus 1 (for the current character)\n        else:\n            lps_length = max(lps_length, prev_length + 1)\n\n        # Update the start index if the longest palindromic subsequence length has increased\n        if lps_length > start_index:\n            start_index = i\n\n    # Return the longest palindromic subsequence length and start index\n    return lps_length, start_index"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str)\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each index\n    dp = [[0]*n for i in range(n)]\n\n    # base case: if the string is empty or has only one character, it is a palindrome\n    if n == 0 or n == 1:\n        return n\n\n    # fill the dp array using dynamic programming\n    for i in range(n):\n        for j in range(i, n):\n            # if the characters at i and j are the same, then the subsequence is of length 2 + the length of the longest palindromic subsequence ending at i and j-1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            # if the characters at i and j are not the same, then the subsequence is either of length 2 + the length of the longest palindromic subsequence ending at i or the length of the longest palindromic subsequence ending at j\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # return the length of the longest palindromic subsequence ending at the last index\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # create a 2D array to store the length of the longest palindromic subsequence for each substring of the input string\n    dp = [[0] * (len(str) + 1) for i in range(len(str) + 1)]\n\n    # initialize the first row and first column of the array to 1\n    for i in range(1, len(str) + 1):\n        dp[i][i] = 1\n\n    # fill in the rest of the array using the formula for LPS\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # return the length of the longest palindromic subsequence\n    return dp[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D table to store lengths of palindromic subsequences of substrings of length 1 to n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    # initialize first row and first column\n    for i in range(n + 1):\n        dp[i][i] = 1\n    # fill in the rest of the table\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    # return the length of the longest palindromic subsequence\n    return dp[0][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    # Table to store the length of the longest palindromic subsequence ending at index i \n    # for all indices i from 0 to n-1 \n    L = [1] * len(str)\n\n    # Length of the longest palindromic subsequence ending at index 0 \n    L[0] = 1\n\n    # Compute lengths of longest palindromic subsequences of all odd-indexed characters \n    for i in range(1, len(str), 2):\n        # If the current character is same as the next character then the length of the longest \n        # palindromic subsequence ending at index i is 2*L[i-1] \n        if str[i] == str[i+1]:\n            L[i] = 2 * L[i-1]\n\n    # Compute lengths of longest palindromic subsequences of all even-indexed characters \n    for i in range(2, len(str), 2):\n        # If the current character is same as the previous character then the length of the longest \n        # palindromic subsequence ending at index i is L[i-2] + 1\n        if str[i-1] == str[i]:\n            L[i] = L[i-2] + 1\n\n    # Return the length of the longest palindromic subsequence ending at index n-1 \n    return L[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Find the length of the longest palindrome substring\n    n = len(str)\n    palindromes = []\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                if i == j:\n                    palindromes.append((i, i))\n                else:\n                    palindromes.append((i, j))\n\n    # Find the length of the longest palindromic subsequence\n    lps_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the substring between i and j is a palindrome\n            is_palindrome = True\n            for k in range(i, j):\n                if str[k]!= str[j-1-k]:\n                    is_palindrome = False\n                    break\n            if is_palindrome:\n                lps_len = max(lps_len, j-i+1)\n\n    return lps_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def longest_palindrome_subsequence(string):\n    n = len(string)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            if string[i] == string[i]:\n                dp[i][i] = 1\n            else:\n                dp[i][i] = 0\n        for length in range(2, n+1):\n            for i in range(n-length+1):\n                j = i + length - 1\n                if string[i] == string[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in it.\n\n    Parameters:\n    s (str): A string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(s) < 2:\n        return len(s)\n    dp = [1] * len(s)\n    max_len = 1\n\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-1] + 2\n            max_len = max(max_len, dp[i])\n        else:\n            dp[i] = 1\n            for j in range(i-1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i] = max(dp[i], dp[j]+2)\n                    break\n            max_len = max(max_len, dp[i])\n\n    return max_len"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # calculate the sum of harmonics\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_harmonic = 0\n    for i in range(1, n):\n        sum_harmonic += 1 / i\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1/n\n    for i in range(1,n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_harmonic = 0\n    for i in range(1, n+1):\n        sum_harmonic += 1/i\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (2 * (n - 1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    '''\n    return sum(1 / i for i in range(1, n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_n = 0\n    for i in range(n-1):\n        sum_of_n += 1/i\n    return sum_of_n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create two dictionaries to store the frequency of each element in array_nums1 and array_nums2\n    freq1 = {}\n    freq2 = {}\n\n    # Iterate through array_nums1 and count the frequency of each element\n    for num in array_nums1:\n        if num in freq1:\n            freq1[num] += 1\n        else:\n            freq1[num] = 1\n\n    # Iterate through array_nums2 and count the frequency of each element\n    for num in array_nums2:\n        if num in freq2:\n            freq2[num] += 1\n        else:\n            freq2[num] = 1\n\n    # Create an empty list to store the intersection of the two dictionaries\n    intersection = []\n\n    # Iterate through the elements in freq1 and check if they are present in freq2\n    for num, count in freq1.items():\n        if num in freq2 and freq2[num] >= count:\n            intersection.append(num)\n            freq2[num] -= count\n\n    # Return the intersection of the two dictionaries\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersect_set = set1.intersection(set2)\n    return list(intersect_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each number in array_nums2\n    freq_dict = {}\n    for num in array_nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Find the intersection of the two arrays\n    intersection = []\n    for num in array_nums1:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two sets to store the unique values in each array\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Loop through each element in the first array\n    for num1 in array_nums1:\n        # Check if the element is present in the second array\n        if num1 in array_nums2:\n            # If it is, add it to the common set\n            common_set.add(num1)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize a set to store unique elements of array_nums2\n    unique_elements = set(array_nums2)\n    \n    # Initialize a list to store the intersection of array_nums1 and array_nums2\n    intersection_list = []\n    \n    # Loop through each element in array_nums1\n    for num1 in array_nums1:\n        # Check if the element is present in unique_elements\n        if num1 in unique_elements:\n            # If it is, add it to the intersection_list\n            intersection_list.append(num1)\n            # Remove the element from unique_elements to avoid duplicates\n            unique_elements.remove(num1)\n    \n    # Return the intersection_list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # create a dictionary to store the elements of array_nums1\n    element_dict = {}\n\n    # loop through the elements of array_nums1\n    for num in array_nums1:\n        # if the element is already in the dictionary, increment its count by 1\n        if num in element_dict:\n            element_dict[num] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            element_dict[num] = 1\n\n    # create an empty list to store the intersection\n    intersection = []\n\n    # loop through the elements of array_nums2\n    for num in array_nums2:\n        # if the element is in the dictionary and its count is 1, add it to the intersection list\n        if num in element_dict and element_dict[num] == 1:\n            intersection.append(num)\n            element_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Count the number of occurrences of x in the tuple tup.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Initialize an empty list to store the modified list\n    result = []\n    # Loop through each element in the original list\n    for i in range(len(lst)):\n        # Insert the element before each element in the list\n        result.append(elem)\n        result.append(lst[i])\n    # Return the modified list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    # create a new list to store the modified elements\n    new_list = []\n    \n    # loop through each element in the list\n    for i in range(len(list)):\n        # insert the element before the current element in the list\n        new_list.insert(i, element)\n        \n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, elem):\n    '''\n    Given a list and an element, this function inserts the element before each element in the list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(elem)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        theta = cmath.phase(number) # Get the angle of the complex number\n        mag = abs(number) # Get the magnitude of the complex number\n        \n        # Print the polar coordinates of the complex number\n        print(\"(%.2f, %.2f)\" % (theta, mag))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_numbers.append(cmath.rect(float(number)))\n    return complex_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        arg = cmath.phase(complex(real, imag))\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        print(f\"({real}, {imag}) -> ({magnitude}, {arg * 180 / cmath.pi}\u00b0)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_number = (modulus, angle)\n        yield polar_number"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        if imag == 0:\n            polar = cmath.rect(real)\n            result.append((abs(polar), 0))\n        else:\n            angle = cmath.phase(num)\n            polar = complex(real*cmath.cos(angle), real*cmath.sin(angle))\n            result.append((abs(polar), angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # loop through each number in the list\n    for num in numbers:\n        # extract the real and imaginary parts of the number\n        real = num.real\n        imag = num.imag\n        \n        # calculate the magnitude and angle of the number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        \n        # convert the magnitude and angle to polar coordinates\n        r = magnitude * cmath.exp(1j * angle)\n        \n        # print the converted number\n        print(r)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Add the polar coordinate to the list\n        polar_coordinates.append((r, theta))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of corresponding polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        polar_numbers.append((magnitude, angle))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        print(f\"({real}, {imag})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = num\n        polar_num = cmath.rect(real, imag)\n        result.append(polar_num)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as an input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a set to store all the possible combinations\n    all_combinations = set()\n\n    # iterate through all possible combinations of the list\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        all_combinations.add(combination)\n\n    # convert the set to a list and return it\n    return list(all_combinations)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[:i]+l[i+1:], n-1):\n            result.append((l[i],) + comb)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combo = tuple(l[i:i+n])\n        result.append(combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(1, len(l) + 1):\n        for comb in combinations_with_replacement(l, i):\n            color_combinations.append((comb,))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(l, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    # Generate all combinations of length n with replacement\n    combos = combinations_with_replacement(l, n)\n    \n    # Convert combinations to tuples\n    combo_list = [(tuple(combo)) for combo in combos]\n    \n    return combo_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations (with repetition) of the first n elements of the list\n    combinations = combinations_with_replacement(l, n)\n    # Convert the combinations into a list of tuples\n    color_combinations = [tuple(combination) for combination in combinations]\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l, n):\n            result.append(tuple(comb))\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # initializing variables to keep track of the count and the number of primes\n    count = 0\n    count_primes = 0\n\n    # checking for prime numbers from 2 to n-1\n    for i in range(2, n):\n        # checking if i is prime or not\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is prime, then increment the count and count_primes\n        if is_prime:\n            count += 1\n            count_primes += 1\n\n    # returning the count of primes\n    return count_primes"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes in a number and returns True if it is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize a boolean array \"prime[0..n]\" and set all entries it as true.\n    # A value in prime[i] will finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p**2 <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of primes less than or equal to n\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    # Initialize a flag variable to keep track of which numbers have been checked\n    checked = [False] * (n+1)\n    # Initialize a count variable to keep track of the number of prime numbers found so far\n    count = 0\n    # Loop through all numbers up to n\n    for i in range(2, n+1):\n        # If the current number has not been checked yet and is prime, increment the count and mark the number as checked\n        if not checked[i] and is_prime(i):\n            count += 1\n            checked[i] = True\n    # Return the count of prime numbers found\n    return count\n\ndef is_prime(num):\n    \"\"\"\n    Helper function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum element.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            if test_tup1[2] > test_tup2[2]:\n                return test_tup1\n            elif test_tup1[2] < test_tup2[2]:\n                return test_tup2\n            else:\n                if test_tup1[3] > test_tup2[3]:\n                    return test_tup1\n                else:\n                    return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return None\n    \n    # compare the elements of the tuples\n    max_tuple = (0, 0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple = test_tup1\n        else:\n            max_tuple = test_tup2\n    \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # check if the length of both tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # compare the elements of the tuples using max()\n        return max(test_tup1, test_tup2)\n    else:\n        # raise an exception if the length of the tuples is different\n        raise ValueError(\"The two tuples must have the same length.\")"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create empty lists to store the maximum values\n    max_list1 = []\n    max_list2 = []\n\n    # iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # compare the current element with the maximum value in each list\n        if test_tup1[i] > max(max_list1):\n            max_list1 = [test_tup1[i]]\n        elif test_tup1[i] == max(max_list1):\n            max_list1.append(test_tup1[i])\n\n        if test_tup2[i] > max(max_list2):\n            max_list2 = [test_tup2[i]]\n        elif test_tup2[i] == max(max_list2):\n            max_list2.append(test_tup2[i])\n\n    # combine the lists of maximum values\n    combined_list = max_list1 + max_list2\n\n    # return the combined list\n    return combined_list"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = None\n    \n    # Check which tuple has the highest sum\n    for tup in [test_tup1, test_tup2]:\n        if max_tup is None:\n            max_tup = tup\n        else:\n            current_sum = sum(tup)\n            if current_sum > sum(max_tup):\n                max_tup = tup\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Given two tuples, return the tuple that contains the highest value(s) for each element.\n    \"\"\"\n    # Create a list of the tuples' elements\n    elems = [test_tup1, test_tup2]\n    # Flatten the list of tuples\n    flattened = [elem for tup in elems for elem in tup]\n    # Sort the flattened list in descending order\n    sorted_list = sorted(flattened, reverse=True)\n    # Unflatten the sorted list to get the final result\n    final_result = []\n    for elem in sorted_list:\n        if isinstance(elem, tuple):\n            final_result.extend(elem)\n        else:\n            final_result.append(elem)\n    return tuple(final_result)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the two tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    \n    # If the first tuple is longer, swap them\n    if length1 > length2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n        # If the second tuple is longer, swap them\n        if length1 > length2:\n            test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    # Initialize variables to keep track of the maximum value\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # Loop through the tuples and compare each element\n    for i in range(length1):\n        # If the current element in the first tuple is greater than the maximum\n        # in the second tuple, update the maximum values\n        if test_tup1[i] > max2:\n            max1 = test_tup1[i]\n            max2 = test_tup2[i]\n        # If the current element in the second tuple is greater than the maximum\n        # in the first tuple, update the maximum values\n        elif test_tup2[i] > max1:\n            max1 = test_tup2[i]\n            max2 = test_tup1[i]\n    \n    # Return the tuple with the maximum value\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # First, let's check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError('n must be a positive integer')\n\n    # Then, let's find the nth prime number using the Sieve of Eratosthenes algorithm\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i**2, n + 1, i):\n                primes[j] = False\n\n    # Finally, let's find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n):\n        if primes[i]:\n            return i + 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(n):\n        count = 0\n        for i in range(2, n + 1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    def newman_shanks_williams_prime(n):\n        count = count_primes(n)\n        if count == n:\n            return True\n        else:\n            return False\n\n    def nth_prime(n):\n        count = 0\n        for i in range(2, n + 1):\n            if newman_shanks_williams_prime(i):\n                count += 1\n                if count == n:\n                    return i\n        return None\n\n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the function to check if a number is a newman-shanks-williams prime number\n    def is_newman_prime(num):\n        if num == 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Loop through all the integers from 2 to n\n    for i in range(2, n + 1):\n        # Check if the current number is a newman-shanks-williams prime number\n        if is_newman_prime(i):\n            # If it is, print it out and stop the loop\n            print(i)\n            break"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    i = 0\n    count = 0\n    is_prime = True\n\n    # Check for edge cases\n    if n <= 0:\n        return None\n    if n == 1:\n        return 2\n\n    # Start iterating from 3\n    while count < n:\n        # Check if current number is prime\n        is_prime = True\n        for j in range(2, int(n**0.5)+1):\n            if n % j == 0:\n                is_prime = False\n                break\n        # If current number is prime, add it to the count and move to the next number\n        if is_prime:\n            count += 1\n            i += 1\n        # Check for edge cases\n        if i > n:\n            return None\n\n    return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of primes to check against\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    \n    # Loop through each prime number until we reach n\n    while count < n:\n        # Check if the current number is prime\n        for prime in primes:\n            if prime > n:\n                break\n            if n % prime == 0:\n                break\n        else:\n            # If the number is prime, add it to the list of primes to check against\n            primes.append(n)\n            count += 1\n            \n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    p = 2\n    i = 2\n    count = 0\n\n    # check if n is even\n    if n % 2 == 0:\n        return None\n    \n    # loop through odd numbers\n    while count < n:\n        # check if p is prime\n        is_prime = True\n        for j in range(2, int(p**0.5) + 1):\n            if p % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            if count == n:\n                return p\n        # increment p\n        p += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(n):\n        p = 1\n        while True:\n            if p**2 > n:\n                return p - 1\n            if is_prime(p) and p % 2 == 1:\n                return p\n            p += 2\n\n    return newman_shanks_williams_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime_num = 0\n\n    # Iterate through numbers until the nth newman-shanks-williams prime number is found\n    for i in range(2, n+1):\n        # Check if the number is a prime number\n        if is_prime(i):\n            # If it is, add it to the count and check if it's the nth newman-shanks-williams prime number\n            count += 1\n            if count == n:\n                prime_num = i\n                break\n\n    return prime_num\n\ndef is_prime(num):\n    '''\n    Check if a given number is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    num = 1\n\n    # loop until count reaches n\n    while count < n:\n        # check if num is prime\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # increment count if num is prime\n        if is_prime:\n            count += 1\n        # increment num by 1\n        num += 1\n\n    # return nth prime number\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the function to check if a number is a newman prime number\n    def is_newman_prime(num):\n        # If the number is less than 2, it is not a newman prime number\n        if num < 2:\n            return False\n        # Check if the number is divisible by any number from 2 to the square root of the number\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        # If the loop completes without finding a factor, the number is a newman prime number\n        return True\n\n    # Check if the input is a valid integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n\n    # Check if the input is a positive integer\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through all numbers from 2 to n\n    for num in range(2, n+1):\n        # Check if the number is a newman prime number\n        if is_newman_prime(num):\n            # If it is, increment the count variable\n            count += 1\n            # Check if the count equals the input n\n            if count == n:\n                # If it does, return the number\n                return num"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the two tuples should be equal\")\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], (int, float)) or not isinstance(test_tup2[i], (int, float)):\n            raise TypeError(\"Both elements of the tuple should be numeric\")\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return None\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            print(\"Error: Cannot divide by 0.\")\n            return None\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #checking if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of the two tuples should be equal.\")\n    #creating a new tuple to store the result\n    result_tup = []\n    #performing the mathematical division element-wise\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if len(test_tup1) == len(test_tup2):\n            result.append(test_tup1[i] / test_tup2[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not same\")\n        return\n    \n    # Perform element-wise division operation\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # loop through the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be the same.\")\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            raise TypeError(\"Both tuples should contain the same type.\")\n        result_tup += (test_tup1[i]/test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        print(\"Error: L is greater than the length of the list.\")\n        return\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than or equal to L\n    if len(list1) >= L:\n        # Calculate the number of elements in the first part\n        n = L\n        # Calculate the number of elements in the second part\n        m = len(list1) - L\n        # Split the list into two parts\n        part1 = list1[:n]\n        part2 = list1[n:]\n        # Return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is less than L, return the original list as a tuple\n        return (list1, None)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(lst)\n    if n <= L:\n        return lst, []\n    else:\n        return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    first_part = []\n    \n    # Loop through the list and add elements to the first_part list until it has length L\n    for i in range(len(list1)):\n        first_part.append(list1[i])\n        if len(first_part) == L:\n            break\n    \n    # Create an empty list to store the second part of the list\n    second_part = []\n    \n    # Loop through the list and add elements to the second_part list until it has length L\n    for i in range(len(list1)):\n        if i < L:\n            second_part.append(list1[i])\n        else:\n            break\n    \n    # Return the two resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L > n or L <= 0:\n        return None\n    elif L == n:\n        return (list1, [])\n    else:\n        mid = n // 2\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting\n    lists in a tuple.\n    \"\"\"\n    lst1 = lst[:L]\n    lst2 = lst[L:]\n    return lst1, lst2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is an integer and greater than 0\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError('L must be a positive integer.')\n    # Check if list1 is a list\n    if not isinstance(list1, list):\n        raise TypeError('list1 must be a list.')\n    # Check if L is less than or equal to the length of list1\n    if L > len(list1):\n        raise ValueError('L must be less than or equal to the length of list1.')\n\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the resulting lists as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    if h_age >= 0 and h_age <= 2:\n        dog_years = dog_years - 1\n    elif h_age >= 3 and h_age <= 5:\n        dog_years = dog_years - 2\n    elif h_age >= 6 and h_age <= 10:\n        dog_years = dog_years - 3\n    elif h_age >= 11 and h_age <= 18:\n        dog_years = dog_years - 4\n    elif h_age >= 19 and h_age <= 25:\n        dog_years = dog_years - 5\n    elif h_age >= 26 and h_age <= 35:\n        dog_years = dog_years - 6\n    elif h_age >= 36 and h_age <= 45:\n        dog_years = dog_years - 7\n    elif h_age >= 46 and h_age <= 55:\n        dog_years = dog_years - 8\n    elif h_age >= 56 and h_age <= 65:\n        dog_years = dog_years - 9\n    elif h_age >= 66 and h_age <= 75:\n        dog_years = dog_years - 10\n    elif h_age >= 76 and h_age <= 85:\n        dog_years = dog_years - 11\n    elif h_age >= 86 and h_age <= 95:\n        dog_years = dog_years - 12\n    elif h_age >= 96 and h_age <= 100:\n        dog_years = dog_years - 13\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n\n    Parameters:\n        h_age (int): The height of the dog in inches.\n\n    Returns:\n        int: The age of the dog in dog years.\n    \"\"\"\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert the human age to dog years\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + (h_age * 0.25)\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n\n    # Define the conversion factor for dog years to human years\n    dog_years_to_human_years = 7\n\n    # Calculate the dog's age in dog years\n    dog_years = h_age * dog_years_to_human_years\n\n    # Return the calculated dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's years based on human age\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 12 * h_age\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return []\n    elif step > 0:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result\n    else:\n        result = []\n        for i in range(len(S)-1, -1, -step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize an empty list to store the resulting lists\n    result = []\n    \n    # loop through each element in the input list\n    for i in range(0, len(S), step):\n        \n        # append the current element to the result list\n        result.append(S[i])\n    \n    # return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # First, check if the step is valid\n    if step <= 0:\n        raise ValueError('Step must be a positive integer.')\n\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Split the input list into chunks of length step\n    for i in range(0, len(S), step):\n        # Create a new list with the chunk of the input list\n        chunk = S[i:i+step]\n        # Add the new list to the result list\n        result.append(chunk)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    n = int(step)\n    split_lists = []\n    for i in range(0, len(S), n):\n        split_lists.append(S[i:i+n])\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    i = 0\n    while i < n:\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    length = len(S)\n    if step > length:\n        step = length\n    for i in range(0, length, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2) / 4"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l # The lateral surface area is twice the volume of the cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8\n    print(\"The lateral surface area of a cube with side length\", l, \"is\", surface_area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1, 2, -2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum of squares to 0\n    sum_squares = 0\n    \n    # loop through odd numbers up to n\n    for i in range(1, n+1, 2):\n        # add the square of the current number to sum of squares\n        sum_squares += i*i\n        \n    # return the sum of squares\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # iterate from 1 to n\n    for i in range(1, n+1, 2):\n        # calculate square of i and add to sum variable\n        sum += i**2\n    # return sum variable\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 1\n    \n    while count < n:\n        if i % 2!= 0:\n            sum += i ** 2\n            count += 1\n        i += 1\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #initialize sum variable to 0\n    sum = 0\n    #iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        #calculate the square of the current number\n        square = i*i\n        #add the square to the sum variable\n        sum += square\n    #return the sum variable\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * (find_star_num(n - 1) + 1) / 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        for i in range(1, n+1):\n            print(\"*\", end=\" \")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 1\n    result = \"\"\n    while count <= n:\n        result += \"*\"\n        count += 1\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1\"\n    else:\n        return str(n) + find_star_num(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th star number is:\", find_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1\"\n    else:\n        result = \"1\"\n        for i in range(2, n):\n            result += \" * \" + str(i)\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (find_star_num(n-1) + find_star_num(n-2))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to keep track of the number of stars\n    star_num = 1\n    # Loop until we have found then'th star number\n    while star_num <= n:\n        # Print the current star number\n        print(\"*\" * star_num)\n        # Increment the number of stars\n        star_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n > 1:\n        return find_star_num(n-1) * (2*n-1) // (n-1) + find_star_num(n-2)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the character to ascii value\n    ascii_val = ord(k)\n    # return the ascii value\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = k.upper()\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {\n        'a': 97,\n        'b': 98,\n        'c': 99,\n        'd': 100,\n        'e': 101,\n        'f': 102,\n        'g': 103,\n        'h': 104,\n        'i': 105,\n        'j': 106,\n        'k': 107,\n        'l': 108,\n       'm': 109,\n        'n': 110,\n        'o': 111,\n        'p': 112,\n        'q': 113,\n        'r': 114,\n       's': 115,\n        't': 116,\n        'u': 117,\n        'v': 118,\n        'w': 119,\n        'x': 120,\n        'y': 121,\n        'z': 122,\n        'A': 65,\n        'B': 66,\n        'C': 67,\n        'D': 68,\n        'E': 69,\n        'F': 70,\n        'G': 71,\n        'H': 72,\n        'I': 73,\n        'J': 74,\n        'K': 75,\n        'L': 76,\n        'M': 77,\n        'N': 78,\n        'O': 79,\n        'P': 80,\n        'Q': 81,\n        'R': 82,\n        'S': 83,\n        'T': 84,\n        'U': 85,\n        'V': 86,\n        'W': 87,\n        'X': 88,\n        'Y': 89,\n        'Z': 90\n    }\n    \n    if k.lower() in ascii_dict.keys():\n        return ascii_dict[k.lower()]\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n        if count % 2 == 0:\n            break\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index += 1\n    \n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):   # iterate over even indices\n        if arr[i] % 2 == 0:   # check if current number is even\n            sum += arr[i]   # add even number to sum\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0  \n    even_index = 0  \n    for i in range(len(arr)):  \n        if i % 2 == 0 and i % 2 == even_index:  \n            sum_even += arr[i]  \n            even_index += 1  \n    return sum_even  "
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize variables\n    even_sum = 0\n    even_index = None\n    \n    # Loop through the list\n    for i, num in enumerate(arr):\n        # Check if the number is even and at even position\n        if num % 2 == 0 and i % 2 == 0:\n            # Add the number to the sum\n            even_sum += num\n            # Update the even index if necessary\n            if even_index is None or i < even_index:\n                even_index = i\n    \n    # Return the sum and even index\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 2**5*i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum_even_powers += i**5\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    return sum(i**5 for i in even_numbers)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(1, n+1, 2)])"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i ** 5 % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        if isinstance(i, tuple):\n            result.append(i[-1])\n        else:\n            print(\"Error: Expected tuple in list\")\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_obj in test_list:\n        rear_list.append(tuple_obj[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_item in test_list:\n        rear_list.append(tuple_item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    # Create an empty list to store the rear elements\n    rear_list = []\n    \n    # Loop through each tuple in the input list\n    for i in test_list:\n        # Extract the rear element of the tuple and add it to the rear_list\n        rear_list.append(i[1])\n    \n    # Return the rear_list\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples should have the same length.\")\n        return\n\n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must be of the same length!\")\n        return\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] - test_tup2[i]\n        result_list.append(result)\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have the same length.\"\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Calculate the sum of even index binomial coefficients using math.comb() function\n    sum_even_binomial = sum([math.comb(n, i) for i in range(2, n+1, 2)])\n\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Calculate the sum of even index binomial coefficients\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            term = math.comb(n, i)\n            sum += term\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to zero\n    sum = 0\n    \n    # loop through even indices\n    for i in range(0, n, 2):\n        # calculate binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # add even binomial coefficient to sum\n        if i % 2 == 0:\n            sum += coeff\n            \n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2*n):\n        for j in range(2*n):\n            coeff = math.comb(n,i) * math.comb(n,j)\n            if i%2 == 0 and j%2 == 0:\n                sum += coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for i in range(n):\n        binomial = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial += binomial\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Function to calculate binomial coefficient for n choose r\n    def binomial_coeff(n, r):\n        if r == 0 or r == n:\n            return 1\n        else:\n            return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\n\n    # Initialize sum variable to 0\n    sum_even_coeffs = 0\n\n    # Loop through each even index r\n    for r in range(2, n+1, 2):\n        # Calculate binomial coefficient for n choose r\n        coeff = binomial_coeff(n, r)\n        # Add to sum if even index r\n        if r % 2 == 0:\n            sum_even_coeffs += coeff\n\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum variable\n    sum_even = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the binomial coefficient of i and n-i\n        bin_coeff = math.comb(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n\n            # Add the binomial coefficient to the sum variable\n            sum_even += bin_coeff\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to 0\n    sum_even_coeffs = 0\n    \n    # Loop through all even values of n from 0 to n/2\n    for i in range(0, int(math.sqrt(n))+1, 2):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n        \n        # If the coefficient is even, add it to the sum of even index binomial coefficients\n        if i % 2 == 0:\n            sum_even_coeffs += coeff\n            \n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    sum_even_coeffs = 0\n    index = 0\n    \n    # Loop through each index\n    while index <= n:\n        # Calculate the binomial coefficient for the current index\n        coeff = math.comb(n, index)\n        \n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # Add the even coefficient to the sum\n            sum_even_coeffs += coeff\n            \n        # Increment the index\n        index += 1\n        \n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    '''\n\n    # initialize the sum to 0\n    even_sum = 0\n\n    # iterate over the numbers from 0 to n\n    for i in range(n+1):\n        # find the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n\n        # add the even-indexed coefficients to the sum\n        if i % 2 == 0:\n            even_sum += binomial_coeff\n\n    # return the sum\n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (3.14 * r ** 2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14159 * r**2\n    volume = area * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function calculates the volume of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n\n    Returns:\n    volume (float): volume of the cylinder.\n    \"\"\"\n    volume = (1/3) * 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (1/3) * pi * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3)*pi*(r**3)) + (1/2)*pi*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h # Formula for volume of a cylinder using formula given in the problem statement."
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        elif test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 0:\n        return None\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (4*n**2) - (6*n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the count and sum variables\n    count = 1\n    sum = 1\n    \n    # loop through each number up to n\n    while count <= n:\n        # add the current number to the sum\n        sum += count\n        \n        # increment the count variable\n        count += 1\n    \n    # check if the sum is divisible by 10\n    if sum % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Function to calculate the nth decagonal number\n    def decagonal_num(n):\n        return n * (3 * n - 1) // 2\n    \n    # Find the nth decagonal number\n    nth_decagonal = decagonal_num(n)\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        # Find the ith number in the decagonal sequence\n        i = 2 * n - 1\n        # Calculate the sum of the first i terms\n        sum_of_i = 0\n        for j in range(1, i+1):\n            sum_of_i += j\n        # Return the sum of the first i terms\n        return sum_of_i"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_count = 1\n    decagonal = 1\n    \n    while decagonal_count < n:\n        decagonal += decagonal_count\n        decagonal_count += 1\n        \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize sum of decagonal numbers\n    decagonal_sum = 0\n    \n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # check if number is a decagonal number\n        if i % 2 == 0 and i!= 2:\n            \n            # if it is, add it to the sum\n            decagonal_sum += i\n    \n    # return the sum of decagonal numbers\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += (2*i - 1)\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = n * (3 * n - 1)\n    if dec_num % 2 == 0:\n        return True\n    else:\n        return False\n\ndef find_nth_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    while True:\n        if is_num_decagonal(i):\n            if i == n:\n                return i\n            i += 1\n        else:\n            i += 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((2 * n - 1) * n) // 2 + 1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n\n    # loop through the list\n    for i in range(len(test_list)):\n        # loop through the list again starting from the next element\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                # if an element is found that is equal to any previous element, the list is not unique\n                unique = False\n                break\n\n    # return the result of the check\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all the elements are unique or not.\n    \"\"\"\n\n    # Create a set from the list to remove duplicates\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements of a given list are unique or not.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    test_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    return len(test_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique, otherwise False.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique,\n    else it returns False.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the list\n    for element in test_list:\n        # If the element is already in the set, it means it's not unique\n        if element in unique_set:\n            return False\n        else:\n            # Add the element to the set to check for uniqueness\n            unique_set.add(element)\n    \n    # If we made it through the entire list without finding any duplicates, it means all elements are unique\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # Subtract the two lists element-wise\n    result = [x - y for x, y in zip(nums1, nums2)]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    return [a-b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts the corresponding elements of two lists\n    element-wise and returns the result in a new list.\n    '''\n    # Check if the lengths of the input lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError('The lists must have the same length.')\n    \n    # Initialize a new list to hold the result\n    result = []\n    \n    # Iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # Subtract the elements of the lists and add them to the result list\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of digits\n    freq = {}\n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    # loop through each digit in the integer again\n    for digit in str(n):\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    # if all digits pass the check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = [0] * 10  # initialize a list of frequency counts\n\n    # count the frequency of each digit in the integer\n    for digit in str(n):\n        count[int(digit)] += 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in count:\n        if digit > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each digit in the integer\n    for i in range(10):\n        # Count the frequency of the current digit in the integer\n        count = n.count(str(i))\n\n        # Check if the frequency is less than or equal to the current digit\n        if count > 0 and count <= i:\n            # If yes, add the digit to the dictionary\n            if i not in freq:\n                freq[i] = count\n            else:\n                freq[i] += count\n        else:\n            # If not, remove the digit from the dictionary\n            if i in freq:\n                del freq[i]\n\n    # Check if the dictionary is empty, which means the integer has a valid frequency distribution\n    if freq == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # create a list to store the frequency of each digit\n    freq = [0]*10\n\n    # loop through each digit in the integer and increment its frequency in the list\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # loop through the list and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n\n    # if we make it through the loop without returning False, it means the frequency of each digit is less than or equal to itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # convert the integer to a string\n    n_str = str(n)\n\n    # create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # iterate through each character in the string and update the frequency of each digit in the dictionary\n    for char in n_str:\n        if char in digit_freq:\n            digit_freq[char] += 1\n        else:\n            digit_freq[char] = 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > digit:\n            return False\n\n    # if no errors are found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    num = n\n    \n    # count the frequency of each digit in the number\n    while num > 0:\n        digit = num % 10\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n        num //= 10\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # if the loop completes without returning False, then the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    str_n = str(n)\n\n    # Count the frequency of each digit in the integer\n    freq = [0] * 10\n    for digit in str_n:\n        freq[int(digit)] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through the digits in the list\n    for digit in digits:\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through the dictionary to check if the frequency of each digit is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # If the loop completes without returning False, then the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq_dict = {}\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    for digit in digits:\n        if freq_dict[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Define the digits of the input integer as a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Define a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Count the frequency of each digit\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    else:\n        return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    if len(lst) == 0:\n        return True\n    \n    if lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # Check if all items in the list are equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # Check if all items in the list are equal to the given element\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and returns True if all items in the list are equal to the given element, otherwise, it returns False.\n    '''\n    if len(list) == 0:\n        return False\n    \n    for item in list:\n        if item!= element:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=(?:b){2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    matches = pattern.findall(text)\n    return len(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){1,2}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*b[23]')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab(b?){2,}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('ab{2,3}a')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array with repeated elements of the original array\n    arr = [x for x in a for i in range(k)]\n    \n    # Initialize variables to store the maximum subarray sum and its index\n    max_sum = float('-inf')\n    max_index = None\n    \n    # Iterate through the array to find the maximum subarray sum\n    for i in range(len(arr)):\n        curr_sum = 0\n        start = i\n        \n        # Slide the window to find the maximum subarray sum\n        while curr_sum <= max_sum and start < len(arr):\n            curr_sum += arr[start]\n            start += 1\n            \n        # Update the maximum subarray sum and its index if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = i\n            \n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the maximum sum in the modified array\n    max_sum = float('-inf')\n    max_sum_modified = float('-inf')\n\n    # Repeat the given array k times and calculate the sum\n    for i in range(k):\n        a_repeated = a * i\n        sum_repeated = sum(a_repeated)\n\n        # Update the maximum sum and the maximum sum in the modified array\n        max_sum = max(max_sum, sum_repeated)\n        max_sum_modified = max(max_sum_modified, max_sum)\n\n    return max_sum_modified"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = a*k\n    max_sum = float('-inf')\n\n    for i in range(n-k+1):\n        temp_sum = 0\n        for j in range(i, i+k):\n            temp_sum += arr[j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    \n    # Initialize the maximum sum and start and end indices\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    \n    # Loop through the array k times\n    for i in range(k):\n        # Initialize the current sum to the first element of the array\n        current_sum = a[0]\n        # Loop through the rest of the array\n        for j in range(1, n):\n            # Add the next element to the current sum\n            current_sum += a[j]\n            # Update the maximum sum if the current sum is larger\n            max_sum = max(max_sum, current_sum)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a list to store the sums of all subarrays\n    sums = []\n\n    # Calculate the sum of the first subarray and store it in the list\n    s = sum(a)\n    sums.append(s)\n\n    # Repeat the given array k times\n    for i in range(k):\n        # Calculate the sum of the modified subarray and store it in the list\n        s = s - a[n-k] + a[0]\n        sums.append(s)\n\n    # Find the maximum sum of the modified subarrays\n    max_sum = max(sums)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize max sum and its start and end index\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    \n    # iterate through the array k times\n    for i in range(k):\n        # add the current element to the current max sum\n        max_sum += a[i]\n        \n        # move the start and end index of the current sum\n        start += 1\n        end += 1\n        \n        # check if the current max sum is greater than the global max sum\n        if max_sum > max_sum:\n            max_sum = max_sum\n            \n    # return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the maximum sum of the original array\n    max_sum = sum(a)\n    \n    # create a modified array by repeating the original array k times\n    modified_array = [num for i in range(k)] + a + [num for i in range(k)]\n    \n    # find the maximum sum of the modified array\n    max_modified_sum = sum(modified_array)\n    \n    # return the maximum sum of the modified array\n    return max_modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    def repeated_array(arr, k):\n        return [arr[0]] + [arr[0]] * k + arr[1:]\n\n    arr = repeated_array(a, k)\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n-k):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum of the original array\n    total_sum = 0\n    # Initialize the maximum sum of the modified array\n    max_sum = float('-inf')\n    # Initialize the maximum sum of the current subarray\n    current_sum = 0\n    # Initialize the count of the current subarray\n    count = 0\n    # Loop through the array\n    for i in range(n):\n        # If the current element is greater than the current maximum sum\n        if a[i] > current_sum:\n            # Update the maximum sum and count\n            max_sum = max(max_sum, current_sum)\n            count = max(count, current_sum)\n            # Add the current element to the current subarray\n            current_sum = a[i]\n        # If the current element is less than or equal to the current maximum sum\n        else:\n            # Add the current element to the current subarray\n            current_sum += a[i]\n            # If the count of the current subarray is less than k\n            if count < k:\n                # Increment the count\n                count += 1\n    # Add the remaining elements of the current subarray to the maximum sum\n    max_sum = max(max_sum, current_sum)\n    count = max(count, current_sum)\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_array = [0] * (n+k)\n    max_sum = float('-inf')\n    for i in range(k):\n        sum_array[i] = a[i]\n    for i in range(n-k+1):\n        sum_array[i+k] = sum_array[i] + a[i+k]\n        max_sum = max(max_sum, sum_array[i+k])\n    for i in range(k, n+k):\n        sum_array[i] = sum_array[i] - a[i-k]\n        max_sum = max(max_sum, sum_array[i])\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # initialize sum variable to 0\n    sum_of_squares = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current even number to sum_of_squares\n        sum_of_squares += i*i\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #initialize sum to 0\n    total = 0\n    #loop through even natural numbers from 2 to n\n    for i in range(2, n+1, 2):\n        #add square of i to total\n        total += i**2\n    #return total\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(max(len(j) for j in list1[i]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    max_len = max(lengths)\n    return [sublist for sublist in list1 if len(sublist) == max_len]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths) or not max_lengths:\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sub_list in list1:\n        if len(sub_list) > len(max_length_list):\n            max_length_list = sub_list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for item in list1:\n        if len(item) > len(max_length_list):\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an array to store the count of ways for each color\n    count = [0] * k\n\n    # Initialize two pointers, one at the start and the other at the end of the fence\n    left = 0\n    right = n - 1\n\n    # Initialize a flag to check if we need to paint more than 2 adjacent posts of the same color\n    more_than_two = False\n\n    # Iterate through the fence and count the number of ways for each color\n    while left <= right:\n        # If the left post is the same as the right post, then we have at most 2 adjacent posts of the same color\n        if count[left] < 2:\n            count[left] += 1\n        else:\n            more_than_two = True\n\n        # If the right post is the same as the left post, then we have at most 2 adjacent posts of the same color\n        if count[right] < 2:\n            count[right] += 1\n        else:\n            more_than_two = True\n\n        # Move both pointers to the next position\n        left += 1\n        right -= 1\n\n    # If there are more than 2 adjacent posts of the same color, then we need to paint more than 2 adjacent posts\n    if more_than_two:\n        count[0] -= 1\n        count[k-1] -= 1\n\n    # Initialize the count of ways of painting the fence\n    ways = 1\n\n    # Iterate through the count array and multiply each count by the corresponding color count to get the number of ways for that color\n    for i in range(k):\n        ways *= count[i]\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # initializing variables\n    ways = 0\n    count = 0\n    \n    # iterating from 0 to n-1\n    for i in range(n):\n        # keeping count of the number of adjacent posts with the same color\n        count = 0\n        # iterating from i+1 to n-1\n        for j in range(i+1, n):\n            # if the current color is the same as the previous color, increment the count\n            if j < i:\n                if k % 2 == 0:\n                    if k > 2:\n                        count += (k//2)\n                else:\n                    count += k//2\n            else:\n                count += 1\n                \n        # adding the count to the total number of ways\n        ways += (count * (count-1))\n        \n    # returning the total number of ways\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list to store the ways of painting the fence\n    ways = []\n\n    # Initialize a boolean variable to keep track of the current arrangement\n    current_arrangement = [False] * k\n\n    # Iterate through all possible ways of painting the fence\n    for i in range(2**n):\n        # Convert the binary representation of i into a list of boolean values\n        binary_list = [int(digit) for digit in bin(i)[2:]]\n\n        # Check if the current arrangement is valid\n        valid_arrangement = True\n        for j in range(k):\n            if current_arrangement[j] and binary_list[j]:\n                valid_arrangement = False\n                break\n\n        # If the current arrangement is valid, add it to the list of ways\n        if valid_arrangement:\n            ways.append(binary_list)\n\n    # Return the number of ways of painting the fence\n    return len(ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways for each color combination\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and first column of the 2D list with 1\n    for i in range(n + 1):\n        dp[i][1] = 1\n\n    # Iterate over all possible combinations of the first n - 1 posts\n    for i in range(2, n + 1):\n        # Iterate over all possible colors from 1 to k\n        for j in range(1, k + 1):\n            # If the first i - 1 posts have the same color, the number of ways is the number of ways for all k - 1 colors\n            if dp[i - 1][j]:\n                dp[i][j] = dp[i - 1][j]\n            # Otherwise, the number of ways is the sum of the number of ways for all k - 1 colors plus the number of ways for all colors of the first i - 1 posts that have a different color from the current color j\n            else:\n                dp[i][j] = dp[i - 1][j] + sum(dp[i - 1][k - 1 - x] for x in range(j))\n\n    # Return the number of ways of painting the fence\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Here's the Python code for the same:"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                dp[i][j] = 1 if j == 0 else 0\n            elif j == 0:\n                dp[i][j] = 1 if i == 0 else 0\n            elif i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] if dp[i-1][j]!= 0 and dp[i][j-1]!= 0 and dp[i-1][j] == dp[i][j-1] else 0\n    \n    return sum(dp[n])"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Base case: If n=1 or k=1, there is only one way to paint the fence\n    if n == 1 or k == 1:\n        return 1\n    \n    # Recursive case: If n>1 and k>1, there are at most 2 ways to paint the fence\n    # We can either paint the last post in any of the k colors or the last post in the last color\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Create a 2D list to store the number of ways of painting the fence\n    num_ways = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Initialize the first row and column with 1\n    num_ways[0] = [1] * (k+1)\n    num_ways[1] = [1] * (k+1)\n    \n    # Fill in the remaining rows and columns of the 2D list\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            num_ways[i][j] = num_ways[i-1][j] + num_ways[i][j-1] - num_ways[i-1][j-1]\n    \n    # Return the total number of ways of painting the fence\n    return num_ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D list to store the number of ways of painting the fence\n    num_ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base case: If the fence has only 1 post, it can be painted in k colors\n    num_ways[1][1] = 1\n\n    # Calculate the number of ways to paint the fence with different colors\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            # If the current post has the same color as the previous post,\n            # we can either paint it with the same color or not paint it at all\n            if j == 1:\n                num_ways[i][j] = num_ways[i - 1][j]\n            else:\n                # Otherwise, we can paint it with any other color except the current color\n                num_ways[i][j] = num_ways[i - 1][j - 1] + num_ways[i - 1][j]\n\n    return num_ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the number of ways for each possible color combination\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n\n    # Initialize the first row and column of the array\n    ways[0][0] = 1\n\n    # Fill the remaining rows and columns of the array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1] - ways[i-1][j-1]\n\n    return ways[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer) using the Euclidean algorithm.\n    \"\"\"\n    # Ensure that n is always positive\n    if n < 0:\n        n = -n\n    # Ensure that m is always positive\n    if m < 0:\n        m = -m\n    # Ensure that n is not zero\n    if n == 0:\n        return 0\n    # Find the GCD of n and m\n    while m!= 0:\n        n, m = m, n % m\n    # Return the quotient (rounded down to the nearest integer)\n    return n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two arguments n and m and returns the quotient of n and m, rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Check if m is zero\n    if m == 0:\n        return None\n    \n    # Find the remainder of n/m\n    remainder = n % m\n    \n    # If the remainder is greater than or equal to half of m, add 1 to the quotient\n    if remainder >= (m // 2):\n        return remainder // m + 1\n    else:\n        return remainder // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # find quotient and remainder using integer division\n    quotient = n // m\n    remainder = n % m\n    # if remainder is greater than or equal to m, add 1 to the quotient\n    if remainder >= m:\n        quotient += 1\n    # round quotient down to the nearest integer\n    quotient = int(quotient)\n    # return quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n/m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n-m,m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m  \n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return 2 * w * h / s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two arguments - the length of the side of the triangle and the length of the hypotenuse.\n    It then calculates the third side of the right angled triangle using the formula:\n\n    third_side = \u221a(w^2 + h^2)\n    \n    and returns the value of third_side.\n    '''\n    \n    # calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    # calculate the third side of the right angled triangle\n    third_side = hypotenuse\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    area = (s ** 2) / 4\n    c = math.sqrt(area)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two arguments: the length of the base and height of the triangle.\n    It then calculates and returns the other side of the triangle.\n    '''\n    # Using the Pythagorean theorem, we can calculate the hypotenuse of the right triangle\n    # side = sqrt(base^2 + height^2)\n    side = math.sqrt(w**2 + h**2)\n    # Using the formula for the other side of the right angled triangle, we can calculate\n    # the other side of the triangle\n    other_side = math.sqrt(w**2 + side**2)\n    # Return the calculated other side\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s * math.sin(math.radians(60))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    c = math.sqrt(w ** 2 + h ** 2 - s ** 2)\n    return s + c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the semi-perimeter of the triangle\n    s = (w**2 + h**2)**0.5\n    # Use trigonometry to calculate the third side of the triangle\n    c = (s**2 + h**2)**0.5\n    # Return the third side of the triangle\n    return round(c,2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max_val with the first element in the list\n    max_val = listval[0]\n\n    # loop through the rest of the elements in the list\n    for i in range(1, len(listval)):\n        # if the current element is greater than max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]  # start with the first value as max\n    for val in listval:\n        if val > max_val:  # check if the current value is larger than max\n            max_val = val  # update max with the current value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n\n    max_val = float('-inf')\n    for i in listval:\n        if isinstance(i, int):\n            if i > max_val:\n                max_val = i\n        elif isinstance(i, float):\n            if i > max_val:\n                max_val = i\n        elif isinstance(i, str):\n            if len(i) > len(max_val):\n                max_val = i\n        else:\n            if i > max_val:\n                max_val = i\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to the first value in the list\n    max_val = listval[0]\n    \n    # Iterate through the remaining values in the list\n    for value in listval[1:]:\n        # If the current value is greater than the maximum value, update the maximum value\n        if value > max_val:\n            max_val = value\n    \n    # Return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum variable to zero\n    sum_div = 0\n    # loop through each number from 1 to number\n    for i in range(1, number + 1):\n        # if the number is divisible by i, add it to the sum\n        if number % i == 0:\n            sum_div += i\n    # return the sum of all divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div = 1\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n            if i!= number // i:\n                div += number // i\n    return total, div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # Calculate the inversion count\n    def count_inv(left, right):\n        \"\"\"\n        Helper function to count inversions in a subarray.\n        \"\"\"\n        # Base case\n        if left >= right:\n            return 0\n        # Divide the array into two halves and count inversions in each half\n        mid = (left + right) // 2\n        inv_l = count_inv(left, mid)\n        inv_r = count_inv(mid + 1, right)\n        inv_total = 0\n        i, j = left, mid + 1\n        # Traverse the two halves and count inversions\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                i += 1\n            else:\n                inv_total += (mid - i + 1)\n                j += 1\n        # Add the remaining inversions from the left half\n        inv_total += (mid - i + 1)\n        # Return the total inversion count\n        return inv_total + inv_l + inv_r\n\n    return count_inv(0, n - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr = sorted(arr)\n\n    # Count the inversions\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Check if array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    # Count inversions in left and right halves\n    inv_count_left = get_Inv_Count(left)\n    inv_count_right = get_Inv_Count(right)\n    \n    # Count inversions in this half of the array\n    inv_count_half = 0\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            i += 1\n        else:\n            inv_count_half += len(left) - i\n            j += 1\n    \n    # Return the final count of inversions\n    return inv_count_left + inv_count_right + inv_count_half"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    inv_count = 0  # Initialize the inversion count to 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse the array from both ends and count the number of inversions\n    left, right = 0, len(arr) - 1\n    while left < right:\n        # If the left element is greater than the right element, it means that there is a larger element to its left\n        if arr[left] > arr[right]:\n            inv_count += right - left\n            left += 1  # Move the left pointer to the next element\n        else:\n            right -= 1  # Move the right pointer to the previous element\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array\n    arr = sorted(arr)\n\n    # Initialize the count of inversions\n    inv_count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the left and right pointers of the current subarray\n        left = 0\n        right = i\n\n        # Iterate through the subarray\n        while left < right:\n            # Check if the left and right elements are in reverse order\n            if arr[left] > arr[right]:\n                # If they are, increment the inversion count\n                inv_count += right - left\n                # Move the left pointer to the right\n                left += 1\n            else:\n                # If they are not, move the right pointer to the left\n                right -= 1\n\n    # Return the final inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                inv_count += n-j-1\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += (j-i)\n                \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Traverse all elements of the array except the current element\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                inv_count += n-j-1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array and counts the number of inversions in it.\n    The function uses the merge sort algorithm to sort the array.\n    '''\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    sorted_arr = merge_sort(arr)\n\n    inv_count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n\n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            inv_count += j - i\n            j -= 1\n        else:\n            i += 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Args:\n        list1 (list): A nested list structure.\n\n    Returns:\n        list: A flattened list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list into a single list.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if type(item) == list:\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    :param lst: The nested list to be flattened.\n    :return: A flattened list.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    max_agg['net'] = 0\n\n    for st in stdata:\n        amount, agg = st\n        if agg == 'net':\n            max_agg['net'] += amount\n        else:\n            max_agg[agg] += amount\n\n    return max(max_agg['net'], max_agg['bills'], max_agg['gifts'], max_agg['clothing'])"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    The function uses a defaultdict to store the count of each item in the list.\n    Then, it iterates through the list of tuples and updates the count of each item.\n    Finally, it calculates the maximum aggregate value by finding the maximum count value in the defaultdict.\n    '''\n    counts = defaultdict(int)\n    for item, count in stdata:\n        counts[item] += count\n    max_count = max(counts.values())\n    max_agg = 0\n    for item, count in stdata:\n        if counts[item] == max_count:\n            max_agg += count\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each item\n    max_dict = defaultdict(int)\n    # loop through the list of tuples\n    for item, price in stdata:\n        # add the price to the maximum aggregate for the item\n        max_dict[item] += price\n    # find the maximum aggregate from the dictionary\n    max_agg = max(max_dict.values())\n    # create a list of tuples with the items and maximum aggregates\n    result = []\n    for item, price in stdata:\n        # append the tuple to the result list\n        result.append((item, max_dict[item]))\n    # sort the result list by the maximum aggregate in descending order\n    result.sort(key=lambda x: x[1], reverse=True)\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for st in stdata:\n        for item, price in st:\n            max_dict[item] += price\n    max_aggregate = max(max_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum aggregate of all transactions.\n    \n    The function uses a defaultdict to store the aggregate of each transaction. The defaultdict is used\n    to calculate the aggregate of each transaction efficiently, since it provides constant time complexity\n    for key lookups and insertion.\n    \n    The function iterates through the list of tuples and adds the aggregate of each transaction to the defaultdict.\n    After iterating through all the transactions, the function returns the maximum aggregate found.\n    \n    Example:\n    stdata = [(100, 50), (200, 100), (300, 150)]\n    max_aggregate(stdata) -> 350\n    \"\"\"\n    \n    max_aggr = defaultdict(int)  # Initialize defaultdict to store max aggregate of each transaction\n    \n    for sale, quantity in stdata:\n        max_aggr[sale] += quantity\n    \n    return max(max_aggr.values())  # Return the maximum aggregate of all transactions"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    The list of tuples should have the format [(p_1, a_1), (p_2, a_2),..., (p_n, a_n)]\n    where p_i and a_i are the price and aggregate of the ith transaction respectively.\n    '''\n    max_price = defaultdict(int)\n    max_aggregate = defaultdict(int)\n    \n    for p, a in stdata:\n        max_price[p] = max(max_price[p], a)\n        max_aggregate[a] = max(max_aggregate[a], p)\n    \n    max_agg = max(max_aggregate.values())\n    max_price = max(max_price.values())\n    \n    return max_agg, max_price"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    \n    for item in stdata:\n        for i in range(len(item)):\n            max_dict[i] = max(max_dict[i], item[i])\n        max_sum = max(max_sum, sum(max_dict.values()))\n        \n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    max_profit = defaultdict(int)\n    \n    for item in stdata:\n        for i in range(len(item)):\n            max_sum[i] = max(max_sum[i], item[i])\n            max_profit[i] = max(max_profit[i], item[i] - max_sum[i])\n            \n    return max(max_profit.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the aggregate and its frequency\n    agg_freq = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Add the aggregate to the defaultdict\n        agg_freq[item[0]] += item[1]\n\n    # Calculate the maximum aggregate\n    max_agg = max(agg_freq, key=agg_freq.get)\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n    # Iterate through the list of tuples and update the frequency of each item\n    for item, freq in stdata:\n        freq += 1\n    # Calculate the maximum aggregate by iterating through the defaultdict and finding the maximum value\n    max_agg = 0\n    for item, freq in freq.items():\n        max_agg = max(max_agg, item * freq)\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables for counting\n    count = 0\n    first_bit = 0\n    last_bit = 0\n    \n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        \n        # Extract the first n bits and the last n bits\n        first_n = i >> (n - 1)\n        last_n = i & ((1 << n) - 1)\n        \n        # Compute the sum of the first n bits and the last n bits\n        first_sum = sum(int(bit) for bit in format(first_n, '0' + str(n)))\n        last_sum = sum(int(bit) for bit in format(last_n, '0' + str(n)))\n        \n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if first_sum == last_sum:\n            count += 1\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        for j in range(1, 2**n+1):\n            if i+j-1 == i and i+j-1 == j:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize count and sum variables\n    count = 0\n    sum1 = 0\n    sum2 = 0\n\n    # Traverse all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits of the sequence\n        bits = bin(i)[2:].zfill(n)\n        # Calculate the sum of the first n bits\n        sum1 += int(bits[:n])\n        # Calculate the sum of the last n bits\n        sum2 += int(bits[n:])\n        # Check if the sum of the first n bits is same as the sum of the last n bits\n        if sum1 == sum2:\n            # Increment the count if the condition is true\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum_left = 0\n        sum_right = 0\n        for j in range(n):\n            if i & (1 << j):\n                sum_left += 1 << j\n        for j in range(n):\n            if i & (1 << (j + n)):\n                sum_right += 1 << j\n        if sum_left == sum_right:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = sum(int(digit) for digit in str(i))\n        second_sum = sum(int(digit) for digit in str(i+2**(n-1)))\n        if first_sum == second_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    # Initialize a list to store the count of binary sequences\n    count = []\n\n    # Iterate from 0 to 2^n\n    for i in range(2 ** n):\n        # Convert the binary number to an integer\n        binary_num = bin(i)[2:]\n        # Extract the first n bits and the last n bits\n        first_n = binary_num[:n]\n        last_n = binary_num[-n:]\n        # Check if the sum of first n bits is same as the sum of last n bits\n        if int(first_n, 2) + int(last_n, 2) == 2 ** n - 1:\n            # If it is, add 1 to the count list\n            count.append(1)\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n - 1, -1, -1):\n        binary = bin(i)[2:]\n        if binary.startswith(binary[::-1]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_half = bin(i)[2:].zfill(n)\n        last_half = bin(i)[-n:].zfill(n)\n        if int(first_half) + int(last_half) == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    def is_binary(num):\n        if num < 2:\n            return False\n        while num % 2 == 0:\n            num //= 2\n        return num == 1\n\n    def binary_to_int(binary):\n        return int(binary, 2)\n\n    def int_to_binary(num, length):\n        binary = bin(num)[2:].zfill(length)\n        return binary\n\n    def is_valid_seq(seq):\n        return all(is_binary(seq[i:i+n]) and is_binary(seq[-i:]))\n\n    def is_valid_seq_binary(seq):\n        return all(is_binary(seq[i:i+n]) and is_binary(seq[-i:])) and (sum(int(binary, 2) for binary in seq[:n]) == sum(int(binary, 2) for binary in seq[-n:]))\n\n    def count_valid_seq_binary(n):\n        count = 0\n        for seq in itertools.permutations('01', 2*n):\n            if is_valid_seq_binary(seq):\n                count += 1\n        return count\n\n    count = count_valid_seq_binary(n)\n    print(f\"There are {count} valid binary sequences of length 2n.\")"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # convert binary string to integer\n        x = int(i, 2)\n        \n        # check if sum of first n bits is equal to sum of last n bits\n        if sum(x[:n]) == sum(x[-n:]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            new_depth = dict_depth(d[key]) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n        else:\n            max_depth = max(max_depth, 1)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n            depth += dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n        else:\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to store the depth\n    depth = 0\n    # Loop through the keys in the dictionary\n    for key in d:\n        # Check if the value is a dictionary\n        if isinstance(d[key], dict):\n            # If it is, increment the depth by 1\n            depth += 1\n        # If the value is not a dictionary, increment the depth by 1\n        else:\n            depth += 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for key, value in d.items():\n            depth = 1 + dict_depth(value)\n            max_depth = max(max_depth, depth)\n        return max_depth\n    elif isinstance(d, list):\n        max_depth = 0\n        for item in d:\n            depth = 1 + dict_depth(item)\n            max_depth = max(max_depth, depth)\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n                elif isinstance(item, list):\n                    for subitem in item:\n                        if isinstance(subitem, dict):\n                            depth = max(depth, dict_depth(subitem) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 1\n        for v in d.values():\n            max_depth = max(max_depth, dict_depth(v))\n        return max_depth + 1\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        return -1\n\n    # Calculate the new index after rotations\n    new_index = (index - (index % rotations)) % len(arr)\n\n    # Check if the new index is within the range of the array\n    if new_index < 0 or new_index >= len(arr):\n        return -1\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    # Check if the element is in the specified range\n    for i in range(len(ranges)):\n        if ranges[i][0] <= element <= ranges[i][1]:\n            return element\n\n    # If the element is not in the specified range, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Get the number of elements in the array\n    n = len(arr)\n\n    # Calculate the maximum value of the array\n    max_val = max(arr)\n\n    # Calculate the sum of the elements\n    sum_arr = sum(arr)\n\n    # Calculate the target value to find\n    target_val = sum_arr - (index % n) * ranges[0]\n\n    # Initialize the minimum value and the element that will be found\n    min_val = max_val\n    min_idx = index % n\n\n    # Initialize the current index and its value\n    curr_idx = index % n\n    curr_val = arr[curr_idx]\n\n    # Calculate the number of rotations to perform\n    num_rotations = rotations % n\n\n    # Loop through the rotations\n    for _ in range(num_rotations):\n        # Calculate the left and right indices of the current element\n        left = (curr_idx - 1) % n\n        right = (curr_idx + 1) % n\n\n        # Calculate the sum of the current element and its adjacent elements\n        curr_sum = curr_val + arr[left] + arr[right]\n\n        # Update the minimum value if the current element is smaller\n        if curr_val < min_val:\n            min_val = curr_val\n            min_idx = curr_idx\n\n        # Find the next element to consider\n        curr_idx = (curr_idx + 1) % n\n        curr_val = arr[curr_idx]\n\n    # Find the index of the minimum value after rotations\n    min_idx = (min_idx + rotations) % n\n\n    # Return the element at the minimum index\n    return arr[min_idx]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the length of the rotated array\n    rotated_len = len(arr) - rotations\n\n    # Calculate the total number of rotations needed to reach the given index\n    total_rotations = 0\n    for i in range(rotated_len) :\n        total_rotations += ranges[i]\n\n    # Calculate the index of the element after the total rotations\n    new_index = index - total_rotations\n\n    # Check if the new index is within the range of the rotated array\n    if new_index >= 0 and new_index < len(arr) :\n        return arr[new_index]\n    else :\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array and two lists of ranges and rotations and returns the element at the given index.\n\n    Parameters:\n    arr - The array to search in.\n    ranges - A list of tuples of the form (start, end) representing the range of values in the array.\n    rotations - A list of tuples of the form (start, end) representing the range of rotations to apply to the array.\n    index - The index of the element to find.\n\n    Returns:\n    The element at the given index after the specified number of rotations.\n    '''\n    # Get the maximum rotation value and range\n    max_rotation = max(rotations, key=lambda x: x[1])[1]\n    max_range = ranges[max_rotation][0]\n    \n    # Apply each rotation to the array and find the element at the given index\n    for i in range(max_rotation - 1, -1, -1):\n        # Find the start and end indices of the current range and apply the rotation\n        start, end = ranges[i]\n        arr = arr[start:end] + arr[:start]\n        arr = arr[rotations[i][0]:rotations[i][1]] + arr[rotations[i][0]:start] + arr[:end]\n        \n        # Update the range and rotation values for the next iteration\n        if i == max_rotation - 1:\n            end = start + index\n        start, end = rotations[i]\n        start -= end - index\n        end -= start\n        ranges[i] = (start, end)\n    \n    # Return the element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the index of the element at the given index after rotations\n    first_rotated_index = index + rotations - 1\n    \n    # Calculate the index of the first element after rotations\n    rotated_index = first_rotated_index % len(arr)\n    \n    # Find the element at the index of the first element after rotations\n    rotated_element = arr[rotated_index]\n    \n    # Return the rotated element\n    return rotated_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in the array, range of rotations, and index to find the element at the index after rotations.\n    \"\"\"\n    # Iterate through the array and find the index of the element at the given index after rotations\n    for i in range(index, len(arr)):\n        # Iterate through the range of rotations and find the element at the index after rotations\n        for j in range(rotations):\n            if i == (index + j):\n                return arr[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotations.\n    \"\"\"\n    # Get the current element\n    current_element = arr[index]\n\n    # Get the range and rotation of the current element\n    current_range = ranges[current_element]\n    current_rotation = rotations[current_element]\n\n    # Get the new index after rotations\n    new_index = current_rotation - 1 if current_rotation > 0 else rotations[-1] - 1\n\n    # Get the new element at the new index\n    new_element = arr[new_index]\n\n    # Get the range and rotation of the new element\n    new_range = ranges[new_element]\n    new_rotation = rotations[new_element]\n\n    # Check if the new element lies within the range of the new element\n    if new_range > current_range:\n        # If it does, return the new element\n        return new_element\n    else:\n        # If it doesn't, continue searching in the same direction\n        return find_Element(arr, ranges, rotations, new_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a set of ranges, a number of rotations and an index as input.\n    The function then returns the element at the given index after the given number of rotations.\n    \n    Args:\n    arr (list): A list of integers.\n    ranges (set): A set of tuples, each tuple contains two integers (start, end).\n    rotations (int): A positive integer.\n    index (int): A positive integer.\n    \n    Returns:\n    int: The element at the given index after the given number of rotations.\n    \"\"\"\n    # Initialize the current element and the result element\n    current_element = arr[index]\n    result_element = current_element\n\n    # Perform the required number of rotations\n    for _ in range(rotations):\n        # Find the minimum value in the current range\n        min_val = min(arr[start:end+1])\n        \n        # Update the result element with the minimum value\n        result_element = min_val\n        \n        # Update the current range to exclude the minimum value\n        start = max(0, start - 1)\n        end = min(end, len(arr)-1)\n\n    return result_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    for i in range(rotations):\n        arr = arr[ranges[i]:] + arr[:ranges[i]]\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after rotating the array by a given number of times.\n    '''\n    # Find the number of elements to rotate\n    n = len(arr)\n    k = n - (n - 1) * rotations\n\n    # Find the positions of elements to rotate and update the index\n    pos = []\n    for i in range(n):\n        if i < k:\n            pos.append(i)\n        else:\n            pos.append(i - k)\n\n    # Find the positions of the elements to find\n    find_pos = []\n    for r in ranges:\n        if r[0] >= 0:\n            find_pos.append(pos[r[0]])\n        else:\n            find_pos.append(pos[k + r[0]])\n        if r[1] >= 0:\n            find_pos.append(pos[r[1]])\n        else:\n            find_pos.append(pos[k + r[1]])\n\n    # Find the element at the given index after rotating the array\n    for i in range(index):\n        find_pos.append(find_pos.pop(0))\n    element = arr[find_pos.pop(0)]\n\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define regex pattern to match starting with 'p'\n    pattern = r'^p.'\n\n    # Filter the list of words and return the matching words\n    return list(filter(lambda x: re.match(pattern, x), words))"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Using regular expressions to match the pattern \"p[a-zA-Z]*\" in each word in the list\n    pattern = re.compile(r'p[a-zA-Z]*')\n    p_words = [word for word in words if pattern.match(word)]\n    \n    # If there are no words starting with p, return an empty list\n    if not p_words:\n        return []\n    \n    # If there are two words starting with p, return them\n    elif len(p_words) == 2:\n        return p_words\n    \n    # If there are more than two words starting with p, return the last two words\n    else:\n        return p_words[-2:]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')\n    result = re.findall(pattern, words)\n    if len(result) == 0:\n        return None\n    else:\n        return result[0]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # use regular expression to find all words starting with 'p'\n    pattern = r'\\b[Pp]\\w+\\b'\n    matches = re.findall(pattern,''.join(words))\n    \n    # check if there are at least two matches\n    if len(matches) >= 2:\n        # randomly select two matches from the list of matches\n        index1 = random.randint(0, len(matches) - 1)\n        index2 = random.randint(0, len(matches) - 1)\n        while index1 == index2:\n            index2 = random.randint(0, len(matches) - 1)\n        \n        # return the two selected matches\n        return matches[index1], matches[index2]\n    else:\n        # if there are not at least two matches, return None\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    p_words = [word for word in words if pattern.match(word)]\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = re.compile(r'^p[a-z]*')\n    result = []\n\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define a regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'p\\w+')\n    # Find all the words in the list starting with letter 'p'\n    matches = re.findall(pattern, words)\n    # Check if there are two matches\n    if len(matches) == 2:\n        # Return the two matches\n        return matches\n    # If there are not two matches, return None\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-z]+$', word):\n            p_words.append(word)\n        elif re.match(r'^[a-z]+p[a-z]+$', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    elif len(p_words) == 0:\n        return None\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, word.replace('p', 'P')\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        if i <= index:\n            dp[i] = max(dp[i], a[i] + dp[i - 1])\n        else:\n            dp[i] = max(dp[i], dp[i - 1])\n            \n    if k > index:\n        max_sum = max(dp[i] for i in range(index + 1, k + 1))\n    else:\n        max_sum = max(dp[i] for i in range(index + 1, n))\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k < index:\n        return 0, -1\n    if index == 0:\n        if k == 0:\n            return 0, 0\n        else:\n            return float('-inf'), -1\n\n    dp = [float('-inf') for _ in range(n + 1)]\n    dp[index] = 0\n\n    for i in range(index, -1, -1):\n        if a[i] > a[index]:\n            dp[i] = max(dp[i], dp[index - 1] + a[i])\n\n    return dp[index], index\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list of integers a, the length of the list, index, and k as input. It returns the maximum sum of increasing subsequence from prefix until ith index and including the kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max_sum to 0\n    max_sum = 0\n    \n    # Initialize the array arr[0..n-1] as all zeros\n    arr = [0] * (n)\n    \n    # Initialize the prefix sum array as all zeros\n    prefix_sum = [0] * (n)\n    \n    # Initialize the array arr[0..index-1] as all zeros\n    for i in range(index):\n        arr[i] = 0\n        \n    # Initialize the prefix sum array as all zeros\n    for i in range(index):\n        prefix_sum[i] = 0\n    \n    # Initialize the variable start as 0\n    start = 0\n    \n    # Initialize the variable end as 0\n    end = 0\n    \n    # Initialize the variable prev as -1\n    prev = -1\n    \n    # Initialize the variable current as the ith element of the array a\n    current = a[index-1]\n    \n    # Iterate through the array a from start to end\n    for i in range(start, end):\n        # Calculate the sum of the increasing subsequence from start to i\n        sum_of_subseq = prefix_sum[i] - prefix_sum[i-1] + current\n        \n        # If the sum of the increasing subsequence is greater than the current maximum sum, update the maximum sum and the starting index\n        if sum_of_subseq > max_sum:\n            max_sum = sum_of_subseq\n            start = i\n    \n    # Calculate the sum of the increasing subsequence from start to end\n    sum_of_subseq = prefix_sum[end] - prefix_sum[start] + current\n    \n    # If the sum of the increasing subsequence is greater than the current maximum sum, update the maximum sum and the starting index\n    if sum_of_subseq > max_sum:\n        max_sum = sum_of_subseq\n        start = end\n    \n    # Initialize the variable k_index as -1\n    k_index = -1\n    \n    # Iterate through the array a from 0 to end-1\n    for i in range(0, end-1):\n        # If the current element is equal to the kth element, update the k_index\n        if a[i] == k:\n            k_index = i\n    \n    # If the kth element is present in the increasing subsequence from start to end-1, update the maximum sum and the starting index\n    if k_index!= -1:\n        sum_of_subseq = prefix_sum[end-1] - prefix_sum[start] + current\n        \n        # If the sum of the increasing subsequence is greater than the current maximum sum, update the maximum sum and the starting index\n        if sum_of_subseq > max_sum:\n            max_sum = sum_of_subseq\n            start = end-1\n    \n    # If the maximum sum is greater than the sum of the first k elements, return the maximum sum\n    if max_sum > prefix_sum[0:k]:\n        return max_sum\n    \n    # Otherwise, return -1\n    return -1"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum to be negative infinity and the maximum sum of increasing subsequence to be 0\n    max_sum = float('-inf')\n    max_sum_of_subseq = 0\n    # Initialize the sum of increasing subsequence to be 0\n    current_sum_of_subseq = 0\n    # Iterate over the array from 0 to n-1 and for each element i\n    for i in range(n):\n        # If the element is greater than k\n        if i < k:\n            # Add the element to the current sum of increasing subsequence\n            current_sum_of_subseq += a[i]\n            # If the current sum of increasing subsequence is greater than the maximum sum of increasing subsequence so far\n            if current_sum_of_subseq > max_sum_of_subseq:\n                # Update the maximum sum of increasing subsequence to be the current sum of increasing subsequence\n                max_sum_of_subseq = current_sum_of_subseq\n                # Initialize the maximum sum to be the current sum of increasing subsequence\n                max_sum = current_sum_of_subseq\n        else:\n            # If the element is not greater than k\n            # Reset the current sum of increasing subsequence to be 0\n            current_sum_of_subseq = 0\n            # Reset the maximum sum to be 0\n            max_sum = 0\n    # Return the maximum sum of increasing subsequence\n    return max_sum_of_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for j in range(i, n):\n        if j == k:\n            continue\n        if a[j] < a[j-1]:\n            current_sum += a[j] - a[j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize maximum sum to 0\n    max_sum = 0\n\n    # Initialize a list to store the current increasing subsequence sum\n    curr_sum = 0\n\n    # Initialize a list to store the indices of the current increasing subsequence\n    curr_indices = []\n\n    # Initialize a list to store the indices of the non-increasing subsequence\n    non_increasing_indices = []\n\n    # Initialize a list to store the indices of the kth element\n    kth_indices = []\n\n    # Iterate through the array from 0 to n-1\n    for i in range(n):\n        # If the element is greater than or equal to k\n        if a[i] >= k:\n            # If the current element is the kth element\n            if i == k - 1:\n                # Add the index to the kth element list\n                kth_indices.append(i)\n            # If the element is greater than the kth element\n            elif a[i] > a[k - 1]:\n                # Add the index to the non-increasing subsequence list\n                non_increasing_indices.append(i)\n            # If the current sum is greater than the maximum sum\n            elif curr_sum > max_sum:\n                # Update the maximum sum to the current sum\n                max_sum = curr_sum\n                # Update the current sum to 0 and the indices list to the current subsequence indices\n                curr_sum = a[i]\n                curr_indices = [i]\n                # Add the index to the kth element list\n                kth_indices = [i]\n            # If the current sum is equal to the maximum sum\n            elif curr_sum == max_sum:\n                # Add the index to the current subsequence indices list\n                curr_indices.append(i)\n                # If the current subsequence is larger than the previous subsequence\n                if i - index > 1:\n                    # Update the current sum to the sum of the current subsequence and the previous subsequence\n                    curr_sum = curr_sum + a[i] + a[index - 1]\n                # If the current subsequence is the same length as the previous subsequence\n                else:\n                    # Update the current sum to the sum of the current subsequence and the current element\n                    curr_sum = curr_sum + a[i]\n                # If the current subsequence is larger than the previous subsequence\n                if curr_sum > max_sum:\n                    # Update the maximum sum to the current subsequence sum\n                    max_sum = curr_sum\n                    # Update the indices list to the current subsequence indices\n                    curr_indices = [i]\n                    # Add the index to the kth element list\n                    kth_indices = [i]\n\n    # If the maximum sum is 0, then there is no increasing subsequence that includes the kth element\n    if max_sum == 0:\n        # Add the index to the kth element list\n        kth_indices.append(index)\n\n    # Iterate through the array from 0 to n-1\n    for i in range(n):\n        # If the current element is not in the non-increasing subsequence list\n        if i not in non_increasing_indices:\n            # If the current element is greater than or equal to k\n            if a[i] >= k:\n                # If the current element is greater than the kth element\n                if a[i] > a[k - 1]:\n                    # Add the index to the non-increasing subsequence list\n                    non_increasing_indices.append(i)\n                # If the current element is equal to the kth element\n                elif a[i] == a[k - 1]:\n                    # If the current element is smaller than the previous non-increasing element\n                    if i < non_increasing_indices[-1]:\n                        # Update the indices list to the current non-increasing subsequence indices\n                        non_increasing_indices[-1] = i\n                # If the current element is smaller than the kth element\n                elif a[i] < a[k - 1]:\n                    # Add the index to the non-increasing subsequence list\n                    non_increasing_indices.append(i)\n\n    # If there are no non-increasing subsequences, then there is only one increasing subsequence\n    if len(non_increasing_indices) == 0:\n        # Add the index to the non-increasing subsequence list\n        non_increasing_indices"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    temp_sum = 0\n\n    # Loop through all the elements except the last kth element\n    for i in range(index, n):\n\n        # If the element is greater than kth element, update the sum\n        if a[i] > k:\n            curr_sum += a[i] - k\n        else:\n            curr_sum += a[i]\n\n        # Update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # Update the temporary sum\n        temp_sum = curr_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    for i in range(n):\n        if i == 0 or a[i] > a[i - 1]:\n            dp[i] = a[i]\n        else:\n            dp[i] = dp[i - 1] + a[i]\n\n    for i in range(n, 0, -1):\n        if i == index or i > k:\n            continue\n        if a[i] > a[i - 1]:\n            dp[i - 1] = max(dp[i - 1], dp[i] + a[i])\n\n    return dp[0]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if index == n:\n        return 0\n    \n    if a[index] >= a[k]:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    temp_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    \n    # If a[index] < a[k], include a[index] in the increasing subsequence and find the maximum sum of increasing subsequence from prefix until ith index and including a[k]\n    return max(temp_sum + a[index], max_sum_increasing_subseq(a, n, index+1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k == index:\n        return max(a[index], a[k])\n    elif k > index:\n        max_sum = float('-inf')\n        for i in range(k, index):\n            max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, i + 1, k))\n        return max_sum\n    else:\n        return float('-inf')"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    col_copy = []\n    for i in range(m):\n        for j in range(n):\n            if i+j < m and i+j < n:\n                col_copy.append(col[i][j])\n            else:\n                col_copy.append(' ')\n        col_copy.append('\\n')\n    return ''.join(col_copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        row = []\n        for j in range(n):\n            row.append(tuplex[i][j])\n        colon.append(row)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize a variable to store the colon\n    colon = []\n\n    # Copy the tuple to a new tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Iterate over the rows of the tuple\n    for i in range(m):\n        # Initialize a variable to store the current row\n        row = []\n        # Iterate over the columns of the tuple\n        for j in range(n):\n            # Get the value of the element in the tuple\n            value = new_tuplex[i][j]\n            # Append the value to the row\n            row.append(value)\n        # Append the row to the colon\n        colon.append(row)\n    # Return the colon as a list\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    # create a deep copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    # get the number of elements in the new tuple\n    num_elements = len(new_tuplex)\n    # calculate the number of elements in each row\n    row_len = num_elements // m\n    # calculate the number of rows needed to fill the new tuple\n    num_rows = num_elements // row_len + (num_elements % row_len!= 0)\n    # calculate the number of columns needed to fill the new tuple\n    num_cols = n\n    # create a list to hold the colon\n    colon = []\n    # loop through each row\n    for i in range(num_rows):\n        # create a list to hold the elements in the row\n        row = []\n        # loop through each element in the current row\n        for j in range(i*row_len, (i+1)*row_len):\n            # check if the current element is a tuple\n            if isinstance(new_tuplex[j], tuple):\n                # if so, create a new tuple with the number of columns\n                new_tuple = tuple(new_tuplex[j] + (None,) * (num_cols - len(new_tuplex[j])))\n                # add the new tuple to the row\n                row.append(new_tuple)\n            else:\n                # if not, simply add the element to the row\n                row.append(new_tuplex[j])\n        # add the row to the colon\n        colon.append(row)\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == n:\n        return deepcopy(tuplex)\n    elif m < n:\n        return (tuplex[m-1],) + colon_tuplex(tuplex, m+1, n)\n    else:\n        return ()"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = []\n    for i in range(m):\n        row.append(deepcopy(tuplex[i]))\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: Tuple to get colon from.\n    :param m: Number of elements in each tuple.\n    :param n: Number of colons to get.\n    :return: List of colons of the given tuple.\n    \"\"\"\n    # Get number of elements in tuple\n    length = len(tuplex)\n\n    # Check if m and n are within range\n    if m > length or n > length:\n        raise ValueError(\"m and n should be less than or equal to the length of the tuple\")\n\n    # Initialize empty list to store colons\n    colons = []\n\n    # Loop over n colons to get\n    for i in range(n):\n        # Initialize empty list to store current colon\n        current_colon = []\n\n        # Loop over m elements to get\n        for j in range(m):\n            # Get element at current index\n            current_element = tuplex[j]\n\n            # Check if element is list, tuple, or string\n            if isinstance(current_element, list) or isinstance(current_element, tuple) or isinstance(current_element, str):\n                # Deep copy the element to avoid modifying original list, tuple, or string\n                current_element = deepcopy(current_element)\n\n            # Check if element is list or tuple\n            if isinstance(current_element, (list, tuple)):\n                # Convert element to list and join with comma\n                current_element = \",\".join(map(str, current_element))\n\n            # Add element to current colon\n            current_colon.append(current_element)\n\n        # Add current colon to colons list\n        colons.append(\":\".join(current_colon))\n\n    # Return list of colons\n    return colons"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # make a copy of the input tuple\n    tuplex = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex)\n\n    # if m is greater than or equal to n, return the entire tuple\n    if m >= n:\n        return tuplex\n\n    # if m is less than n, return a new tuple with elements from the original tuple\n    else:\n        new_tuplex = []\n        for i in range(m):\n            new_tuplex.append(tuplex[i])\n        return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[0],) + new_tuplex[1:]\n    for i in range(n):\n        new_tuplex += (new_tuplex[-1],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Loop through the tuple and add n-1 colons to the end of each tuple\n    for i in range(len(tuplex_copy)):\n        for j in range(n-1):\n            tuplex_copy[i] += (':' if j < m-1 else '')\n    # Return the colon-separated tuple\n    return tuple(tuplex_copy)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the max_product variable\n    max_product = 0\n\n    # loop through the specified number of times\n    for i in range(N):\n\n        # find the maximum product of the first list and the second list multiplied by the maximum product of the two lists\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[-1]\n        product3 = nums1[-1] * nums2[i]\n        product4 = nums1[-1] * nums2[-1]\n\n        # update the max_product variable\n        max_product = max(max_product, product1, product2, product3, product4)\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables for the largest product sum and the indices of the largest products\n    max_sum = float('-inf')\n    max_product1 = 0\n    max_product2 = 0\n\n    # Iterate through the first N elements of the sorted lists\n    for i in range(N):\n        # Calculate the product of the i-th and (N-i)-th elements of the two lists\n        product = nums1[i] * nums2[N-i-1]\n\n        # Check if the current product is greater than the current largest product\n        if product > max_sum:\n            max_sum = product\n            max_product1 = nums1[i]\n            max_product2 = nums2[N-i-1]\n\n    # Return the largest product sum and the indices of the largest products\n    return max_sum, max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two input lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize two variables to store the largest products\n    largest1 = 0\n    largest2 = 0\n    \n    # loop through each element in the lists\n    for i in range(N):\n        # calculate the product of the i-th largest element in nums1 and nums2\n        product = nums1[i] * nums2[i]\n        \n        # check if the current product is larger than the largest product so far\n        if product > largest1:\n            largest1 = product\n        \n        # check if the current product is larger than the second largest product so far\n        if product > largest2:\n            largest2 = product\n    \n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product of any two numbers from nums1 and nums2\n    max_product = float('-inf')\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = max(nums1[i] * nums2[j], nums2[j] * nums1[i])\n            max_product = max(max_product, product)\n    \n    # Find the maximum product of any three numbers from nums1, nums2, and nums1\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums1)):\n                product = max(nums1[i] * nums2[j] * nums1[k], nums1[i] * nums1[j] * nums2[k], nums2[i] * nums2[j] * nums1[k], nums1[i] * nums2[k] * nums2[j], nums2[i] * nums1[k] * nums1[j], nums1[j] * nums2[k] * nums1[i])\n                max_product = max(max_product, product)\n    \n    # Find the maximum product of any three numbers from nums1, nums2, and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums2)):\n                product = max(nums1[i] * nums2[j] * nums2[k], nums1[i] * nums1[j] * nums2[k], nums1[i] * nums2[j] * nums1[k], nums1[i] * nums2[k] * nums2[j], nums1[j] * nums2[k] * nums1[i], nums2[i] * nums2[j] * nums1[k], nums2[i] * nums1[j] * nums2[k], nums2[i] * nums2[k] * nums1[j], nums2[j] * nums2[k] * nums1[i])\n                max_product = max(max_product, product)\n    \n    # Find the maximum product of any three numbers from nums1, nums2, and nums2 (repeated two times)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums2)):\n                product = max(nums1[i] * nums2[j] * nums2[k], nums1[i] * nums1[j] * nums2[k], nums1[i] * nums2[j] * nums1[k], nums1[i] * nums2[k] * nums2[j], nums1[j] * nums2[k] * nums1[i], nums2[i] * nums2[j] * nums1[k], nums2[i] * nums1[j] * nums2[k], nums2[i] * nums2[k] * nums1[j], nums2[j] * nums2[k] * nums1[i])\n                max_product = max(max_product, product)\n    \n    # Find the maximum product of any three numbers from nums1, nums2, nums1 (repeated two times)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            for k in range(len(nums1)):\n                product = max(nums1[i] * nums2[j] * nums1[k], nums1[i] * nums1[j] * nums2[k], nums1[i] * nums2[j] * nums1[k], nums1[i] * nums2[k] * nums2[j], nums1[j] * nums2[k] * nums1[i], nums2[i] * nums2[j] * nums1[k], nums2[i] * nums1[j] * nums2[k], nums2[i] * nums2[k] * nums1[j], nums2[j] * nums2[k] * nums1[i])\n                max_product = max(max_product, product)\n    \n    # Find the maximum product of any three numbers from nums1, nums2, and nums1 (repeated"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    \n    for i in range(N):\n        factor1 = max(nums1)\n        factor2 = max(nums2)\n        \n        largest_products.append(factor1 * factor2)\n        \n        nums1.remove(factor1)\n        nums2.remove(factor2)\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Find the largest products\n    largest_products = [0] * N\n    for i in range(N):\n        largest_products[i] = nums1[i] * nums2[i]\n    \n    # Return the largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two variables to keep track of the largest products\n    largest_prod1 = 0\n    largest_prod2 = 0\n\n    # Iterate over the first N elements of the two lists\n    for i in range(N):\n        # Compute the product of the current elements of both lists\n        prod1 = nums1[i] * nums2[i]\n        prod2 = nums1[N - 1 - i] * nums2[N - 1 - i]\n\n        # Update the largest products if necessary\n        if prod1 > largest_prod1:\n            largest_prod1 = prod1\n        if prod2 > largest_prod2:\n            largest_prod2 = prod2\n\n    # Return the two largest products\n    return largest_prod1, largest_prod2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a list of tuples to store the product of each number in each list\n    product_list = [(nums1[i] * nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    # Sort the list in descending order and return the first N elements\n    return sorted(product_list, reverse=True)[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    largest_products = []\n    i = 0\n    j = 0\n    while len(largest_products) < N:\n        current_product = nums1[i] * nums2[j]\n        if len(largest_products) == 0 or current_product > largest_products[-1]:\n            largest_products.append(current_product)\n        if j + 1 < len(nums2):\n            j += 1\n        else:\n            i += 1\n            j = 0\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two pointers for each list, one at the beginning and the other at the end\n    i, j = 0, 0\n\n    # Initialize two variables for the largest products\n    max_product1 = max_product2 = float('-inf')\n\n    # Loop N times\n    for _ in range(N):\n        # Calculate the product of the current element of nums1 and the current element of nums2\n        current_product1 = nums1[i] * nums2[j]\n\n        # If the product is greater than max_product1, update max_product1 and max_product2\n        if current_product1 > max_product1:\n            max_product1 = current_product1\n            max_product2 = nums1[i] * nums2[j]\n\n        # If the product is greater than max_product2, update max_product2\n        elif current_product1 > max_product2:\n            max_product2 = current_product1\n\n        # Increment the pointers for the next iteration\n        i += 1\n        j += 1\n\n    return max_product1, max_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their maximum.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes in two numbers as input and returns the maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n\n    # Convert the list of characters to a tuple of characters\n    tup = tuple(lst)\n\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index and the mask\n    index = 0\n    mask = 1\n    \n    # Iterate until the left most unset bit is found\n    while (mask & n) == 0:\n        mask <<= 1\n        index += 1\n        \n    # Set the left most unset bit\n    n |= mask\n    \n    # Return the updated value\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    # Initialize the leftmost unset bit as 0\n    leftmost_unset_bit = 0\n    \n    # Loop through the bits of n from right to left\n    for i in range(31, -1, -1):\n        # If the i-th bit is already set, move on to the next bit\n        if n & (1 << i):\n            break\n        \n        # If the i-th bit is unset, set it as the leftmost unset bit\n        else:\n            leftmost_unset_bit = i + 1\n    \n    # Set the leftmost unset bit as 1 and return n with the leftmost unset bit set\n    return n | (1 << leftmost_unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]  # remove the \"0b\" prefix\n    \n    # Find the leftmost unset bit\n    for i in range(len(binary_str)):\n        if binary_str[i] == '0':\n            return int(binary_str[:i] + '1' + binary_str[i+1:], 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Get the binary representation of the input integer\n    binary_representation = bin(n)[2:]\n\n    # Iterate through the bits of the binary representation in reverse order\n    for i in range(len(binary_representation)-1, -1, -1):\n        # If the current bit is 0, set the leftmost unset bit to 1 and break out of the loop\n        if binary_representation[i] == '0':\n            binary_representation = binary_representation[:i] + '1' + binary_representation[i+1:]\n            break\n\n    # Convert the binary representation back to an integer\n    return int(binary_representation, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to store the result\n    result = 0\n    # Initialize the leftmost unset bit position\n    left_most_unset_bit_position = -1\n    # Iterate through the bits of n\n    for i in range(32):\n        # Check if the i-th bit is set to 1\n        if n & (1 << i):\n            # If it is, then the i-th bit has been set to 1, \n            # so we can set the leftmost unset bit position to i\n            left_most_unset_bit_position = i\n            # Break out of the loop as we have found the leftmost unset bit\n            break\n    # If the leftmost unset bit position has not been found, then n is all zeros\n    if left_most_unset_bit_position == -1:\n        return result\n    else:\n        # Set the leftmost unset bit to 1\n        result |= 1 << left_most_unset_bit_position\n        # Clear the leftmost unset bit from n\n        result &= ~(1 << left_most_unset_bit_position)\n        # Return the result\n        return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (1 << (n.bit_length() - 1)): # while there is a bit set to the right of the binary representation of n\n        n &= ~(1 << (n.bit_length() - 1)) # unset the bit set to the right of the binary representation of n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n > 1: \n        n &= (n-1) \n    return n "
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to the value of n\n    bit = n\n\n    # Loop through each bit in n\n    while bit > 0:\n        # Check if the least significant bit is set to 1\n        if bit & 1 == 1:\n            # Set the least significant bit to 0\n            bit &= ~1\n            # Exit the loop as we have set the left most unset bit\n            break\n        # Shift the bit to the right by 1\n        bit >>= 1\n\n    # Return the updated value of n\n    return bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the position of the first unset bit\n    left_most_unset_bit_position = -1\n    for i in range(32):\n        if not (n & (1 << i)):\n            left_most_unset_bit_position = i\n            break\n    \n    # Set the left most unset bit to 1\n    n |= 1 << left_most_unset_bit_position\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Count the number of set bits in n\n    count = 0\n    while n:\n        n &= (n - 1)\n        count += 1\n    \n    # Set the leftmost unset bit\n    n |= (1 << count) - 1\n    \n    # Return the modified value of n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone as arguments and\n    returns the volume of the cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as input parameters and returns the volume of the cone.\n    \"\"\"\n    vol = math.pi * r ** 2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function finds the volume of a cone with a given radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n\n    # Calculate the volume of the cone using the formula V = 1/3 * \u03c0 * r^2 * h\n    volume = (1/3) * math.pi * (r**2) * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # calculating the volume of the cone\n    V = math.pi * r ** 2 * h\n\n    # printing the volume of the cone\n    print(\"The volume of the cone is\", V)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found to the smallest possible integer\n    highest_power_of_2 = 1\n    \n    # Loop through all numbers from 1 to n\n    for i in range(2, n+1):\n        # If the number is a power of 2, update the highest power of 2 found\n        if i == 2**i:\n            highest_power_of_2 = i\n    \n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to keep track of the highest power of 2\n    highest = 0\n\n    # Iterate from 1 to n/2\n    for i in range(1, n//2+1):\n        # Check if i is a power of 2\n        if (n & (n-1)) == 0:\n            # If it is, update the highest variable\n            highest = i\n\n    # Return the highest power of 2 less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    return 2**((n.bit_length() - 1).bit_length()) - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize power variable to 1\n    power = 1\n    # while power is less than or equal to n, keep increasing power by 1\n    while power <= n:\n        power <<= 1\n    # return power-1 because power is the highest power of 2 that is less than or equal to n\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 found to be 1\n    highest_power = 1\n    \n    # loop through the numbers from 2 to n\n    for num in range(2, n+1):\n        # if the current number is a power of 2, update the highest power found\n        if num & (num-1) == 0:\n            highest_power = num\n    \n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize highest power of 2 to be 1\n    highest_power_of_2 = 1\n\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # If n is a power of 2, set highest power of 2 to n\n        highest_power_of_2 = n\n\n    # Otherwise, iterate from 2 to n-1, checking if each number is a power of 2\n    else:\n        for i in range(2, n):\n            if i & (i-1) == 0:\n                # If i is a power of 2, set highest power of 2 to i\n                highest_power_of_2 = i\n\n    # Return highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Loop through all the powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # If the current power of 2 is less than or equal to n, update the result\n        if i <= n:\n            result = i\n            \n    # Return the result\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize highest power of 2 variable to 1\n    highest = 1\n\n    # Loop through numbers from 2 up to n\n    for i in range(2, n+1):\n\n        # If the current number is a power of 2, update highest\n        if i & (i-1) == 0:\n            highest = i\n\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return 1 + highest_Power_of_2(n // 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # If the input number is 0 or 1, then the lucas number is the number itself.\n    if n == 0 or n == 1:\n        return n\n\n    # If the input number is greater than 1, then the lucas number is the sum of the previous two lucas numbers.\n    else:\n        prev_lucas = 0\n        curr_lucas = 1\n        for i in range(n):\n            prev_lucas, curr_lucas = curr_lucas, prev_lucas + curr_lucas\n        return curr_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    This function finds the nth lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(element, string) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(lst, fmt):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in lst:\n        result.append(fmt.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(lst, format_string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_lst = []\n    for item in lst:\n        new_item = format_string.format(item)\n        new_lst.append(new_item)\n    return new_lst"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes multiple lists as arguments and converts them to a nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for index, list in enumerate(lists):\n        for item in list:\n            nested_dict[index] = item\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if len(l2) == 0:\n            result.append({l1[i]: l3[i]})\n        else:\n            result.append({l1[i]: convert_list_dictionary(l2[i], l3[i])})\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create an empty dictionary\n    nested_dict = {}\n    # Iterate over the three lists\n    for i in range(len(l1)):\n        # Add the i-th element of l1 as the key in the dictionary\n        nested_dict[l1[i]] = l2[i]\n    # Iterate over the third list and add it as a nested dictionary in the first list\n    for j in range(len(l3)):\n        nested_dict[l3[j]] = {k: v for k, v in zip(l1, l2[j])}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Loop through the first list\n    for item1 in l1:\n        # Create a new dictionary to store the values for the current item\n        current_dict = {}\n        # Loop through the second list\n        for item2 in l2:\n            # Add the current item as a key and the second item as a value to the current dictionary\n            current_dict[item2] = item1\n        # Add the current dictionary as a key and its values as a value to the nested dictionary\n        nested_dict[item1] = current_dict\n    \n    # Loop through the third list\n    for item3 in l3:\n        # Add the current item as a key and its value as a value to the nested dictionary\n        nested_dict[item3] = item3\n    \n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Convert a list or tuple of lists into a nested dictionary.\n    Each inner list represents a level of the nested dictionary.\n    '''\n    result = {}\n    for item in lists:\n        for i, sublist in enumerate(item):\n            if i == 0:\n                if sublist not in result:\n                    result[sublist] = {}\n            else:\n                if sublist not in result[item[0]]:\n                    result[item[0]][sublist] = {}\n                else:\n                    for key, val in item[1:].items():\n                        if key not in result[item[0]][sublist]:\n                            result[item[0]][sublist][key] = val\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        subdict = {}\n        for j in range(len(l3)):\n            subkey = l3[j]\n            subvalue = l2[i][j]\n            subdict[subkey] = subvalue\n        result[key] = subdict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n        l1 (list): list of dictionaries\n        l2 (list): list of tuples\n        l3 (list): list of lists\n\n    Returns:\n        dict: nested dictionary of lists\n\n    Example:\n        l1 = [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n        l2 = [('a', 1), ('b', 2), ('c', 3)]\n        l3 = [['x', 'y'], ['z', 'w']]\n        result = convert_list_dictionary(l1, l2, l3)\n        print(result)\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if isinstance(l1[i], dict):\n            result[i] = l1[i]\n        elif isinstance(l1[i], tuple):\n            result[i] = {'name': l1[i][0], 'age': l1[i][1]}\n        elif isinstance(l1[i], list):\n            result[i] = [l1[i][0], l1[i][1]]\n        else:\n            raise ValueError('Unsupported input type')\n    for i in range(len(l2)):\n        if isinstance(l2[i], tuple):\n            if len(l2[i])!= 2:\n                raise ValueError('Invalid tuple length')\n            result[i].append(l2[i][0])\n            result[i].append(l2[i][1])\n        else:\n            raise ValueError('Unsupported input type')\n    for i in range(len(l3)):\n        if isinstance(l3[i], list):\n            if len(l3[i])!= 2:\n                raise ValueError('Invalid list length')\n            result[i].append(l3[i][0])\n            result[i].append(l3[i][1])\n        else:\n            raise ValueError('Unsupported input type')\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the nested dictionaries\n    result = {}\n    \n    # Loop through each list\n    for i in range(len(l1)):\n        # Loop through each element in the list\n        for j in range(len(l2[i])):\n            # Create a key for the nested dictionary\n            key = str(l1[i]) + '.' + str(l2[i][j])\n            # Check if the key already exists in the result dictionary\n            if key not in result:\n                # If not, create a new dictionary for the nested key\n                result[key] = []\n            # Add the value to the existing dictionary for the nested key\n            result[key].append(l3[i][j])\n            \n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Iterate through each list\n    for i in range(len(l1)):\n        # Add a new key-value pair to the nested dictionary with the first element of the first list as the key\n        nested_dict[l1[i]] = l2[i]\n        # Add a new key-value pair to the nested dictionary with the second element of the second list as the key\n        nested_dict[l1[i]]['second'] = l3[i]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for arg in args:\n        for i, item in enumerate(arg):\n            if i not in result:\n                result[i] = {}\n            if isinstance(item, list):\n                for j, inner_item in enumerate(item):\n                    if j not in result[i]:\n                        result[i][j] = {}\n                    if isinstance(inner_item, dict):\n                        for key, value in inner_item.items():\n                            result[i][j][key] = value\n                    else:\n                        result[i][j][str(i)] = inner_item\n            else:\n                result[str(i)] = item\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base cases\n    if n <= 1:\n        return n\n    \n    # recursive case\n    else:\n        # find the maximum sum possible using the given equation\n        max_sum = max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n        \n        # check if max_sum is greater than or equal to n\n        if max_sum >= n:\n            return max_sum\n        \n        # if max_sum is less than n, then add n to max_sum\n        else:\n            return max_sum + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 6:\n        return n\n    else:\n        if n % 2 == 0:\n            return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        else:\n            return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n) + 1"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n):\n        if n < 2:\n            return n\n        else:\n            return max(helper(n/2) + helper(n/3) + helper(n/4) + helper(n/5), n)\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        # Divide n by 2\n        half = get_max_sum(n/2)\n\n        # Divide n by 3\n        three = get_max_sum(n/3)\n\n        # Divide n by 4\n        four = get_max_sum(n/4)\n\n        # Divide n by 5\n        five = get_max_sum(n/5)\n\n        # Calculate the maximum sum\n        max_sum = max(half + three + four + five, n)\n\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 2:\n        return n\n\n    max_sum = 0\n    for i in range(1, n + 1):\n        max_sum = max(max_sum, get_max_sum(n - i) + i)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result_list = [item]\n        elif len(item) == max_length:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    # Find the maximum length of the list\n    max_length = max(len(i) for i in input_list)\n    # Create a list with only the lists of the same maximum length\n    max_lists = [i for i in input_list if len(i) == max_length]\n    # Return the first element of the list\n    return max_lists[0]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to eliminate duplicates\n    test_set = set(test_tup)\n    # Check if the set has more than one element\n    if len(test_set)!= len(test_tup):\n        return False\n    # If all checks pass, the tuple is distinct and contains no duplicates\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # If the length of the set is equal to the length of the original tuple,\n    # it means there were no duplicates\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function finds the first non-repeating character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Find the first non-repeating character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If all characters in the string are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary and return the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first non-repeated character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n\n    # if all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            del char_freq[char]\n        else:\n            char_freq[char] = True\n\n    for char in str1:\n        if char_freq[char]:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(s):\n    # Create a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n\n    # Find the first character that has a frequency of 1\n    for c in s:\n        if freq[c] == 1:\n            return c\n\n    # If there are no characters with frequency 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n\n    # Compile the regex pattern\n    pattern = re.compile(regex)\n\n    # Check if the pattern matches the string\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    return match is not None"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # find the middle two numbers\n    mid_1 = numbers[1]\n    mid_2 = numbers[2]\n    \n    # calculate the median\n    median = (mid_1 + mid_2) / 2\n    \n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        if b >= c:\n            return a\n        else:\n            return c\n    elif b >= a and b >= c:\n        if a >= c:\n            return b\n        else:\n            return c\n    else:\n        if a >= b:\n            return c\n        else:\n            return b"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a, b, c]\n    nums.sort()\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        median = nums[len(nums) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = (numbers[1] + numbers[2]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a,b,c])\n    \n    # Determine the length of the list\n    length = len(sorted_list)\n    \n    # Find the median\n    if length % 2 == 0:\n        median = (sorted_list[length//2-1] + sorted_list[length//2])/2\n    else:\n        median = sorted_list[length//2]\n    \n    # Return the median value\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers\n    nums = sorted([a, b, c])\n    # find the middle index\n    mid = len(nums) // 2\n    # find the median\n    if len(nums) % 2 == 0:\n        # if the numbers are even, return the average of the two middle numbers\n        return (nums[mid - 1] + nums[mid]) / 2\n    else:\n        # if the numbers are odd, return the middle number\n        return nums[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the mid-point of the sorted list\n    midpoint = len(sorted_numbers) // 2\n\n    # Check if the midpoint is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If even, return the average of the two middle numbers\n        median = (sorted_numbers[midpoint - 1] + sorted_numbers[midpoint]) / 2\n    else:\n        # If odd, return the middle number\n        median = sorted_numbers[midpoint]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a, b, c]\n    nums.sort()\n    if len(nums) % 2 == 0:\n        median = (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        median = nums[len(nums) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    # Calculate the midpoint index\n    midpoint = len(numbers) // 2\n    # Check if the length of the list is odd or even\n    if len(numbers) % 2 == 0:\n        # If it's even, return the average of the two middle numbers\n        return (numbers[midpoint-1] + numbers[midpoint]) / 2\n    else:\n        # If it's odd, return the middle number\n        return numbers[midpoint]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digits = sum(digits)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sum += digit_sum\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = sum(int(d) for d in str(num))\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    digit_sum = 0\n    for num in nums:\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = tuple(0 for _ in range(len(test_tup1)))\n    # Perform the bitwise xor operation across the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple\n    result = ()\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # bitwise xor the corresponding elements of the two tuples\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    # return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        x1 = test_tup1[i] if i < len(test_tup1) else 0\n        x2 = test_tup2[i] if i < len(test_tup2) else 0\n        result += (x1 ^ x2,)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Concatenate the tuples\n    concatenated_tup = tuple(test_tup1) + tuple(test_tup2)\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Perform the bitwise xor operation on each element of the concatenated tuple\n    for element in concatenated_tup:\n        result_tup += (element ^ 0, )\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize variables to hold the result\n    result = 0\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the element is the same in both tuples\n        if test_tup1[i] == test_tup2[i]:\n            # set the result to 1 if both elements are the same\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples\n    tup1, tup2 = test_tup1\n    \n    # bitwise xor the elements of the tuples\n    result = 0\n    for i in range(len(tup1)):\n        result |= tup1[i] ^ tup2[i]\n        \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # initialize a variable to store the result\n    result = 0\n    # loop through the tuples and perform the bitwise xor operation\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result = result ^ num1 ^ num2\n    # return the result\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # create a set of tuples to store unique tuples\n    unique_tuples = set(test_list)\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set of tuples from the given list\n    unique_tuples = set(tuple(test_list) for test_list in test_list)\n\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    This function extracts the number of unique tuples in the given list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    freq_dict = {}\n    \n    # Loop through the list and count the frequency of each tuple\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    \n    # Calculate the number of unique tuples\n    num_tuples = sum(freq_dict.values())\n    \n    return num_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 0\n        freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty tuple to store the result\n    result_tup = ()\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # add the corresponding element from the two tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        new_tuple = []\n        for j in range(len(test_tup1[i])):\n            new_tuple.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(new_tuple))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            result_list.append(test_tup1[i][j] + test_tup2[i][j])\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Iterate over both tuples using nested loops\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            # Add the corresponding elements from the two tuples and append to result_tup\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # create an empty list to store the sum of each tuple\n    sum_list = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # initialize an empty list to store the sum of the current tuple\n        sum_val = []\n        # loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the elements of the current tuple and store the result in the sum_val list\n            sum_val.append(test_tup1[i][j] + test_tup2[i][j])\n        # append the sum_val list to the sum_list list\n        sum_list.append(sum_val)\n    # return the sum_list list\n    return sum_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(sum([test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup1[i]))]))\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples are not equal.\")\n        return\n\n    # Initialize the result tuple with zeros\n    result_tup = [0] * len(test_tup1)\n\n    # Perform index wise addition of elements\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result_tup[i] += test_tup1[i][j] + test_tup2[i][j]\n\n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same number of elements.\")\n        return None\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through the elements of the two tuples and add them index wise\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return min(a, b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check if the tuple exists\n    if not isinstance(tuplex, tuple):\n        return \"Error: The first parameter must be a tuple.\"\n    \n    # check if the element exists in the tuple\n    if tuplex in tuple1:\n        return \"The element exists in the tuple.\"\n    else:\n        return \"The element does not exist in the tuple.\""
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for tup in tuple1: \n        if tuplex == tup: \n            return True\n\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1,val): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == val: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in tuple1\")\n    else:\n        print(f\"{tuplex} does not exist in tuple1\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Parameters\n    ----------\n    tuplex: tuple\n        The tuple in which to search for the element.\n    tuple1: tuple\n        The tuple to search for in the first tuple.\n\n    Returns\n    -------\n    bool\n        True if the element exists in the first tuple, False otherwise.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input and checks if an element exists in the first tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes in two tuples and returns True if the element exists within the first tuple and False otherwise.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Convert the number to an integer to check for odd parity\n    if type(x) == float:\n        x = int(x)\n    elif type(x) == str:\n        x = int(x.replace(',',''))\n    \n    # Check if the parity of the number is odd or even\n    if x % 2!= 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2==0: # if x is even\n        return \"Even\"\n    else: # if x is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function finds whether the parity of a given number is odd or even.\n\n    Parameters:\n    x (int): The number whose parity needs to be determined.\n\n    Returns:\n    int: Returns 1 if x is odd, otherwise 0.\n    \"\"\"\n    if x % 2 == 0: \n        return 0\n    else: \n        return 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x%2 == 0:\n        print(\"The parity of\", x, \"is even\")\n    else:\n        print(\"The parity of\", x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    parity = 0\n    while x > 0:\n        parity += x % 2\n        x //= 2\n    if parity % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: # check if the number is even\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # create a helper function to swap digits\n    def swap(i, j):\n        temp = digits[i]\n        digits[i] = digits[j]\n        digits[j] = temp\n\n    # iterate through the digits, swapping adjacent digits until we reach the end of the list\n    while digits[0] == 0:\n        for i in range(len(digits) - 2):\n            if digits[i] == digits[i + 1] == digits[i + 2] == 9:\n                swap(i, i + 1)\n                swap(i + 1, i + 2)\n                digits[i + 2] += 1\n                break\n\n    # convert the list of digits back to an integer\n    next_bigger = int(''.join(str(digit) for digit in digits))\n\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables\n    i = 1\n    result = []\n\n    # Iterate through the digits of the number\n    while n > 0:\n        # Append the current digit to the result list\n        result.append(n % 10)\n\n        # Remove the current digit from the number\n        n = n // 10\n\n        # Increment the iteration counter\n        i += 1\n\n    # Reverse the result list\n    result.reverse()\n\n    # Convert the result list to a string\n    result_str = ''.join(map(str, result))\n\n    # Convert the string to an integer\n    result_int = int(result_str)\n\n    # Return the next bigger number\n    return result_int + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if int(digits[i])*10 + int(digits[j]) > n:\n                digits[i], digits[j] = digits[j], digits[i]\n                break\n        else:\n            # We didn't find a pair that can make the current pair bigger\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    else:\n        # We went through the entire list without finding a pair that can make the current number bigger\n        digits[0], digits[-1] = digits[-1], digits[0]\n        digits[1], digits[-2] = digits[-2], digits[1]\n    return int(\"\".join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a list of digits\n    num_list = list(str(n))\n\n    # Initialize the result list to store the rearranged digits\n    result = []\n\n    # Find the index of the digit with the maximum value\n    max_index = num_list.index(max(num_list))\n\n    # Add the digit at the maximum index to the result list\n    result.append(num_list[max_index])\n\n    # Reverse the list of digits except for the maximum index and add it to the result list\n    result.extend(num_list[:max_index][::-1])\n\n    # Reverse the result list and convert it to an integer\n    result_int = int(''.join(result[::-1]))\n\n    return result_int"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Check if the number is already the next biggest number\n    if n < 10**10:\n        return str(n+1)\n    \n    # Initialize the next number as the minimum value possible\n    next_number = 0\n    \n    # Loop through the digits of the given number\n    for digit in str(n):\n        # Convert the current digit to integer\n        digit_int = int(digit)\n        \n        # Check if the digit is one less than the maximum possible value\n        if digit_int < 9:\n            # Increment the digit by 1\n            digit_int += 1\n            \n            # Convert the digit back to string and check if it is a valid digit for the next number\n            while str(digit_int) not in '0123456789':\n                digit_int += 1\n            \n            # Update the next number with the updated digit\n            next_number = digit_int * 10**digit_int + n % 10**digit_int\n            \n            # Check if the next number is greater than the current next number\n            if next_number > n:\n                return str(next_number)\n    \n    # If no valid next number is found, return -1\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    max_digit = max(digits)\n    if max_digit == 9:\n        return 0\n    else:\n        digits.remove(max_digit)\n        new_max_digit = max(digits)\n        new_digits = digits + [new_max_digit]\n        new_number = int(''.join(map(str, new_digits)))\n        return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    def to_digits(num):\n        return [int(d) for d in str(num)]\n    \n    def digits_to_num(digits):\n        return int(''.join(str(d) for d in digits))\n    \n    def rearrange(num):\n        digits = to_digits(num)\n        digits.sort(reverse=True)\n        return digits_to_num(digits)\n    \n    next_bigger = rearrange(n)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert number to string\n    n_str = str(n)\n\n    # Find the largest digit\n    max_digit = max(n_str)\n\n    # Find the digits that come after the largest digit\n    after_max = [int(digit) for digit in n_str if int(digit) > max_digit]\n\n    # Concatenate the digits after the largest digit with the largest digit\n    new_n_str = ''.join(str(digit) for digit in after_max + [max_digit])\n\n    # Convert the new string back to an integer\n    new_n = int(new_n_str)\n\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Create a list of digits from the given number\n    digits = [int(d) for d in str(n)]\n    # Reverse the list to get the digits in descending order\n    digits.reverse()\n    # Create a new list with the digits from the input number reversed\n    new_digits = digits[::-1]\n    # Combine the two lists to form the new number\n    new_n = int(''.join([str(d) for d in new_digits]))\n    # Return the new number\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Initialize a boolean variable to check if the number is negative\n    negative = False\n    # Initialize the variable to store the next bigger number\n    next_bigger = 0\n    # Check if the number is negative\n    if n < 0:\n        negative = True\n        num_str = str(-n)\n    # Iterate through each digit of the number in reverse order\n    for digit in num_str[::-1]:\n        # If the digit is 9, increment the previous digit by 1\n        if digit == '9':\n            prev_digit = int(num_str[num_str.index(digit) - 1])\n            next_bigger += prev_digit\n        else:\n            # If the digit is not 9, increment the digit by 1\n            next_bigger += int(digit) + 1\n        # Check if the next bigger number is greater than the original number\n        if next_bigger > n:\n            # If it is, return the next bigger number\n            return next_bigger\n        # If the next bigger number is not greater than the original number, continue to the next iteration of the loop\n    # If the loop completes without finding a valid next bigger number, return the original number\n    return n if negative else -n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = [(nums1[0], 0, 0)]\n\n    result = []\n\n    while len(result) < k and heap:\n        val, i, j = heapq.heappop(heap)\n\n        if i == len(nums1) - 1:\n            result.append((nums2[j], val))\n        elif j == len(nums2) - 1:\n            result.append((nums1[i], val))\n        else:\n            heapq.heappush(heap, (min(nums1[i+1], nums2[j+1]), i+1, j+1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # create min heap from nums1\n    heapq.heapify(nums1)\n\n    # create min heap from nums2\n    heapq.heapify(nums2)\n\n    # initialize counter\n    count = 0\n\n    # while heap is not empty and count is less than k\n    while heapq.heappop(nums1) is not None and heapq.heappop(nums2) is not None and count < k:\n        # add second element of smallest pair to heap from nums2\n        heapq.heappush(nums1, -heapq.heappop(nums2))\n\n        # add first element of smallest pair to heap from nums1\n        count += 1\n\n    # return count of pairs found\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples containing the elements of nums1 and nums2\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    \n    # Sort the list of pairs in ascending order based on their sum\n    pairs.sort(key=lambda x: x[0] + x[1])\n    \n    # Create a min heap of size k\n    min_heap = []\n    \n    # Iterate over the sorted pairs list\n    for i in range(k):\n        # Add the smallest pair to the min heap\n        heapq.heappush(min_heap, pairs[i])\n    \n    # Create an empty list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # Iterate over the remaining elements in the pairs list\n    for j in range(k, len(pairs)):\n        # Calculate the sum of the smallest pair and the element of nums1 at position j\n        curr_sum = min_heap[0][0] + pairs[j][0]\n        \n        # Remove the smallest pair from the min heap\n        heapq.heappop(min_heap)\n        \n        # If the current sum is greater than the current element of nums2 at position j, the current pair is the next smallest pair\n        if curr_sum > pairs[j][1]:\n            # Add the current pair to the k smallest pairs list\n            k_smallest_pairs.append(pairs[j])\n        \n        # Add the current pair to the min heap\n        heapq.heappush(min_heap, pairs[j])\n    \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap of size k to store the k smallest elements\n    min_heap = []\n    \n    # Iterate over the first array and find the k smallest elements\n    for num1 in nums1:\n        # If the heap is not full, add the current element to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num1)\n        # If the heap is full and the current element is smaller than the smallest element, pop the smallest element and add the current element to the heap\n        elif len(min_heap) == k and num1 < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num1)\n    \n    # Create an empty list to store the k smallest pairs\n    result = []\n    \n    # Iterate over the second array and find the k smallest pairs\n    for num2 in nums2:\n        # If there are at least k elements in the heap, add the current element to the result list and remove the smallest element from the heap\n        if len(min_heap) >= k:\n            if num2 < min_heap[0]:\n                min_heap.pop(0)\n            result.append((min_heap[0], num2))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n\n    # iterate through the first array\n    for num1 in nums1:\n        # create a min heap of size k - 1\n        temp_heap = []\n        # iterate through the second array\n        for num2 in nums2:\n            # if the size of the temp heap is less than k, then add the smaller number to it\n            if len(temp_heap) < k:\n                if num2 < num1:\n                    heapq.heappush(temp_heap, num2)\n                else:\n                    heapq.heappush(temp_heap, num1)\n            # if the size of the temp heap is equal to k, then add the smaller number from the first array and the smallest number from the temp heap to the result list\n            else:\n                if num2 < min_heap[0]:\n                    heapq.heappushpop(temp_heap, num2)\n                else:\n                    heapq.heappushpop(temp_heap, num1)\n                min_heap.append(num1)\n                min_heap.append(heapq.heappop(temp_heap))\n\n    # return the result list\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n        nums1 (list): A list of integers representing the first array.\n        nums2 (list): A list of integers representing the second array.\n        k (int): The number of pairs to find.\n\n    Returns:\n        list: A list of pairs consisting of integers, where each pair is in the format of (nums1[i], nums2[j]) such that i < j and 0 <= i < len(nums1) and 0 <= j < len(nums2).\n\n    \"\"\"\n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize an empty list to store the pairs\n    pairs = []\n\n    # Initialize a min heap to store the pairs with the smallest elements\n    min_heap = []\n\n    # Iterate through the arrays and add each pair to the min heap\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i], nums2[j])\n            heapq.heappush(min_heap, pair)\n\n            # If the size of the min heap exceeds k, remove the pair with the largest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Iterate through the min heap and append the pairs to the pairs list\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n\n    # Return the list of pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of tuples (diff, (i, j)) where diff is the difference between nums1[i] and nums2[j] and i and j are indices in the arrays\n    min_heap = [(abs(nums1[i] - nums2[j]), (i, j)) for i in range(len(nums1)) for j in range(len(nums2)) if i!= j]\n    # Use a list to store the k smallest pairs\n    result = []\n    # While there are still k pairs remaining in the heap and there are elements in both arrays\n    while len(result) < k and len(min_heap) > 0:\n        # Get the pair with the smallest difference from the min heap\n        diff, (i, j) = heapq.heappop(min_heap)\n        # If the current result does not include this pair, add it to the result and remove the pair from the heap\n        if (i, j) not in result:\n            result.append((nums1[i], nums2[j]))\n            heapq.heappush(min_heap, (abs(nums1[i] - nums2[j]), (j, i)))\n    # Return the k smallest pairs\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Convert lists to sets to remove duplicates and convert to tuples for priority queue\n    nums1 = tuple(set(nums1))\n    nums2 = tuple(set(nums2))\n    \n    # Initialize the priority queue with a sentinel value\n    pq = [(-float('inf'), (None, None))]\n    \n    # Iterate over the first array and the second array and push pairs onto the priority queue\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(pq, (num1+num2, (num1, num2)))\n            if len(pq) > k:\n                heapq.heappop(pq)\n    \n    # Extract the k pairs from the priority queue and return them as a list of tuples\n    return [(x[1][0], x[1][1]) for x in heapq.nsmallest(k, pq)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n        \n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n            \n    for num in nums2:\n        if -num in min_heap:\n            return [-num, num]\n        \n        heapq.heappush(min_heap, num)\n        \n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n            \n    return []"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the pairs with smaller values first\n    pairs = []\n    heapq.heapify(pairs)\n    \n    # Iterate through each element of the first array\n    for num1 in nums1:\n        # Initialize variables to keep track of the number of pairs and the sum of the pairs\n        num_pairs = 0\n        sum_pairs = 0\n        \n        # Iterate through each element of the second array\n        for num2 in nums2:\n            # Calculate the sum of the current pair\n            current_sum = num1 + num2\n            \n            # Check if the current sum is smaller than the smallest pair found so far in the heap\n            if len(pairs) == 0 or current_sum < pairs[0][1]:\n                # If the current sum is smaller than the smallest pair found so far, add it to the heap\n                heapq.heappush(pairs, (num1, num2))\n                num_pairs += 1\n                sum_pairs += current_sum\n                \n                # If the heap size exceeds k, remove the smallest pair and update the sum of the pairs\n                while len(pairs) > k:\n                    smallest_pair = heapq.heappop(pairs)\n                    num_pairs -= 1\n                    sum_pairs -= smallest_pair[0] + smallest_pair[1]\n                    \n            # Check if the current sum is equal to the smallest pair found so far in the heap\n            if len(pairs) > 0 and current_sum == pairs[0][1]:\n                # If the current sum is equal to the smallest pair found so far, add it to the sum of the pairs\n                num_pairs += 1\n                sum_pairs += current_sum\n                \n                # If the heap size exceeds k, remove the smallest pair and update the sum of the pairs\n                while len(pairs) > k:\n                    smallest_pair = heapq.heappop(pairs)\n                    num_pairs -= 1\n                    sum_pairs -= smallest_pair[0] + smallest_pair[1]\n                    \n        # Return the number of pairs and the sum of the pairs\n        return num_pairs, sum_pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n\n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Initialize variables to keep track of current pair's product and the length of that product\n        current_product = 1\n        current_length = 1\n\n        # Iterate through the rest of the tuples to find the minimum product of the current pair\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current pair and check if it's shorter than the current minimum\n            new_product = list1[i][0] * list1[j][1]\n            if new_product < current_product:\n                # Update the current product and the length of the product\n                current_product = new_product\n                current_length = 1\n            elif new_product == current_product:\n                # Update the length of the product if it's equal to the current minimum\n                current_length += 1\n\n        # If the length of the current product is shorter than the minimum, update the minimum\n        if current_length < min_product:\n            min_product = current_length\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of their pairs.\n    If there are multiple pairs of tuples with the same minimum product, the function returns the first one.\n    '''\n    min_product = float('inf')\n    result = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n                result = (lst[i], lst[j])\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product to the largest possible integer\n    min_product = float('inf')\n\n    # iterate over the tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples\n            product = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1]\n\n            # check if the product is smaller than the minimum product\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = [(x[0]*x[1],x) for x in list1]\n    list2.sort()\n    return list2[0][1]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum and maximum values of the product\n    min_product = float('inf')\n    max_product = float('-inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Initialize variables to store the minimum and maximum values of the current tuple\n        min_tuple = float('inf')\n        max_tuple = float('-inf')\n\n        # Loop through each element in the current tuple\n        for j in range(len(list1[i])):\n            # Calculate the product of the element and the rest of the tuple\n            product = list1[i][j] * (list1[i][j+1:] + list1[i][j:j+1])\n\n            # Update the minimum and maximum values of the current tuple\n            min_tuple = min(min_tuple, product)\n            max_tuple = max(max_tuple, product)\n\n        # Calculate the product of the minimum and maximum values of the current tuple\n        product_tuple = min_tuple * max_tuple\n\n        # Update the minimum and maximum values of the product\n        min_product = min(min_product, product_tuple)\n        max_product = max(max_product, product_tuple)\n\n    # Return the minimum value of the product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product and the variables for the current product and the index of the smallest value\n    min_product = float('inf')\n    current_product = 1\n    index_smallest = 0\n\n    # Iterate through the list of tuples\n    for index, value in enumerate(list1):\n        # Calculate the product of the current tuple and the smallest value in the list\n        current_product = value[0] * value[1]\n\n        # Check if the current product is less than the minimum product\n        if current_product < min_product:\n            # If it is, update the minimum product and the index of the smallest value\n            min_product = current_product\n            index_smallest = index\n\n        # Check if the current product is equal to the minimum product\n        elif current_product == min_product:\n            # If it is, compare the indices of the tuples to determine which one is the smallest\n            if index_smallest < index:\n                # If the index of the smallest value is smaller, update the index of the smallest value\n                index_smallest = index\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = 1\n    min_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product *= abs(list1[i][0] * list1[j][1])\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    min_product = float('inf')\n    current_product = 1\n    result = []\n\n    # Iterate over the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the current tuple\n            current_product *= list1[j][1]\n\n            # Check if it's a new minimum\n            if current_product < min_product:\n                min_product = current_product\n                result = [(list1[i][0], list1[j][0]), (list1[i][1], list1[j][1])]\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the rest of the list and update the minimum value if needed\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    # Initialize a variable to store the minimum value\n    min_val = lst[0]\n    # Loop through the list and compare each element with the current minimum value\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for item in listval:\n            if item < min_val:\n                min_val = item\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a heterogeneous list of values and returns the minimum value in the list.\n    '''\n    # initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the values in the list\n    for val in listval[1:]:\n        # if the current value is less than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        raise ValueError(\"List cannot be empty\")\n    \n    # Initialize minimum value as the first element of the list\n    min_val = listval[0]\n    \n    # Loop through the rest of the list to find the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # First, check if the list is empty\n    if not listval:\n        raise ValueError(\"List is empty\")\n    \n    # Find the minimum value using a loop\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n\n    # Convert all other words to camel case\n    for i in range(1, len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join the words back into a string\n    camel_case = ''.join(words)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i] == \"_\":\n            camel_case += word[i+1].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace underscores with spaces\n    word = re.sub(r'[_]','', word)\n    # Convert the first character to lowercase and the rest to uppercase\n    return word[0].lower() + word[1:].capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Define regular expression pattern to match snake case words\n    pattern = re.compile('_(.)')\n    # Split the given snake case word into a list of sub-words\n    sub_words = pattern.split(word)\n    # Convert the first sub-word to camel case\n    camel_word = sub_words[0].upper()\n    # Append the remaining sub-words to the camel case word\n    for i in range(1, len(sub_words)):\n        camel_word += sub_words[i]\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the string into individual words\n    words = word.split('_')\n    \n    # Converting the first letter to uppercase and the rest to lowercase\n    result = []\n    for word in words:\n        if word.isupper():\n            result.append(word)\n        else:\n            result.append(word.capitalize())\n    \n    # Joining the words back together\n    return ''.join(result)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # convert the snake case string to camel case string\n    word = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words\n    words = word.split('_')\n\n    # Convert each word to camel case\n    camel_case_words = []\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_words.append(words[i])\n        else:\n            camel_case_words.append(words[i].title())\n\n    # Join the camel case words back into a string\n    camel_case_word = ''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = word.split('_')\n    \n    # Convert the first word to uppercase and the rest to lowercase\n    camel_case_word = words[0].capitalize()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].lower()\n    \n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the words back together into a camel case string\n    camel_case = ''.join(camel_case_words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('([a-z])([A-Z])', r'\\1_\\2', word)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # filter out odd numbers using the lambda function\n    new_list = list(filter(lambda x: x % 2 == 0, l))\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # filter out odd numbers from the list using the filter() function\n    odd_numbers = list(filter(lambda x: x % 2!= 0, l))\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        The nth element from the list of tuples.\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if type(list1[0]) == tuple:\n            return list1[n][0]\n        elif type(list1[0]) == list:\n            return list1[n][0]\n        else:\n            return None\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        return list1[n-1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1) == list:\n        if type(list1[0]) == tuple:\n            if n <= len(list1):\n                return list1[n-1]\n            else:\n                return \"Invalid input. Index out of range.\"\n        else:\n            return \"Invalid input. The first element of the list should be a tuple.\"\n    else:\n        return \"Invalid input. The first argument should be a list.\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list is empty\n    if not list1:\n        return None\n    \n    # check if the index is valid\n    if n < 0 or n >= len(list1):\n        return None\n    \n    # extract the nth element from the list\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1 & set2:\n        print(\"One or more values in the first sequence are present in the second sequence.\")\n    else:\n        print(\"No overlapping values found.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in another sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n            return\n    print(\"All values in the first list are present in the second list.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            print(item)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any common value in either of the lists and False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if any value in a list exists in another list or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if not list1 or not list2:\n        return False\n    \n    for i in list1:\n        if i in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    max_product = float('-inf')\n    max_pair = float('-inf'), float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = arr[i], arr[j]\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize the maximum product and pair\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    # Check for the maximum product in the remaining pairs\n    for i in range(2, len(arr)):\n        product = arr[i] * arr[i - 1]\n        if product > max_product:\n            max_product = product\n            max_pair = (arr[i], arr[i - 1])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0,0)\n    min_product = float('inf')\n    min_pair = (0,0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max1 = arr[i]\n            min1 = max2\n        elif arr[i] < min1:\n            min1 = arr[i]\n            max1 = min2\n            \n        if arr[i] > max2:\n            max2 = arr[i]\n            min2 = max1\n        elif arr[i] < min2:\n            min2 = arr[i]\n            max2 = min1\n            \n    return max(max1*max2, max2*min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = max1\n    min1 = arr[0]\n    min2 = min1\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    \n    print(\"Max pair is:\", (max1, max2))\n    print(\"Min pair is:\", (min1, min2))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max(max1*max2, max2*min1)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for i in range(len(Input)):\n        if common_first_element is None:\n            common_first_element = Input[i][0]\n        else:\n            if Input[i][0] == common_first_element:\n                return common_first_element\n            elif Input[i][0] < common_first_element:\n                common_first_element = Input[i][0]\n            elif Input[i][0] > common_first_element:\n                common_first_element = Input[i][0]\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples and returns the list of tuples containing common first element of the tuples.\n    '''\n    group = []\n    for i in range(len(Input)-1):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                group.append((Input[i], Input[j]))\n    return group"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the first elements of the tuples and the values are lists of tuples with that first element.\n    '''\n    grouped_dict = {}\n    for item in Input:\n        if item[0] in grouped_dict:\n            grouped_dict[item[0]].append(item)\n        else:\n            grouped_dict[item[0]] = [item]\n    return grouped_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    # First, we sort the input list of tuples based on their first element\n    sorted_list = sorted(Input, key=lambda x: x[0])\n\n    # Then, we iterate over the sorted list and keep track of the common first element\n    for i in range(len(sorted_list)-1):\n        if sorted_list[i][0] == sorted_list[i+1][0]:\n            common_element = sorted_list[i][0]\n            # We can return the first element and the number of times it appears in the input list\n            return common_element, sorted_list.count(common_element)\n\n    # If no common element is found, return None and 0\n    return None, 0"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append((Input[i][0], (Input[i][1], Input[j][1])))\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i][0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common first elements of the tuples and the values are the lists of tuples that have that common first element.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through the input list of tuples\n    for tuple in Input:\n        # Get the first element of the tuple\n        first_element = tuple[0]\n        \n        # If the first element is not in the dictionary yet, add it as a key with an empty list value\n        if first_element not in result:\n            result[first_element] = []\n        \n        # Add the tuple to the corresponding list in the dictionary\n        result[first_element].append(tuple)\n    \n    # Return the dictionary\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if common_element is None:\n            common_element = Input[i][0]\n        elif Input[i][0] == common_element:\n            pass\n        else:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for item in Input:\n        common_item = item[0]\n        for other_item in Input:\n            if common_item == other_item[0]:\n                common_first_element.append(common_item)\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = \"\"\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    \n    for i in lst: \n        if len(str(i)) > max_length: \n            max_length = len(str(i))\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list of integers as input and returns the element of the list with the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    # Find the length of the list\n    length = len(lst)\n    # Initialize a variable to store the maximum element\n    max_val = lst[0]\n    # Loop through the list and compare each element with the current maximum\n    for i in range(1, length):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    # Return the maximum element\n    return max_val"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initializing a variable to store the length of the maximum element\n    max_len = 0\n\n    # iterating over the list to find the maximum length\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_len:\n            max_len = len(str(lst[i]))\n\n    # iterating over the list again to find the maximum element\n    for i in range(len(lst)):\n        if len(str(lst[i])) == max_len:\n            # checking if the element is greater than the current maximum element\n            if lst[i] > max_element:\n                max_element = lst[i]\n\n    # returning the maximum element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    print(sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total*len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize the sum variable to zero\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum += i**3\n\n    # return the cube sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_nums = [x for x in range(2, n+1, 2)]\n    sum_cubes = 0\n    \n    for num in even_nums:\n        sum_cubes += num ** 3\n        \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the cube sum of the first n even natural numbers\n    cube_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2): \n        # Calculate the cube of the current even natural number\n        cube = i**3\n        # Add the cube to the cube sum variable\n        cube_sum += cube\n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_of_cubes = 0\n    i = 0\n    while i < n:\n        count += 1\n        sum_of_cubes += i**3\n        i += 2\n    return sum_of_cubes, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    # initialize sum variable to 0\n    sum_of_cubes = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate cube of i\n        cube_i = i*i*i\n        \n        # add cube of i to sum_of_cubes\n        sum_of_cubes += cube_i\n    \n    # return sum_of_cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i ** 3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initializing the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n    \n    # iterating n times\n    for i in range(1, n+1, 2):\n        # calculating the cube of i and adding it to the sum of cubes\n        sum_of_cubes += i**3\n        # incrementing the count variable\n        count += 1\n    \n    # returning the sum of cubes and the count of even natural numbers\n    return sum_of_cubes, count"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    result = result[:-2] # Removing the extra comma at the end\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \", \"\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    This function takes a tuple and concatenates each element by the delimiter.\n    \"\"\"\n    concatenated_string = delimiter.join(str(x) for x in test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of the given tuple by the given delimiter.\n    \"\"\"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i < len(test_tup)-1:\n            result += ', '\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    average = sum / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum of cubes to 0\n    sum_cubes = 0\n\n    # Calculate the cube of each natural number from 1 to n\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n\n    # Calculate the average of the cubes and return it\n    return sum_cubes / (n*n*n)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n\n    # find the sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # find the average of cubes of first n natural numbers\n    average_of_cubes = sum_of_cubes/n\n\n    # return the average of cubes of first n natural numbers\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        cube_sum += i**3\n        count += 1\n        \n    return cube_sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n        count += 1\n    average = sum_of_cubes/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of the cubes of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    return sum / count\n\nn = int(input(\"Enter the value of n: \"))\nresult = find_Average_Of_Cube(n)\nprint(\"The average of cubes of first\", n, \"natural numbers is\", result)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = ()\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_elements += (string,)\n        else:\n            rear_elements += (string[1:],)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [s[-1] for s in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(s[-1] for s in test_tuple)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for i in range(len(test_tuple)):\n        rear_tuple.append(test_tuple[i][-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple) - 1:\n            rear_list.append(test_tuple[i])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n\n    # Create a set to store the elements of the list\n    set1 = set(list1)\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the list\n    for sublist in list1:\n        # If the element is present in the sublist, increment the count\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n\n    :param nums: a list of numbers\n    :return: a new list with all odd numbers from the input list\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the input date string\n    match = re.match(pattern, dt)\n    \n    # check if the match object is not None\n    if match:\n        # extract the groups from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        # format the date string in dd-mm-yyyy format\n        new_dt = f'{day}-{month}-{year}'\n        \n        # return the formatted date string\n        return new_dt\n    \n    # if the input date string does not match the pattern, return the input string\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex pattern to match yyyy-mm-dd format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    \n    # extract the year, month, and day from the date\n    match = pattern.match(dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    \n    # construct the new date in dd-mm-yyyy format\n    new_dt = f'{day}-{month}-{year}'\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f\"{day}-{month}-{year}\"\n        return new_dt\n    else:\n        print(\"Invalid date format\")"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = r'^\\d{4}-\\d{2}-\\d{2}$'\n    mm_dd_yyyy = r'^\\d{2}-\\d{2}-\\d{4}$'\n\n    if re.match(yyyy_mm_dd, dt):\n        date_parts = dt.split('-')\n        new_date = f'{date_parts[2]}-{date_parts[1]}-{date_parts[0]}'\n        return new_date\n    elif re.match(mm_dd_yyyy, dt):\n        date_parts = dt.split('-')\n        new_date = f'{date_parts[2]}-{date_parts[0]}-{date_parts[1]}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace all '-' with a space\n    dt = re.sub(r'[-/]','', dt)\n    # reverse the order of the months and the day and month digits\n    yyyy, mm, dd = dt.split()\n    mm = mm[-2:] + mm[3:6] + mm[0:3]\n    dd = dd[-2:] + dd[3:6] + dd[0:3]\n    # join the parts of the date in the new format\n    return '-'.join([yyyy, mm, dd])"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match pattern in date string\n    match = re.match(pattern, dt)\n    # Extract groups from match object\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    # Convert date to new format\n    new_format_date = day + '-' + month + '-' + year\n    # Return new format date\n    return new_format_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the date string into four parts\n    parts = dt.split('-')\n    # Check if the parts are in the correct order\n    if len(parts)!= 3:\n        raise ValueError('Date must be in yyyy-mm-dd format')\n    # Convert each part to an integer\n    year = int(parts[0])\n    month = int(parts[1])\n    day = int(parts[2])\n    # Check if the year is in the right range\n    if year < 1000:\n        raise ValueError('Year must be at least 1000')\n    # Check if the month and day are valid\n    if month < 1 or month > 12:\n        raise ValueError('Month must be between 1 and 12')\n    if day < 1 or day > 31:\n        raise ValueError('Day must be between 1 and 31')\n    # Create the new date string\n    new_dt = '{:02d}-{:02d}-{}'.format(day, month, year)\n    # Return the new date string\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.sub(r'[^\\d]', '', dt)\n    mm_dd_yyyy = yyyy_mm_dd[6:] + yyyy_mm_dd[:2] + yyyy_mm_dd[4:6] + yyyy_mm_dd[2:4] + yyyy_mm_dd[0:2]\n    return mm_dd_yyyy"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    dt = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Step 1: Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    # Step 2: Insertion sort on small gaps\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    # Step 3: Reverse the sorted part of the array\n    start = 0\n    end = n - 1\n    while start < end:\n        my_list[start], my_list[end] = my_list[end], my_list[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Divide the list into n sub-lists of size h, where h = 1, 2, 4, 8,..., ln\n    # (or 1, 2, 4, 8,..., n/3 if n is a prime number)\n    for h in range(1, n//3+1):\n        # Do h-sort on the sub-lists\n        for i in range(h, n):\n            # Move current element to the correct position in the sub-list\n            for j in range(i, h, h):\n                if my_list[j] > my_list[j+h]:\n                    my_list[j], my_list[j+h] = my_list[j+h], my_list[j]\n    \n    # Sort the last sub-list\n    for i in range(n//2, -1, -1):\n        for j in range(i, n):\n            if my_list[j] > my_list[j+i]:\n                my_list[j], my_list[j+i] = my_list[j+i], my_list[j]\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest gap\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        # Do insertion sort for this gap size\n        for i in range(gap, n):\n            # Insert my_list[i] in sorted sequence\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Reduce gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the length of the list\n    n = len(my_list)\n\n    # Calculate the largest gap\n    gap = n // 2\n\n    while gap > 0:\n        # Insert the gap value into the list\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        # Decrease the gap value\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # set the increment gap\n    gap = n // 2\n    \n    # perform the shell sort\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            \n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            \n            my_list[j] = key\n            \n        gap //= 2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # If both tuples have the same length, then return their elementwise and tuples.\n    if len(test_tup1) == len(test_tup2):\n        and_tup = tuple([x & y for x, y in zip(test_tup1, test_tup2)])\n        return and_tup\n    # If one of the tuples has a longer length, then return the tuple with the shorter length.\n    else:\n        if len(test_tup1) > len(test_tup2):\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple with the elementwise and \n    of the two tuples.\n    '''\n    # create an empty tuple to store the result\n    result_tup = ()\n    \n    # loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # perform elementwise and\n        and_val = test_tup1[i] & test_tup2[i]\n        # add the and value to the result tuple\n        result_tup += (and_val,)\n        \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must be of equal length!\")\n        return None\n    \n    # Create an empty list to store the elementwise and tuples\n    and_tuples_list = []\n    \n    # Iterate over each pair of elements from the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from the tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        \n        # Perform the elementwise and operation on the elements\n        and_elem = elem1 & elem2\n        \n        # Create a tuple containing the and_elem and the original tuple index\n        and_tuple = (and_elem, i)\n        \n        # Append the and_tuple to the and_tuples_list\n        and_tuples_list.append(and_tuple)\n    \n    return and_tuples_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of equal length.\")\n        return None\n    \n    # check if the tuples contain only numerical values\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], (int, float)):\n            print(\"Error: Tuples must contain only numerical values.\")\n            return None\n    \n    # check if the tuples contain only numerical values\n    for i in range(len(test_tup2)):\n        if not isinstance(test_tup2[i], (int, float)):\n            print(\"Error: Tuples must contain only numerical values.\")\n            return None\n    \n    # extract the elementwise and tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] & test_tup2[i])\n    \n    # return the and_tuples\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    test_tup1: tuple\n        A tuple of any length.\n\n    test_tup2: tuple\n        A tuple of the same length as test_tup1.\n\n    Returns:\n    A tuple of the same length as test_tup1 containing the elementwise and tuples of test_tup1 and test_tup2.\n    '''\n    return tuple(zip(*[x & y for x, y in zip(test_tup1, test_tup2)]))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = (b ** 2) - (4 * a * c)\n\n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Find the two roots\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n\n        # Check if the roots are distinct\n        if root1!= root2:\n            # Return the root with the smaller absolute value\n            return root1 if abs(root1) < abs(root2) else root2\n        else:\n            # Return the only root\n            return root1\n    elif discriminant == 0:\n        # The parabola has a unique directrix\n        return -b / (2 * a)\n    else:\n        # The parabola has no directrix\n        return \"No directrix\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        return \"No real roots\"\n    elif discriminant == 0:\n        return \"One real root\"\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the determinant of the matrix\n    determinant = b**2 - 4*a*c\n\n    # If the determinant is 0, the equation has no real solution\n    if determinant == 0:\n        return None\n\n    # Find the root of the determinant\n    root = (-b + determinant**0.5)/(2*a)\n\n    # Return the directrix\n    return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"No real root exists.\")\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is:\", root1)\n        print(\"The directrix is:\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return \"No real roots\"\n    elif delta == 0:\n        return (-b) / (2 * a)\n    else:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # calculate the two roots of the discriminant\n    root1 = (-b + discriminant**(1/2))/(2*a)\n    root2 = (-b - discriminant**(1/2))/(2*a)\n    \n    # print the roots\n    print(\"The directrix of the parabola is:\", root1)\n    print(\"The directrix of the parabola is:\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is:\", (x1 + x2) / 2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        print(\"The directrix of the parabola is:\", x)\n    else:\n        print(\"The equation of the parabola is not a parabola.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print(\"The directrix of the parabola is:\", root)\n    else:\n        print(\"The parabola has no real roots.\")\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if a == 0:\n        x = -c/b\n        return \"The directrix is x = {}\".format(x)\n    else:\n        x1 = (-b + ((-b*b - 4*a*c)**0.5))/2/a\n        x2 = (-b - ((-b*b - 4*a*c)**0.5))/2/a\n        \n        return \"The directrix is x1 = {} and x2 = {}\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    This function takes in the coefficients of a parabola and returns the directrix.\n    '''\n\n    # Find the discriminant\n    discriminant = (b**2) - (4*a*c)\n\n    # Check if the discriminant is zero\n    if discriminant == 0:\n        return \"The directrix is equal to:\", (-b)/(2*a)\n    \n    # If the discriminant is negative, the directrix is imaginary\n    elif discriminant < 0:\n        return \"The directrix is imaginary.\"\n    \n    # If the discriminant is positive, the directrix is real\n    else:\n        return \"The directrix is equal to:\", (-b + math.sqrt(discriminant))/(2*a)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are not empty\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    # Create a dictionary to store the frequency of each element in the first list\n    freq1 = {}\n    for elem in list1:\n        if elem in freq1:\n            freq1[elem] += 1\n        else:\n            freq1[elem] = 1\n\n    # Create a dictionary to store the frequency of each element in the second list\n    freq2 = {}\n    for elem in list2:\n        if elem in freq2:\n            freq2[elem] += 1\n        else:\n            freq2[elem] = 1\n\n    # Iterate through the frequency dictionary of the first list and check if there is any element with a frequency greater than 0 in the second list\n    for elem, freq in freq1.items():\n        if freq in freq2 and freq2[freq] > 0:\n            return True\n\n    # If the loop completes without finding any common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Using set() to remove duplicate elements from both lists and storing them in a new list\n    common_list = list(set(list1) & set(list2))\n    # Checking if the length of the common list is greater than 0, which means there is at least one common element\n    if len(common_list) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # If the intersection of the two sets is not empty, there is a common element\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert both lists to sets to remove duplicates and then compare their intersection\n    return len(list1.intersection(list2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    # loop through both lists and check if there's any common element\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the smaller base\n    smaller_base = perimeter / 2\n\n    # Calculate the length of the longer base\n    longer_base = base1 + base2 - smaller_base\n\n    # Calculate the length of the smaller base that is a multiple of the longer base\n    multiple = longer_base - (longer_base % shorter_base)\n\n    # Calculate the length of the trapezium that is a multiple of the longer base\n    length = (multiple + longer_base) / 2\n\n    # Return the median length of the trapezium\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the height of the trapezium\n    h = height\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the half of the trapezium\n    half_h = h / 2\n\n    # Calculate the area of the half of the trapezium\n    half_area = 0.5 * (base1 + base2) * half_h\n\n    # Calculate the sum of the areas of the two halves\n    area_sum = area + half_area\n\n    # Calculate the median length of the trapezium\n    median = 0.5 * (base1 + base2) * (area_sum / 2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    area_half = area / 2\n    \n    # Calculate the base of the lower trapezium\n    lower_base = math.sqrt(area_half - height)\n    \n    # Calculate the base of the upper trapezium\n    upper_base = math.sqrt(area_half + height)\n    \n    # Calculate the height of the lower trapezium\n    lower_height = math.sqrt(area_half)\n    \n    # Calculate the height of the upper trapezium\n    upper_height = area - lower_height\n    \n    # Calculate the length of the lower trapezium\n    lower_length = lower_base * 2\n    \n    # Calculate the length of the upper trapezium\n    upper_length = upper_base * 2\n    \n    # Calculate the median length of the trapezium\n    median_length = (lower_length + upper_length) / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    half_height = height / 2\n    length1 = base1 * half_height\n    length2 = base2 * half_height\n\n    if (length1 + length2) % 2 == 0:\n        median = (length1 + length2) / 2\n    else:\n        median = length1 + length2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    # Calculate the lengths of the trapezium\n    length1 = area1 / (base1 + base2)\n    length2 = area2 / (base1 + base2)\n    # Calculate the area of the larger trapezium\n    area_larger = (base1 + base2) / 2 * height\n    # Calculate the median length of the trapezium\n    median_length = (area_larger - area1) / (base1 + base2)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    length = 0.5 * (base1 + base2 + height)\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n\n    # Calculate the length of the half of the trapezium\n    half_height = height / 2\n\n    # Calculate the lengths of the two halves of the trapezium\n    half_base1_length = half_base1 * height\n    half_base2_length = half_base2 * height\n\n    # Find the length of the median\n    median_length = (half_base1_length + half_base2_length + half_height) / 3\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each side\n    side1 = base1 + base2\n    side2 = height - base1 - base2\n\n    # Sort the sides in non-decreasing order\n    side1.sort()\n    side2.sort()\n\n    # Calculate the median length\n    median1 = side1[len(side1) // 2]\n    median2 = side2[len(side2) // 2]\n\n    # Calculate the trapezium's area\n    area = 0.5 * (base1 * height + base2 * height + (base1 + base2) * (side1[len(side1) // 2] + side2[len(side2) // 2]))\n\n    # Calculate the difference between the medians and the areas\n    diff = median1 - median2\n\n    # Return the median length of the trapezium\n    return diff\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the longest side of the trapezium\n    side1 = 0.5 * base1 * (height / 2)\n    side2 = 0.5 * base2 * (height / 2)\n\n    # Calculate the length of the shortest side of the trapezium\n    side3 = 0.5 * (base1 + base2) * height\n\n    # Find the three sides of the trapezium with the smallest perimeter\n    side_lengths = [side1, side2, side3]\n    perimeter = min(side_lengths)\n\n    # Calculate the area of the trapezium using the formula for trapezium area\n    area = (side1 + side2) * height + (side1 + side3) * height + (side2 + side3) * height\n\n    # Calculate the area of the triangle using the formula for triangle area\n    base_area = 0.5 * base1 * base2 * height\n    triangle_area = 0.5 * base_area\n\n    # Calculate the ratio of the area of the triangle to the area of the trapezium\n    ratio = triangle_area / area\n\n    # Find the length of the trapezium side that is the half of the total length of the trapezium\n    trapezium_side = 0.5 * perimeter\n\n    # Find the length of the shortest side of the trapezium\n    shortest_side = min(side_lengths)\n\n    # Calculate the length of the median trapezium\n    median_length = (trapezium_side + shortest_side) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5*base1*base2 + 0.5*base1*height + 0.5*base2*height\n\n    # Calculate the length of the left half of the trapezium\n    left_half_length = (0.5*height - 0.5*area)**0.5\n\n    # Calculate the length of the right half of the trapezium\n    right_half_length = (0.5*height + 0.5*area)**0.5\n\n    # Return the median of the two halves\n    return max(left_half_length, right_half_length)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check if the given number is greater than the array elements\n    for num in arr:\n        if num > number:\n            return True\n    \n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{number} is greater than {arr[i]} at index {i}\")\n            return True\n        elif arr[i] == number:\n            print(f\"{number} is equal to {arr[i]} at index {i}\")\n            return True\n    print(f\"{number} is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    greater = []\n    for i in arr:\n        if i > number:\n            greater.append(i)\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    if number > max(arr):\n        return \"The entered number is greater than all the elements in the array.\"\n    elif number > sum(arr):\n        return \"The entered number is greater than the sum of all the elements in the array.\"\n    else:\n        return \"The entered number is not greater than any element in the array.\""
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # loop through the array and check if the number is greater than each element\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n\n    # if the number is not greater than any element in the array, return False\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b\\w{1,}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a[b]*')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(b)*\"\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if the string has an a followed by one or more b's,\n    and False otherwise.\n    '''\n    pattern = re.compile(r'a{1,}b')\n    return bool(pattern.search(text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*b\\w*\\Z'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Extracting the last digit of the given number using string slicing\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # get the last character of the string\n    last_char = num_str[-1]\n    # convert the last character to an integer\n    last_int = int(last_char)\n    # return the last digit\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the input list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the odd characters\n    odd_str = ''\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is odd, append it to the odd string\n            odd_str += char\n    # return the odd string\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = [char for char in str1 if ord(char) % 2!= 0]\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char) % 2!= 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function removes odd characters from a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    return ''.join(filter(lambda x: x % 2 == 0, string))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char.isalpha() or char.isspace():\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                if test_list[j] < test_list[i]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Create an empty dictionary to store the count of tuple pairs\n    count_dict = {}\n    \n    # Loop through the test list and check for each pair of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the tuple is a bidirectional pair\n            if test_list[i] == test_list[j][::-1]:\n                # If it is, increment the count for that pair of tuples\n                if (test_list[i], test_list[j]) in count_dict:\n                    count_dict[(test_list[i], test_list[j])] += 1\n                else:\n                    count_dict[(test_list[i], test_list[j])] = 1\n                \n    # Return the count of bidirectional tuple pairs\n    return count_dict"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    bidirectional_count = {}\n    for pair in test_list:\n        if pair in bidirectional_count:\n            bidirectional_count[pair] += 1\n        else:\n            bidirectional_count[pair] = 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(test_list)\n\n    # initialize a counter for the bidirectional tuple pairs\n    bidirectional_count = 0\n\n    # loop through the unique set and check if a tuple is a reverse of itself\n    for i in range(len(unique_set)):\n        for j in range(i, len(unique_set)):\n            # check if the tuple is a reverse of itself\n            if (unique_set[i], unique_set[j]) == (unique_set[j], unique_set[i]):\n                # increment the bidirectional count if it is\n                bidirectional_count += 1\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result*10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        if num % 2 == 0:\n            result = result * 2\n        else:\n            result = result + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for num in L:\n        sum += num\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    # iterate over the list of integers\n    for num in L:\n        # add the current integer to the result variable\n        result += num\n    # return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for num in L:\n        multiple *= num\n    return multiple"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to 0\n    result = 0\n    # iterate over the list of integers\n    for i in L:\n        # add the current integer to the result\n        result += i\n    # return the result\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(against|above|after|again|across|along|around|at|atop|before|behind|below|beneath|beside|between|beyond|but|by|down|during|except|excepting|excepts|excepted|excepts|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepting|excepted|excepting|excepted|excepting|excepting|excepted|excepting|excepted|excepting|excepted|excepting|excepted|excepting|excepted|excepted|excepting|excepting|excepted|excepted|excepting|excepted|excepting|excepted|excepting|excepted|excepting|excepted|excepted|excepting|excepted|excepting|excepted|excepted|excepting|excepted|excepting|excepted|excepted|excepting|excepted|excepting|excepted|excepted|excepting|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|excepted|excepting|excepted|except"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression pattern to find the first adverb\n    pattern = re.compile(r'\\b\\w+\\s*([a-zA-Z]+)\\s*\\b')\n    \n    # Find all non-adverb words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Initialize an empty list to store the adverb and their positions\n    adverbs = []\n    \n    # Loop through each word in the list and check if it matches the pattern\n    for i, word in enumerate(words):\n        match = pattern.match(word)\n        if match:\n            # If it does, add the adverb and its position to the adverb list\n            adverb = match.group(1)\n            adverb_position = i\n            adverbs.append((adverb, adverb_position))\n    \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match an adverb\n    adverb_pattern = r'\\b(adverb)\\b'\n    \n    # Use the re.search() function to search for the adverb in the text\n    match = re.search(adverb_pattern, text)\n    \n    # If the adverb is found, return the position of the first occurrence\n    if match:\n        return match.start()\n    # If the adverb is not found, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern for identifying adverbs\n    pattern = r'\\b[A-Z][a-z]*\\b'\n\n    # Finding all the adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n\n    # Iterating over all the adverbs and finding their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        print(f'Adverb \"{adv}\" is at position {i} in the sentence')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regex pattern for finding adverbs\n    pattern = re.compile(r'\\b\\w+\\s*([a-zA-Z]*\\b\\s*adverb\\b\\s*[a-zA-Z]*)\\b')\n    # use the pattern to find all matches in the text\n    matches = pattern.finditer(text)\n    # iterate through the matches and print the position of the adverb and its text\n    for match in matches:\n        pos = match.start()\n        adverb = match.group(1)\n        print('Adverb found at position {}: \"{}\"'.format(pos, adverb))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Initialize variables for first adverb and position\n    adverb = None\n    position = None\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        \n        # Check if the word is an adverb\n        if re.match(r'\\b(really|really\\s+so|really\\s+really|just)\\b', word, re.IGNORECASE):\n            if adverb is None:\n                # If this is the first adverb, set the variable\n                adverb = word\n                position = i\n            else:\n                # If there are multiple adverbs, return the first one\n                return adverb, position\n                \n    # If no adverb is found, return None\n    return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern for adverbs\n    pattern = r'\\b\\w*ed\\b'\n\n    # search the text for adverbs using the regular expression pattern\n    matches = re.finditer(pattern, text)\n\n    # iterate over the matches and print the positions and adverbs\n    for match in matches:\n        print(f'Position: {match.start()} - Adverb: {text[match.start():match.end()]}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    adverb_regex = r'\\b(?:adverb)\\b'\n    \n    # Find all the matches of the adverb regular expression in the given text\n    matches = re.findall(adverb_regex, text)\n    \n    # If there are no matches, return an empty dictionary\n    if not matches:\n        return {}\n    \n    # Initialize an empty dictionary to store adverbs and their positions\n    adverbs_dict = {}\n    \n    # Iterate over all the matches and add them to the dictionary with their positions\n    for i, match in enumerate(matches):\n        adverbs_dict[match] = i + 1\n    \n    # Return the dictionary with adverbs and their positions\n    return adverbs_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a given text string as input and returns a dictionary containing the first adverb and their positions in the text.\n    '''\n    # Define a regular expression pattern for finding adverbs\n    adverb_pattern = re.compile(r'\\b\\w*ed\\b|\\b\\w*ing\\b|\\b\\w*ly\\b|\\b\\w*ly\\b|\\b\\w*fully\\b|\\b\\w*really\\b|\\b\\w*so\\b|\\b\\w*very\\b')\n    \n    # Search for all occurrences of the adverb pattern in the text\n    matches = adverb_pattern.finditer(text)\n    \n    # Create a dictionary to store the adverbs and their positions\n    adverbs = {}\n    for match in matches:\n        # Extract the matched text and its position\n        matched_text = match.group()\n        match_pos = match.start()\n        \n        # Check if the matched text is already in the dictionary\n        if matched_text in adverbs:\n            # If it is, add the position to the existing list of positions\n            adverbs[matched_text].append(match_pos)\n        else:\n            # If it's not, create a new list for the adverb and add it to the dictionary with the position as its value\n            adverbs[matched_text] = [match_pos]\n    \n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    This function takes a length of a side of a cube as input and calculates the surface area of the cube.\n    \"\"\"\n\n    # Calculating the surface area of the cube using the formula:\n    # (1/6) * l^2 * w^2 * h^2\n    surface_area = (1/6) * l**2 * l**2 * l**2\n\n    # Returning the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    print(\"The surface area of the cube is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area using the formula: s = 2 * l * h\n    s = 6 * l * l * l\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * math.pi * l**2  # Formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    pos_ratio = 0\n    if pos_count > 0:\n        pos_ratio = round((pos_count / len(nums)) * 100, 2)\n    \n    neg_ratio = 0\n    if neg_count > 0:\n        neg_ratio = round((neg_count / len(nums)) * 100, 2)\n    \n    return pos_ratio, neg_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    nums = array('i', nums)\n    # Initialize counters for positive and negative numbers\n    positive = 0\n    negative = 0\n    # Iterate over the array of integers\n    for num in nums:\n        # Count the number of positive numbers\n        if num > 0:\n            positive += 1\n        # Count the number of negative numbers\n        elif num < 0:\n            negative += 1\n    # Calculate the ratio of positive numbers to the total number of numbers\n    ratio = positive / (positive + negative)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an empty array to store the positive numbers\n    positive_arr = array('i')\n\n    # loop through the array and add positive numbers to the positive_arr array\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n\n    # calculate the ration of positive numbers in the array\n    pos_ratio = len(positive_arr) / len(nums)\n\n    # return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    positive_ratio = positive_count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = float(pos_count) / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    positive_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert the array to an array of positive integers\n    arr = array('i', [x for x in nums if x > 0])\n    \n    # count the number of positive integers in the array\n    positive_count = len(arr)\n    \n    # calculate the ration of positive integers\n    positive_ratio = positive_count / len(nums)\n    \n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n\n    # initialize an array to store the count of positive numbers\n    counts = array('i', [0] * len(nums))\n\n    # iterate through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            counts[num - 1] += 1\n\n    # calculate the ration of positive numbers\n    total_count = sum(counts)\n    positive_ratio = total_count / len(nums)\n\n    # return the ration of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = []\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n    return len(positives) / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    largest = lst[0]\n    for i in lst:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function returns the largest negative number in the given list.\n    \"\"\"\n    neg_num = float('-inf')\n    for num in lst:\n        if num < 0:\n            if num > neg_num:\n                neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store trimmed tuples\n    trimmed_list = []\n\n    # Iterate through each tuple in the input list\n    for tup in test_list:\n        # Get the length of the tuple\n        tup_len = len(tup)\n\n        # If the length of the tuple is greater than K, trim the tuple by k\n        if tup_len > K:\n            # Create a new tuple with the first K elements of the tuple\n            new_tup = tuple(tup[:K])\n            # Add the new tuple to the trimmed list\n            trimmed_list.append(new_tup)\n\n        # If the length of the tuple is less than or equal to K, add it to the trimmed list as is\n        else:\n            trimmed_list.append(tup)\n\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Calculate the length of the first tuple\n    len1 = len(test_tup1)\n\n    # Calculate the length of the second tuple\n    len2 = len(test_tup2)\n\n    # Check if the length of the first and second tuple is equal\n    if len1!= len2:\n        raise ValueError(\"The two tuples must have equal length to perform index multiplication.\")\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Iterate over each index of the first tuple\n    for i in range(len1):\n        # Multiply the elements of the tuples at that index\n        result = test_tup1[i] * test_tup2[i]\n        # Append the result to the result list\n        result_list.append(result)\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths!\")\n        return\n    \n    # Perform index wise multiplication\n    result_tup = tuple(x*y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the input tuples are same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Input tuples must be of equal length')\n\n    # Create a new tuple with the product of elements at each index\n    new_tup = tuple([test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))])\n\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check that the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length\")\n    # create a new tuple of the same length as the input tuples\n    result_tup = []\n    # loop through the tuples and perform index-wise multiplication\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    counter = Counter(lst) # Counter object to count the occurrence of each element in lst\n    count = {} # Dictionary to store the count of each element in the tuple\n    for elem in tup:\n        count[elem] = counter[elem] # Count the occurrence of each element in the tuple\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter() \n    for element in lst: \n        count[element] += tup.count(element) \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    for element in lst: \n        count[element] += 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for element in lst:\n        if element in counter:\n            counter[element] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function counts the number of occurrences of all elements in a tuple in a list.\n    '''\n    count_dict = {}  # creating a dictionary to count the occurrences of elements in tuple\n    \n    # iterating over the tuple\n    for i in tup: \n        if i in count_dict:  # checking if the element is already present in the dictionary\n            count_dict[i] += 1  # incrementing the count of the element if it is already present in the dictionary\n        else:  # if the element is not present in the dictionary\n            count_dict[i] = 1  # adding the element to the dictionary with count 1\n    \n    # iterating over the list and counting the occurrences of elements in the tuple\n    for i in lst: \n        if i in count_dict:  # checking if the element is already present in the dictionary\n            count_dict[i] += 1  # incrementing the count of the element if it is already present in the dictionary\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    for i in lst:\n        if i in c:\n            c[i] += 1\n    return c"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to set to remove duplicates\n    tup_set = set(tup) \n    count_dict = {}\n\n    # loop through the list and count the occurrence of each element in the tuple set\n    for i in lst: \n        if i in tup_set: \n            count_dict[i] = count_dict.get(i, 0) + 1\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple to a list to make the function work\n    lst = list(tup)\n    \n    # count the number of occurrences of each element in the list\n    count = Counter(lst)\n    \n    # convert the count dictionary to a tuple and return it\n    return tuple(count.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Count the number of occurrences of each element in a list in a tuple.\n\n    Args:\n        tup (tuple): The tuple to search in.\n        lst (list): The list to search for.\n\n    Returns:\n        Counter: A Counter object containing the number of occurrences of each element in lst in tup.\n    \"\"\"\n    counter = Counter()\n    for item in tup:\n        if item in lst:\n            counter[item] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = tuple(count_dict.get(x,0) for x in tup)\n    return count_tup"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i*(2*i-1))\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum_p = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            p += 2\n        else:\n            p *= 3\n        sum_p += p\n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91, 101]\n    return sum(perrin_numbers[:n])\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    perrin_numbers = []\n    perrin_sum = 0\n\n    for i in range(1, n+1):\n        perrin_numbers.append(sum_perrin(i))\n        perrin_sum += perrin_numbers[-1]\n\n    return perrin_sum\n\n\ndef sum_perrin(n):\n    '''\n    Write a function to calculate the nth Perrin number.\n    '''\n\n    if n < 2:\n        return n\n\n    return n*(n+1)*(2*n-1) // 6\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(n):\n        perrin_numbers.append(i**2 + i)\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(i*i*i)\n    perrin_numbers.sort()\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = []\n    for i in range(1, n+1):\n        perrin_list.append(2*i*i - 1)\n    return sum(perrin_list)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i*i) * (i*i - 1)\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and a size as input and returns a new list of strings\n    containing the extracted strings from the original list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list of str): List of string values.\n    size (int): Size of the extracted strings.\n\n    Returns:\n    list of str: List of extracted strings.\n    \"\"\"\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts a string from a list of strings, of the specified size.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(''.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            output.append(l[i])\n    return output"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n        elif l[i][-l[i].index(str)] == str:\n            result.append(l[i][:-l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n\n    Args:\n    str_list (list): List of string values.\n    l (int): Size of string to be extracted.\n\n    Returns:\n    list: List of extracted strings.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)+1])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a number representing the desired string size.\n    It returns a list of extracted strings with the specified size.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all spaces and tabs from the string\n    text1 = re.sub(r'\\s+','', text1)\n    # remove any leading or trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s+]', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces from the given string\n    pattern = re.compile(r'\\s+')\n    result = pattern.sub('', text1)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub('\\s+','', text)\n    \n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # using regular expression to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0\n    else: \n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n\n    loss_rate = actual_cost / sale_amount\n    if loss_rate > 1.5:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n    else:\n        loss = 0\n    return loss"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of the number.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through all odd factors of n\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        # check if the current factor is even\n        if n % i == 0 and n % (i+2)!= 0:\n            # add the current factor to the sum\n            sum += i\n\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n = n / i\n        else:\n            i += 1\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (2*i) == 0:\n                sum_even_factors += 2*i\n            else:\n                sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_factors = []\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors.append(i)\n\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    total = 0\n    i = 2\n    while i <= n:\n        if n % i == 0 and i % 2 == 0:\n            count += 1\n            total += i\n        i += 1\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            sum += i + n // i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains a word that contains 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\b\\s+(z)\\b'\n    # Find all non-overlapping matches of the pattern in the input text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # Print all the matches\n    for match in matches:\n        print(match.group())"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\bz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match the word 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return the matched string\n    if match:\n        return match.group()\n    \n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bwordz\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern to match words containing 'z'\n    pattern = r'\\b[A-Za-z]+\\b\\s[zZ]'\n    \n    # Use the re.search() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return 'Invalid month number'"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # check if month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n\n    # check if month has 31 days\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check for leap year\n    leap_year = True\n    if monthnum2 > 2 and (monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0)):\n        leap_year = False\n    # check for month number\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        days_in_month = 29\n    elif monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        days_in_month = 31\n    else:\n        days_in_month = 0\n    # check for days in month\n    if days_in_month == 0:\n        print(\"Invalid month number\")\n    elif days_in_month == 31 and leap_year:\n        print(\"Valid month number\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and not (year % 400 == 0 or (year % 100!= 0 and year % 4 == 0)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing and concatenation\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst[0])\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    # Initialize a variable to store the minimum length\n    min_len = float('inf')\n    \n    # Initialize an empty list to store the minimum sublist\n    min_sublist = []\n    \n    # Loop through the list of sublists\n    for sublist in lst:\n        \n        # Check if the current sublist has a shorter length than the minimum length found so far\n        if len(sublist) < min_len:\n            \n            # Update the minimum length and sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to remove uppercase substrings\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from it.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all the uppercase substrings in the string using the pattern\n    matches = pattern.findall(str1)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[A-Z]+'  # define regex pattern for uppercase substrings\n    return re.sub(pattern, '', str1)  # replace all uppercase substrings with empty strings using re.sub() function"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string\n    upper_substrings = re.findall('[A-Z]+', str1)\n    \n    # Iterate through the list of upper case substrings and remove them from the string\n    for i in range(len(upper_substrings)):\n        str1 = str1.replace(upper_substrings[i], '')\n    \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z].*[A-Z]'\n    # Use the pattern to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, string)\n    # Remove all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        string = string.replace(substring, '')\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?<=[a-z])(?=[A-Z])'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings in the string and replace them with an empty string\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    str2 = re.sub(r'(?i)\\b[A-Z]\\w*\\b', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    uppercase_matches = pattern.findall(str1)\n    for match in uppercase_matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Initialize an empty list to store the first elements of each sublist\n    result = []\n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # Append the first element of the sublist to the result list\n        result.append(sublist[0])\n    # Return the result list\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if isinstance(sublist, list):\n            print(sublist[0])\n        else:\n            print(sublist)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Create an empty list to store the first elements of each sublist\n    sub_list = []\n    # Loop through each sublist in the input list\n    for sub in lst:\n        # If the sublist is not empty, add the first element to the sub_list\n        if len(sub) > 0:\n            sub_list.append(sub[0])\n    # Return the sub_list\n    return sub_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.append(i[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(s):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of uppercase characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    def backtrack(start, path):\n        if len(path) == len(list1):\n            print(path)\n            return\n        for i in range(start, len(list1)):\n            backtrack(i+1, path + [list1[i]])\n    \n    backtrack(0, [])\n    \n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        first_element = list1[0]\n        rest_of_list = list1[1:]\n        combinations_list = [first_element]\n        for i in range(len(rest_of_list)):\n            new_combinations = []\n            for j in range(len(combinations_list)):\n                new_combinations += [combinations_list[j] + [rest_of_list[i]]]\n            combinations_list = new_combinations\n        return combinations_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize an empty list to store the combinations\n    combinations = []\n\n    # loop through the list and for each element, loop through the remaining elements and create the combination\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Sort the list in ascending order\n    list1 = sorted(list1)\n\n    # Initialize a list to store all possible combinations\n    combinations = []\n\n    # Define a helper function to generate combinations recursively\n    def generate_combinations(start, current_combination):\n        \"\"\"\n        Generate all possible combinations of a given list using recursion.\n        \"\"\"\n        # Base case: if we have generated all possible combinations\n        if start == len(list1):\n            combinations.append(current_combination)\n            return\n\n        # Recursive case: add the current element to the combination and generate the remaining combinations\n        generate_combinations(start+1, current_combination+[list1[start]])\n        generate_combinations(start+1, current_combination)\n\n    # Call the helper function to generate the first combination\n    generate_combinations(0, [])\n\n    # Return the list of all possible combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort() # sort the list in ascending order\n    res = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            res.append(list1[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            rest_list = list1[:i] + list1[i+1:]\n            for combo in combinations_list(rest_list):\n                result.append([list1[i]] + combo)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1) - i + 1):\n            combination = list1[j:j+i]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    combinations = []\n\n    for i in range(1, len(list1) + 1):\n        for j in itertools.combinations(list1, i):\n            combinations.append(list(j))\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Finds all possible combinations of the elements of a given list.\n    \"\"\"\n    n = len(lst)\n    result = []\n\n    def backtrack(start, path):\n        if len(path) == n:\n            result.append(path[:])\n            return\n        for i in range(start, n):\n            backtrack(i+1, path+[lst[i]])\n\n    backtrack(0, [])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            res.append(list1[i:j])\n    return res"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n            \n    max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    if not arr or len(arr) == 1:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for num in arr:\n        if curr_product < 0:\n            curr_product = 1\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    result = [0] * len(arr)\n    max_ending_here = 1\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        result[i] = max_ending_here\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here = 1\n        else:\n            max_ending_here *= arr[i]\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    start_index = 0\n    end_index = 0\n    for i in range(len(arr)):\n        if curr_product < 0:\n            curr_product = 1\n            start_index = i\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            end_index = i\n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    curr_product = 1\n    \n    for num in arr[1:]:\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n        if curr_product < 0:\n            curr_product = 1\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product subarray of the given array.\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')  # Initialize max product as negative infinity\n    current_product = 1  # Initialize current product as 1\n\n    for i in range(len(arr)):\n        # Update current product\n        current_product = max(arr[i], current_product * arr[i])\n        # Update max product\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0], 1\n    \n    # Initialize variables\n    max_product = arr[0]\n    current_product = arr[0]\n    max_so_far = arr[0]\n    \n    # Traverse the array\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n        \n        max_so_far = max(max_so_far, current_product)\n        \n        max_product = max(max_product, max_so_far)\n    \n    return max_product, max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Get all the values from the dictionary\n    values = list(dict.values())\n\n    # Check if all values are the same\n    if len(values) > 1 and all(x == values[0] for x in values[1:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())  # convert the dictionary values to a set\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert dictionary to list\n    values = list(dict.values())\n\n    # Iterate over list and check if all values are same\n    for i in range(len(values)):\n        if i == 0:\n            continue\n        else:\n            if values[i]!= values[0]:\n                return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set([dict[k] for k in dict])\n    return len(values) == 1 and values.pop() == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = list(dict.values())\n    return all(x == all_values[0] for x in all_values[1:])"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # If the dictionary is empty, return True\n    if not dict:\n        return True\n\n    # Get the first value from the dictionary\n    value = next(iter(dict.values()))\n\n    # Loop through the dictionary and check if all values are same\n    for _ in dict.values():\n        if value!= _:\n            return False\n\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    This function drops empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create an empty dictionary to store the non-empty items\n    dict2 = {}\n    # Iterate over the keys of the original dictionary\n    for key in dict1.keys():\n        # Check if the value of the key is an empty string\n        if dict1[key] == \"\":\n            # If it is, skip over it and move on to the next key\n            continue\n        # If the value is not empty, add it to the new dictionary\n        dict2[key] = dict1[key]\n    # Return the new dictionary containing only non-empty items\n    return dict2"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Initialize two pointers i and j to the first and last elements of the array\n    i = 0\n    j = n - 1\n    # Initialize the maximum product found so far\n    max_product_so_far = arr[0] * arr[1]\n    # Initialize the maximum product found so far for odd-length subarrays\n    max_product_odd_so_far = max_product_so_far\n    # Initialize the maximum product found so far for even-length subarrays\n    max_product_even_so_far = max_product_so_far\n    \n    while i < j:\n        # Calculate the product of the elements in the current subarray\n        product = arr[i] * arr[j]\n        # Update the maximum product found so far for odd-length subarrays\n        max_product_odd_so_far = max(max_product_odd_so_far, product)\n        # Update the maximum product found so far for even-length subarrays\n        max_product_even_so_far = max(max_product_even_so_far, max_product_odd_so_far - arr[i])\n        # Move the pointers i and j to the next pair of elements in the subarray\n        if product > 0:\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n    \n    # Return the maximum product found so far for odd-length subarrays\n    return max_product_odd_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize the maximum product and the current subsequence product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Loop through the array and update the maximum product and subsequence product\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        elif current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n    prev_num = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > prev_num:\n            current_product *= arr[i]\n            prev_num = arr[i]\n        else:\n            if current_product > max_product:\n                max_product = current_product\n            current_product = 1\n            prev_num = arr[i]\n\n    if current_product > max_product:\n        max_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    # Initialize the maximum and minimum values in the subsequence\n    max_val = min_val = arr[0]\n    \n    # Iterate through the remaining array\n    for i in range(1, len(arr)):\n        # Update the maximum and minimum values in the subsequence\n        max_val = max(max_val * arr[i], max_val, min_val * arr[i])\n        min_val = min(min_val * arr[i], min_val, max_val * arr[i])\n    \n    # Return the maximum product\n    return max_val"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Create a list to store the products of the subarrays\n    product_list = []\n    \n    # Loop through each subarray\n    for i in range(len(arr)):\n        # Initialize variables to track the maximum product and its start index\n        max_product = float('-inf')\n        max_start = 0\n        \n        # Loop through the remaining elements of the array\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the current subarray\n            product = arr[i] * arr[j]\n            \n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n                max_start = i\n            \n            # Add the product to the list of products\n            product_list.append(product)\n        \n        # If the maximum product ends at the current index, remove it from the list\n        if i == max_start:\n            product_list.pop()\n    \n    # Return the maximum product found\n    return max(product_list)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    max_product = float('-inf')\n    min_product = float('inf')\n    prev_num = float('-inf')\n    curr_num = float('-inf')\n    \n    for i in range(n):\n        curr_num = arr[i]\n        if curr_num <= prev_num:\n            min_product = curr_num\n        else:\n            max_product = max(max_product, curr_num * min_product)\n        \n        prev_num = curr_num\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) < 3:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            max_product = max(max_product, prod)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a list to store the sum of neighboring elements\n    pairwise_sum = []\n    # iterate over the tuple\n    for i in range(len(test_tup)-1):\n        # add the two elements and append the sum to the list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # return the list of pairwise sums\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n\n    return add_pairwise(test_tup[1:]) + (test_tup[0] + test_tup[1],)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    result = 0\n    for i in range(size-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the result variable\n    result = 0\n    # Loop through the tuple\n    for i in range(len(test_tup) - 1):\n        # Add the pairwise elements to the result\n        result += test_tup[i] + test_tup[i+1]\n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple should have at least 2 elements.\")\n    else:\n        return sum([test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1)])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return add_pairwise(test_tup[1:]) + (test_tup[0] + test_tup[-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the tuple and add each element with its neighbor\n    for i in range(len(test_tup) - 1):\n        sum += test_tup[i] + test_tup[i+1]\n    \n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The tuple must contain at least two elements.\"\n    else:\n        result = 0\n        for i in range(len(test_tup)-1):\n            result += test_tup[i] + test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to zero\n    sum_pairwise = 0\n    # iterate over the indices of the tuple (starting from 1)\n    for i in range(1, len(test_tup)):\n        # add the current element and the next element to get the pairwise addition\n        sum_pairwise += test_tup[i-1] + test_tup[i]\n    # return the sum of pairwise additions\n    return sum_pairwise"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes two arguments: the array `arr` and the value `n`.\n    It returns the remainder of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    product = 1\n    for i in arr:\n        product *= i\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array\n    multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n and returns the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Returns the remainder of the product of the array multiplied modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in two arguments, an array of integers and an integer n,\n    and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)):\n        if l[i] == l[i-1] + 1:\n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1]-l[i]!=1: \n            return False \n    return True "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]+1:\n            print(l[i], l[i+1]+1, \"are consecutive\")\n            return True\n    print(\"No consecutive numbers found\")\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Check if the list is empty\n    if not l: \n        return False\n\n    # Initialize two variables to keep track of the start and end of the consecutive number\n    start = None\n    end = None\n\n    # Iterate through the list\n    for i in range(len(l)): \n        # If the current number is not consecutive and the start and end of the consecutive number are not defined, set the start as the current number\n        if l[i]!= i+1 and start is None: \n            start = l[i]\n            continue\n\n        # If the current number is consecutive and the start and end of the consecutive number are defined, set the end as the current number\n        if l[i] == i+1 and start is not None: \n            end = l[i]\n\n        # If the end of the consecutive number is found, check if it is consecutive and print the result\n        if end is not None and end == i+1: \n            print(\"The given list contains consecutive numbers.\")\n            return True\n\n        # Reset the start and end variables if a new consecutive number is found\n        if end is not None and l[i]!= i+1: \n            start = l[i]\n            end = None\n\n    # If the loop completes without finding any consecutive numbers, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Using a loop to iterate through the list\n    for i in range(len(l)-1): \n        # If the difference between current element and next element is 1, then it is consecutive\n        if l[i+1] - l[i] == 1: \n            return True\n    \n    # If the loop completes without finding any consecutive elements, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if all the numbers in the list are consecutive, else it returns False.\n    '''\n    if len(l) < 2:\n        return True\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if it contains consecutive numbers, else False.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # First, sort the lists in ascending order based on their length\n    test_list1.sort(key=len)\n    test_list2.sort(key=len)\n    \n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Iterate through the sorted lists\n    i, j = 0, 0\n    while i < len(test_list1) and j < len(test_list2):\n        # If the elements at indices i and j are equal, add them to the common_elements list\n        if test_list1[i] == test_list2[j]:\n            common_elements.append(test_list1[i])\n            # Increment both indices\n            i += 1\n            j += 1\n        # If the element at index i is shorter than the element at index j, increment i\n        elif len(test_list1[i]) < len(test_list2[j]):\n            i += 1\n        # If the element at index j is shorter than the element at index i, increment j\n        else:\n            j += 1\n    \n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for item in test_list1:\n        if item in test_list2:\n            intersection.append(item)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define an empty dictionary to store the elements of the first tuple list\n    dict1 = {}\n    # Loop through the first tuple list\n    for item in test_list1:\n        # If the element is not already in the dictionary, add it\n        if item not in dict1:\n            dict1[item] = 1\n    # Define an empty dictionary to store the elements of the second tuple list\n    dict2 = {}\n    # Loop through the second tuple list\n    for item in test_list2:\n        # If the element is not already in the dictionary, add it\n        if item not in dict2:\n            dict2[item] = 1\n    # Find the intersection of the two dictionaries\n    intersection = set(dict1) & set(dict2)\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the intersection\n    intersection = set()\n\n    # Loop through each element in the first list\n    for element in test_list1:\n        # Check if the element exists in the second list\n        if element in test_list2:\n            # If it does, add it to the intersection set\n            intersection.add(element)\n\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # converting the tuple list into a set to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # finding the intersection between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # converting the intersection set back into a list and returning it\n    return list(common_elements)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two input lists of tuples and returns the tuple intersection of the elements in both lists irrespective of their order.\n    \"\"\"\n    # Create a dictionary to store the intersection of the two lists\n    intersection_dict = {}\n    # Iterate through the first list\n    for i in range(len(test_list1)):\n        # Check if the current element is already present in the dictionary\n        if test_list1[i] in intersection_dict:\n            # If it is, increment the count by 1\n            intersection_dict[test_list1[i]] += 1\n        # If the current element is not present in the dictionary, add it with a count of 1\n        else:\n            intersection_dict[test_list1[i]] = 1\n    # Iterate through the second list\n    for i in range(len(test_list2)):\n        # Check if the current element is present in the dictionary\n        if test_list2[i] in intersection_dict:\n            # If it is, increment the count by 1\n            intersection_dict[test_list2[i]] += 1\n            # If the count becomes greater than 1, remove the element from the dictionary\n            if intersection_dict[test_list2[i]] > 1:\n                del intersection_dict[test_list2[i]]\n    # Create a list of tuples from the dictionary and return it\n    return list(intersection_dict.keys())"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    test_list1 (list): A list of tuples.\n    test_list2 (list): A list of tuples.\n\n    Returns:\n    list: A list of tuples that are common to both input lists.\n    \"\"\"\n    intersection = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                intersection.append(t1)\n                break  # break inner loop after finding the first match\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # check if both lists are empty\n    if not test_list1 or not test_list2:\n        return []\n\n    # sort both lists\n    test_list1.sort()\n    test_list2.sort()\n\n    # initialize an empty list to store the intersection\n    intersection = []\n\n    # traverse through both lists simultaneously\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # if the current elements are equal, add it to the intersection list\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            # move both pointers to the next element\n            i += 1\n            j += 1\n        # if the current element in list1 is smaller, move it to the next index\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        # if the current element in list2 is smaller, move it to the next index\n        else:\n            j += 1\n\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns their intersection.\n    \"\"\"\n    # Using set() to remove duplicates from both lists\n    test_list1 = list(set(test_list1))\n    test_list2 = list(set(test_list2))\n\n    # Using set intersection to find the intersection of two lists\n    intersection = list(set(test_list1) & set(test_list2))\n\n    # Sorting the intersection list in ascending order based on the first element of each tuple\n    intersection.sort(key=lambda x: x[0])\n\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Args:\n    str1: A string.\n    ch: The character to be replaced.\n    newch: The new character to replace the old character.\n\n    Returns:\n    A new string with all occurrences of the old character replaced by the new character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to be inserted.\n\n    Returns:\n    str: The modified string.\n\n    \"\"\"\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    :param str1: string\n    :param ch: character to be replaced\n    :param newch: new character to replace the old character\n    :return: string\n    \"\"\"\n\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # If the character is equal to the old character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n\n        # Otherwise, add the old character to the modified string\n        else:\n            modified_str += char\n\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of the specified character in a string with the specified new character.\n\n    Parameters:\n    -----------\n    str1 : str\n        The original string.\n    ch : str\n        The character to be replaced.\n    newch : str\n        The new character to replace all occurrences of the specified character with.\n\n    Returns:\n    --------\n    str\n        The modified string with all occurrences of the specified character replaced with the specified new character.\n\n    \"\"\"\n\n    # initialize an empty string to hold the modified string\n    modified = \"\"\n\n    # loop through each character in the original string\n    for char in str1:\n\n        # if the current character is not the specified character, add it to the modified string\n        if char!= ch:\n            modified += char\n\n        # if the current character is the specified character, add the new character to the modified string\n        else:\n            modified += newch\n\n    # return the modified string\n    return modified"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # sort the dictionary by value in descending order\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = sorted(sorted_dict, key=lambda x: x[1], reverse=True)\n\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes in a dictionary as input and returns a sorted dictionary by value.\n    '''\n\n    # Get a Counter object from the input dictionary\n    count = Counter(dict1)\n\n    # Sort the Counter object based on values\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with sorted values\n    sorted_dict = {k:v for k,v in sorted_count}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1])\n    # create a dictionary from the sorted counter object\n    sorted_dict = dict(sorted_counter)\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a list of tuples\n    dict_list = dict1.items()\n\n    # Sort the list of tuples by the second element (value)\n    dict_list.sort(key=lambda x: x[1])\n\n    # Create a new dictionary from the sorted list\n    sorted_dict = dict(dict_list)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    return Counter(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the sum of the largest and smallest value\n    sum_largest_smallest = nums[-1] + nums[0]\n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    max_val = max(nums)\n    min_val = min(nums)\n\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    \n    largest = min_num = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < min_num:\n            min_num = num\n    \n    return largest + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables to store the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables for the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError('Array must have at least two elements')\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"The array should have at least 2 elements.\"\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            elif num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    \n    min_val = max_val = nums[0]\n    \n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n            \n    return min_val + max_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check whether the given string is all lowercase or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use re.findall to find all lowercase substrings in the string\n    substrings = re.findall(pattern, str1)\n    # Use a list comprehension to remove the substrings from the string\n    str2 = ''.join([char for char in str1 if not char.lower() in substrings])\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # find all lowercase substrings in the input string\n    substrings = re.findall(r'[a-z]+', str1)\n    # remove all lowercase substrings from the input string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for finding lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    \n    # Split the input string into words\n    words = str1.split()\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over each word\n    for word in words:\n        # Check if the word contains any lowercase substrings\n        if pattern.search(word):\n            # If it does, skip it\n            continue\n        # If the word doesn't contain any lowercase substrings, append it to the result list\n        result.append(word)\n    \n    # Join the result list into a single string and return it\n    return''.join(result)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.findall('[a-z]', str1)\n    for i in lowercase:\n        str1 = str1.replace(i, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    # Use a regular expression to remove all lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to find all lowercase substrings in the given string\n    pattern = re.compile(r'[a-z]+')\n    matches = pattern.findall(str1)\n\n    # Loop through the matches and remove each one from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # use re.sub() to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a number\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert the number to a string\n    s = str(n)\n\n    # Get the first digit of the string\n    first_digit = s[0]\n\n    # Convert the first digit to an integer\n    first_digit_int = int(first_digit)\n\n    return first_digit_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Convert the first character of the string to an integer\n    first_digit = ord(num_str[0]) - 48\n    # Return the first digit as an integer\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_num = int(str(n)[0])\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Extract the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_int = int(first_char)\n    # Return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of first n natural numbers\n    cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of first n natural numbers\n    total = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    return cubes - total"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    for i in range(n):\n        sum_cubes += i**3\n        sum_numbers += i\n    \n    diff = sum_cubes - sum_numbers\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n\n    # Find the sum of the first n natural numbers\n    sum_natural = sum(range(1,n+1))\n\n    # Find the difference between the two sums\n    difference = abs(sum_cubes - sum_natural)\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    # sum of first n natural numbers\n    sum_nums = sum(range(1, n+1))\n    # difference between the two sums\n    diff = sum_cubes - sum_nums\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_cubes(n):\n        \"\"\"\n        Returns the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return sum([i**3 for i in range(1, n+1)])\n\n    def sum_natural_numbers(n):\n        \"\"\"\n        Returns the sum of the first n natural numbers.\n        \"\"\"\n        return sum(range(1, n+1))\n\n    sum_cubes_result = sum_cubes(n)\n    sum_natural_numbers_result = sum_natural_numbers(n)\n\n    return sum_cubes_result - sum_natural_numbers_result\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of the first n natural numbers\n    sum_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_natural_numbers += i\n    \n    # Find the sum of the cubes of the first n natural numbers\n    sum_cubes_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes_natural_numbers += i**3\n    \n    # Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_cubes_natural_numbers - sum_natural_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n                if count == N:\n                    return True\n    return False"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n\n    for i in range(N):\n        xor_sum += A[i] ^ i\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            xor_sum -= A[i] ^ A[j]\n            count += 1\n            xor_sum += A[j] ^ i\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A of integers and an integer N as input.\n    It then finds the number of pairs whose xor value is odd.\n\n    Returns:\n    An integer representing the count of odd pairs.\n    '''\n    odd_pairs = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                odd_pairs += 1\n    return odd_pairs"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes two lists A and N and returns the count of odd pairs whose XOR value is odd.\n    \"\"\"\n    xor_list = []\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(N)):\n            xor_list.append(A[i] ^ N[j])\n    xor_list.sort()\n    for i in range(len(xor_list)):\n        if xor_list[i] % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i+1, N):\n            xor ^= A[i] ^ A[j]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N): \n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {} \n    for i in range(N): \n        freq[A[i]] = freq.get(A[i], 0) + 1\n    \n    # Initialize two variables to keep track of odd xor values\n    odd_xor = 0\n    odd_count = 0\n    \n    # Iterate over the array and calculate odd xor values\n    for i in range(N): \n        for j in range(i+1,N): \n            xor_value = A[i] ^ A[j]\n            if xor_value in freq and freq[xor_value] % 2!= 0: \n                odd_xor = xor_value\n                odd_count += 1\n                freq[A[i]] -= 1\n                freq[A[j]] -= 1\n                \n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    count = 0\n    for i in range(N):\n        xor_value ^= A[i]\n        if xor_value % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase\n    string = string.lower()\n    # create a new string where all characters have been toggled to their opposite case\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    # return the new string with all characters toggled\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Create a new string with all characters toggled\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lowercase = string.lower()\n    # Loop through the lowercase string and change the case of each character\n    new_string = \"\"\n    for char in lowercase:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Convert the character to lowercase\n            new_char = char.lower()\n        else:\n            # Convert the character to uppercase\n            new_char = char.upper()\n        # Append the new character to the new string\n        new_string += new_char\n    # Return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, make it lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, make it uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is uppercase, convert it to lowercase\n        if string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(map(lambda x: x.upper() if x.islower() else x.lower(), string))"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # convert both numbers to lists of digits\n    digits_list1 = list(map(int, str(n1)))\n    digits_list2 = list(map(int, str(n2)))\n\n    # find the number of digits in each number\n    num_digits1 = len(digits_list1)\n    num_digits2 = len(digits_list2)\n\n    # check if the numbers have the same number of digits\n    if num_digits1!= num_digits2:\n        print(\"Error: The two numbers have different numbers of digits.\")\n        return\n\n    # initialize the sum to zero\n    distance_sum = 0\n\n    # loop through each digit in both lists\n    for i in range(num_digits1):\n        # calculate the per-digit difference\n        digit_diff = abs(digits_list1[i] - digits_list2[i])\n\n        # add the difference to the sum\n        distance_sum += digit_diff\n\n    # return the sum of per-digit differences\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to lists of digits\n    digit_list1 = list(map(int, str(n1)))\n    digit_list2 = list(map(int, str(n2)))\n    \n    # Create an empty list to store the per-digit differences\n    diff_list = []\n    \n    # Loop through each digit in the two integers\n    for i in range(len(digit_list1)):\n        # Calculate the absolute difference between the digits\n        diff = abs(digit_list1[i] - digit_list2[i])\n        # Append the difference to the diff_list\n        diff_list.append(diff)\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff_list)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    while n1!= 0 or n2!= 0:\n        if n1 == 0:\n            sum_diff += n2\n        elif n2 == 0:\n            sum_diff += n1\n        else:\n            sum_diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    sum_diff = 0\n    while diff > 0:\n        sum_diff += diff % 10\n        diff //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # loop through the digits of the two numbers and calculate the sum of the per-digit differences\n    sum_diff = 0\n    for i in range(len(str1)):\n        diff = int(str1[i]) - int(str2[i])\n        sum_diff += diff**2\n    \n    # take the square root of the sum of differences and return it as the result\n    return sum_diff**(1/2)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings to make them easier to work with\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum to 0\n    distance_sum = 0\n\n    # Loop through each digit in each number\n    for i in range(len(n1_str)):\n        # Convert the current digit to an integer\n        digit1 = int(n1_str[i])\n        digit2 = int(n2_str[i])\n\n        # Calculate the per-digit difference\n        difference = abs(digit1 - digit2)\n\n        # Add the difference to the distance sum\n        distance_sum += difference\n\n    # Return the sum of the per-digit differences\n    return distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    n1 = abs(n1)\n    n2 = abs(n2)\n    while n1 > 0 or n2 > 0:\n        diff = abs(n1 % 10 - n2 % 10)\n        diff_sum += diff\n        n1 //= 10\n        n2 //= 10\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Initialize a variable to store the sum of the differences\n    digit_sum = 0\n\n    # Convert each number to a list of digits and sort them in ascending order\n    num1_digits = sorted([int(digit) for digit in str(n1)])\n    num2_digits = sorted([int(digit) for digit in str(n2)])\n\n    # Loop through each digit in the first number\n    for digit in num1_digits:\n        # Find the difference between the digit in the second number and the current digit in the first number\n        digit_diff = abs(digit - num2_digits[num2_digits.index(digit)])\n        # Add the difference to the sum of the differences\n        digit_sum += digit_diff\n\n    # Return the sum of the differences\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n    \n    # iterate through each digit of each number\n    for i in range(len(str(n1))):\n        # convert the digits of the numbers to integers\n        num1_digit = int(str(n1)[i])\n        num2_digit = int(str(n2)[i])\n        \n        # calculate the per-digit difference and add it to the sum_diff variable\n        diff = abs(num1_digit - num2_digit)\n        sum_diff += diff\n    \n    # return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the number of digits in the integers\n    num_digits_n1 = len(str(n1))\n    num_digits_n2 = len(str(n2))\n    \n    # Initialize the sum of per-digit difference to 0\n    digit_diff_sum = 0\n    \n    # Loop through the digits of n1 and n2\n    for i in range(max(num_digits_n1, num_digits_n2)):\n        # Convert the i-th digit of n1 and n2 to integers\n        digit_n1 = int(str(n1)[i])\n        digit_n2 = int(str(n2)[i])\n        \n        # Calculate the per-digit difference\n        digit_diff = abs(digit_n1 - digit_n2)\n        \n        # Add the per-digit difference to the sum\n        digit_diff_sum += digit_diff\n        \n    # Return the sum of per-digit difference\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(len(a)):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return 0\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function takes a list and a size as input and returns the sum of the largest contiguous sublist of size'size' in the list.\n    \"\"\"\n    if size == 1:\n        return max(arr)\n    elif size == len(arr):\n        return sum(arr)\n    else:\n        max_ending_here = arr[0]\n        max_so_far = max_ending_here\n        for i in range(1, len(arr)-size+1):\n            max_ending_here += arr[i+size-1]\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n\n    for end in range(size):\n        current_sum += a[end]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end - size + 1\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        a (list): list of integers\n        size (int): size of the window\n\n    Returns:\n        int: sum of the largest contiguous sublist\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')  # Initialize the maximum sum found so far to negative infinity\n    current_sum = 0  # Initialize the sum of the current window to 0\n\n    for i in range(size):\n        # Add the element at index i to the current sum\n        current_sum += a[i]\n\n        # Check if the current sum is greater than the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Remove the element at index i-size from the current sum\n        if i >= size-1:\n            current_sum -= a[i-size+1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize the maximum sum variable\n    current_sum = 0 # initialize the current sum variable\n    \n    for i in range(size):\n        current_sum += a[i] # add the current element to the current sum\n        \n        # if the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n\n    # Traverse the list\n    for i in range(size):\n        current_sum += a[i]\n\n        # Check if current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If current sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples into one\n    union_list = test_tup1 + test_tup2\n    \n    # sort the union list in ascending order\n    union_list.sort()\n    \n    # output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    \n    # Sort the elements of the combined tuple in ascending order\n    sorted_tup = sorted(combined_tup)\n    \n    # Output the sorted elements of the combined tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples and remove duplicates using sets\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # Print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set back to a tuple and sort the elements\n    union_tup = tuple(sorted(union_set))\n    # print the union of the two tuples in sorted order\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = list(set(union))\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Use set() to remove duplicates and sort the list\n    unique_list = sorted(set(combined_list))\n\n    # Print the unique list\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1 + test_tup2))\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union_set = set(union)\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # Create a set from the combined list to remove duplicates\n    unique_list = list(set(combined_list))\n\n    # Sort the unique list in ascending order\n    sorted_list = sorted(unique_list)\n\n    # Convert the sorted list back into a tuple and return it\n    return tuple(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Find the unique elements in the combined tuple\n    unique_elements = list(set(combined_tup))\n\n    # Sort the unique elements in ascending order\n    unique_elements.sort()\n\n    # Return the unique elements as a sorted list\n    return unique_elements"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0   # initialize maximum length to 0\n    for i in range(len(lst)):  \n        sublist = lst[i:i+max_length+1]  \n        if max_length < len(sublist):  \n            max_length = len(sublist)  \n        print(sublist)  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            sub_list = lst[i:j]  \n            if max_len < len(sub_list):  \n                max_len = len(sub_list)  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    length = 0\n    for sublist in lst:\n        if len(sublist) > length:\n            length = len(sublist)\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i, len(lst)):\n            if j!= i:\n                sublist = sublist + lst[j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > length:\n                length = len(lst[i:j+1])\n    return length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        sublist_length = 0\n        for j in range(i, len(lst)):\n            if j == len(lst)-1 or lst[j+1]!= lst[j]:\n                sublist_length += 1\n                if sublist_length > max_length:\n                    max_length = sublist_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to keep track of the length of the longest sublist\n    max_length = 0\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Calculate the length of the current sublist\n        current_length = len(sublist)\n\n        # Update the max_length variable if the current sublist is longer\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the max_length variable\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            max_length = max(max_length, len(lst[i:j]))\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize an empty list to store the lengths of sublists\n    lengths = []\n\n    # Initialize variables to keep track of the current sublist and its length\n    current_sublist = []\n    current_length = 0\n\n    # Loop through each element of the list\n    for element in lst:\n\n        # If the element is an element of the current sublist, increment its length\n        if element in current_sublist:\n            current_length += 1\n\n        # If the element is not an element of the current sublist, start a new sublist\n        else:\n            # Add the length of the current sublist to the list\n            lengths.append(current_length)\n\n            # Initialize a new sublist\n            current_sublist = [element]\n            current_length = 1\n\n    # Add the length of the last sublist to the list\n    lengths.append(current_length)\n\n    # Return the maximum length of the sublists\n    return max(lengths)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extracts values between quotation marks from a string.\n    \n    Args:\n    text: A string containing text with quotation marks.\n    \n    Returns:\n    A list of extracted values.\n    '''\n    \n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"[^\"]*\"'\n    \n    # Use the re.findall() function to extract all matches of the pattern from the text\n    matches = re.findall(pattern, text)\n    \n    # Create a list to store the extracted values\n    values = []\n    \n    # Iterate over the matches and add each match to the values list\n    for match in matches:\n        values.append(match[1:-1])\n    \n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes in a string and returns a list of all values between quotation marks.\n    '''\n    pattern = re.compile(r'\"(.+?)\"')\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n\n    # Use the regular expression pattern to find all the matches in the text\n    matches = pattern.findall(text)\n\n    # Convert all the matches to lowercase and remove any leading or trailing whitespace\n    values = [match.lower().strip() for match in matches]\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")(.*?)(\"|\\s)' # using regex to match values between quotation marks\n    values = re.findall(pattern, text) # finding all the matches using the regex pattern\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\\")\\w+(?=\\\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    # initialize count variable\n    count = 0\n    # loop through each element in the list\n    for i in range(n):\n        # loop through the remaining elements in the list\n        for j in range(i+1, n):\n            # check if the current pair is in the list and not equal to the current element\n            if arr[j]!= arr[i]:\n                # increment the count\n                count += 1\n    # return the count of possible unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += (arr[i]!= arr[j])\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    arr: list of integers\n    n: size of the list\n    \n    Returns:\n    count: integer value representing the count of possible unordered pairs.\n    \"\"\"\n\n    # Counting the possible unordered pairs\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n\n    # Create an empty list to store the characters in the word\n    chars = []\n\n    # Iterate over each character in the word\n    for char in word: \n        # Add the character to the list of characters\n        chars.append(char)\n\n    # Return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the string into a list of characters\n    characters = list(word)\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n\n    Args:\n    word (str): the string to split\n\n    Returns:\n    list: a list of characters from the input string\n\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the string into a list of characters\n    characters = list(word)\n    return characters"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sum the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each character in the string and add its value to the sum\n    for digit in num:\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize variable to store sum of digits\n    total = 0\n    # loop through each digit of n and add it to total\n    while n > 0:\n        total += n % 10\n        n //= 10\n    # return total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n\n    # loop through each digit of n\n    while n > 0:\n        # get the rightmost digit of n and add it to the total\n        digit = n % 10\n        total += digit\n\n        # remove the rightmost digit from n\n        n //= 10\n\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Check if the first element is smaller than the rest\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    This function will take a list as input and check whether it is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns a boolean value indicating whether the list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    '''\n    Check if a specified list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n\n    Parameters:\n    list1 (list): a list of lists, where each sublist contains strings\n\n    Returns:\n    list: the input list, sorted by each sublist of strings\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of the list\n    for i in range(len(list1)):\n        # convert each sublist to a list of strings\n        sublist = list(map(str, list1[i]))\n        # sort the sublist of strings\n        sorted_sublist = sorted(sublist)\n        # convert the sorted sublist back to a list of integers\n        sorted_sublist = list(map(int, sorted_sublist))\n        # update the sublist of integers with the sorted sublist\n        list1[i] = sorted_sublist\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = ''.join(sorted(list1[i][j]))\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i, sublist in enumerate(list1):\n        if len(sublist) > 1:\n            sublist.sort()\n        else:\n            pass  # If the sublist has only one element, do nothing\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty list to store unique numbers\n    unique_nums = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is not already in the unique_nums list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # create an empty dictionary to store the unique numbers\n    unique_nums = {}\n    # loop through each list in the input list\n    for num_list in nums:\n        # loop through each number in the list\n        for num in num_list:\n            # check if the number is not already in the dictionary\n            if num not in unique_nums:\n                # add the number to the dictionary\n                unique_nums[num] = True\n    # create a new list to store the unique numbers\n    unique_num_list = []\n    # loop through each number in the dictionary\n    for num in unique_nums:\n        # add the number to the new list\n        unique_num_list.append(num)\n    # return the new list of unique numbers\n    return unique_num_list\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                j += 1\n                nums.pop(j)\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Filter out duplicate numbers from the list\n    unique_list = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert the list to a set of unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))  # create a list of unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number  # multiply the product by each unique number in the list\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Create a set of unique numbers from the input list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    # Create a set to store unique numbers\n    unique_set = set(list_data)\n    \n    # Calculate the product of unique numbers\n    unique_product = 1\n    for num in unique_set:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of its unique numbers.\n    \"\"\"\n    # Create a set from the given list\n    unique_set = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_set = set(list_data)\n    unique_list = sorted(unique_set)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Find the diameter of the cylinder\n    d = 2 * r # diameter = 2 * radius\n    # Find the volume of the cylinder\n    V = (3/4) * math.pi * (r**2) # volume = (3/4) pi r^2\n    # Find the surface area of the cylinder\n    A = 2 * math.pi * r**2 # surface area = 2 pi r^2\n    # Calculate the surface area of the cylinder\n    SA = V * d # surface area of the cylinder = volume of the cylinder * diameter\n    \n    return SA"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the base of the cylinder\n    area_base = 2 * r * r\n    \n    # Calculate the surface area of the top of the cylinder\n    area_top = 2 * r * h\n    \n    # Add the surface areas of the base and top to get the total surface area\n    total_area = area_base + area_top\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Calculate the surface area of the cylinder\n    surface_area = 2 * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder with a given radius and height.\n    '''\n    # Formula for surface area of a cylinder\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder\n    surface_area = 2 * (3.14159 * r**2 + 2 * 3.14159 * r * h + 3.14159 * h**2)\n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the half the height of the cylinder\n    half_h = h/2\n    \n    # Calculate the area of the top and bottom of the cylinder\n    top_area = 2*r*r\n    bottom_area = 2*r*half_h\n    \n    # Calculate the area of the cylinder itself\n    cylinder_area = 2*r*(half_h**2)\n    \n    # Calculate the surface area of the cylinder\n    surface_area = top_area + bottom_area + cylinder_area\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(B)):\n        if B[i] in A:\n            if A.count(B[i]) == len(A) // len(B):\n                return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A: # if A is empty list, then B is also empty list\n        return True\n    for i in range(len(B)):\n        if B[i] == A[0]: # if first element of A is equal to the first element of B, then check for remaining elements of A\n            if is_Sub_Array(A[1:],B[i+1:]):\n                return True\n    return False # if no match is found, then return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes in two lists A and B and checks whether the first list is a sublist of the second list or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(B)):\n        if B[i:i+len(A)] == A:\n            return True\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if A is a sublist of B\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n\n    # If A is not a sublist of B, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n\n    # Check if B is a sublist of A \n    if B in A: \n        return True \n\n    # Check if A is a sublist of B \n    for i in range(len(B)): \n        if B[i] in A: \n            return True \n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n\n    This function takes two lists as input - A and B. The function returns True if A is a sublist of B and False otherwise.\n\n    Example:\n\n    >>> is_Sub_Array([1, 2, 3], [2, 3])\n    True\n\n    >>> is_Sub_Array([1, 2, 3], [3, 2])\n    False\n\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        return True\n    elif B[0] in A:\n        return is_Sub_Array(A, B[1:])\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        A = list(reversed(A))\n    i = 0\n    for j in range(len(B)):\n        if A[i] == B[j]:\n            i += 1\n            if i == len(A):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if A is sublist of B\n    if len(A) <= len(B):\n        for i in range(len(A)):\n            if A[i] in B:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    This function takes two lists as input and checks whether the first list is a sublist of the second list or not.\n    If the first list is a sublist of the second list, then it returns True, else it returns False.\n    \"\"\"\n    if not B: \n        return True # if B is empty then A is also empty\n    if len(A) > len(B): \n        return False # if length of A is greater than length of B then A is not a sublist of B\n    for i in range(len(B)):\n        if A == B[i:i+len(A)]: \n            return True # if A is found in B then return True\n    return False # if A is not found in B then return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize result variable to 0\n    result = 0\n    \n    # Find factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get last digit of factorial\n    last_digit = factorial % 10\n    \n    # Return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    # initialize a variable to hold the last digit of the factorial\n    last_digit = 0 \n    # loop through each digit of the number and multiply by its factorial \n    while n >= 10: \n        last_digit = n % 10 \n        n //= 10 \n    # return the last digit of the factorial\n    return last_digit "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial/10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer n as input and returns the last digit of the factorial of n.\n    '''\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n\n    # loop through each digit of n\n    while n > 0:\n        # add the current digit to the factorial\n        factorial *= n % 10\n\n        # find the last digit of the factorial\n        last_digit = factorial % 10\n\n        # remove the last digit from the factorial\n        factorial //= 10\n\n        # remove the last digit from n\n        n //= 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n < 0:\n        return \"Negative number is not allowed\"\n    \n    factorial = 1\n    num = n\n    \n    while num > 0:\n        factorial *= num\n        num //= 10\n    \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit in the factorial.\n\n    :param n: An integer representing the number whose factorial we want to find.\n    :return: The last digit of the factorial of n.\n    \"\"\"\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Use a loop to find the last digit in factorial\n    for i in range(10):\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        if n // 10**(i-1) >= fact:\n            return i\n    # If no last digit is found, return 0\n    return 0"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # use a while loop to find the last digit of factorial\n    while n > 0:\n        n = n // 10  # remove the last digit from n\n\n    # return the last digit of factorial\n    return n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    # Find the length of the shorter list\n    min_length = min(len(list1), len(list2), len(list3))\n\n    # Initialize an empty list to hold the interleaved items\n    interleaved_list = []\n\n    # Add the first half of list1 to the interleaved list\n    interleaved_list += list1[:min_length]\n\n    # Add the second half of list2 to the interleaved list\n    interleaved_list += list2[:min_length]\n\n    # Add the third half of list3 to the interleaved list\n    interleaved_list += list3[:min_length]\n\n    # Add any remaining items from list1, list2, or list3 to the end of the interleaved list\n    if len(list1) > min_length:\n        interleaved_list += list1[min_length:]\n    if len(list2) > min_length:\n        interleaved_list += list2[min_length:]\n    if len(list3) > min_length:\n        interleaved_list += list3[min_length:]\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the shortest list\n    shortest = min(len(list1), len(list2), len(list3))\n\n    # Initialize the result list\n    result = []\n\n    # Add elements from each list to the result list\n    for i in range(shortest):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    # Add any remaining elements from list1, list2, and list3 to the result list\n    for i in range(shortest, len(list1)):\n        result.append(list1[i])\n    for i in range(shortest, len(list2)):\n        result.append(list2[i])\n    for i in range(shortest, len(list3)):\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[j])\n        flat_list.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n        \n    while i < len(list1) and j < len(list2):\n        flat_list.append(list1[i])\n        flat_list.append(list2[j])\n        i += 1\n        j += 1\n        \n    while i < len(list1) and k < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list3[k])\n        i += 1\n        k += 1\n        \n    while j < len(list2) and k < len(list3):\n        flat_list.append(list2[j])\n        flat_list.append(list3[k])\n        j += 1\n        k += 1\n        \n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if the input lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved lists\n    result = []\n\n    # Loop through each element in the input lists\n    for i in range(len(list1)):\n        # Append the first element from each list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Iterate through each list\n    for i in range(len(list1)):\n        # Append the first element of list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of list3 to the interleaved list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop through each element of the first list\n    for item in list1:\n        # Append the element to the result list\n        result.append(item)\n        # Check if we have added all the elements from the second list\n        if len(result) == len(list1) + len(list2):\n            # If we have, append all the remaining elements from the second list\n            for item in list2:\n                result.append(item)\n            # Then append all the remaining elements from the third list\n            for item in list3:\n                result.append(item)\n    # Return the resulting flat list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the smallest list\n    min_len = min(len(list1), len(list2), len(list3))\n    # Create a new list of the same length as the smallest list\n    result = [None] * min_len\n    # Iterate through the lists, interleaving them into the result list\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result[i] = list1[i]\n        result[i+1] = list2[i]\n        result[i+2] = list3[i]\n        i += 3\n    # If there are any remaining lists, interleave them into the result list\n    while i < len(list1):\n        result[i] = list1[i]\n        i += 1\n    while i < len(list2):\n        result[i] = list2[i]\n        i += 1\n    while i < len(list3):\n        result[i] = list3[i]\n        i += 1\n    # Return the flattened result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if the length of all lists are same\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: All lists must have same length.\"\n    \n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # loop through all the elements of all the lists\n    for i in range(len(list1)):\n        # append the i-th element of list1 to interleaved_list\n        interleaved_list.append(list1[i])\n        # append the i-th element of list2 to interleaved_list\n        interleaved_list.append(list2[i])\n        # append the i-th element of list3 to interleaved_list\n        interleaved_list.append(list3[i])\n    \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the set of unique elements in both tuples\n    common_set = set(test_tup1).intersection(set(test_tup2))\n    \n    # Find the elements in test_tup1 that are not in common_set\n    dissimilar_list1 = [x for x in test_tup1 if x not in common_set]\n    \n    # Find the elements in test_tup2 that are not in common_set\n    dissimilar_list2 = [x for x in test_tup2 if x not in common_set]\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list1, dissimilar_list2"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # create a set of all elements in the first tuple\n    all_elements = set(test_tup1)\n\n    # create a set of all elements in the second tuple\n    other_elements = set(test_tup2)\n\n    # find the elements that are in both sets but not in the original set\n    dissimilar_elements = all_elements.symmetric_difference(other_elements)\n\n    # convert the set to a list and return the dissimilar elements\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create a set to store the unique elements of both tuples\n    unique_set = set(test_tup1 + test_tup2)\n    # Create a set to store the common elements of both tuples\n    common_set = set(test_tup1) & set(test_tup2)\n    # Create a set to store the dissimilar elements of both tuples\n    dissimilar_set = unique_set - common_set\n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # loop through both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # if elements are different, add them to dissimilar list\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of elements that are present in test_tup1 but not in test_tup2.\n    '''\n    diff_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of elements that are present in both tuples but not in the first tuple.\n    '''\n    dissimilar_elements = []\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        for ele in tup:\n            if even_fnc(ele):\n                result.append(ele)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            if even_ele(item, even_fnc):\n                result.extend(item)\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n    odd_list = []\n\n    for i in test_tuple:\n        if type(i) == list:\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n\n    return even_list + odd_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            for sub_element in element:\n                if even_fnc(sub_element):\n                    even_list.append(sub_element)\n        elif even_fnc(element):\n            even_list.append(element)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            filtered_tuple.append(even_ele(item, even_fnc))\n        else:\n            filtered_tuple.append(even_fnc(item))\n    return tuple(filtered_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a helper function to check if an element is even\n    def is_even(element):\n        return element % 2 == 0\n    \n    # Loop through each element in the test tuple\n    for element in test_tuple:\n        # Check if the element is even using the helper function\n        if is_even(element):\n            # If the element is even, call the even_fnc function to remove it from the tuple\n            even_fnc(element, test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            even_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return even_list\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Loop through each element of the tuple\n    for i in range(len(test_tuple)):\n        # Check if the element is a tuple\n        if isinstance(test_tuple[i], tuple):\n            # Recursively call the function with the tuple as the argument\n            even_ele(test_tuple[i], even_fnc)\n        # If the element is not a tuple, check if it is even using the even_fnc function\n        elif even_fnc(test_tuple[i]):\n            # If the element is even, add it to a new list\n            even_list.append(test_tuple[i])\n        # If the element is odd, do nothing\n    \n    # Return the new list of even elements\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], (tuple, list)):\n            if even_fnc(test_tuple[i]):\n                result.append(test_tuple[i])\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the pyramid using Heron's formula\n    area = (b**2) * s / 2\n    # convert the surface area to square units\n    area_sq = area / b\n    # return the surface area in square units\n    return area_sq"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the pyramid\n    area = (b * s) / 2\n    # print the result\n    print(\"The surface area of the pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b * s  # find the area of the base\n    return 6 * base_area  # return the surface area of the pyramid\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = 2*(b*s) + 6*b*b + 4*b*s + 6*s*s + 2*b\n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s): \n    '''\n    This function will find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculating the surface area of the pyramid using Heron's formula\n    area = (b * s) / 2\n\n    # Returning the surface area of the pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s # Using formula to find surface area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s * 2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = (b * s) + ((b * s) / 2)\n    print(\"The surface area of a square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number using dynamic programming.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) // n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the n-th Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Args:\n        n (int): the position of the number to find.\n\n    Returns:\n        int: the nth Catalan number.\n\n    Examples:\n        >>> catalan_number(0)\n        1\n        >>> catalan_number(5)\n        120\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(2*n-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n    \"\"\"\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # Calculate the nth Catalan number using the formula:\n        # C(n) = (2n)!/(n!(n-1)!), where! denotes the factorial\n        return (2*n) // factorial(n)\n\ndef factorial(n):\n    \"\"\"\n    Returns the factorial of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        c = 0\n        for i in range(n+1):\n            c = (c + 2*i) * binomial(n, i)\n        return c\n\ndef binomial(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n, k-1) + binomial(n, k)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative values of n are not allowed.\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        catalan = 0\n        for i in range(n//2+1):\n            catalan += catalan_number(i) * catalan_number(n-i)\n        return catalan\n    else:\n        catalan = 0\n        for i in range(n//2):\n            catalan += catalan_number(i) * catalan_number(n-i-1)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    n = int(n)\n    catalan = [1]\n    for i in range(1, n + 1):\n        catalan.append(sum([2 * (i - j) for j in range(i)]))\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Compute the first n catalan numbers\n    catalan_numbers = [1]\n    for i in range(1, n+1):\n        catalan_numbers.append(sum(catalan_numbers[-i:] * (2*i-1) // (i+1)))\n    # Return the nth catalan number\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return catalan_number(num/2) + catalan_number(num/2)\n    else:\n        return 2 * catalan_number(num/2) + catalan_number(num/2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(really|really|just|just|right|right|good|good|great|great|amazing|amazing|amazing)\\b'\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Print the matches and their positions\n    for i, match in enumerate(matches):\n        print(f'Adverb \"{match}\" found at position {i+1}.')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\b(?:ly|led|lys|lyse|lyst|lyze|lyzes|lyzing|not\\s+ly)\\b'\n\n    # Use the re.findall() method to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # Print the matches and their positions in the text\n    for match, pos in zip(matches, range(len(text))):\n        print(f\"Match: {match}, Position: {pos}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+(ing|ed|ing\\b|\\b)ly\\b\\w*'\n\n    # Use re.finditer() method to find all the occurrences of adverbs in the string\n    matches = re.finditer(pattern, text)\n\n    # Iterate over the matches and store their positions and adverbs\n    adverbs = []\n    for match in matches:\n        adverbs.append((match.start(), match.group()))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print('Adverb found:', matches[0])\n        print('Positions:', matches[0])\n    else:\n        print('No adverb found')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Regular expression pattern to find adverbs ending with ly\n    pattern = r'\\bly\\b'\n    \n    # Use re.finditer() to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Iterate over the matches and extract the positions of the first and last occurrences of adverbs\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end() - 1))\n    \n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\w*\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[aeiou]\\w*[aeiou]\\w*[aeiou]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    positions = []\n    for i, adverb in enumerate(adverbs):\n        positions.append(text.find(adverb))\n    return adverbs, positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # convert the items to a min heap\n    heap = [-price for price in items]\n    # heapify the heap\n    heapq.heapify(heap)\n    # extract the n most expensive items from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # Add the current item to the min-heap if its price is lower than the last item in the heap\n        if len(min_heap) < n or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n            # If the heap size exceeds n, remove the last item in the heap to keep the heap size at n\n            if len(min_heap) > n:\n                heapq.heappop(min_heap)\n    # Return the n most expensive items in the dataset\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns a list of the n most expensive items in the dataset.\n    '''\n\n    # create a min heap of n elements\n    min_heap = []\n    for i in range(n):\n        # add the smallest element to the heap\n        min_heap.append(heapq.heappop(min_heap))\n\n    # iterate over the remaining items in the list\n    for item in items:\n        # check if the item is greater than the smallest element in the heap\n        if item > min_heap[0]:\n            # remove the smallest element from the heap\n            heapq.heappop(min_heap)\n            # add the new item to the heap\n            heapq.heappush(min_heap,item)\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns the n most expensive items in the dataset.\n    The function first sorts the items in descending order of their prices and then selects the n most expensive items.\n\n    Args:\n        items: A list of items, where each item is a tuple containing the item price and item name.\n        n: An integer indicating the number of most expensive items to be returned.\n\n    Returns:\n        A list of tuples containing the n most expensive items in the dataset.\n    \"\"\"\n\n    # Sort the items in descending order of their prices\n    sorted_items = sorted(items, key=lambda x: x[0], reverse=True)\n\n    # Extract the top n most expensive items from the sorted list\n    top_n_items = sorted_items[:n]\n\n    # Return the top n most expensive items\n    return top_n_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in the given dataset using a min heap.\n\n    :param items: a list or a tuple of items to be sorted\n    :param n: the number of items to be returned\n    :return: a list of the n most expensive items in the dataset\n    \"\"\"\n    # Initialize a min heap with the first n items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n\n    # Remove the smallest item from the heap and add the next item\n    for i in range(n, len(items)):\n        if items[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, items[i])\n\n    # Return the list of n most expensive items in the dataset\n    return [min_heap[0]] * n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of size n\n    min_heap = []\n    for item in items:\n        # If the heap is full, remove the item with the highest price\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n        # Add the item to the heap\n        heapq.heappush(min_heap,item)\n    # Return the n most expensive items\n    return heapq.nlargest(n,min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # convert the list of items into a set to eliminate duplicates\n    unique_items = set(items)\n    # use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in unique_items:\n        # if the heap is full, remove the smallest item and add the new item\n        if len(heap) == n:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n        else:\n            heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order based on their price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    \n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        # Add the item with the highest price to the min heap\n        heapq.heappush(min_heap, sorted_items.pop(0))\n        \n    # Add the remaining items to the min heap\n    for item in sorted_items:\n        heapq.heappush(min_heap, item)\n    \n    # Extract and return the n most expensive items from the min heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n, and returns a list of the n most expensive items.\n    The function uses a min heap to keep track of the n most expensive items in the dataset.\n    '''\n    # Initialize an empty min heap\n    heap = []\n\n    # Iterate through the dataset and push the items into the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Pop the first n items from the heap and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List must have at least\", n, \"elements.\")\n        return\n    mid = len(l)//2\n    left_half = l[:mid]\n    right_half = l[mid:]\n    l = left_half + right_half + [l[n-1]]\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # creating two empty lists to store the first part and the rest\n    first_part = []\n    rest_part = []\n    # loop through the list and add each element to the appropriate list\n    for i in l:\n        if i < n:\n            first_part.append(i)\n        else:\n            rest_part.append(i)\n    # concatenate the two lists to get the final output\n    final_list = first_part + rest_part\n    return final_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Calculate the length of the list\n    len_list = len(l)\n    # If the length of the list is less than n, return the original list\n    if len_list < n:\n        return l\n    # Split the list at the nth element\n    split_list = l[:n]\n    # Add the first part of the list to the end\n    new_list = l[n:] + split_list\n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is less than or equal to the nth element\n    if len(l) <= n:\n        print(\"The length of the list should be greater than or equal to the nth element\")\n        return\n    # Split the list at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    # Add the first part to the end of the second part of the list\n    l = part1 + part2\n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # split the list into two parts at the nth index\n    part1 = l[:n]\n    part2 = l[n:]\n    # concatenate the parts\n    result = part1 + part2\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    mid = len(l)//2\n    part1 = l[:mid]\n    part2 = l[mid:]\n    part2.reverse()\n    l = part1+part2\n    l.reverse()\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # add the first part to the end of the second part\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Get the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the two values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Get the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #sorting the list\n    nums.sort()\n    #getting the difference between largest and smallest value in the sorted list\n    return nums[-1] - nums[0]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize the largest and smallest values to be the first value in the list\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # loop through the list and update largest and smallest values accordingly\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the difference between largest and smallest values\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the difference between max and min values\n    diff = max_val - min_val\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = max(nums)\n    smallest = min(nums)\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integer inputs a and b and returns a list of perfect squares between a and b.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i**2 + j**2 == i*j:\n                perfect_squares.append(i**2 + j**2)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            square = i**2 + j**2\n            if square == 4*a**2 and square == 4*b**2:\n                squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        root = i ** 0.5\n        if root.is_integer():\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers a and b as input and returns a list of perfect squares between them.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a:\n            squares.append(i)\n        elif i**2 == b:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == i and i**2 <= b:\n            print(i**2)\n        elif i**2 > b:\n            break"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for i in range(a, b+1):\n        if i**0.5**2 == i:\n            count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    if a > b:\n        return []\n    elif a == b:\n        return [a]\n    else:\n        squares = []\n        for i in range(a, b+1):\n            squares.append(i**2)\n        return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Function to check if a number is a perfect square\n    def is_perfect_square(n):\n        root = int(n ** 0.5)\n        return root * root == n\n    \n    # Check if a is a perfect square\n    if is_perfect_square(a):\n        # Find the least perfect square that is greater than or equal to a\n        perfect_square = a\n        while perfect_square <= b:\n            perfect_square *= 2\n        \n        # Print the perfect square that is greater than or equal to a\n        print(perfect_square)\n    else:\n        # Check if b is a perfect square\n        if is_perfect_square(b):\n            # Find the least perfect square that is greater than or equal to b\n            perfect_square = b\n            while perfect_square <= a:\n                perfect_square *= 2\n            \n            # Print the perfect square that is greater than or equal to b\n            print(perfect_square)\n        else:\n            # If neither a nor b is a perfect square, print \"Not a perfect square\"\n            print(\"Not a perfect square\")"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            result.append(i*i)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the circle.\n    y (float): The angle of the circle in radians.\n\n    Returns:\n    A tuple containing the rectangular x and y coordinates.\n\n    '''\n\n    # Convert the angle to degrees and convert to radians\n    angle = y * 180 / cmath.pi\n\n    # Calculate the rectangular coordinates\n    rect_x = x * cmath.cos(angle)\n    rect_y = x * cmath.sin(angle)\n\n    return (rect_x.real, rect_y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Parameters:\n        r (float): radius\n        theta (complex): angle in radians\n    \n    Returns:\n        tuple: (x, y)\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x1 = r * cmath.cos(theta)\n    y1 = r * cmath.sin(theta)\n    return x1, y1"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    # convert polar coordinates to rectangular coordinates\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    \n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r: float\n        The radius of the point.\n    theta: float\n        The angle of the point in radians.\n\n    Returns:\n    tuple of float\n        The rectangular coordinates (x, y) of the point.\n    '''\n\n    # Convert theta to degrees\n    theta = cmath.degrees(theta)\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert x, y to complex numbers\n    angle = cmath.phase(x + y*1j)\n    magnitude = abs(x + y*1j)\n    \n    # Convert complex angle to degrees and convert to radians\n    angle_rad = cmath.phase(angle) * 180 / cmath.pi\n    angle_rad = cmath.pi * angle_rad / 180\n    \n    # Convert magnitude to meters\n    magnitude_m = magnitude * 1000\n    \n    # Return the rectangular coordinates in a tuple\n    return (magnitude_m * cmath.cos(angle_rad), magnitude_m * cmath.sin(angle_rad))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to complex numbers\n    complex_number = x + y*1j\n    \n    # Calculate the rectangular coordinates\n    rect_x = complex_number.real\n    rect_y = complex_number.imag\n    \n    # Return the rectangular coordinates\n    return rect_x, rect_y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty\n    if not newList:\n        return []\n\n    # find the last element of the list\n    last_element = newList[-1]\n\n    # remove the last element from the list\n    newList.pop()\n\n    # add the last element to the front of the list\n    newList.insert(0, last_element)\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Get the length of the list\n    n = len(newList)\n\n    # Check if the list has at least two elements\n    if n < 2:\n        return newList\n\n    # Swap the first and last elements\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least 2 elements\n    if length < 2:\n        return newList\n    # Get the indices of the first and last elements\n    first_index = 0\n    last_index = length - 1\n    # Swap the first and last elements\n    newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n    # Return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        return newList\n    # Initialize the first and last elements\n    first = newList[0]\n    last = newList[length-1]\n    # Interchange the first and last elements\n    newList[0] = last\n    newList[length-1] = first\n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    second = newList[-1]\n    newList[0] = second\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return None\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2: \n        newList[0], newList[-1] = newList[-1], newList[0]\n    else: \n        print(\"The list must have at least two elements to swap them.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Using a recursive function to calculate the binomial coefficient\n    def binomial_Coeff_recursive(n,k):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return n*binomial_Coeff_recursive(n-1,k-1)\n\n    # Summing the product of consecutive binomial coefficients\n    return sum([binomial_Coeff_recursive(i,j) for i in range(1,n+1) for j in range(1,k+1)])"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the sum of the first k binomial coefficients\n    sum_first_k_coeff = sum(binomial(n, i) for i in range(k))\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    sum_prod_coeff = 1\n    for i in range(1, k+1):\n        sum_prod_coeff *= binomial(n-i+1, i)\n\n    # Calculate the sum of the two sums\n    sum_two_sums = sum_first_k_coeff + sum_prod_coeff\n\n    return sum_two_sums"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function returns the sum of the product of consecutive binomial co-efficients.\n\n    :param n: The value of n (the number of terms in the sum)\n    :param k: The value of k (the number of terms in each binomial coefficient)\n    :return: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Calculate the product of consecutive binomial co-efficients\n    prod = 1\n    for i in range(1, k + 1):\n        prod *= n - i + 1\n    for i in range(1, k + 1):\n        prod /= i\n    # Sum the product of consecutive binomial co-efficients\n    sum_coeff = 0\n    for i in range(1, k + 1):\n        sum_coeff += prod / i\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_coeff = 1\n    for i in range(1,k+1):\n        sum_coeff *= (n-i+1)/i\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_product = 0\n    for i in range(n-k+1):\n        sum_of_product += i*binomial_Coeff(n-1,k-1)\n    return sum_of_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    elif k > n//2:\n        return binomial_Coeff(n,n-k)\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))/float(k+1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)*n//(k*k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    if n > k:\n        return 0\n    else:\n        sum = 0\n        for i in range(k):\n            product = 1\n            for j in range(i,n-1):\n                product *= j + 1\n            sum += product\n        return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from the ip address\n    ip = re.sub('^0+', '', ip)\n    # Remove leading zeros from the octets\n    ip = ip.replace('.', '')\n    # Remove leading zeros from the group of three octets\n    ip = re.sub('^0+', '', ip)\n    # Remove leading zeros from the group of two octets\n    ip = re.sub('^0+', '', ip)\n    # Remove leading zeros from the group of one octet\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0\\b)+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\.0)+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+','',ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regex to match and remove leading zeroes\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regular expression to match leading zeroes and remove them\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address using regex\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+\\.', '', ip)\n    ip = re.sub(r'\\.\\s*0+$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expression to remove leading zeroes\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # replace all leading zeros in the ip address with empty string\n    ip = re.sub('^0+', '', ip)\n\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_diff = list1[0] - list1[1]\n    return even_odd_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if i == 0:\n            even = list1[i]\n            odd = list1[i+1]\n        elif list1[i] % 2 == 0 and list1[i-1] % 2!= 0:\n            even = list1[i]\n        elif list1[i] % 2!= 0 and list1[i-1] % 2 == 0:\n            odd = list1[i]\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should have at least two elements.\"\n    elif not list1[0] % 2 == 0 and not list1[1] % 2 == 0:\n        return \"The first even and first odd numbers should be present in the list.\"\n    elif list1[0] % 2 == 0 and list1[1] % 2 == 0:\n        return \"The difference of the even and odd numbers is not present in the list.\"\n    else:\n        return list1[0] - list1[1]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and first odd numbers of the list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    first_even = None\n    first_odd = None\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and first_even is None:\n            first_even = lst[i]\n        elif lst[i] % 2!= 0 and first_odd is None:\n            first_odd = lst[i]\n    if first_even is None or first_odd is None:\n        return None\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is even, check if it's the first even number\n            if even_num is None:\n                even_num = num\n            else:\n                # If it's not the first even number, calculate the difference and return it\n                return num - even_num\n        \n        # Check if the number is odd\n        else:\n            # If it is odd, check if it's the first odd number\n            if odd_num is None:\n                odd_num = num\n            else:\n                # If it's not the first odd number, calculate the difference and return it\n                return num - odd_num\n    \n    # If there are no even or odd numbers, return None\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n\n    # Find the first odd number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2 == 1:\n            first_odd = list1[i]\n            break\n\n    # Find the difference of the first even and first odd numbers\n    diff = first_even - first_odd\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    return even_first - odd_first"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list and returns the difference of the first even and first odd number.\n    If the list has an even number of elements, it returns the difference of the first even number and the sum of the first odd number and the last odd number.\n    If the list has an odd number of elements, it returns the difference of the first odd number and the sum of the first even number and the last even number.\n    \"\"\"\n    if len(lst) % 2 == 0:\n        first_even = lst[0]\n        last_odd = lst[-1]\n        sum_last_odd = lst[1:-1:2].sum()\n        diff_first_even_last_odd = first_even - last_odd + sum_last_odd\n        return diff_first_even_last_odd\n    else:\n        first_odd = lst[0]\n        last_even = lst[-1]\n        sum_last_even = lst[1:-1:2].sum()\n        diff_first_odd_last_even = first_odd - last_even + sum_last_even\n        return diff_first_odd_last_even"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert both strings to binary\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # Initialize variables for count of swaps and count of characters in both binary strings\n    count_swaps = 0\n    count_chars = 0\n\n    # Iterate through the characters in both binary strings\n    for i in range(min(len(binary1), len(binary2))):\n        if binary1[i]!= binary2[i]:\n            count_swaps += 1\n            count_chars += 1\n\n    # Check if there are any remaining characters in the longer binary string\n    if len(binary1) > len(binary2):\n        for i in range(len(binary1) - len(binary2)):\n            count_swaps += 1\n            count_chars += 1\n\n    # Check if there are any remaining characters in the shorter binary string\n    if len(binary2) > len(binary1):\n        for i in range(len(binary2) - len(binary1)):\n            count_swaps += 1\n            count_chars += 1\n\n    # Return the minimum number of swaps required to convert the binary strings\n    return count_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize an empty dictionary to store the count of number of swaps required to convert each binary number.\n    count_dict = {}\n    # Iterate through each character of each binary string and perform the steps mentioned above.\n    for i in range(len(str1)):\n        if str1[i] == '1' and str2[i] == '1':\n            if str1[i] not in count_dict:\n                count_dict[str1[i]] = 0\n            count_dict[str1[i]] += 1\n        elif str1[i] == '0' and str2[i] == '0':\n            if str1[i] not in count_dict:\n                count_dict[str1[i]] = 0\n            count_dict[str1[i]] -= 1\n        elif str1[i] == '1' and str2[i] == '0':\n            if str1[i] not in count_dict:\n                count_dict[str1[i]] = 0\n            count_dict[str1[i]] -= 1\n        elif str1[i] == '0' and str2[i] == '1':\n            if str1[i] not in count_dict:\n                count_dict[str1[i]] = 0\n            count_dict[str1[i]] += 1\n    \n    # Find the minimum count for each binary number in the dictionary.\n    min_count = float('inf')\n    for count in count_dict.values():\n        if count < min_count:\n            min_count = count\n    \n    # Return the minimum count for each binary number.\n    return min_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same length.\"\n    \n    min_swaps = 0\n    \n    # Count the number of swaps required to convert str1 to str2\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0':\n                str1 = str1[:i] + '1' + str1[i+1:]\n            else:\n                str1 = str1[:i] + '0' + str1[i+1:]\n                \n            if str2[i] == '0':\n                str2 = str2[:i] + '1' + str2[i+1:]\n            else:\n                str2 = str2[:i] + '0' + str2[i+1:]\n                \n            min_swaps += 1\n    \n    # Count the number of swaps required to convert str2 to str1\n    for i in range(len(str2)):\n        if str2[i]!= str1[i]:\n            if str2[i] == '0':\n                str2 = str2[:i] + '1' + str2[i+1:]\n            else:\n                str2 = str2[:i] + '0' + str2[i+1:]\n                \n            if str1[i] == '0':\n                str1 = str1[:i] + '1' + str1[i+1:]\n            else:\n                str1 = str1[:i] + '0' + str1[i+1:]\n                \n            min_swaps += 1\n            \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    # Convert the binary strings to lists of bits\n    bits1 = [int(bit) for bit in str1]\n    bits2 = [int(bit) for bit in str2]\n\n    # Calculate the lengths of the two binary strings\n    length1 = len(bits1)\n    length2 = len(bits2)\n\n    # Initialize the minimum number of swaps\n    swaps = 0\n\n    # Loop through the two binary strings from right to left\n    for i in range(max(length1, length2)-1, -1, -1):\n\n        # Compare the bits at the current position of both binary strings\n        if bits1[i]!= bits2[i]:\n\n            # If the bits are different, increment the number of swaps\n            swaps += 1\n\n            # If the number of swaps is greater than or equal to half the length of the shorter binary string,\n            # swap the corresponding bits in the two binary strings and continue the loop\n            if swaps >= min(length1, length2)//2:\n                bits1[i], bits2[i] = bits2[i], bits1[i]\n\n    # Return the minimum number of swaps required to convert one binary string to another\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!= len(str2):\n        return \"Invalid input\"\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to integers and store them in lists\n    arr1 = list(map(int, str1))\n    arr2 = list(map(int, str2))\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Iterate through all possible pairs of bits in both lists\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            # If the bits are not equal, swap the bits in the corresponding positions in the lists\n            if arr1[i]!= arr2[j]:\n                # Swap the bits in the corresponding positions\n                arr1[i], arr2[j] = arr2[j], arr1[i]\n\n                # Count the number of swaps required to convert the lists to integers\n                count_swaps = 0\n                for k in range(len(arr1)):\n                    if arr1[k]!= arr2[k]:\n                        count_swaps += 1\n                # Check if the number of swaps required is less than the current minimum number of swaps\n                if count_swaps < min_swaps:\n                    min_swaps = count_swaps\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # initialize variables\n    count = 0\n    length1 = len(str1)\n    length2 = len(str2)\n    # compare the lengths of the two strings\n    if length1 > length2:\n        # find the number of swaps required to convert str1 to str2\n        while str1!= str2:\n            if str1[0] == '1':\n                index = str1.index('1')\n                str1 = str1[:index] + '0' + str1[index+1:]\n                count += 1\n            else:\n                index = str1.index('0')\n                str1 = str1[:index] + '1' + str1[index+1:]\n                count += 1\n        # return the minimum number of swaps required\n        return count\n    else:\n        # find the number of swaps required to convert str2 to str1\n        while str2!= str1:\n            if str2[0] == '1':\n                index = str2.index('1')\n                str2 = str2[:index] + '0' + str2[index+1:]\n                count += 1\n            else:\n                index = str2.index('0')\n                str2 = str2[:index] + '1' + str2[index+1:]\n                count += 1\n        # return the minimum number of swaps required\n        return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings to their corresponding lists of digits\n    list1 = [int(x) for x in str1]\n    list2 = [int(x) for x in str2]\n    # Find the length of the smaller binary string\n    length = min(len(str1),len(str2))\n    # Initialize a variable to keep track of the number of swaps required\n    swaps = 0\n    # Iterate through the strings from left to right\n    for i in range(length):\n        # If the digits are not equal, swap them\n        if list1[i]!= list2[i]:\n            swaps += 1\n            # If swaps is odd, perform a bitwise xor to swap the digits\n            if swaps % 2 == 1:\n                list1[i] = list1[i] ^ list2[i]\n                list2[i] = list1[i] ^ list2[i]\n                list1[i] = list1[i] ^ list2[i]\n            # If swaps is even, divide the two digits by 2 and round down\n            else:\n                list1[i] = int(list1[i]/2)\n                list2[i] = int(list2[i]/2)\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    len1 = len(str1)\n    len2 = len(str2)\n\n    # initialize a boolean array to store the characters of the two strings\n    char_array = [False] * (len1 + 1)\n\n    # iterate over each character of the strings\n    for i in range(len1):\n        char_array[ord(str1[i])] = True\n        char_array[ord(str2[i])] = True\n\n    # initialize a variable to store the minimum number of swaps\n    min_swaps = len1 + len2\n\n    # iterate over the characters of the strings and count the minimum number of swaps\n    for i in range(len1 + len2 - 1, -1, -1):\n        if char_array[i]:\n            if not char_array[i - 1]:\n                min_swaps -= 1\n        else:\n            if not char_array[i + 1]:\n                min_swaps -= 1\n\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize swaps variable\n    swaps = 0\n\n    # Compare binary strings while swapping digits\n    while num1!= num2:\n        if num1 < num2:\n            num1 = (num1 << 1) + 1\n            swaps += 1\n        elif num1 > num2:\n            num2 = (num2 << 1)\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size variable to 0\n    size = 0\n    # Iterate through each element in the tuple\n    for item in tuple_list:\n        # Determine the size of the item in bytes\n        item_size = sys.getsizeof(item)\n        # Add the size of the item to the size variable\n        size += item_size\n    # Return the size variable\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the given tuple to bytes\n    bytes_list = bytearray(tuple_list, 'utf-8')\n    # Calculate the size of the given tuple in bytes\n    size = len(bytes_list)\n    # Return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            size += sys.getsizeof(tuple_list[i][j])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize size variable to 0\n    size = 0\n    # loop through tuple elements\n    for element in tuple_list:\n        # check the type of the element\n        if isinstance(element, int):\n            size += sys.getsizeof(element)\n        elif isinstance(element, float):\n            size += sys.getsizeof(element)\n        elif isinstance(element, str):\n            size += sys.getsizeof(element)\n        elif isinstance(element, tuple):\n            size += sys.getsizeof(element)\n        elif isinstance(element, list):\n            size += sys.getsizeof(element)\n        else:\n            # if element is not one of the above types, it must be a custom object\n            size += sys.getsizeof(element)\n    # return the size of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # initialize size to 0\n    size = 0\n\n    # loop through each tuple in the list\n    for tuple in tuple_list:\n        # calculate the size of the tuple in bytes\n        size += sys.getsizeof(tuple)\n\n    # return the total size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size in bytes of each element in the tuple\n    size_list = []\n    for element in tuple_list:\n        size_list.append(sys.getsizeof(element))\n\n    # Find the total size in bytes of all elements in the tuple\n    total_size = sum(size_list)\n\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays, arr1 and arr2, and a value k.\n    It finds and returns the kth smallest element from arr1 and arr2.\n    '''\n    \n    # initialize two pointers, left and right, to the beginning of the arrays\n    left, right = 0, len(arr2) - 1\n    \n    # loop through the arrays until k elements have been compared\n    while left <= right and k > 0:\n        \n        # check if the current element in arr1 is less than the current element in arr2\n        if arr1[left] < arr2[right]:\n            \n            # decrement k by 1 and move the left pointer to the right\n            k -= 1\n            left += 1\n            \n        # if the current element in arr1 is greater than the current element in arr2\n        else:\n            \n            # move the right pointer to the left\n            right -= 1\n            \n    # if the loop completes without finding k elements, return None\n    if k > 0:\n        return None\n        \n    # if k elements have been found, return the kth smallest element\n    else:\n        return arr1[left - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if i == k:\n            return arr2[j-1]\n        elif j == k:\n            return arr1[i-1]\n    return \"Element not found in the array\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            # if kth element is found, we can break the loop\n    if i == len(arr1) and j < len(arr2):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    # Initialize two pointers, one for each array, pointing to the first element\n    i = j = 0\n    \n    # Loop through both arrays until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        # If the first element of arr1 is smaller than the first element of arr2, move the first pointer to the next element\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the first element of arr2 is smaller than the first element of arr1, move the second pointer to the next element\n        elif arr1[i] > arr2[j]:\n            j += 1\n        # If the first element of both arrays are equal, compare their indices\n        else:\n            if k == 1:\n                # If we are looking for the kth smallest element, return the element and break out of the loop\n                return arr1[i]\n            elif k == 2:\n                # If we are looking for the second smallest element, return the element before the kth element\n                return arr1[i-1]\n            # If we are looking for the kth smallest element, move both pointers to the next elements and decrement k\n            else:\n                i += 1\n                j += 1\n                k -= 2\n    \n    # If we have not found the kth element yet, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == len(arr1) + 1:\n                return arr2[j]\n            else:\n                return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    if i == n1:\n        return arr2[j:j+k]\n    else:\n        return arr1[i:i+k]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            elif k == 2:\n                return arr2[j]\n            elif k == len(arr1) + len(arr2) - 1:\n                return min(arr1[i], arr2[j])\n            k -= len(arr1) + len(arr2) - 1\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Check if both arrays are empty\n    if not arr1 and not arr2:\n        print(\"Both arrays are empty.\")\n        return None\n\n    # Initialize variables to keep track of the current position in both arrays\n    i, j = 0, 0\n\n    # Initialize variable to store the kth element\n    kth = None\n\n    # Loop through both arrays and check if the kth element has been found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            kth = arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            kth = arr2[j]\n            j += 1\n        else:  # arr1[i] == arr2[j]\n            kth = arr1[i]\n            i += 1\n            j += 1\n\n        # Check if the kth element has been found\n        if kth is not None and k == 1:\n            return kth\n        elif kth is not None and k > 1:\n            k -= 1\n\n    # If the kth element has not been found, return None\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes an input number and checks whether it is an Armstrong number or not.\n    \"\"\"\n    # Function to find the sum of the cube of each digit in the number\n    def digit_sum(num):\n        return sum(int(digit)**3 for digit in str(num))\n\n    # Check if the number is greater than 0 and less than or equal to 999,999\n    if number < 1000 or number > 999999:\n        return False\n\n    # Compute the sum of the cube of each digit in the number and compare it with the original number\n    sum_cube = digit_sum(number)\n    if sum_cube == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(number):\n    # get the length of the number\n    n = len(str(number))\n    # sum of the powers of each digit\n    power = 0\n    for digit in str(number):\n        power += int(digit) ** n\n    # compare with the original number\n    return power == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    return number == total\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of the squares of each digit\n    sum_of_squares = 0\n    # Iterate over each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the digit by itself and add to the sum of squares\n        sum_of_squares += digit_int ** 2\n    # Check if the sum of squares is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(number)\n\n    # Initialize the sum of the cubes of the digits to zero\n    cube_sum = 0\n\n    # Loop through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer and cube it\n        cube = int(digit)**3\n\n        # Add the cube to the sum of cubes\n        cube_sum += cube\n\n    # Check if the sum of cubes is equal to the original number\n    return number == cube_sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    sum = 0\n    temp = num\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and remove any non-numeric characters\n    number = ''.join(c for c in str(number) if c.isdigit())\n    # Convert the string to a list and calculate the sum of the squares of the digits\n    square_sum = sum(int(digit) ** len(str(digit)) for digit in number)\n    # If the sum of the squares is equal to the original number, it is an armstrong number\n    if square_sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def is_armstrong(num):\n        '''\n        Recursive function to check if the given number is armstrong or not.\n        '''\n        if num < 10:\n            return True\n        elif num % 10 == 0:\n            return False\n        else:\n            return is_armstrong(sum(int(digit)**len(str(num)) for digit in str(num)))\n    \n    if is_armstrong(number):\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize a variable to keep track of the sum of the cubes of the digits\n    sum_of_cubes = 0\n\n    # Loop through each digit of the number\n    for digit in number_str:\n        # Convert the digit to an integer and cube it\n        digit_cube = int(digit) ** 3\n\n        # Add the cube of the digit to the sum of cubes\n        sum_of_cubes += digit_cube\n\n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total / number\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total/n\n    \n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    sum_value = sum(sum_list)\n    average = sum_value / number\n    return sum_value, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(number):\n        total += i\n        count += 1\n    average = total / count\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(\"The sum of the first\", number, \"natural numbers is\", sum)\n    print(\"The average of the first\", number, \"natural numbers is\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    total = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total += i\n        count += 1\n\n    return (total, total/count)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n) : \n\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize an empty dictionary to store the character counts\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, return the character and its count\n        if char in char_count:\n            return char, char_count[char]\n        # otherwise, add the character to the dictionary and initialize its count to 1\n        else:\n            char_count[char] = 1\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Initialize variables to store the first repeated character and its count\n    first_char = None\n    first_count = 0\n\n    # Loop over each character in the dictionary\n    for char, count in char_count.items():\n        # If the count is greater than the count of the first repeated character,\n        # update the first repeated character and its count\n        if count > first_count:\n            first_char = char\n            first_count = count\n\n    # Return the first repeated character and its count\n    return first_char, first_count"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to keep track of characters and their count\n    char_count = {}\n    # iterate over the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # iterate over the dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string as input and returns the first repeated character in the string. If there is no repeated character, it will return \"None\".\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return \"None\"\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character\n    freq_dict = {}\n\n    # Loop through each character in the given string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n\n    # Loop through the dictionary and find the first repeated character\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(string):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(string)):\n        if string.count(string[i]) > 1:\n            return string[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    if not str1:\n        return None\n    \n    # Convert string to a list of characters\n    str1_list = list(str1)\n    \n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1_list:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize a list to store the repeated characters\n    repeated_chars = []\n    \n    # Iterate through each character in the dictionary and check if the count is greater than 1\n    for char in char_count:\n        if char_count[char] > 1:\n            repeated_chars.append(char)\n    \n    # If no repeated characters are found, return None\n    if not repeated_chars:\n        return None\n    \n    # Otherwise, return the first repeated character in the string\n    return repeated_chars[0]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        # if the character is not in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    \n    # iterate over the keys of the dictionary to find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n + 1):\n        lucid = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(n+1):\n        if i == 1:\n            lucid_numbers.append(1)\n        else:\n            flag = 1\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    flag = 0\n                    break\n            if flag == 1:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(2, n+1):\n        if num == 2 or num == 3:\n            lucid_numbers.append(num)\n        else:\n            is_lucid = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_lucid = False\n                    break\n            if is_lucid:\n                lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludic_list.append(i)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n):\n        if (n - i) % 11 == 0 and (i + 1) % 11 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        lucid_numbers.append(i)\n        i += 1\n        while i <= n:\n            lucid_numbers.append(i)\n            i += 1\n            while i <= n:\n                lucid_numbers.append(i)\n                i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store lucid numbers\n    lucid_list = []\n\n    # Start with 2 and add it to the lucid list\n    lucid_list.append(2)\n\n    # Loop through all integers from 3 to n\n    for i in range(3, n+1):\n\n        # Check if i is a lucid number\n        is_lucid = True\n\n        # Loop through all numbers from 2 to i-1\n        for j in range(2, i):\n\n            # If i is divisible by j, then it is not a lucid number\n            if i % j == 0:\n                is_lucid = False\n                break\n\n        # If i is a lucid number, add it to the lucid list\n        if is_lucid:\n            lucid_list.append(i)\n\n    # Return the lucid list\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Define a function to check if a number is a lucid number or not.\n    '''\n    sum_of_digits = 0\n    for i in str(n):\n        sum_of_digits += int(i)\n    return sum_of_digits == n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse the list of words\n    words = words[::-1]\n    \n    # join the reversed words into a string\n    s =''.join(words)\n    \n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word and join them back into a string\n    reversed_words =''.join(words[::-1])\n    \n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back into a string\n    reversed_words =''.join([word[::-1] for word in words])\n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    words = words[::-1] # reverse the words\n    s =''.join(words) # join the reversed words back into a string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # Split the string into words using spaces as delimiters\n    words = s.split()\n    # Reverse the order of the words using slicing\n    reversed_words = words[::-1]\n    # Join the words back into a string with spaces as delimiters\n    reversed_string =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_string"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    # if none of the above conditions are true, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function that checks if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Main function to check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n\n    # if the number is less than 2, it is not a prime number\n    if num < 2:\n        return False\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # if the number is divisible by all the numbers between 2 and the square root of the number, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding radian value.\n    '''\n    radian = math.pi * degree / 180\n    return round(radian, 6)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def radian_degree(degree):\n    '''\n    This function takes a degree value and returns its corresponding value in radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    \n    if matches:\n        first_match = matches[0]\n        start_index = text.find(first_match)\n        end_index = start_index + len(first_match)\n        return first_match, start_index, end_index\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None\n    start = matches[0].start()\n    end = matches[0].end()\n    return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(0), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append((match.group(), match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"{literal}: {start} - {end}\")\n    return \"\""
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    \n    for match in matches:\n        sub_text = text[match.start():match.end()]\n        results.append((sub_text, match.start(), match.end()))\n        \n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literals.append(match.group())\n    return literals"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n > 1: \n        b = 1\n        for i in range(2, n+1): \n            b = b * i // (i - 1)\n        return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    This function calculates the nth Bell number using the formula:\n    \n    Bell(n) = (n+1)^n / sqrt(5)\n    \n    '''\n    import math\n    return int((n+1)**n/math.sqrt(5))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize the first bell number as 1\n    bell_num = 1\n\n    # Iterate n-1 times\n    for i in range(1, n):\n        # Find the next bell number\n        bell_num = (bell_num * (2*i+1)) // (i+1)\n\n    # Return the nth bell number\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return n * (2 ** n - 1) // (1 - 1/n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1: \n        return 1 \n    else: \n        return n * bell_Number(n-1) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return bell_Number(n-1) + bell_Number(n-2)\n    else: \n        return bell_Number(n-1) - bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    list1.pop(k)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # Check if L is valid\n    if L >= length or L < 1:\n        return \"Invalid input\"\n    # Remove the kth element from the list\n    new_list = list1[:L-1] + list1[L:]\n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a number L as input and returns a new list with the same elements except the k'th element.\n    '''\n    if L <= 0:\n        return list1\n    elif L > len(list1):\n        return []\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element of a list.\n\n    Parameters:\n    list1 (list): A list of elements.\n    L (int): The index of the element to remove (starting from 0).\n\n    Returns:\n    list: A list with the same elements as list1, except for the kth element.\n\n    Example:\n    >>> list1 = [1, 2, 3, 4, 5]\n    >>> L = 2\n    >>> remove_kth_element(list1, L)\n    [1, 2, 4, 5]\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop(0)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    n = len(list1)\n\n    if L > n:\n        return list1\n\n    k = L - 1\n\n    for i in range(n - k):\n        list1[i], list1[i + k] = list1[i + k], list1[i]\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # creating a new list to store the elements of the original list\n    new_list = []\n\n    # iterating over the list and adding all the elements except the k'th element\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n\n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if max_num < test_list[i][N-1]:\n            max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N > len(row):\n            raise ValueError(\"N is greater than the number of columns in the matrix.\")\n        max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N - 1 < len(row):\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = None\n    for i in range(len(test_list)):\n        if max_value is None or max_value < test_list[i][N-1]:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_value:\n            max_value = test_list[i][N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not test_list:\n        return None\n    # get the length of the first row of the matrix\n    row_length = len(test_list[0])\n    # check if then'th column exists in the matrix\n    if N < 1 or N > row_length:\n        return None\n    # find the max of then'th column in the matrix\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i < len(test_list) - N + 1:\n            column = [row[N-1] for row in test_list[i:i+N]]\n            if max(column) > max_value:\n                max_value = max(column)\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first list in the test_list\n    len_1 = len(test_list[0])\n\n    # Loop through each row in the test_list\n    for i in range(len_1):\n        # Initialize a variable to store the maximum value\n        max_val = 0\n\n        # Loop through each row in the test_list\n        for j in range(len(test_list)):\n            # If the current value at row j and column i is greater than max_val, update max_val\n            if test_list[j][i] > max_val:\n                max_val = test_list[j][i]\n\n        # Update the value in then'th row of the test_list with the maximum value\n        test_list[N-1][i] = max_val\n\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if max_value < test_list[i][N]:\n            max_value = test_list[i][N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize a variable to store the max of then'th column\n    max_value = float('-inf')\n    \n    # loop through each row in the matrix\n    for row in test_list:\n        # get then'th column value\n        nth_col = row[N-1]\n        \n        # if the current nth column value is greater than the stored max value, update the max value\n        if nth_col > max_value:\n            max_value = nth_col\n    \n    # return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n\n    # Initialize the max value to be the smallest possible integer\n    max_val = sys.maxsize\n\n    # Loop through each row in the matrix\n    for i in range(num_rows):\n\n        # Get the value of then'th column\n        nth_col = test_list[i][N-1]\n\n        # Compare the current nth_col with the current max_val\n        if nth_col > max_val:\n            max_val = nth_col\n\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    # Define an empty list to store the merged lists\n    merged_lst = []\n    \n    # Iterate through each sublist in the list of lists\n    for sublist in lst:\n        # Append the first element of the sublist to the first list in the merged list\n        merged_lst.append([sublist[0], sublist[1]])\n    \n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable to 0\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Add the current tuple to the cumulative sum\n        cumulative_sum += tup[0]\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i][0], int):\n            cumulative_sum += test_list[i][0]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for num in test_list:\n        sum += num\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # initialize cumulative sum as 0\n    cum_sum = 0\n\n    # loop through each tuple in the list and add the values to the cumulative sum\n    for i in test_list:\n        cum_sum += i\n\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not all(isinstance(item, tuple) for item in test_list):\n        raise TypeError(\"All elements in the list must be tuples\")\n\n    cum_sum = 0\n    for item in test_list:\n        if not all(isinstance(sub_item, int) for sub_item in item):\n            raise TypeError(\"All elements in each tuple must be integers\")\n        cum_sum += sum(item)\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        average = sum(i) / len(i)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        avg = sum(nums[i])/len(nums[i])\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        if len(num) == 0:\n            return []\n        else:\n            avg = sum(num) / len(num)\n            result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Define an empty list to store the average values for each tuple\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Use the sum() function to add up all the values in the tuple\n        total = sum(tup)\n        \n        # Divide the total by the length of the tuple to get the average value\n        avg = total/len(tup)\n        \n        # Append the average value to the avg_list\n        avg_list.append(avg)\n    \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    for tup in nums:\n        for num in tup:\n            total_sum += num\n    average = total_sum / len(nums)\n    return average"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of the tuple and append it to the avg_list\n        avg_list.append(sum(tup)/len(tup))\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg = sum_tup / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to hold the average values\n    avg_values = []\n    # iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # compute the sum of all the values in the tuple\n        total = sum(tup)\n        # divide the sum by the number of values in the tuple to get the average value\n        avg = total / len(tup)\n        # append the average value to the list of average values\n        avg_values.append(avg)\n    # return the list of average values\n    return avg_values"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        sum_val = 0\n        for num in tup:\n            sum_val += num\n        avg_val = sum_val/len(tup)\n        avg_list.append(avg_val)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # perform element wise modulo\n    modulo_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples must have the same length.')\n    # Perform the element-wise modulo\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    start_x = 0\n    start_y = 0\n    end_x = d\n    end_y = 0\n    \n    # Initialize the jump distance\n    jump_distance = 0\n    \n    # Initialize the count of jumps\n    count_jumps = 0\n    \n    # Initialize a boolean variable to check if the end point has been reached\n    end_reached = False\n    \n    # Iterate through the given steps\n    for step in range(steps):\n        \n        # Check if the end point has been reached\n        if start_x == end_x and start_y == end_y:\n            end_reached = True\n            break\n        \n        # Calculate the new x and y coordinates of the end point\n        new_x = start_x + jump_distance\n        new_y = start_y + jump_distance\n        \n        # Check if the new point is within the boundaries of the 2d plane\n        if new_x >= 0 and new_x <= d and new_y >= 0 and new_y <= 1:\n            # If the new point is within the boundaries, move to the new point\n            start_x = new_x\n            start_y = new_y\n        else:\n            # If the new point is out of the boundaries, reduce the jump distance\n            jump_distance -= 1\n        \n        # Increment the count of jumps\n        count_jumps += 1\n    \n    # Check if the end point has been reached\n    if not end_reached:\n        print(\"No end point reached.\")\n        return -1\n    else:\n        return count_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    step = 0\n    x = 0\n    y = 0\n    \n    # Iterate until we reach the desired point\n    while x < d:\n        if step == steps:\n            return jumps\n        elif y < d:\n            y += 1\n            x = 0\n        elif y == d:\n            x += 1\n            y = 0\n        jumps += 1\n        step += 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0 or d == 0:\n        return 0\n\n    jumps = 0\n    while steps > 0:\n        steps -= 1\n        jumps += 1\n\n        if steps == 0 or d == 0:\n            break\n\n        if steps % d == 0:\n            steps //= d\n        else:\n            d -= 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    i = 0\n    while i < len(steps) - 1:\n        if steps[i][1] == d:\n            jumps += 1\n        i += 1\n        if i < len(steps) - 1 and steps[i][1] == d:\n            jumps += 1\n        i += 1\n        if i < len(steps) - 1 and steps[i][1] == d:\n            jumps += 1\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] == d:\n            jumps += 1\n            i += d\n        else:\n            i += 1\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # check if d is greater than steps\n    if d > steps:\n        return -1\n\n    # initialize variables\n    i = 0\n    jumps = 0\n\n    # iterate through steps and check if d is reached\n    while i < steps:\n        # check if d is reached\n        if i + d >= steps:\n            return jumps\n\n        # increment i and jumps\n        i += d\n        jumps += 1\n\n    # if d is not reached, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # check if d is less than or equal to 0\n    if d <= 0: \n        return \"Invalid Input\"\n\n    # check if steps is less than or equal to 0\n    if steps <= 0:\n        return \"Invalid Input\"\n\n    # initialize variables\n    n = 0 # number of jumps\n    i = 0 # current position\n\n    # loop until i reaches d\n    while i < d:\n        # check if i + steps is greater than d\n        if i + steps > d:\n            # if yes, then increment n by 1\n            n += 1\n            # set i to d\n            i = d\n        # if i + steps is less than or equal to d, then increment i by steps\n        else:\n            i += steps\n\n    # return the final value of n\n    return n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # First, we need to check if the point is at the origin\n    if d == 0:\n        return steps\n    # If the point is not at the origin, we need to check if it is at any other point on the grid\n    for i in range(1, d+1):\n        # We need to check if we can reach the point (i, 0) from the origin in steps jumps\n        if i <= steps:\n            # We can reach the point (i, 0) from the origin in steps jumps, so we don't need to jump at all\n            return i\n        else:\n            # We cannot reach the point (i, 0) from the origin in steps jumps, so we need to jump at least once\n            steps -= i\n            # We check if we need to jump more than once or not\n            if steps > 0:\n                return i + 1\n            else:\n                return i"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize the starting state\n    (d, jumps) = (0, 0)\n    \n    # Iterate through all possible values of d\n    for i in range(1, steps+1):\n        # Check if we can reach the point (d, 0) from the origin\n        if d >= i:\n            # Update the state of the problem\n            d -= i\n            jumps += 1\n    \n    # Find the minimum number of jumps required to reach the point (d, 0) from the origin\n    min_jumps = steps - d\n    \n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    elif d <= 0:\n        return -1\n    elif d >= steps:\n        return -1\n    elif d > steps and d <= steps + d:\n        return 1\n    else:\n        return d + min_Jumps(steps, d - steps)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have equal length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as arguments and divides the elements of the first list by the elements of the second list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    # Check if the lengths of both lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    # Create an empty list to store the element-wise division\n    result = []\n    # Loop through each element in the lists and calculate the element-wise division\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # Return the list of element-wise divisions\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Both lists must have the same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the element-wise division of the two lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Iterate over each element of the first list\n    for num1 in nums1:\n        # Initialize a variable to store the result of division of num1 and num2\n        res = 0\n        # Iterate over each element of the second list\n        for num2 in nums2:\n            # Calculate the result of division of num1 and num2\n            res += num1 / num2\n        # Append the result to the result list\n        result.append(res)\n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have same length.')\n\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        new_str = ''.join(num_list)\n        return new_str + test_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # convert the given string to a list\n    str_list = list(test_str)\n\n    # initialize a variable to keep track of the index of the last number\n    last_number_index = -1\n\n    # loop through the list from the end to the beginning\n    for i in range(len(str_list)-1, -1, -1):\n\n        # if the current character is a number, move it to the end of the list\n        if str_list[i].isdigit():\n            str_list.pop(i)\n            str_list.append(str_list.pop(i))\n            last_number_index = i\n\n    # convert the list back to a string and return it\n    return ''.join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = []\n    alphabets = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            alphabets.append(char)\n    return ''.join(alphabets) + ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    for i in range(len(numbers)):\n        test_str = test_str.replace(numbers[i], '')\n    test_str += ''.join(numbers)\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    str_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            str_list.append(char)\n    return \"\".join(num_list) + \"\".join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    # Initialize a variable to keep track of the index of the last number found\n    last_num_index = -1\n\n    # Loop through each character in the input string\n    for i, char in enumerate(test_str):\n        # If the character is a number, move it to the end of the string\n        if char.isdigit():\n            # Check if the number is the last number found\n            if i == last_num_index + 1:\n                # If it is, move it to the end of the string\n                test_str = test_str[:i] + char + test_str[i+1:]\n                # Update the last number index to the current index\n                last_num_index = i\n            # If the number is not the last number found, move it to the end of the string\n            else:\n                test_str = test_str[:i] + char + test_str[i:]\n                # Update the last number index to the current index\n                last_num_index = i\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    num_list = []\n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Add the number to the list\n            num_list.append(char)\n        else:\n            # If the character is not a number, append it to the end of the string\n            test_str += char\n    # Join the list of numbers with the string and return the result\n    return ''.join(num_list) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    if nums:\n        test_str = ''.join(nums) + test_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n    return test_str + num_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list\n    a.sort()\n    # Initialize the largest subset size\n    max_size = 0\n    # Initialize the current subset size\n    current_size = 1\n    # Loop through the list of numbers\n    for i in range(1, len(a)):\n        # If the difference between the current number and the next number is divisible by the current number, add the current number to the subset\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n            # Update the largest subset size if the current subset size is greater than the previous largest subset size\n            if current_size > max_size:\n                max_size = current_size\n        # If the difference between the current number and the next number is not divisible by the current number, reset the current subset size to 1\n        else:\n            current_size = 1\n    # Return the largest subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    n = len(a)\n    if n == 0:\n        return 0\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the largest subset size to 1\n    largest_size = 1\n\n    # Initialize the current subset size and the sum of the current subset\n    current_size = 1\n    current_sum = a[0]\n\n    # Iterate through the list from second element to last element\n    for i in range(1, n):\n\n        # Calculate the difference between the current element and the previous element\n        diff = a[i] - a[i-1]\n\n        # If the difference between the current element and the previous element is divisible by 2,\n        # add 1 to the current subset size and update the current sum\n        if diff % 2 == 0:\n            current_size += 1\n            current_sum += a[i]\n\n        # Update the largest subset size if the current subset size is greater than the largest subset size\n        if current_size > largest_size:\n            largest_size = current_size\n\n        # Reset the current subset size and sum to the previous values\n        current_size = 1\n        current_sum = a[i]\n\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Create a set to store the remainders of dividing each element in a by all the numbers in the set\n    remainders = set()\n    \n    # Iterate through the list and calculate the remainders of dividing each element in a by all the numbers in the set\n    for num in a:\n        for remainder in range(num, 1000001, num):\n            remainders.add(remainder)\n    \n    # Find the size of the largest subset of numbers in the set where every pair is divisible\n    largest_subset_size = 0\n    for num1 in a:\n        for num2 in a:\n            if num1 < num2 and num2 % num1 == 0:\n                largest_subset_size = max(largest_subset_size, num2 - num1 + 1)\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    size = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            if a[i] % a[j] == 0:\n                size += j - i\n                j += 1\n            else:\n                j += 1\n        i += 1\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    count = 1\n    max_count = 1\n\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            count += 1\n        else:\n            count = 1\n\n        if count > max_count:\n            max_count = count\n\n    return max_count\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize a variable to store the maximum subset size\n    max_size = 0\n    \n    # Iterate over the sorted list\n    for i in range(len(a)):\n        \n        # Initialize a variable to store the current subset size\n        current_size = 1\n        \n        # Iterate over the remaining elements in the list\n        for j in range(i+1, len(a)):\n            \n            # Check if the current pair is divisible\n            if a[i] % a[j] == 0:\n                current_size += 1\n            \n            # If the current size is greater than the maximum size, update the maximum size\n            if current_size > max_size:\n                max_size = current_size\n                \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # create a dictionary to store the subset size and the subset itself\n    subset_sizes = {}\n    largest_size = 0\n    \n    # iterate through the list of numbers and for each number, find its smallest multiple and check if its divisible by all the previous numbers\n    for num in a:\n        min_multiple = num\n        \n        # iterate through the previous numbers and update the minimum multiple if it is a divisor of the current number\n        for i in range(len(a)):\n            if a[i] % num == 0 and i!= 0:\n                min_multiple = min(min_multiple, a[i])\n        \n        # check if the current number is a divisor of all the previous numbers\n        if min_multiple!= num:\n            continue\n        \n        # if it is, then we need to add the current number to the subset and find its size\n        subset = [num]\n        subset_size = 1\n        \n        for i in range(len(a)):\n            if a[i] % num == 0 and i!= 0:\n                subset.append(a[i])\n                subset_size += 1\n        \n        # update the dictionary with the subset size and subset itself\n        if subset_size > largest_size:\n            largest_size = subset_size\n            subset_sizes = {}\n            subset_sizes[tuple(subset)] = subset_size\n    \n    # if the largest subset size has not been found, return -1\n    if len(subset_sizes) == 0:\n        return -1\n    \n    # return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)  # sort the list in ascending order\n    result = 1  # initialize the result to 1 (the smallest subset size)\n\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            result += 1\n        else:\n            break  # if we find a non-divisible number, we can stop looking\n\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            dp[i] = dp[i-1] + 1\n            max_size = max(max_size, dp[i])\n        else:\n            dp[i] = 1\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # median is average of the middle two elements\n        median1 = (arr1[n//2-1] + arr1[n//2]) / 2\n        median2 = (arr2[n//2-1] + arr2[n//2]) / 2\n        return (median1 + median2) / 2\n    else:\n        # median is middle element\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # sort the merged array\n    sorted_arr = sorted(merged_arr)\n\n    # find the median\n    if n % 2 == 0:\n        median = (sorted_arr[n//2-1] + sorted_arr[n//2]) / 2\n    else:\n        median = sorted_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists into a single list\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # If the length of the list is odd, the median is the middle element\n    if n % 2!= 0:\n        return arr[n//2]\n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        return (arr[n//2 - 1] + arr[n//2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Create a new array of size n+n, where the first n elements are from arr1\n    # and the last n elements are from arr2\n    combined_arr = arr1 + arr2\n\n    # Sort the combined array\n    combined_arr.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        median = (combined_arr[n//2 - 1] + combined_arr[n//2]) / 2\n    else:\n        median = combined_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes three parameters:\n    arr1 - list of integers\n    arr2 - list of integers\n    n - size of the two lists\n    \n    The function returns the median of the two lists using the merge sort algorithm.\n    \"\"\"\n    # merge the two lists\n    merged_list = merge(arr1, arr2)\n\n    # find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n\n    return median\n\n\ndef merge(arr1, arr2):\n    \"\"\"\n    This function takes two lists as input and returns a merged list.\n    \"\"\"\n    i, j = 0, 0\n    merged_list = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n    merged_list += arr1[i:]\n    merged_list += arr2[j:]\n    return merged_list"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        return merged_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Error: The lists must be of the same size.\")\n        return None\n\n    arr = arr1 + arr2\n    arr.sort()\n\n    if n % 2 == 0:\n        # find the average of the middle two elements\n        mid = n // 2\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        # find the middle element\n        mid = n // 2\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # find the median\n    if n % 2 == 0:\n        # if the number of elements is even, take the average of the two middle elements\n        mid1 = n // 2\n        mid2 = n // 2\n        median = (arr1[mid1-1] + arr1[mid1] + arr2[mid2-1] + arr2[mid2]) / 4.0\n    else:\n        # if the number of elements is odd, take the middle element\n        mid1 = n // 2\n        mid2 = n // 2\n        median = arr1[mid1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Sort the two lists\n    sorted_arr = sorted(arr1 + arr2)\n\n    # Find the median index\n    median_index = n // 2\n\n    # Return the median value\n    if n % 2 == 0:\n        return (sorted_arr[median_index - 1] + sorted_arr[median_index]) / 2\n    else:\n        return sorted_arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n\n    # Find the median based on the length of the list\n    if len(arr1) % 2 == 0:\n        median = (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function computes the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and\n    returns a list of the nth power of each number in the input list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as input and computes the n-th power of each number.\n    \"\"\"\n    # Create an empty list to store the n-th power of each number\n    nth_powers = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Calculate the n-th power of the current number and append it to the nth_powers list\n        nth_powers.append(num ** n)\n    # Return the nth_powers list\n    return nth_powers"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check whether a given string is upper or not.\n    \"\"\"\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list has at least two elements\n    if length < 2:\n        return newList\n    else:\n        # get the first and last elements of the list\n        first = newList[0]\n        last = newList[length-1]\n        # create a new list with the first and last elements swapped\n        newList = [last] + newList[1:length-1] + [first]\n        # return the new list with the swapped elements\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # taking the length of the list as the index\n    index = len(newList) - 1\n    # swapping the first and last element of the list\n    newList[0], newList[index] = newList[index], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty or not\n    if len(newList) == 0: \n        return []\n    # swap the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        print(\"The list must have at least two elements to swap.\")\n        return None\n    \n    # Initializing the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Interchanging the first and last elements of the list\n    newList[0] = last\n    newList[-1] = first\n    \n    # Printing the updated list\n    print(\"Updated List:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Define variables\n    first = newList[0]\n    last = newList[-1]\n    # Interchange the first and last element\n    newList[0] = last\n    newList[-1] = first"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the area of a right triangle\n    a = r * (r - 1) / 2\n    \n    # Calculating the area of a triangle that is one half the area of a right triangle\n    b = a / 2\n    \n    # Returning the maximum of the two areas\n    return max(a, b)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the circumference of the semicircle\n    circumference = 2 * math.pi * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (1/2) * circumference * math.sqrt(r**2 - (1/2) * circumference**2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    \n    # Calculate the area of the largest triangle\n    base = r\n    height = r * math.sqrt(3)\n    \n    area += 0.5 * base * height\n    \n    # Calculate the area of the smallest triangle\n    base = 2 * r\n    height = 2 * r * math.sqrt(3)\n    \n    area += 0.5 * base * height\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2*math.pi*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(semi_perimeter) * math.tan(math.pi/4)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n\n    # Calculate the area of a triangle using Heron's formula\n    def heron_formula(s, a, b):\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the perimeter of the largest triangle inscribed in a semicircle\n    def largest_triangle_perimeter(r):\n        return 2 * r\n\n    # Calculate the area of the largest triangle inscribed in a semicircle\n    largest_triangle_area = heron_formula(largest_triangle_perimeter(r), 0, 2 * r)\n\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    def area_triangle(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n\n    def area_circumcircle(a, b, c, r):\n        s = (a + b + c) / 2\n        d = math.sqrt((a - c) ** 2 + (b - c) ** 2)\n        circumcircle_area = (math.pi * r ** 2 * d) / s\n        return circumcircle_area\n\n    def largest_triangle(a, b, c, r):\n        a_area = area_triangle(a, b, c)\n        b_area = area_triangle(b, c, a)\n        c_area = area_triangle(c, a, b)\n        largest_area = max(a_area, b_area, c_area)\n        return largest_area\n\n    def inscribed_area(r):\n        circumcircle_radius = (r * math.sin(math.pi / 3)) / math.sqrt(3)\n        circumcircle_area = area_circumcircle(1, 1, 1, circumcircle_radius)\n        triangle_side = math.sqrt(3) * circumcircle_radius\n        triangle_area = (triangle_side ** 2) / 4\n        return (2 * triangle_area) + circumcircle_area\n\n    return inscribed_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with sides of length 1\n    area_1 = (3*r**2) / 4\n\n    # Calculate the area of a triangle with sides of length 2\n    area_2 = (r**2 * (2 + r)) / 6\n\n    # Calculate the area of a triangle with sides of length 3\n    area_3 = (r**3 / 6)\n\n    # Find the maximum area and its corresponding triangle\n    if area_1 > area_2 and area_1 > area_3:\n        return area_1, 1\n    elif area_2 > area_1 and area_2 > area_3:\n        return area_2, 2\n    else:\n        return area_3, 3"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * r ** 2\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (math.sqrt(3)*r**2)/s\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # pi constant\n    pi = 3.14159265359\n\n    # calculate the semi-perimeter of the triangle\n    s = 2 * r\n\n    # calculate the area of the triangle\n    area = (s * s * pi) / 3\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == 0 or mid == len(array) - 1:\n            if mid == 0:\n                return array[mid] + 1\n            else:\n                return array[mid] - 1\n\n        if array[mid - 1] < array[mid]:\n            return array[mid]\n        elif array[mid] < array[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: A sorted list of natural numbers.\n    :param start: Optional. The starting index of the array to consider. Default: 0.\n    :param end: Optional. The ending index of the array to consider. Default: None (until the last element of the array).\n    :return: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n            \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = max(array)\n\n    for i in range(start,end+1):\n        if array[abs(array[i])-1] > 0:\n            array[abs(array[i])-1] *= -1\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start, end + 1):\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # check if the array is sorted\n    if not all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        print(\"Error: Array is not sorted!\")\n        return None\n    \n    # check if the end index is provided\n    if end is None:\n        end = len(array) - 1\n    \n    # iterate through the array and find the smallest missing number\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    \n    # if no missing number is found, return None\n    print(\"No missing number found.\")\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the input array is sorted\n    if not all(x < y for x, y in zip(array, array[1:])):\n        raise ValueError(\"Input array is not sorted\")\n\n    # If the input array is sorted, find the smallest missing number\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if mid < end and array[mid] == mid + 1:\n            return mid + 1\n        \n        if mid > start and array[mid] == mid:\n            return mid\n        \n        if array[mid] < mid:\n            end = mid - 1\n        \n        else:\n            start = mid + 1\n    \n    return None"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    result = []\n    \n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n            \n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Split the coordinate tuple into its x and y coordinates\n    x, y = ele\n    \n    # Define a function to generate adjacent coordinates\n    def adj(x, y):\n        return [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    \n    # Generate adjacent coordinates for the current coordinate\n    adj_coords = adj(x, y)\n    \n    # Append the adjacent coordinates to the sublist\n    sub.extend(adj_coords)\n    \n    # Recursively call the function for each adjacent coordinate\n    for coord in adj_coords:\n        adjac(coord, sub)\n    \n    # Return the complete sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # If the element is a tuple, append its coordinates to the sublist.\n    if isinstance(ele, tuple):\n        sub.append(ele)\n        # Extract the adjacent elements.\n        for i in range(len(ele)):\n            sub = sub + adjac(ele[i], sub)\n    # If the element is a list, recursively extract adjacent coordinates from all elements in the list.\n    elif isinstance(ele, list):\n        for i in range(len(ele)):\n            sub = sub + adjac(ele[i], sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # store the adjacent coordinates in a list\n    adj = []\n    # get the x and y coordinates of the given element\n    x, y = ele\n    # iterate over all the possible directions (up, down, left, right)\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # check if the new coordinate is within the grid bounds\n            if 0 <= x+i < 2 and 0 <= y+j < 2:\n                # if it is, add it to the adjacent list\n                adj.append((x+i, y+j))\n    # return the adjacent coordinates as a set to remove duplicates\n    return set(adj)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        x, y = ele\n        return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    elif len(ele) == 3:\n        x, y, z = ele\n        return [(x-1, y, z), (x+1, y, z), (x, y-1, z), (x, y+1, z), (x, y, z-1), (x, y, z+1)]\n    elif len(ele) == 4:\n        x, y, z, w = ele\n        return [(x-1, y, z, w), (x+1, y, z, w), (x, y-1, z, w), (x, y+1, z, w), \n                (x, y, z-1, w), (x, y, z+1, w), (x, y, z, w-1), (x, y, z, w+1)]\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj_coords\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    sub.append(adjacent)\n    return sub if len(adjacent) > 0 else sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    # Extract the coordinates of the given element\n    x, y = ele\n    \n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n    \n    # Iterate over all the possible directions (left, right, up, down)\n    for d in ['left', 'right', 'up', 'down']:\n        # Calculate the adjacent coordinates\n        nx, ny = x + (0 if d=='left' or d=='right' else 1), y + (0 if d=='up' or d=='down' else 1)\n        \n        # Check if the adjacent coordinate is within the boundaries of the grid\n        if 0 <= nx < 5 and 0 <= ny < 5:\n            # If it is within the boundaries, append it to the list of adjacent coordinates\n            adj.append((nx, ny))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)): \n        for j in range(len(ele)): \n            if i!= j and ele[i] + 1 == ele[j] and ele[i] + 2 == ele[j]: \n                sub.append((ele[i] + 1, ele[j]))\n            elif i!= j and ele[i] - 1 == ele[j] and ele[i] - 2 == ele[j]: \n                sub.append((ele[i] - 1, ele[j]))\n            elif i!= j and ele[i] - 1 == ele[j] and ele[i] + 1 == ele[j]: \n                sub.append((ele[i], ele[j] + 1))\n            elif i!= j and ele[i] - 1 == ele[j] and ele[i] - 2 == ele[j]: \n                sub.append((ele[i], ele[j] - 1))\n            elif i!= j and ele[i] + 1 == ele[j] and ele[i] - 1 == ele[j]: \n                sub.append((ele[i], ele[j] + 1))\n            elif i!= j and ele[i] + 1 == ele[j] and ele[i] - 2 == ele[j]: \n                sub.append((ele[i], ele[j] - 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    \n    # Extract adjacent coordinates\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x < 19:\n        adjacent.append((x+1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < 19:\n        adjacent.append((x, y+1))\n    \n    # Add sub-elements\n    if sub:\n        adjacent.extend(sub)\n    \n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple):\n        sub.append(ele)\n        for i in range(len(ele)):\n            for j in range(len(ele)):\n                if i!= j and (i-1, j) in sub and (i+1, j) in sub and (i, j-1) in sub and (i, j+1) in sub:\n                    adj_ele = (ele[0]+i, ele[1]+j)\n                    if adj_ele not in sub:\n                        sub.append(adj_ele)\n        return sub\n    else:\n        return []"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # define a dictionary to map characters to replacements\n    mapping = {' ': '_', '_':''}\n    # iterate over the characters in the string\n    for char in text:\n        # check if the character is in the mapping\n        if char in mapping:\n            # replace the character with the corresponding replacement\n            text = text.replace(char, mapping[char])\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    # split the text into words\n    words = text.split()\n    # iterate through the words and replace any whitespace with an underscore\n    for i in range(len(words)):\n        if words[i].isspace():\n            words[i] = '_'\n    # join the words back together with underscores\n    new_text =''.join(words)\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(text, str):\n        return \"Error: Input is not a string.\"\n    \n    # Replace spaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    new_text = new_text.replace(\"_\", \" \")\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        elif text[i] == \"_\":\n            new_text += \" \"\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Loop through each character of the string\n    for i in range(len(text)):\n        # Check if the character is a whitespace\n        if text[i] =='':\n            # Replace the whitespace with an underscore\n            text = text[:i] + '_' + text[i+1:]\n        # Check if the character is an underscore\n        elif text[i] == '_':\n            # Replace the underscore with a whitespace\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in text:\n        if i.isspace():\n            new_text += '_'\n        else:\n            new_text += i\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index is not None:\n        for i in range(len(num_list) - 1, zero_index - 1, -1):\n            num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a temporary list to store non-zero numbers\n    temp_list = []\n    # iterate through the input list\n    for num in num_list:\n        # if the number is not zero, append it to the temp_list\n        if num!= 0:\n            temp_list.append(num)\n    # iterate through the temp_list and append all zeroes to the end of the original list\n    for num in num_list:\n        # if the number is zero, append it to the end of the original list\n        if num == 0:\n            num_list.append(num)\n    # copy the temp_list to the original list\n    num_list = temp_list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Use two pointers to traverse the list\n    i = 0\n    j = 0\n\n    # Traverse the list from both ends\n    while j < len(num_list):\n        # If the current element is not zero, move the pointer forward\n        if num_list[j]!= 0:\n            i = j\n            j += 1\n        # If the current element is zero, move the pointer backward and move the zero to the end of the list\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j += 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all zeroes to the end of the list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list) - 1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n            num_list.pop()\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        temp_list = num_list[:zero_index]\n        temp_list += num_list[zero_index+1:]\n        temp_list = list(set(temp_list))\n        return temp_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Traverse the list from left to right\n    i = 0\n    while i < len(num_list):\n        # If the element at the current index is zero, move it to the end of the list\n        if num_list[i] == 0:\n            temp = num_list[i]\n            num_list[i] = num_list[len(num_list)-1]\n            num_list[len(num_list)-1] = temp\n            # Decrease the length of the list after moving the zero element to the end\n            len_list = len(num_list)\n            while len_list > 1 and num_list[len_list-1] == 0:\n                num_list.pop()\n                len_list = len(num_list)\n            # If the length of the list becomes zero, break out of the loop\n            if len_list == 0:\n                break\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # use two pointers to iterate through the list\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            # swap the elements if the current element is not zero\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list and its length as inputs and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    #initializing the sum variable to 0\n    xor_sum = 0\n    \n    #iterating through the list\n    for i in range(n):\n        #checking if i is the last index of the list\n        if i == n-1:\n            #appending the last number to the list\n            arr.append(arr[0])\n            \n        #iterating through the list from i+1 to n-1\n        for j in range(i+1, n):\n            #xor operation of arr[i] and arr[j]\n            xor_sum += arr[i] ^ arr[j]\n    \n    #returning the xor_sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through the list and calculate xor for each pair of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i + 1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2:\n        return 0\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using a max-heap.\n    \"\"\"\n    # Convert the iterable to a max-heap\n    hq.heapify(iterable)\n\n    # Extract items from the heap and store them in a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts a given iterable using the heap sort algorithm.\n    The function takes an iterable as input and returns a sorted iterable.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_items = []\n    while heap:\n        sorted_items.append(heapq.heappop(heap))\n    return sorted_items"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    while len(iterable) > 1:\n        hq.heappop(iterable)\n        hq.heappush(iterable, hq.heappop(iterable))\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heapify(heap)\n\n    # Convert the min-heap to a regular list and return it\n    return [heapq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    heap = [heapq.heappop(heapq.heappushpop(heapq.heapify(list(iterable)))) for i in range(len(iterable))]\n    return list(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if sale_amount <= actual_cost:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount < actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profits and losses\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profits and losses are zero\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profitable\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost > sale_amount: \n        # if the actual cost is greater than the sale amount, it means that there is a loss\n        return False\n\n    if actual_cost == sale_amount: \n        # if the actual cost is equal to the sale amount, it means that there is no profit\n        return True\n\n    if actual_cost < sale_amount: \n        # if the actual cost is less than the sale amount, it means that there is a profit\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert wind velocity and temperature from celsius to fahrenheit\n    v_f = (v * 1.8) + 32\n    t_f = t * 1.8 + 32\n\n    # Calculate the wind chill index\n    wind_chill = 35.74 + 0.6215 * v_f - 35.75 * math.log(t_f + 46.85) + 0.4275 * (v_f - 0.1469) * (t_f - 10.23)\n\n    # Round wind chill index to the nearest integer\n    wind_chill = round(wind_chill)\n\n    return wind_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < 0 or v < 0:\n        return \"Invalid temperature or wind velocity.\"\n    \n    # Calculate the wind chill temperature\n    w = math.sqrt(v**2 + (13.12 + 0.6215 * t)**2)\n    \n    # Calculate the wind chill index\n    index = math.floor(w / 4)\n    \n    # Return the rounded wind chill index\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v: float, wind velocity in km/h\n        t: float, temperature in celsius\n\n    Returns:\n        float, wind chill index rounded to the next integer\n    '''\n\n    # calculate the wind chill temperature\n    wct = (13.12 + 0.6215 * (t - 273.15))\n\n    # calculate the relative humidity\n    rh = 100 * (t / 273.15)\n\n    # calculate the dew point temperature\n    dp = math.sqrt(wct * (1 - rh / 100) / (1 + rh / 100))\n\n    # calculate the heat index\n    hi = math.sqrt(dp * (1 - 0.0065 * dp))\n\n    # calculate the wind chill index\n    wci = 25 + 45 * (hi - 25) / (1 + (hi - 25) * 0.16)\n\n    # round the wind chill index to the nearest integer\n    wci = int(math.ceil(wci))\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill using the formula:\n    # wc = 35.74 + 0.6215 * t - 35.75 * math.pow(t,0.16) + 0.4275 * math.pow(v,0.16)\n    wc = 35.74 + 0.6215 * t - 35.75 * math.pow(t,0.16) + 0.4275 * math.pow(v,0.16)\n    \n    # Round the wind chill to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    tc = t - 273.15  # convert temperature to Celsius\n    vc = v * 1.609344  # convert wind velocity to miles per hour to kilometers per hour\n    wc = math.floor((13.12 + (0.6215 * tc) + (11.37 * math.pow(tc, 0.16)) - (0.3965 * math.pow(tc, 0.13))) * (1 - (0.0065 * math.pow(math.cos(math.radians(31.0 + 18.0 * (t - 273.15) / 36.0)), 0.12))))\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = round(max(32 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16), 0))\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity and temperature to knots\n    v = v * 1.94384  # km/h to m/s\n    t = t + 273.15  # convert celsius to kelvin\n    \n    # calculate the wind chill index\n    wc = 35.74 + 0.6215*t - 35.75*math.exp((17.625*t)/(t+243.5)) + 0.4275*v\n    \n    # round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_kmph = v * 1.60934  # Convert km/h to m/s\n    wind_speed_mps = wind_speed_kmph * 1609.34  # Convert m/s to m/s^2\n\n    # Calculate the absolute temperature difference between the current and target temperatures\n    delta_t = math.fabs(t - 273.15)\n\n    # Calculate the heat capacity ratio of water vapor\n    gamma = 17.67 * math.exp((17.67 * delta_t) / (delta_t + 243.5))\n\n    # Calculate the sensible heat capacity of water vapor\n    C_s = 4186.8 * math.exp((17.67 * delta_t) / (delta_t + 459.67))\n\n    # Calculate the latent heat of vaporization of water vapor\n    L_v = 2503. * math.exp((17.67 * delta_t) / (delta_t + 283.15))\n\n    # Calculate the latent heat of fusion of water vapor\n    L_f = 333.1 * math.exp((17.67 * delta_t) / (delta_t + 273.15))\n\n    # Calculate the effect of humidity on the heat capacity ratio of water vapor\n    # H_v = H_w / (1 - (H_w / 100))\n    # H_w is the humidity in %\n    H_v = 70  # Assuming constant humidity of 70%\n    H_w = 100 - H_v\n\n    gamma_w = gamma * (1 - (H_w / 100))\n\n    # Calculate the latent heat of condensation of ice\n    L_c = 0.0065 * (t + 273.15)\n\n    # Calculate the effect of wind on the heat capacity ratio of water vapor\n    if wind_speed_mps > 10000:  # If the wind speed is over 100 m/s\n        gamma_w *= (1 + 0.001 * math.fabs(wind_speed_mps - 10000))\n    elif wind_speed_mps > 1000:  # If the wind speed is over 10 m/s\n        gamma_w *= (1 + 0.0001 * math.fabs(wind_speed_mps - 1000))\n    else:  # If the wind speed is below 10 m/s\n        gamma_w *= (1 + 0.00001 * math.fabs(wind_speed_mps - 1000))\n\n    # Calculate the effect of temperature on the heat capacity ratio of water vapor\n    gamma_t = gamma * (1 + (0.0015 * delta_t))\n\n    # Calculate the effective heat capacity of water vapor\n    C_e = C_s + (L_v + L_f) * delta_t / (L_v + L_f + 0.0001)\n\n    # Calculate the total effect of the wind, humidity, and temperature on the heat capacity ratio of water vapor\n    gamma_wv = gamma_w * gamma_t\n\n    # Calculate the effective temperature of the water vapor\n    T_e = (C_e * C_e * C_e) / (C_e - gamma_wv)\n\n    # Calculate the wind chill index\n    if T_e < 273.15:\n        WI = 13.12 + 0.6215 * (T_e - 273.15) + 10.37 * math.log(T_e) - 0.3965 * (T_e - 273.15) * math.log(T_e)\n    elif T_e < 100:\n        WI = 35.71 + 0.6215 * (T_e - 273.15) - 35.71 + 0.62"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the dew point temperature\n    dew_point = (v ** 0.16) + (0.1 * (t - 273.15))\n\n    # Calculate the wind chill index\n    wind_chill_index = math.ceil(13.12 + (0.6215 * (t - 273.15)) - (11.37 * math.log(dew_point)) + (0.3965 * (v ** 0.16)))\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def wind_chill(v,t):\n    # Wind chill index calculation formula\n    # IC = 0.66*t - 0.64*v + 37.3\n    # Wind chill index is rounded to the next integer\n    # WCI = math.ceil(IC)\n    # return WCI\n    # Alternative approach with if-else statement\n    # if v <= 5:\n    #     WCI = 0\n    # elif 5 < v <= 10:\n    #     WCI = 1\n    # elif 10 < v <= 15:\n    #     WCI = 2\n    # elif 15 < v <= 20:\n    #     WCI = 3\n    # else:\n    #     WCI = 4\n    # return WCI\n    if v <= 5:\n        WCI = 0\n    elif 5 < v <= 10:\n        WCI = 1\n    elif 10 < v <= 15:\n        WCI = 2\n    elif 15 < v <= 20:\n        WCI = 3\n    else:\n        WCI = 4\n    return math.ceil(WCI)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of lengths to zero\n    sum_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove the first character of the name (i.e. the lowercase letter)\n        name = name[1:]\n        # Add the length of the new name to the sum\n        sum_length += len(name)\n    # Return the sum of the lengths\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum_length = 0\n\n    # Iterate through each name in the list\n    for name in sample_names:\n\n        # Check if the first letter of the name is lowercase\n        if name[0].islower():\n            # If it is, skip to the next name\n            continue\n        # If the name does not start with a lowercase letter, add its length to the sum variable\n        else:\n            sum_length += len(name)\n\n    # Return the sum of all the names that do not start with a lowercase letter\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    def remove_lowercase(name):\n        '''\n        Helper function to remove lowercase letters from the name.\n        '''\n        if name[0].islower():\n            return None\n        else:\n            return name\n\n    filtered_names = list(filter(None, map(remove_lowercase, sample_names)))\n    total_length = sum(len(name) for name in filtered_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # If the first character of the name is uppercase, then it cannot be a valid name\n            continue  # Skip to the next name in the list\n        total_length += len(name)  # Add the length of the valid name to the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    total_length = 0\n    for name in filtered_names:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            filtered_names.append(name)\n    sum_length = 0\n    for name in filtered_names:\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = r'\\([^()]*\\)' # matches any parenthesis enclosed string\n    result = re.sub(regex, '', items) # removes all the matches of the regex\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'(\\([^)]*\\))'\n    new_string = re.sub(pattern, '', items)\n    return new_string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all parenthesis using regular expressions\n    items = re.sub('\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Removes the parenthesis from a string containing them.\n    \"\"\"\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n\n    # Find the square of the length of a side of a square\n    def side_len(n):\n        return int(n**0.5) + 1\n\n    # Find the nonagonal number\n    def nonagonal_num(n):\n        return n * side_len(n) - side_len(n)**2\n\n    # Return the nth nonagonal number\n    return nonagonal_num(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2*n - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = n * (n + 1) // 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first and last rows of the matrix\n    first_row = [1]\n    last_row = [1]\n    # Initialize the total number of rows\n    rows = 2\n    \n    # Loop until we have reached the desired number of rows\n    while rows < n:\n        # Initialize a new row with zeros\n        new_row = [0]\n        # Loop through each element of the previous row\n        for i in range(rows-1):\n            # Calculate the sum of the previous row and the element above\n            new_row.append(first_row[i] + last_row[i])\n        # Append the last element of the new row to the last row and increment the rows count\n        last_row.append(new_row[-1])\n        first_row = new_row\n        rows += 1\n    \n    # Return the first element of the last row\n    return last_row[0]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        print('Input must be an integer.')\n        return\n    \n    # Initialize variables\n    a = 1\n    b = 2\n    c = a + b\n    \n    # Loop until we reach the nth nonagonal number\n    while c < n:\n        a, b, c = b, c, a + b\n    \n    # Return the nth nonagonal number\n    return c"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num1 = 1\n    num2 = 2\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 1:\n            print(num1)\n            num1 += 1\n        else:\n            print(num2)\n            num2 += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize two variables, one for the sum of the diagonal elements and the other for the sum of the top left diagonal elements\n    diagonal_sum = 0\n    top_left_diagonal_sum = 0\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Calculate the sum of the diagonal elements\n        diagonal_sum = (2 * i) - 1\n\n        # Calculate the sum of the top left diagonal elements\n        top_left_diagonal_sum = 2 * (n - i)\n\n        # Check if the sum of the diagonal elements equals the sum of the top left diagonal elements\n        if diagonal_sum == top_left_diagonal_sum:\n            # If yes, return True\n            return True\n\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Initialize the first two nonagonal numbers\n    num1 = 1\n    num2 = 4\n\n    # Loop to calculate the nth nonagonal number\n    for i in range(2, n + 1):\n        # Calculate the next nonagonal number\n        next_num = num1 + num2\n\n        # Check if the next nonagonal number is odd\n        if next_num % 2 == 1:\n            return next_num\n\n        # Update the values for the next iteration\n        num1 = num2\n        num2 = next_num\n\n    # If the loop completes without finding an odd number, the nth nonagonal number is even\n    return \"The nth nonagonal number is even.\""
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            print(2*i*i, end=' ')\n        else:\n            print(2*i*i+1, end=' ')\n    print()"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    This function checks if a number is nonagonal.\n    '''\n    if n == 1:\n        return True\n    else:\n        for i in range(1, n):\n            if i**2 + 1!= i*(n - i):\n                return False\n        return True\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ][a-z]*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_match_wordz_middle(text):\n    pattern = r\"\\b\\w*[zZ]\\w*\\b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)(?!\\w)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!.*[a-z])z(?!\\w*)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b(?![a-zA-Z]*z\\b)(?!.*[a-zA-Z]*z(?![a-zA-Z]*[a-z]))\\b', re.IGNORECASE)\n    return bool(pattern.search(text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Remove non-alphanumeric characters from the text\n    text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Check if the middle word contains 'z'\n    for i in range(len(words)//2):\n        if 'z' in words[i]:\n            return True\n    # If the middle word does not contain 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define a regular expression to match 'z' at the start and end of a word\n    word_z_regex = r'(?<=\\b)[zZ](?=\\b)'\n    # use the regular expression to match all occurrences of 'z' in the text\n    word_z_matches = re.findall(word_z_regex, text)\n    # if there are matches, return True, otherwise False\n    return len(word_z_matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Use regular expressions to find all the words in the text that contain 'z'\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return True if there is at least one match, False otherwise\n    return bool(matches)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    for i in range(n):\n        if i <= k:\n            input[i], input[n-i-1] = input[n-i-1], input[i]\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n or k <= 0:\n        return \"Invalid input\"\n    \n    temp = [0] * n\n    j = 0\n    \n    for i in range(n-1, -1, -1):\n        if i < k-1:\n            temp[j] = input[i]\n            j += 1\n    \n    for i in range(k-1):\n        input[i] = temp[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k-1\n\n    # Reverse the array from start to k-1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # Reverse the array from k to n-1\n    start = k\n    end = n-1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1): # loop from k-1 to 0\n        temp = input[i]\n        input[i] = input[k-1]\n        input[k-1] = temp"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k - 1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    print(\"Reversed array upto the given position:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # finding the length of the array\n    n = len(input)\n\n    # finding the position of the array upto which we want to reverse the array\n    if k > n:\n        return \"Error: Position k is greater than the length of the array.\"\n    elif k == 1:\n        return input[n-1]\n    elif k == n:\n        return input[0]\n    else:\n        # reversing the array upto k-1\n        for i in range(0, k-1):\n            input[i], input[n-i-1] = input[n-i-1], input[i]\n\n        # returning the reversed array upto k-1\n        return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # If the value of k is greater than the length of the input array, then reverse the entire array.\n    if k > len(input):\n        input = input[::-1]\n    \n    # If the value of k is less than or equal to the length of the input array, then reverse the first k elements of the array.\n    else:\n        input = input[:k][::-1] + input[k:]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # print the original array\n    print(\"Original Array:\", input)\n    # reverse the array from start to k-1\n    input[:k] = input[:k][::-1]\n    # print the reversed array\n    print(\"Reversed Array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as input, and returns the reversed array upto the position k.\n    '''\n    n = len(input)\n    left, right = 0, n-1\n    while left < right:\n        # Reverse elements from left to k-1\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n        if left == k-1:\n            break\n        # Reverse elements from k to right\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input) \n    for i in range(n//2): \n        #swap elements at i and n-i-1 \n        input[i], input[n-i-1] = input[n-i-1], input[i] \n    #reverse the remaining elements \n    input = input[:k] + input[k:][::-1] + input[k:] \n    return input "
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to store the new key-value pairs\n    new_dict = {}\n    # Loop through each key-value pair in the dictionary\n    for key, value in test_dict.items():\n        # Add the key-value pair to the new dictionary\n        new_dict[key] = value\n    # Add the new dictionary to the tuple\n    new_tup = test_tup + (new_dict,)\n    # Return the modified tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key in test_dict.keys():\n        test_tup = test_tup + (test_dict[key],)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs from the input dictionary\n    new_dict = {key: value for key, value in test_dict.items()}\n    # add the new dictionary to the input tuple\n    test_tup = (test_tup, new_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary and add the values of the original dictionary to it\n    new_dict = {**test_dict}\n    \n    # Add the new dictionary to the tuple\n    test_tup = (test_tup, new_dict)\n    \n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a list so we can add the dictionary to it\n    test_list = list(test_tup)\n\n    # Add the dictionary to the list\n    test_list.append(test_dict)\n\n    # Convert the list back to a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the two dictionaries into a single dictionary\n    merged_dict = {**test_tup[1], **test_dict}\n    \n    # Create a new tuple with the merged dictionary as the second element\n    new_tup = (test_tup[0], merged_dict)\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a tuple using the items() method\n    test_dict_as_tuple = tuple(test_dict.items())\n    # Add the dictionary as a tuple to the tuple\n    return test_tup + (test_dict_as_tuple,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tuple = tuple(test_tup)\n    new_tuple.update(test_dict)\n    return new_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def isSafe(i, j, N):\n        if 0 <= i < N and 0 <= j < N and cost[i][j]!= 0:\n            return True\n        return False\n\n    def calculatePath(i, j, N, path, totalCost):\n        if isSafe(i, j, N):\n            totalCost += cost[i][j]\n            path.append((i, j))\n            if i == N-1 and j == N-1:\n                if totalCost == 0:\n                    return []\n                return [(i, j), (N-1, N-1)]\n            if i < N-1:\n                safePaths = calculatePath(i+1, j, N, path, totalCost)\n            if j < N-1:\n                safePaths = calculatePath(i, j+1, N, path, totalCost)\n            return safePaths\n        return []\n\n    N = len(cost)\n    totalCost = 0\n    path = []\n    paths = calculatePath(0, 0, N, path, totalCost)\n    maxAverage = 0\n\n    for i in range(len(paths)):\n        path = paths[i]\n        pathCost = 0\n        for j in range(len(path)-1):\n            pathCost += cost[path[j][0]][path[j][1]] + cost[path[j+1][0]][path[j+1][1]]\n        pathCost += cost[path[-1][0]][path[-1][1]]\n        pathCost /= (len(path)-1)\n        if pathCost > maxAverage:\n            maxAverage = pathCost\n\n    return maxAverage"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    max_avg = float('-inf')\n    max_path = []\n\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                max_path = [[i, j]]\n            elif dp[i][j] == max_avg:\n                max_path.append([i, j])\n    \n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the number of cells in the matrix\n    N = len(cost)\n\n    # Initialize variables to store the max average and the path with max average\n    max_avg = float('-inf')\n    max_path = []\n\n    # Iterate through all possible paths from top-left to bottom-right\n    for i in range(N):\n        for j in range(N):\n\n            # If we have reached the bottom-right cell, calculate the average of the visited cells and update the max average and path if needed\n            if i == N-1 and j == N-1:\n                path = []\n                visited_cells = 0\n                total_cost = 0\n\n                while i!= N-1 or j!= N-1:\n                    path.append((i, j))\n                    visited_cells += 1\n                    if cost[i][j] > 0:\n                        total_cost += cost[i][j]\n                    i += 1 if j == N-2 else 0\n                    j += 1 if i == N-2 else 0\n\n                avg_cost = total_cost / visited_cells\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = path\n\n            # If the current cell is not a boundary cell, move to the right or down and continue\n            else:\n                i += 1 if j == N-1 else 0\n                j += 1 if i == N-1 else 0\n\n    # Return the path with max average\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_path_sum = 0\n    max_path_len = 0\n    max_path_avg = 0\n    \n    for i in range(N):\n        for j in range(N):\n            # if we are at the top-left cell, we can only move right or down\n            if i == 0 and j == 0:\n                max_path_sum = cost[i][j]\n                max_path_len = 1\n                max_path_avg = cost[i][j]\n            else:\n                # check if we can move right\n                if j < N - 1:\n                    max_path_sum += cost[i][j] + cost[i][j+1]\n                else:\n                    max_path_sum += cost[i][j]\n                \n                # check if we can move down\n                if i < N - 1:\n                    max_path_sum += cost[i][j] + cost[i+1][j]\n                else:\n                    max_path_sum += cost[i][j]\n                \n                # update max path length and average if necessary\n                max_path_len += 1\n                max_path_avg = max_path_sum / max_path_len\n    \n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    N = len(cost)\n    total_cost = 0\n    total_cells_visited = 0\n\n    # Initialize top row\n    for i in range(N):\n        total_cost += cost[0][i]\n        total_cells_visited += 1\n\n    # Initialize left column\n    for j in range(N):\n        total_cost += cost[j][0]\n        total_cells_visited += 1\n\n    # Fill the remaining cells\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            total_cost += cost[i][j]\n            total_cells_visited += 1\n\n    # Find the maximum average\n    max_avg = total_cost / total_cells_visited\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_avg = 0\n    total_cost = 0\n    n = len(cost)\n    \n    # Calculate the maximum average path\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                total_cost += cost[i][j]\n            elif i == 0 and j < n-1:\n                total_cost += cost[i][j] + cost[i][j+1]\n            elif i < n-1 and j == 0:\n                total_cost += cost[i][j] + cost[i+1][j]\n            elif i < n-1 and j < n-1:\n                total_cost += cost[i][j] + cost[i+1][j] + cost[i][j+1] + cost[i+1][j+1]\n            \n            # Calculate the average cost of the path\n            if i == n-1 and j == n-1:\n                avg_cost = total_cost/4\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                total_cost = 0\n            elif i == n-1 and j < n-1:\n                avg_cost = (total_cost-cost[i][j]+cost[i][j+1])/3\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                total_cost = cost[i][j] + cost[i][j+1]\n            elif i < n-1 and j == n-1:\n                avg_cost = (total_cost-cost[i][j]+cost[i+1][j])/3\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                total_cost = cost[i][j] + cost[i+1][j]\n            elif i < n-1 and j < n-1:\n                avg_cost = total_cost/4\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                total_cost = cost[i][j] + cost[i+1][j] + cost[i][j+1] + cost[i+1][j+1]\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables for maximum and current average\n    max_avg = 0\n    current_avg = 0\n    path_cost = 0\n    visited_cells = 0\n\n    # iterate over rows and columns of the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n\n            # if we've reached the bottom right cell, calculate the average and update the maximum average if needed\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                current_avg = path_cost / visited_cells\n                if current_avg > max_avg:\n                    max_avg = current_avg\n\n            # move down or right if we're not at the bottom right cell\n            elif i < len(cost) - 1 and j < len(cost[0]) - 1:\n                path_cost += cost[i][j]\n                visited_cells += 1\n\n                # move down\n                current_avg = (path_cost - path_cost % visited_cells) / visited_cells\n                if current_avg > max_avg:\n                    max_avg = current_avg\n\n                # move right\n                path_cost += cost[i+1][j]\n                visited_cells += 1\n                current_avg = (path_cost - path_cost % visited_cells) / visited_cells\n                if current_avg > max_avg:\n                    max_avg = current_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                continue\n            avg = dp[i][j]/(i+j+1)\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_cost = float('-inf')\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        max_cost = max(max_cost, cost[i][i])\n    for k in range(2, N):\n        for i in range(N - k):\n            j = i + k\n            dp[i][j] = cost[i][j] + dp[i + 1][j - 1] - dp[i + 1][j]\n            max_cost = max(max_cost, dp[i][j])\n    return max_cost / (N * (N - 1))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N < 1:\n        return 0\n    \n    # Initialize variables\n    visited = [[False]*N for _ in range(N)]\n    max_avg = 0\n    max_path = [[0]*N for _ in range(N)]\n    \n    # Compute path with maximum average starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                visited[i][j] = True\n                if i == 0 and j == 0:\n                    path = [0]\n                elif i == 0:\n                    path = [0, j]\n                elif j == 0:\n                    path = [i]\n                else:\n                    path = [i, j]\n                avg = compute_avg(cost, path)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = path\n                visited[i][j] = False\n    \n    # Return the maximum average path found\n    return max_avg\n\ndef compute_avg(cost, path):\n    '''\n    Compute the average cost of a given path.\n    '''\n    N = len(path)\n    total_cost = 0\n    for i in range(N-1):\n        total_cost += cost[path[i]][path[i+1]]\n    total_cost += cost[path[-1]][0]\n    return total_cost / (N-1)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    \n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create an empty dictionary to store the count of each number in the list\n    count_dict = {}\n    # Loop through the first list\n    for num in nums1:\n        # Check if the number is already in the dictionary\n        if num in count_dict:\n            # Increment the count of the number by 1\n            count_dict[num] += 1\n        else:\n            # If the number is not in the dictionary, add it with a count of 1\n            count_dict[num] = 1\n    # Initialize the count of the same pairs to 0\n    count_same_pairs = 0\n    # Loop through the second list\n    for num in nums2:\n        # Check if the number is already in the dictionary\n        if num in count_dict:\n            # If the number is in the dictionary, check if the count is equal to 1\n            if count_dict[num] == 1:\n                # If it is, increment the count of same pairs by 1\n                count_same_pairs += 1\n            # Decrement the count of the number by 1\n            count_dict[num] -= 1\n    # Return the count of same pairs\n    return count_same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    # Use the 'eq' operator to compare elements of the lists\n    # Return the count of elements where the operator returns True\n    return sum(1 for i in range(len(nums1)) if nums1[i] == nums2[i])"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the indices of each element in each list\n    index_dict = {nums1[i]: i for i in range(len(nums1))}\n\n    # Use the dictionary to find all the indices where the lists have the same values\n    same_indices = [index_dict[nums2[i]] for i in range(len(nums2)) if nums2[i] in index_dict and nums1[index_dict[nums2[i]]] == nums2[i]]\n\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through each index in the lists\n    for i in range(len(nums1)):\n        # Check if the current index of nums1 and nums2 are equal\n        if eq(nums1[i], nums2[i]):\n            # Increment the count variable\n            count += 1\n    \n    # Return the count of indices where the lists have the same values\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Lists are not the same length\"\n    # Initialize an empty dictionary to store the count of each element in the lists\n    count_dict = {}\n    # Loop through each element in the first list\n    for i in range(len(nums1)):\n        # Check if the current element is already in the count_dict\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n    # Loop through each element in the second list\n    for i in range(len(nums2)):\n        # Check if the current element is already in the count_dict and has the same count as the first list\n        if nums2[i] in count_dict and count_dict[nums2[i]] == count_dict[nums1[i]]:\n            count_dict[nums2[i]] += 1\n    # Loop through each element in the count_dict to count the number of indices where the lists have the same values\n    count = 0\n    for val in count_dict:\n        if count_dict[val] == 2:\n            count += 1\n    # Return the count of indices where the lists have the same values\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    freq = {}\n    count = 0\n    for num in nums1:\n        freq[num] = freq.get(num, 0) + 1\n    for i, num in enumerate(nums2):\n        if eq(num, nums1[freq[num] - 1]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_of_digits = 0\n    for digit in base_str:\n        sum_of_digits += int(digit)\n    return sum_of_digits ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of digits raised to the power of the power\n        digit_sum = digit_int ** power\n        # Add the digit sum to the running sum\n        sum += digit_sum\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    # Calculate the sum of all digits of base raised to the power\n    result = sum([int(digit)**power for digit in str(base)])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize the sum to 0\n    total_sum = 0\n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the total sum\n        total_sum += int(digit) ** power\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    # Convert the base to a string and split it into its digits\n    digits = list(str(base))\n    # Iterate over the digits and calculate the sum of digits to the power specified by power\n    for digit in digits:\n        sum += int(digit)**power\n    # Return the sum of digits raised to the power specified by power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        sum_digits += base % 10\n        power //= 10\n        base //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and iterate through each digit\n    base_str = str(base)\n    sum_of_digits = 0\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_of_digits += int(digit) ** power\n    return sum_of_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all matches of double quotes between the given string\n    matches = re.findall(r'(?<=\")\\w+(?=\")', text1)\n    # Join all the matches into a single string and return it\n    return ''.join(matches)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Define the regular expression pattern for matching quotation marks\n    pattern = re.compile(r'\"(.+?)\"')\n\n    # Use the pattern to search for all occurrences of quotation marks in the string\n    matches = pattern.findall(text1)\n\n    # Return a list of all the quotation marks found in the string\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Define a regular expression to match quotation marks and any character within them\n    pattern = re.compile(r'\"[^\"]+\"')\n\n    # Find all matches in the given string and return the values\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern to match quotation marks\n    match = re.findall(pattern, text1) # find all occurrences of pattern in text1\n    return match\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0],) * N\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # create an empty list to store the multiplied elements\n    multiplied_elements = []\n    # iterate over the tuple elements\n    for i in range(len(test_tup)-1):\n        # multiply the two elements and append the result to the list\n        multiplied_elements.append(test_tup[i] * test_tup[i+1])\n    # return the tuple of multiplied elements\n    return tuple(multiplied_elements)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty tuple to hold the result\n    result_tup = ()\n    # iterate through the tuple of numbers\n    for i in range(len(test_tup) - 1):\n        # calculate the product of the current number and the next number\n        product = test_tup[i] * test_tup[i+1]\n        # add the product to the result tuple\n        result_tup += (product,)\n    # return the final result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize a new empty tuple of length N\n    result_tup = ()\n    # Iterate through the tuple of numbers (t_1,..., t_{N+1})\n    for i in range(len(test_tup)-1):\n        # Append the product of the current and next elements of the tuple to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Append the last element of the original tuple to the result tuple\n    result_tup += (test_tup[-1],)\n    # Return the final result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t1 * t2 for i, (t1, t2) in enumerate(zip(test_tup[:-1], test_tup[1:])))"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the results\n    result = []\n    # Loop through the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current element and the next element and append the result to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    # Return the result list as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple must contain at least two elements\")\n    N = len(test_tup) - 1\n    return tuple(t1*t2 for i in range(N) for t1,t2 in zip(test_tup, test_tup[i+1:]))"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Define the result list and iterate over the lists\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n\n    # Iterate through each element in both lists and add them to the result list\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        yield from group if len(list(group)) == 1 else group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    # group the numbers by their difference and sort them\n    grouped = sorted(list(groupby(enumerate(nums), lambda x: x[1]-x[0])))\n    # iterate through the grouped list and remove consecutive duplicates\n    for group in grouped:\n        first, last = group[0]\n        if first + 1 == last:\n            nums[first] = nums[last]\n    # return the final list with consecutive duplicates removed\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use groupby to group the consecutive duplicates\n    grouped = groupby(nums)\n    \n    # Iterate through the grouped items and remove consecutive duplicates\n    result = []\n    for item, group in grouped:\n        if not group:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    prev_num = None\n    prev_key = None\n    for key, group in groupby(nums):\n        if prev_num is not None and key == prev_key:\n            group = list(group)\n            for i in range(len(group)):\n                group[i] = nums[i]\n            group.pop(0)\n        prev_num = next(group, None)\n        prev_key = key\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their consecutive duplicates\n    grouped_nums = groupby(nums)\n\n    # create an empty list to store the unique consecutive duplicates\n    unique_nums = []\n\n    # iterate over the grouped numbers and check if they are consecutive duplicates\n    for key, group in grouped_nums:\n        # if the group is consecutive, add the first number to the unique list\n        if key == 1:\n            unique_nums.append(next(group))\n\n    # return the unique consecutive duplicates list\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(enumerate(nums), lambda x: x[1] == x[0])]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    surface_area = math.pi * r**2 * h / 3\n    \n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r*h)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the cone using the formula A = pi * r^2\n    A = math.pi * r ** 2\n    \n    # Calculate the lateral surface area using the formula LSA = 2 * A * h\n    LSA = 2 * A * h\n    \n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_surface = math.pi * r * h\n    \n    # Return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n\n    # Calculate the lateral surface area of the cone using the formula\n    # 2*r*h*sin(pi/6) = 2r*h*tan(pi/6)\n    area = 2 * r * h * math.tan(math.pi / 6)\n\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of a cone\n    surface_area = 2 * math.pi * r * h\n    # Return the lateral surface area\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    # Using formula for lateral surface area of a cone\n    LSA = (2 * r * h) / math.tan(math.pi / 4)\n\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*r*h + 2*math.pi*r**2"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for space, comma, and dot\n    pattern = re.compile(r'\\s|,|\\.')\n    # Use re.sub() function to replace all occurrences of pattern with colon\n    text = re.sub(pattern, ':', text)\n    # Return modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,\\.]')\n    return special_chars.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[\\s,\\.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define a regular expression pattern to match all special characters\n    special_pattern = r'[\\s,\\.]'\n    # Replace all special characters with a colon\n    text = re.sub(special_pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # use regular expressions to replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',+', ':', text)\n    text = re.sub(r'\\.+', ':', text)\n    # return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Check if the array is empty or if the first element is equal to the search number\n    if len(A) == 0 or A[0] == x:\n        return -1\n\n    # Initialize variables to keep track of the first occurrence and the current index\n    first_occurrence = -1\n    current_index = 0\n\n    # Iterate through the array\n    for i in range(1, len(A)):\n        # If the current element is equal to the search number\n        if A[i] == x:\n            # If this is the first occurrence, update the first occurrence and the current index\n            if first_occurrence == -1:\n                first_occurrence = i\n                current_index = i\n            # Otherwise, increment the current index\n            else:\n                current_index = i\n\n    # If the search number is not found, return -1\n    if first_occurrence == -1:\n        return -1\n\n    # Return the first occurrence index\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x as input and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    # Initialize variables\n    left = 0\n    right = len(A) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # If x is found, return its index\n            return mid\n        elif A[mid] < x:\n            # If x is in the right half of the array, search in the right half\n            left = mid + 1\n        else:\n            # If x is in the left half of the array, search in the left half\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A (list): A sorted array.\n    x (int): The number to search for in the array.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n\n    # Initialize the first occurrence index to -1\n    index = -1\n\n    # Loop through the array\n    for i in range(len(A)):\n        # If the current element is equal to the target number\n        if A[i] == x:\n            # Update the first occurrence index\n            index = i\n            # Break out of the loop\n            break\n\n    # Return the first occurrence index\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # binary search to find first occurrence\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # check if x is the last occurrence of A[mid]\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                # if x is the last occurrence, search the right half for the first occurrence\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list and returns the sum of products of all possible sublists of the given list.\n    \"\"\"\n    # Initialize the list to store the products of all possible sublists\n    prod_list = []\n\n    # Initialize the variable to store the current subarray product\n    cur_prod = 1\n\n    # Initialize the variable to store the sum of products of all subarrays\n    total_sum = 0\n\n    # Loop through the given list\n    for i in range(len(arr)):\n        # If the current element is greater than the previous element, multiply the current product by the difference between the current element and the previous element\n        if i > 0 and arr[i] > arr[i - 1]:\n            cur_prod *= (arr[i] - arr[i - 1])\n\n        # Add the current product to the list of products\n        prod_list.append(cur_prod)\n\n        # Add the current product to the sum of products\n        total_sum += cur_prod\n\n    # Return the sum of products of all subarrays\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_arr = [0] * (n + 1)\n\n    for i in range(n):\n        sum_arr[i + 1] = sum_arr[i] + arr[i]\n\n    subarray_prod_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_prod_sum += arr[i] * arr[j] * sum_arr[j + 1] - arr[i] * arr[j] * sum_arr[i]\n\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n\n    # create a list to store all sublists\n    sublists = []\n\n    # generate all possible sublists\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            sublists.append(arr[j-i:j])\n\n    # initialize the result to zero\n    result = 0\n\n    # iterate over all sublists and calculate their product\n    for sublist in sublists:\n        product = 1\n        for num in sublist:\n            product *= num\n        result += product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = arr[0]\n    \n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * arr[i - 1]\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - 1 - j]\n    \n    sum_prod = 0\n    for i in range(n):\n        sum_prod += arr[i] * dp[i + 1]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_prod = [1] * (n+1)\n    result = 0\n    \n    # calculate the product of all subarrays of length 1 to n\n    for i in range(1, n+1):\n        subarray_prod[i] = subarray_prod[i-1] * arr[i-1]\n    \n    # calculate the sum of products of all subarrays of length 2 to n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            result += subarray_prod[i] * subarray_prod[i+length]\n            \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the sum of products to zero\n    sum_of_products = 0\n    # Initialize a boolean list to keep track of the status of each sublist\n    # We will use this list to check if we can skip some sublists\n    is_sublist_valid = [True] * n\n\n    # Traverse through all possible sublists of length from 1 to n\n    for length in range(1, n + 1):\n        # Calculate the sum of products for sublists of length l\n        temp_sum = 1\n        # Initialize the current sublist index\n        curr_index = 0\n        # Initialize the current sublist sum\n        curr_sum = 0\n\n        # Traverse through the sublists of length l\n        while curr_index < n:\n            # Check if we can skip the current sublist\n            if is_sublist_valid[curr_index]:\n                # Add the product of the current element with the current sublist sum to the sum of products\n                temp_sum *= arr[curr_index]\n                # Increment the current sublist index and the current sublist sum\n                curr_index += 1\n                curr_sum += arr[curr_index]\n                # Set the status of the current sublist to True\n                is_sublist_valid[curr_index] = False\n            else:\n                # Skip the current sublist\n                curr_index += 1\n\n        # Add the sum of products of the current sublist to the sum of products\n        sum_of_products += temp_sum\n\n    # Return the sum of products\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the sum and product of subarray\n    subarray_sum = 0\n    subarray_product = 1\n    \n    # Iterate through all subarrays of length n\n    for i in range(n):\n        # Add the current element to the sum of subarray\n        subarray_sum += arr[i]\n        \n        # Multiply the previous product with the current element\n        subarray_product *= arr[i]\n        \n        # Initialize the sum and product of all subarrays\n        for j in range(i+1, n):\n            # Subtract the first element from the rest of the subarray\n            subarray_sum -= arr[j]\n            \n            # Calculate the product of the current element and the next element of the subarray\n            subarray_product *= arr[j+1]\n            \n            # Add the product to the sum of all subarrays\n            total_sum += subarray_product\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a variable to store sum of products of subarrays\n    subarray_prod = 0\n    for i in range(n):\n        # Initialize a variable to store current product\n        curr_prod = 1\n        for j in range(i, n):\n            # Calculate current product and add it to sum of products of subarrays\n            curr_prod *= arr[j]\n            subarray_prod += curr_prod\n        # Calculate current product and add it to sum of products of subarrays\n        subarray_prod += curr_prod\n    return subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # To store the products of all sublists\n    product_list = []\n    # To store the prefix products of all sublists\n    prefix_product_list = [1] * len(arr)\n    # To store the sum of products of all sublists\n    sum_product_list = [0] * len(arr)\n\n    # Calculate the prefix products and sum of products\n    for i in range(1, len(arr)):\n        prefix_product_list[i] = prefix_product_list[i-1] * arr[i-1]\n        sum_product_list[i] = sum_product_list[i-1] + prefix_product_list[i]\n\n    # Initialize the answer to zero\n    answer = 0\n\n    # Iterate through all sublists of the given array\n    for i in range(1, len(arr)):\n        # Calculate the sum of products of all sublists that end at index i\n        subarray_product = sum_product_list[i] - sum_product_list[i-1]\n        # Check if the subarray product is already in the product_list\n        if subarray_product in product_list:\n            # If yes, add the index of the subarray to the answer\n            answer += product_list.index(subarray_product)\n        else:\n            # If not, add the subarray product to the product_list\n            product_list.append(subarray_product)\n\n    return answer"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum_of_products_of_all_possible_subarrays/\n    '''\n\n    # Calculate the product of all elements in the list\n    product = 1\n    for num in arr:\n        product *= num\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through all sublists of the list\n    for i in range(1, len(arr)+1):\n        # Calculate the product of all elements in the sublist\n        sub_product = 1\n        for j in range(len(arr)-i+1):\n            sub_product *= arr[j+i-1]\n\n        # Add the product of the sublist to the result\n        result += sub_product\n\n    # Return the sum of products of all sublists\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bit to 0\n    n &= ~(1 << 0)\n    n &= ~(1 << (n.bit_length() - 1))\n    # Toggle the middle bits\n    n ^= (n & ((1 << (n.bit_length() // 2)) - 1)) << (n.bit_length() // 2)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Calculate the index of the first and last bits\n    first_index = len(bin(n)) - 3 # n must be a positive integer\n    last_index = len(bin(n)) - 1\n\n    # Calculate the index of the middle bits\n    middle_index = first_index + (last_index - first_index) // 2\n\n    # Toggle the middle bits\n    middle_bits = (n >> middle_index) & 1\n    toggled_bits = middle_bits ^ 1\n\n    # Combine the first and last bits\n    result = (n & ~(~0 << first_index)) | ((n ^ toggled_bits) & ((1 << first_index) - 1))\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize the first and last bits as 1\n    first_bit = 1\n    last_bit = n & 1\n\n    # Initialize the number with all 1's except the first and last bits\n    n = n ^ (first_bit | last_bit)\n\n    # Toggle the middle bits\n    mid_bits = n & ~(first_bit ^ last_bit)\n\n    # Set the first and last bits back to the original values\n    n |= first_bit\n    n |= last_bit\n\n    # Combine the middle bits with the original number\n    n = n ^ mid_bits\n\n    # Return the final number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    if first_bit == last_bit:\n        n = n ^ (1 << (n.bit_length() - 1))\n    else:\n        n = n ^ (1 << (n.bit_length() - 1)) ^ (1 << (n.bit_length() - 2))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in n\n    num_bits = len(bin(n)[2:])\n    \n    # Calculate the starting and ending index of bits to toggle\n    start_index = (num_bits-2) // 2\n    end_index = num_bits - 1\n    \n    # Create a bitmask with 0's at the starting index and 1's at the end index\n    bitmask = 0\n    for i in range(start_index, end_index+1):\n        bitmask |= (1 << i)\n    \n    # Toggle bits using bitwise XOR and bitmask\n    return n ^ bitmask"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    '''\n    # Extract the first and last bits of the number\n    bit1 = n & 1\n    bit8 = n >> 7\n    # Toggle all the other bits except the first and the last bit\n    n = n ^ (bit1 ^ bit8)\n    # Combine the first and last bits with the toggled bits\n    return n | bit1 | bit8"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Set the middle bit\n    if n & (1 << 1):\n        n = n ^ (1 << 1)\n    else:\n        n = n ^ (1 << 1)\n\n    # Set the last bit\n    if n & (1 << (len(bin(n)[2:]) - 2)):\n        n = n ^ (1 << (len(bin(n)[2:]) - 2))\n    else:\n        n = n ^ (1 << (len(bin(n)[2:]) - 2))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize a variable to store the number with middle bits toggled\n    toggled_middle_bits = 0\n\n    # Iterate over each bit in the number\n    for i in range(len(bin(n)) - 2):\n        # If the current bit is 1, toggle it to 0\n        if bin(n)[i] == '1':\n            toggled_middle_bits += 1\n        else:\n            # If the current bit is 0, leave it as it is\n            toggled_middle_bits += 0\n\n    # Return the toggled middle bits\n    return toggled_middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = bin(n)[2:]  # convert base 10 to base 2\n    m = len(n) // 2  # calculate the middle index\n    n = n[:m] + n[m+1:]  # shift the bits to the left\n    n = ''.join([str(int(x) ^ 1) for x in n])  # toggle the bits\n    n = int(n, 2)  # convert back to base 10\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 0\n    elif n & 1 == 0:\n        # even number, set middle two bits to 0\n        return n ^ 0b00111111\n    else:\n        # odd number, set middle two bits to 1\n        return n ^ 0b11000000"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    -----------\n    a: list\n        A sorted list.\n\n    x: int\n        The value to be inserted.\n\n    Returns:\n    --------\n    index: int\n        The index of the left insertion point for x in a.\n\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0 or a[i-1]!= x:\n        return i-1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Find the index where x should be inserted in sorted list a\n    index = bisect.bisect_left(a, x)\n\n    # Check if x is greater than or equal to the element at index index\n    if x >= a[index]:\n        # If x is greater than or equal to the element at index index, then x should be inserted to the left of index index\n        return index\n\n    # If x is less than the element at index index, then x should be inserted to the left of index index-1\n    else:\n        # Find the index where x should be inserted in sorted list a\n        index_ = bisect.bisect_left(a, x)\n        return index_ - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    elif index == len(a):\n        return len(a)\n    else:\n        return index - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect.bisect_left to locate the insertion point\n    i = bisect.bisect_left(a, x)\n    # Check if the value exists in the sorted list\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        # If the value is not in the sorted list, return the insertion point itself\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index - 1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the index of x in a\n    index = bisect.bisect_left(a, x)\n\n    # If x is already present in the list, return the index where it can be inserted.\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # Otherwise, return the index where x can be inserted.\n    return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1 using recursion.\n\n    Parameters:\n    n (int): The value of n for which the geometric sum is to be calculated.\n\n    Returns:\n    float: The geometric sum of n-1.\n\n    \"\"\"\n\n    if n == 1:\n        return 1\n\n    else:\n        return (1/n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1.\n\n    Args:\n    n (int): The value of n, where n-1 is the last element of the sequence.\n\n    Returns:\n    int: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    This function calculates the geometric sum of n-1,\n    where n is the number of terms to sum.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    else:\n        # Recursive case\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n\n    # Calculate the sum of digits of n\n    total_sum = sum(int(digit) for digit in str(n))\n\n    # Calculate the sum of digits of triangular numbers with n digits\n    triangular_sum = 0\n    for i in range(1, n + 1):\n        triangular_sum += math.factorial(n - i + 1) / (math.factorial(i) * math.factorial(n - i))\n\n    # Calculate the index of the smallest triangular number with n digits\n    index = total_sum - triangular_sum\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n\n    # Helper function to find the index of the smallest triangular number with n digits \n    def find_smallest_triangular_num(n): \n        return math.ceil(math.log10(n)) * (n - 1) - n + 1 \n\n    # Find the index of the smallest triangular number with n digits \n    index = find_smallest_triangular_num(n) \n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n):\n    # find number of digits in n\n    num_digits = len(str(n))\n    # find number of digits in smallest triangular number with n digits\n    smallest_triangular_num_digits = int(math.log10(n)) + 1\n    \n    # calculate index of smallest triangular number with n digits\n    index = num_digits + smallest_triangular_num_digits - 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the maximum possible value of n using the formula: (2^n-1) * 10^(n-1)\n    max_value = int(((2**n - 1) * 10**n) / 9)\n\n    # Initialize variables to store the current smallest triangular number and its index\n    current_number = 0\n    index = 0\n\n    # Iterate over all possible triangular numbers up to the maximum possible value\n    for i in range(max_value):\n        # Check if the current triangular number is smaller than the current smallest triangular number\n        if i < current_number:\n            # If it is, update the current smallest triangular number and its index\n            current_number = i\n            index = i\n\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # create a list of all possible triangular numbers with n digits\n    triangular_numbers = []\n    for i in range(1, 10**n):\n        triangular_numbers.append(i * (10**n - i))\n\n    # find the index of the smallest triangular number with n digits\n    min_triangular_number = min(triangular_numbers)\n    index = triangular_numbers.index(min_triangular_number)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function finds the index of the smallest triangular number with n digits.\n    The index is the number of digits in the triangular number.\n    The triangular number is defined as: T(n) = n(n+1)/2 \n    '''\n    # initialize the smallest triangular number \n    smallest_triangular_num = int((n*(n+1))//2)\n\n    # initialize the maximum number of digits in the smallest triangular number \n    max_num_of_digits = len(str(smallest_triangular_num))\n\n    # loop through all possible values of n\n    for i in range(n-1, 0, -1): \n        # calculate the value of the triangular number for the current value of n \n        triangular_num = n*(n+i)\n        \n        # check if the number of digits in the triangular number is smaller than the current maximum \n        if len(str(triangular_num)) < max_num_of_digits: \n            # if it is, update the smallest triangular number and maximum number of digits \n            smallest_triangular_num = triangular_num\n            max_num_of_digits = len(str(smallest_triangular_num))\n    \n    # return the index of the smallest triangular number with n digits \n    return max_num_of_digits"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # find the number of digits of the smallest triangular number\n    def find_number_of_digits(n):\n        count = 1\n        while n >= 10:\n            count += 1\n            n //= 10\n        return count\n\n    # find the smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        num = 1\n        for i in range(n):\n            num *= i + 1\n        return num\n\n    # find the index of the smallest triangular number with n digits\n    def find_Index(n):\n        return find_number_of_digits(find_smallest_triangular(n))\n\n    return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Index(n): \n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    #initialize variables\n    i = 1\n    triangular_num = 1\n    count = 0\n\n    #loop to generate triangular numbers with n digits\n    while len(str(triangular_num)) < n:\n        triangular_num = triangular_num * i\n        count += 1\n\n    #return the index of the smallest triangular number with n digits\n    return count"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Calculate the upper bound of the smallest triangular number with n digits\n    upper_bound = int(math.factorial(5 * n + 1) / (math.factorial(2 * n + 1) * math.factorial(n + 1)))\n    # Use a loop to calculate the index of the smallest triangular number with n digits\n    for i in range(upper_bound):\n        # Check if the triangular number has n digits\n        if len(str(i)) == n:\n            # Return the index\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    b = 10**(n-1)\n    t = b\n    count = 1\n    \n    while t < 10**(n-1):\n        t = t + b\n        count += 1\n    \n    return count"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dictionary = {}\n    # Loop through the tuple\n    for i in range(len(test_tup)):\n        # If the index is odd, add the key-value pair to the dictionary\n        if i % 2 == 1:\n            # Get the key from the previous element\n            key = test_tup[i-1]\n            # Get the value from the next element\n            value = test_tup[i+1]\n            # Add the key-value pair to the dictionary\n            dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Invalid input tuple. The length of the tuple should be even.\")\n        return\n\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)-1):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    new_dict = {}\n    # Use two for loops to iterate over the elements of the tuple\n    for i in range(0, len(test_tup), 2):\n        # Extract the key and value of the tuple element\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # Add the key-value pair to the new dictionary\n        new_dict[key] = value\n    # Return the new dictionary\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Converting tuple to a list to perform the conversion\n    test_list = list(test_tup)\n\n    # Initializing an empty dictionary to store the key-value pairs\n    key_value_dict = {}\n\n    # Iterating over the list and adding the adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_list) - 1):\n        key_value_dict[test_list[i]] = test_list[i+1]\n\n    # Returning the dictionary\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create a dictionary to store key-value pairs\n    my_dict = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # if current element is not the last one, add it as a key-value pair\n        if i < len(test_tup)-1:\n            my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # loop through each element of the tuple\n    for i in range(len(test_tup)):\n        # if the current index is even, add it as a key and the next element as its value\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            # add the key-value pair to the dictionary\n            result[key] = value\n    # return the dictionary\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = 0\n    result = {}\n    while key < len(test_tup):\n        result[key] = test_tup[key+1]\n        key += 2\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the dictionary to check if all the values are the same\n    for value in freq.values():\n        if value!= freq[list(freq.keys())[0]]:\n            return False\n\n    # If all the values are the same, then all the characters are the same and the function returns True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character\n    first_char = s[0]\n\n    # Loop through the string and compare each character with the first character\n    for i in range(len(s)):\n        if s[i]!= first_char:\n            # If any character is not the same, return False\n            return False\n\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        first_char = s[0]\n        return all_Characters_Same(s[1:]) and first_char == s[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) == s[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0]!= s[1]:\n        return False\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    # Initialize a boolean variable to check if all characters are same\n    is_same = True\n\n    # Iterate through the string and check if all characters are same or not\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            is_same = False\n            break\n    \n    # If all characters are same, return True\n    if is_same:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side / 2\n    return math.sqrt(3) / 4 * base * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (side * (1 + math.sqrt(5))) / 5\n    \n    # Calculate the area\n    area = (1 / 6) * side**2\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 3\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side - math.sqrt(3)) / 2) ** 2\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 3  # convert side to a fraction of the length\n    area = 1/6 * s * (s - 1) * (s - 2)  # calculate the area using the formula\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = (s * side ** 2) / 4\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m > n:\n        m %= n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # To handle cases where m is greater than the length of the list.\n    list.extend(list[:m])  # Extend the list with the elements from the beginning of the list to the mth element.\n    list[:m] = []  # Replace the first m elements with empty list to remove them.\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Calculate the length of the list\n    n = len(list)\n\n    # Check if the rotation amount is greater than the length of the list\n    if m > n:\n        m = m % n\n\n    # Reverse the first m elements of the list\n    list[:m] = list[:m][::-1]\n\n    # Reverse the remaining elements of the list\n    list[m:] = list[m:][::-1]\n\n    # Reverse the entire list\n    list[:] = list[::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    length = len(lst)\n    # Check if the number of items to rotate is greater than the length of the list\n    if n > length:\n        # If n is greater than the length of the list, then rotate by the length of the list\n        n = n % length\n    # If n is 0 or the length of the list, then the list is already rotated to its right direction\n    if n == 0 or length == n:\n        return lst\n    # Otherwise, rotate the list by n items\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # Make m a positive value less than or equal to n\n    for i in range(m):\n        # Move last item to the front\n        list.append(list.pop(0))"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    '''\n    n = len(list)\n    m %= n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = list[-n:]\n    list[-n:] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    if m == 0:\n        return list\n    if m > n:\n        m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # to handle circular lists\n    list[:m], list[-m:] = list[-m:], list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def check_digit(num, digits):\n        for digit in digits:\n            if num % int(digit)!= 0:\n                return False\n        return True\n    \n    def filter_divisible_by_digits(nums):\n        return list(filter(lambda x: check_digit(x, str(x)), nums))\n    \n    return filter_divisible_by_digits(range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % 2 == 0 for digit in str(num))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(d) in str(x) for d in str(x)) and x % 10 == 0"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda num: all(num % d == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda x, digit: x % digit == 0\n    \n    # Loop through each number between startnum and endnum\n    for num in range(startnum, endnum+1):\n        # Get the digits of the number\n        digits = [int(digit) for digit in str(num)]\n        \n        # Check if the number is divisible by every digit\n        if all(map(lambda digit: is_divisible_by_digit(num, digit), digits)):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digit_count = len(str(endnum))\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit % num == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in set(digits))\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = set(str(i) for i in range(10))\n    nums = set()\n    for num in range(startnum, endnum+1):\n        digits_in_num = set(str(num)[i] for i in range(len(str(num))))\n        if digits_in_num.issubset(digits):\n            nums.add(num)\n    return list(nums)\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Calculate area of the sector\n    area = r * r * math.sin(a/2)\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        area = r*math.pi*a/180\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area of sector using formula A = r^2 * sin(angle/180*pi)\n    area = r**2 * math.sin(a/180*math.pi)\n    \n    # Return area of sector\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within valid range\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula A = pi r^2 a\n    A = math.pi * r**2 * a\n    \n    # Return the area\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # create a table to store lengths of LCS of substring of X[0..i], Y[0..j] and Z[0..k] \n    T = [[0 for j in range(p+1)] for i in range(m+1)] \n\n    # Fill in the table LCS(X[0..i], Y[0..j], Z[0..k]) in bottom up manner. \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n                    T[i][j] = T[i-1][j-1] + 1 \n                elif X[i-1] == Y[j] and Z[k-1] == Y[j-1]: \n                    T[i][j] = T[i-1][j] \n                else: \n                    T[i][j] = max(T[i-1][j], T[i][j-1]) \n\n    # Traverse the table to find the LCS and return it. \n    i = m \n    j = n \n    k = p \n    lcs = \"\" \n    while i!= 0 and j!= 0 and k!= 0: \n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif X[i-1] == Y[j] and Z[k-1] == Y[j-1]: \n            j -= 1 \n        else: \n            i -= 1 \n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    def merge_sort(lst):\n        if len(lst) <= 1:\n            return lst\n        mid = len(lst) // 2\n        left = merge_sort(lst[:mid])\n        right = merge_sort(lst[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    def lcs(X, Y, Z):\n        m, n, p = len(X), len(Y), len(Z)\n        dp = [[[0 for _ in range(p + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, p + 1):\n                    if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                    elif dp[i - 1][j][k] > dp[i][j - 1][k]:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif dp[i][j - 1][k] > dp[i][j][k - 1]:\n                        dp[i][j][k] = dp[i][j - 1][k]\n        return dp[m][n][p]\n\n    return lcs(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common suffixes\n    L = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill in the table diagonally\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Print the lengths of longest common suffixes\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                print(L[i][j][k], end=' ')\n    print()\n\n    # Backtracking to find the LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j][k-1] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Return the LCS\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function returns the longest common subsequence for three given strings X, Y, and Z.\n\n    Parameters:\n    X (str): String 1.\n    Y (str): String 2.\n    Z (str): String 3.\n\n    Returns:\n    (str): The longest common subsequence of X, Y, and Z.\n    \"\"\"\n\n    # Step 1: Create a 3D table to store the length of LCS of all possible subsequences.\n    m, n, p = len(X), len(Y), len(Z)\n    L = [[[0] * (p+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Step 2: Fill the table in bottom-up manner.\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Step 3: Backtrack to find the LCS.\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n\n    # Return the LCS.\n    return ''.join(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences X, Y and Z as input and returns the longest common subsequence (LCS)\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return lcs(dp, m, n, p)\n\ndef lcs(dp, m, n, p):\n    \"\"\"\n    This function takes the dynamic programming table dp and the lengths of X, Y and Z as input and returns the LCS of X, Y and Z\n    \"\"\"\n    LCS = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            LCS = X[i-1] + LCS\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j][k-1]:\n            i -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, p = len(X), len(Y), len(Z)\n\n    # create a table to store lengths of LCS of subproblems \n    table = [[0 for j in range(p+1)] for i in range(m+1)] \n\n    # Fill the table in bottom up manner \n    for i in range(1, m+1): \n        for j in range(1, p+1): \n            if X[i-1] == Y[j-1] and Z[i-1] == Z[j-1]: \n                table[i][j] = table[i-1][j-1] + 1 \n            elif X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j] \n            else: \n                table[i][j] = table[i][j-1] \n\n    # return length of LCS \n    return table[m][p] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n    max_len = 0\n    start = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                    if dp[i][j][k] > max_len:\n                        max_len = dp[i][j][k]\n                        start = i-1, j-1, k-1\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j][k] = dp[i-1][j][k]\n                elif Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i][j][k-1]\n                else:\n                    dp[i][j][k] = 0\n    return X[start[0]:start[0]+max_len], Y[start[1]:start[1]+max_len], Z[start[2]:start[2]+max_len]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    def longest_common_subsequence(X, Y, Z):\n        n = len(X)\n        m = len(Y)\n        p = [[0] * (m + 1) for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    p[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    p[i][j] = p[i - 1][j - 1] + 1\n                else:\n                    p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n        return p\n\n    def lcs_substring(p, i, j):\n        if i == 0 or j == 0:\n            return \"\"\n        elif X[i - 1] == Y[j - 1]:\n            return X[i - 1] + lcs_substring(p, i - 1, j - 1)\n        else:\n            return max(lcs_substring(p, i - 1, j), lcs_substring(p, i, j - 1))\n\n    p = longest_common_subsequence(X, Y, Z)\n    lcs = lcs_substring(p, len(X), len(Y))\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    \n    # Step 1: Calculate the length of each string\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    \n    # Step 2: Create a table to store the length of LCS for each possible \n    # subsequence of length 0, 1 and 2. Initialize the first row and column\n    # with 0\n    L = [[0]*(p+1) for i in range(n+1)]\n    \n    # Step 3: Fill the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Step 4: The length of LCS for the given sequence can be found in L[n][p]\n    lcs = L[n][p]\n    \n    # Step 5: Using the above table, find the LCS itself\n    i = n\n    j = p\n    lcs_seq = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs_seq.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return lcs, lcs_seq[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a 3x3 matrix\n    L = [[0 for j in range(3)] for i in range(3)]\n    \n    # fill the matrix using the recurrence relation\n    for i in range(1, 3):\n        for j in range(1, 3):\n            L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1]) + 1\n    \n    # find the length of the longest common subsequence\n    length = L[2][2]\n    \n    # create a list of characters for the longest common subsequence\n    lcs = []\n    while length > 0:\n        lcs.append(X[2-length][2])\n        length -= 1\n    \n    # reverse the list of characters for the longest common subsequence\n    lcs = lcs[::-1]\n    \n    return lcs"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'([A-Z][a-z]+)|([a-z]+)'\n    result = re.sub(pattern, r'\\1 \\2', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define a regular expression to match capital letters followed by a non-letter character\n    pattern = r'(?<![a-z])[A-Z](?![a-z])'\n    \n    # Split the string into words\n    words = re.findall(pattern, str1)\n    \n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word and add a space before capital letters\n    for i in range(len(words)):\n        if words[i].istitle():\n            words[i] ='' + words[i]\n    # Join the words with spaces\n    str2 =''.join(words)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', string)\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through each word and capitalize it if it starts with capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n            \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first letter of each word and join them back into a string\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    # Split the string into words\n    words = re.findall(pattern, str1)\n    # Convert the words into a list of strings with spaces between them\n    result = [' '.join(word.split('_')) for word in words]\n    # Join the list of strings with spaces\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regular expression to match words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Match all words starting with capital letters\n    words = re.findall(r'\\b\\w', str1)\n\n    # Replace first letter of each word with a space and join with spaces\n    result =''.join([word[0] +'' + word[1:] for word in words])\n\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numbers to floats\n    nums_float = [float(n) for n in nums_str]\n    \n    # Sort the floats in ascending order\n    nums_float.sort()\n    \n    # Convert the floats back to strings\n    sorted_nums = [str(n) for n in nums_float]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically using the built-in `sorted()` function.\n    '''\n    # Convert all numeric strings to float\n    nums_float = [float(num) for num in nums_str if num.isdigit()]\n    \n    # Sort the list numerically\n    nums_float_sorted = sorted(nums_float)\n    \n    # Convert the sorted list back to strings\n    nums_str_sorted = [str(num) for num in nums_float_sorted]\n    \n    # Return the sorted list\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    # Function to check if a string is numeric\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    # Convert the list of strings to a list of integers\n    nums = [int(s) for s in nums_str if is_numeric(s)]\n\n    # Sort the list of integers numerically\n    nums.sort()\n\n    # Convert the list of integers back to a list of strings\n    nums_str = [str(n) for n in nums]\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num_list.append(float(num_str))\n        except ValueError:\n            pass\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float and store in a list\n    nums = [float(num) for num in nums_str]\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert back to string and return\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n\n    nums.sort()\n\n    # Sort the list of numbers in ascending order\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list[str]): A list of strings of numbers.\n\n    Returns:\n    list[str]: The sorted list of strings of numbers.\n    '''\n    # Convert all strings to float, then sort them\n    nums_float = [float(n) for n in nums_str]\n    nums_float.sort()\n\n    # Convert float back to string and return\n    return [str(n) for n in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num_str in nums_str:\n        try:\n            nums_list.append(float(num_str))\n        except ValueError:\n            nums_list.append(num_str)\n    nums_list.sort()\n    return nums_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # use the `+` operator to add the tuple to the list\n    test_list += test_tup\n\n    # print the updated list\n    print(\"Updated list:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if type(item) == tuple:\n            for sub_item in item:\n                if sub_item in test_tup:\n                    test_list.append(sub_item)\n                    test_tup.remove(sub_item)\n                    break\n        else:\n            if item in test_tup:\n                test_list.append(item)\n                test_tup.remove(item)\n                break"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item in test_tup:\n            test_list.remove(item)\n    for item in test_tup:\n        if item not in test_list:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) // 2:\n        if arr[i] > arr[2 * i]:\n            return False\n    else:\n        if arr[i] > arr[2 * i] or arr[i] > arr[2 * i + 1]:\n            return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 1:\n        return check_min_heap_helper(arr, 0)\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n\n    if i == 0:\n        return True\n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the root node is greater than or equal to the left child, return False\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n    # If the root node is greater than or equal to the right child, return False\n    if i * 2 + 2 < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n    # If both left and right child are less than or equal to the root node, return True\n    return True\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Start checking from the root node\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        # If the current node is not a min heap, return False\n        if not check_min_heap_helper(arr, i):\n            return False\n    # If all nodes are min heaps, return True\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 1:\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the index is less than or equal to 0, it means the current node is the last node, so we can return True\n    if i <= 0:\n        return True\n    \n    # If the index is greater than 0, we can check if the parent node is greater than the child node\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    \n    # If the parent node is less than or equal to the child node, we can continue checking the next child node\n    return check_min_heap_helper(arr, (i-1)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    A min heap is a complete binary tree where the value of parent node is less than or equal to that of its children nodes.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[i*2+1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n    # The base case is when the array has only one element\n    if n == 1:\n        return True\n\n    # We start from the second element and compare each element with its parent\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n\n    # If we reach here, the array is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if the current element is smaller than the parent element\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n\n    # Recursively check if the parent element is also a min heap\n    return check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Check if the root element is smaller than the last element\n    if arr[0] > arr[-1]:\n        return False\n\n    # Recursively check if the array is a min heap\n    return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num((n-1)//2) + jacobsthal_num((n-1)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 1 + jacobsthal_num(n//2)\n    else:\n        return 1 + 2 * jacobsthal_num(n//2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n    return jacobsthal_numbers[-1]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2] + jacobsthal_numbers[i-3])\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_num = 1\n        for i in range(2, n+1):\n            curr_num = 1\n            for j in range(i):\n                curr_num += prev_num\n            prev_num = curr_num\n        return curr_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 1\n        l = 0\n        while l < n:\n            j += l\n            l += 1\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (1 + 10**(n-1)) * 4**n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2])\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the minimum count and index variables\n    min_count = float('inf')\n    min_index = 0\n\n    # Iterate through the sorted list\n    for i in range(K):\n        # If the current element is smaller than the minimum count or the index is the same, update the minimum count and index\n        if test_list[i][0] < min_count or test_list[i][0] == min_count and i < min_index:\n            min_count = test_list[i][0]\n            min_index = i\n\n    # Return the minimum count and index\n    return min_count, min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n\n    Args:\n    test_list (list): A list of tuples containing id and value.\n    K (int): The number of records to be returned.\n\n    Returns:\n    list: A list of tuples containing the minimum k records from the input list.\n\n    Examples:\n    >>> test_list = [(1, 5), (2, 3), (3, 2), (4, 1), (5, 4)]\n    >>> min_k(test_list, 2)\n    [(1, 5), (2, 3)]\n    \"\"\"\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    min_records = sorted_list[:K]\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in test_list:\n        if len(min_list) < K:\n            min_list.append(i)\n        elif i < min_list[0]:\n            min_list.pop(0)\n            min_list.append(i)\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    Args:\n        test_list: A tuple list.\n        K: An integer, the minimum number of records to be returned.\n    Returns:\n        A tuple containing the minimum k records from test_list.\n    \"\"\"\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort()\n    # Initialize the minimum k records to be returned and an empty list to store the remaining records\n    min_k_records = []\n    remaining_records = []\n    # Iterate through the sorted list and append the first K elements to the min_k_records list\n    for i in range(K):\n        min_k_records.append(test_list[i])\n    # Iterate through the sorted list and append the remaining elements to the remaining_records list\n    for i in range(K, len(test_list)):\n        remaining_records.append(test_list[i])\n    # Return the min_k_records list\n    return tuple(min_k_records)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for record in test_list:\n        if record[0] in count_dict:\n            count_dict[record[0]] += 1\n        else:\n            count_dict[record[0]] = 1\n    \n    # Find the minimum count of each element in the dictionary\n    min_count = {}\n    for key in count_dict:\n        min_count[key] = min(count_dict.values())\n        \n    # Initialize variables to store the minimum key and minimum value\n    min_key = None\n    min_value = float('inf')\n    \n    # Iterate over the keys of the dictionary and check if the count is at least K\n    for key in min_count:\n        if min_count[key] >= K:\n            if min_key is None or min_count[key] < min_value:\n                min_key = key\n                min_value = min_count[key]\n                \n    # Return the minimum key and minimum value\n    return min_key, min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list based on the second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initializing minimum count variable\n    min_count = len(sorted_list)\n    # Initializing minimum count variable\n    min_index = 0\n    # Initializing minimum count variable\n    min_val = sorted_list[0][1]\n    # Looping through the list\n    for i in range(1, len(sorted_list)):\n        # Checking if the minimum count is less than K\n        if min_count < K:\n            # Updating minimum count\n            min_count = min(min_count, sorted_list[i][1])\n            # Updating minimum value\n            min_val = min(min_val, sorted_list[i][1])\n        else:\n            # Checking if the minimum value is greater than the current element\n            if min_val > sorted_list[i][1]:\n                # Updating minimum count\n                min_count = sorted_list[i][1]\n                # Updating minimum value\n                min_val = sorted_list[i][1]\n                # Updating minimum index\n                min_index = i\n    # Returning minimum k records and their index\n    return min_count, min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    if K > len(test_list):\n        raise ValueError(\"K cannot be greater than the length of the list\")\n    \n    min_k_list = []\n    min_count = float('inf')\n    \n    for record in test_list:\n        if len(min_k_list) < K:\n            min_k_list.append(record)\n            if len(min_k_list) == K:\n                min_count = min(min_count, min(record[1]))\n        else:\n            if record[1] < min_k_list[0][1]:\n                min_k_list.pop(0)\n                min_k_list.append(record)\n            elif record[1] == min_k_list[0][1]:\n                min_count = min(min_count, min(record[1]))\n                min_k_list.append(record)\n    \n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    test_list: a list of tuples\n    K: the number of records to find\n    '''\n\n    # initialize a dictionary to store the count of each record\n    count_dict = {}\n\n    # iterate through the list of tuples and update the count dictionary\n    for record in test_list:\n        if record in count_dict:\n            count_dict[record] += 1\n        else:\n            count_dict[record] = 1\n\n    # initialize a set to store the records with the minimum count\n    min_set = set()\n\n    # iterate through the count dictionary and find the records with the minimum count\n    for record, count in count_dict.items():\n        if count == min(count_dict.values()):\n            min_set.add(record)\n\n    # convert the set to a list and sort it based on the count\n    min_list = sorted(list(min_set), key=lambda x: count_dict[x], reverse=True)\n\n    # return the top K records from the sorted list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    test_list: list of tuples containing names and marks of students\n    K: integer representing number of students to be considered for minimum marks\n    '''\n\n    # Sorting the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initializing a list to store minimum k records\n    min_k_list = []\n\n    # Traversing the list of tuples\n    for i in range(len(test_list)):\n\n        # If the length of min_k_list is less than K, then we add the current tuple to min_k_list\n        if len(min_k_list) < K:\n            min_k_list.append(test_list[i])\n\n        # If the length of min_k_list is greater than or equal to K, then we compare the marks of the current tuple with the marks of the minimum K tuples in min_k_list\n        elif i < K:\n            min_k_list.append(test_list[i])\n\n        # If the length of min_k_list is greater than K, then we remove the tuple with the minimum marks from min_k_list\n        else:\n            if min_k_list[0][1] > test_list[i][1]:\n                min_k_list.pop(0)\n                min_k_list.append(test_list[i])\n\n    # Returning the list of tuples containing names and marks of students\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    test_list = sorted(test_list, key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = []\n    # iterate over the indices of l1\n    for i in range(len(l1)):\n        # check if the element at that index is present in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # if it is, add it to the common indices list\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = set()\n    for i, x in enumerate(l1):\n        if x in l2 and x in l3:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    # iterate through the first list\n    for i in range(len(l1)):\n        # if the element is in the second list, append it to the common_elements list\n        if l1[i] in l2:\n            common_elements.append(l1[i])\n        # if the element is in the third list, append it to the common_elements list\n        if l1[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store common elements and their indices\n    common_dict = {}\n    # Loop through each index of the lists and check if each element is common for all three lists\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_dict[l1[i]] = [i]\n        elif l2[i] in l1 and l2[i] in l3:\n            common_dict[l2[i]] = [i]\n        elif l3[i] in l1 and l3[i] in l2:\n            common_dict[l3[i]] = [i]\n        # If an element is common for all three lists, add it to the dictionary with its index as a list\n    common_list = [elem for elem in l1 if elem in common_dict]\n    common_list.extend([elem for elem in l2 if elem in common_dict])\n    common_list.extend([elem for elem in l3 if elem in common_dict])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # sort the list in ascending order\n    numbers.sort()\n\n    # return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"There are not enough numbers in the list.\"\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest and number!= smallest:\n                second_smallest = number\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return \"Error: list must have at least two elements.\"\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    This function finds the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"abaabb\"\nprint(text_match_zero_one(text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"This string contains aaaabbbbbb\"\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[b]+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    # regular expression pattern to match 'a' followed by one or more 'b's\n    pattern = r'a(.*)b'\n\n    # search for the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # check if there are any matches\n    if matches:\n        # return the first match\n        return matches[0]\n    else:\n        # return None if no match is found\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"aaaabbabbbb\"\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'^a(b){0,1}$'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_pairs = {}\n    # iterate through the string list\n    for i in range(len(test_list)):\n        # iterate through the strings that come after the current string in the list\n        for j in range(i+1, len(test_list)):\n            # check if the reversed string is in the dictionary, if it is, increment its count\n            if test_list[j][::-1] in reverse_pairs:\n                reverse_pairs[test_list[j][::-1]] += 1\n            # otherwise, add the reversed string to the dictionary with a count of 1\n            else:\n                reverse_pairs[test_list[j][::-1]] = 1\n    # return the count of reverse pairs in the dictionary\n    return sum(reverse_pairs.values())\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    # Create a dictionary to store the count of each string in the list\n    string_count = {}\n    \n    # Iterate through the list of strings\n    for string in test_list:\n        # Reverse the string and check if it exists in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in string_count:\n            # If it does, increment the count of the original string by 1\n            string_count[string] += 1\n        else:\n            # If it doesn't, add the reverse string to the dictionary with a count of 1\n            string_count[reverse_string] = 1\n            \n    # Iterate through the dictionary and count the number of pairs of reverse strings\n    pairs_count = 0\n    for count in string_count.values():\n        pairs_count += count * (count - 1) // 2\n        \n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for string in test_list:\n        # Iterate through the characters of the string\n        for i in range(len(string)):\n            # Check if the next character is a reverse of the current character\n            if string[len(string) - i - 1] == string[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the count of reverse pairs\n    count_dict = {}\n    \n    # Iterate through each string in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        \n        # Reverse the list of characters\n        reversed_char_list = char_list[::-1]\n        \n        # Convert the reversed list of characters back to a string\n        reversed_string = ''.join(reversed_char_list)\n        \n        # Check if the reversed string exists in the dictionary\n        if reversed_string in count_dict:\n            # If it does, increment the count\n            count_dict[reversed_string] += 1\n        else:\n            # If it doesn't, add the string to the dictionary with a count of 1\n            count_dict[string] = 1\n    \n    # Count the number of reverse pairs\n    num_reverse_pairs = sum(count_dict.values()) // 2\n    \n    # Return the count\n    return num_reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the frequency of characters in each string\n    freq = {}\n    # Iterate over each string in the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n        # Convert the list of characters back to a string\n        sorted_string = ''.join(char_list)\n        # Check if the sorted string is already in the dictionary\n        if sorted_string in freq:\n            # Increment the count for the sorted string\n            freq[sorted_string] += 1\n        else:\n            # Add the sorted string to the dictionary with a count of 1\n            freq[sorted_string] = 1\n\n    # Initialize two counters to store the count of reverse pairs\n    count_1 = 0\n    count_2 = 0\n    # Iterate over the keys in the dictionary\n    for key in freq:\n        # If the count for the key is odd, increment the count of reverse pairs for both strings\n        if freq[key] % 2 == 1:\n            count_1 += 1\n            count_2 += 1\n\n    # Return the count of reverse pairs for both strings\n    return count_1, count_2"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # loop through each element of the list\n    for elem in list1:\n        # if the element is a list, convert it to a tuple and check if it is already in the dictionary\n        if isinstance(elem, list):\n            sublist = tuple(elem)\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n\n    # return the dictionary of unique sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        tup = tuple(sorted(sublist))\n        count[tup] = count.get(tup, 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    counts = {}\n    \n    # Loop through the original list\n    for item in list1:\n        # Convert the list to a tuple and check if it is in the dictionary\n        if tuple(item) in counts:\n            # Increment the count for the tuple\n            counts[tuple(item)] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tuple(item)] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count = {}\n    for i in list1:\n        tup = tuple(i)\n        if tup not in count:\n            count[tup] = 1\n        else:\n            count[tup] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n    # loop through each element in the list\n    for i in range(len(list1)):\n        # if the current element is a list, convert it to a tuple and add it to the sublist_count dictionary\n        if isinstance(list1[i], list):\n            sublist_tuple = tuple(list1[i])\n            if sublist_tuple in sublist_count:\n                sublist_count[sublist_tuple] += 1\n            else:\n                sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    # Loop over all lists in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if sublist in result:\n            # If it does, increment its value by 1\n            result[sublist] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a value of 1\n            result[sublist] = 1\n    # Return the resulting dictionary\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n\n    # Loop through each sublist in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple and count its occurrences in the original list\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_counts:\n            sublist_counts[tuple_sublist] += 1\n        else:\n            sublist_counts[tuple_sublist] = 1\n\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Iterate through each item in the list\n    for item in lst:\n        # If the item is a list, convert it to a tuple and add it to the dictionary\n        if isinstance(item, list):\n            tuple_item = tuple(item)\n            if tuple_item not in count_dict:\n                count_dict[tuple_item] = 1\n            else:\n                count_dict[tuple_item] += 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    # create a dictionary to store the count of each sublist\n    sublist_count = {}\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        # create a tuple of the sublist\n        sublist_tuple = tuple(lst[i:])\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # increment the count of the tuple by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store unique tuples as keys and their count as values\n    unique_sublist_dict = {}\n    # loop through each element in the list1\n    for i in range(len(list1)):\n        # convert the current element to a tuple\n        tup = tuple(list1[i])\n        # check if the tuple is already in the dictionary\n        if tup in unique_sublist_dict:\n            # increment the count of the tuple in the dictionary\n            unique_sublist_dict[tup] += 1\n        else:\n            # add the tuple to the dictionary if it's not in the dictionary\n            unique_sublist_dict[tup] = 1\n    # return the dictionary of unique sublists and their count\n    return unique_sublist_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Remove any non-numeric characters from the input\n    num = ''.join(c for c in num if c.isdigit() or c == '.' or c == '-')\n    \n    # Check if the number has exactly 1 decimal point\n    if '.' not in num:\n        return False\n    \n    # Split the number into integer and fractional parts\n    int_part = num.split('.')[0]\n    frac_part = num.split('.')[1]\n    \n    # Check if the integer part is non-empty and has only digits\n    if not int_part.isdigit():\n        return False\n    \n    # Check if the fractional part is non-empty and has only 2 digits\n    if frac_part.isdigit() and len(frac_part) == 2:\n        return True\n    \n    # If the number is not a valid decimal, return False\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Define the regular expression pattern for decimal numbers with a precision of 2\n    pattern = r'^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$'\n    # Check if the input string matches the regular expression pattern\n    if re.match(pattern, num):\n        # If it does, return True\n        return True\n    # If the input string doesn't match the regular expression pattern, return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string starts with a digit\n    if not num.startswith('0') and num[0].isdigit():\n        # Check if the string contains only digits and decimal points\n        if '.' not in num and num.replace('.', '').isdigit():\n            # Split the string into integer and decimal parts\n            int_part = num[:num.index('.')]\n            decimal_part = num[num.index('.')+1:]\n\n            # Check if the integer part is within the range of a 32-bit signed integer\n            if int(int_part) > 2**31-1:\n                return False\n\n            # Check if the decimal part is within the range of a 32-bit signed integer\n            if int(decimal_part) > 2**31-1:\n                return False\n\n            # Check if the number of decimal places is within the precision of 2\n            if len(decimal_part) > 2:\n                return False\n\n            return True\n\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n    \n    if num.is_integer():\n        return True\n    else:\n        digits = str(num).split('.')\n        if len(digits) == 2:\n            return len(digits[1]) <= 2\n        else:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    for part in parts:\n        if not part.isdigit():\n            return False\n        if len(part) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if float(num).is_integer():\n            return True\n        return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if int(num) == num:\n            if num % 1 == 0 and 0 <= num <= 1:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if string is empty\n    if not num:\n        return False\n\n    # check if string starts with a digit\n    if not num[0].isdigit():\n        return False\n\n    # check if string contains any other characters\n    for char in num:\n        if not char.isdigit():\n            return False\n\n    # check if string contains more than one decimal point\n    if num.count('.') > 1:\n        return False\n\n    # check if string contains more than 2 decimal places\n    if len(num.split('.')[1]) > 2:\n        return False\n\n    # check if string contains any leading zeros\n    if num.startswith('0'):\n        return False\n\n    # check if string is a valid decimal number with a precision of 2\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if num.count('.') == 1 and num.split('.')[-1].count('.') <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[0]!= arr[1]\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) == len(arr):\n                return True\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    # check if all elements are unique\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return False\n    \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns a boolean value indicating whether the list contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    elif len(arr) > 1:\n        for i in range(len(arr)):\n            if arr[i]!= arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            unique_count += 1\n        else:\n            return False\n    return unique_count == len(arr)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes an array of numbers as input and returns True if the array contains only one distinct element, and False otherwise.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    \n    # If the length of the set is 1, then all elements are unique\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 % 2 == 0:\n            if monthnum3 in [4, 6, 9, 11]:\n                return True\n            elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n                return False\n            else:\n                raise ValueError('Invalid month number')\n        else:\n            if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n                return True\n            elif monthnum3 in [4, 6, 9, 11]:\n                return False\n            else:\n                raise ValueError('Invalid month number')\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 10 == 0:\n        if monthnum3 % 4 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days[1] = 29\n    return days[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Check if the given month number contains 30 days or not.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check for leap years\n    if (monthnum3 % 4 == 0) and (monthnum3 % 100!= 0) or (monthnum3 % 400 == 0):\n        # Check for 30-day month\n        if monthnum3 == 2:\n            return True\n        else:\n            return False\n    else:\n        # Check for 31-day month\n        if monthnum3 == 2:\n            return False\n        elif monthnum3 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum3 in days_in_months:\n        if days_in_months[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a number of elements as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return \"Error: Number of elements should be greater than or equal to 2.\"\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference and the minimum element\n    min_diff = float('inf')\n    min_elem = float('inf')\n    \n    # Initialize the current element\n    curr_elem = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, n):\n        # Update the minimum difference and minimum element\n        if arr[i] - curr_elem < min_diff:\n            min_diff = arr[i] - curr_elem\n            min_elem = curr_elem\n        \n        # Update the current element\n        curr_elem = arr[i]\n        \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize the minimum difference and the minimum index\n    min_diff = float('inf')\n    min_index = -1\n\n    # Iterate through the array and calculate the minimum difference\n    for i in range(n):\n        diff = arr[i] - min_element\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize the minimum difference\n    min_diff = float('inf')\n\n    # loop through the array\n    for i in range(n-1):\n        # calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # check if the difference is smaller than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \n    Args:\n        arr (list): List of integers.\n        n (int): Size of the array.\n        \n    Returns:\n        int: Minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    \n    min_diff = abs(arr[-1] - arr[0])  # Find the minimum difference between the last and first element of the array\n    \n    for i in range(1, n-1):\n        curr_diff = abs(arr[i] - arr[i-1])  # Calculate the difference between current element and previous element\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Initialize the minimum difference to infinity\n    min_diff = float('inf')\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Traverse through the sorted array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element in the array\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the difference is smaller than the current minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two variables to store the minimum difference and its indices\n    min_diff = float('inf')\n    min_i, min_j = 0, 1\n    # Loop through the array and check for the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            min_i = i-1\n            min_j = i\n    return arr[min_i], arr[min_j], min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference to be the difference between the first and last elements\n    min_diff = arr[n-1] - arr[0]\n\n    # Traverse through the sorted array and calculate the difference between each pair of adjacent elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is less than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to the largest possible value\n    min_diff = float('inf')\n\n    # Iterate over all pairs of adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize two variables to store the minimum and maximum values in the array\n    min_diff = float('inf')\n    max_val = arr[0]\n\n    # iterate through the array\n    for i in range(1, n):\n        # calculate the difference between the current element and the previous maximum value\n        diff = arr[i] - max_val\n\n        # check if the current difference is less than the minimum difference found so far\n        if diff < min_diff:\n            min_diff = diff\n\n        # update the maximum value\n        max_val = arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[n-1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the count of the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    def find_nth_polite_number(n, a, b):\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        else:\n            return (a - 1) / (b - 1) * find_nth_polite_number(n - 1, b, a) + (b - 1) / (a - 1) * find_nth_polite_number(n - 2, a, b)\n\n    a = math.ceil(math.log(n, 2))\n    b = n - a + 1\n    return math.ceil(find_nth_polite_number(n, a, b))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n\n    # Initialize the first polite number to 1\n    polite_num = 1\n\n    # Initialize a list of prime numbers up to the square root of the nth polite number\n    primes = [True] * int(math.sqrt(n))\n\n    # Iterate through the list of primes and mark all multiples of each prime as not prime\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i - 1]:\n            for j in range(i * i, n + 1, i):\n                primes[j - 1] = False\n\n    # Return the nth polite number if it exists\n    if primes[n - 1]:\n        return polite_num\n    else:\n        return -1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return '1st'\n    elif n == 2:\n        return '2nd'\n    elif n == 3:\n        return '3rd'\n    else:\n        return str(n) + 'th'\n\ndef nth_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    '''\n    return str(n) +'' + is_polite(n)\n\nn = int(input('Enter a number: '))\nprint(nth_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        k = 1\n        while k <= n:\n            if k % 2 == 0:\n                k += 1\n            else:\n                if is_prime(k):\n                    return k\n                else:\n                    k += 1\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # Initialize a list to store the polite numbers\n    polite_numbers = []\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of digits of the current number\n        digit_sum = sum(int(digit) for digit in str(i))\n\n        # Check if the sum of digits is equal to the absolute value of the number\n        if digit_sum == abs(i):\n            # If it is, add the number to the list of polite numbers\n            polite_numbers.append(i)\n\n    # Return the nth polite number\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize polite number count\n    count = 0\n    # Initialize list to store prime numbers\n    primes = [2]\n    # Generate primes up to nth number\n    for i in range(3, n+1):\n        # Check if i is prime\n        if all(i % j!= 0 for j in range(2, int(math.sqrt(i))+1)):\n            primes.append(i)\n    # Iterate through primes list and count polite numbers\n    for prime in primes:\n        count += prime**2 * (n // prime)\n    # Return count of polite numbers\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number using the formula:\n    P(n) = (2^n - 1) * (3^n - 1)\n    \n    The idea is to calculate the first n terms of a geometric series and check if\n    they are all equal to 1. If they are, then we have found the nth polite number.\n    \"\"\"\n    P = [1]\n    for i in range(1, n):\n        P.append(int((2 ** i - 1) * (3 ** i - 1)))\n    if all(P[i] == 1 for i in range(n)):\n        return P[n-1]\n    else:\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize count and total\n    count = 0\n    total = 0\n\n    # Loop through each number\n    for i in range(1, n+1):\n        # Check if number is polite\n        if math.isqrt(i) ** 2 == i:\n            count += 1\n            total += i\n\n        # If we have found the nth polite number, return it\n        if count == n:\n            return total"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num = 2 * (num + 1)\n    return num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return None\n    \n    # Define the list of polite numbers\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n    # Check if n is already in the list\n    if n in polite_numbers:\n        return n\n    \n    # Start iterating from 11 to n-1\n    for i in range(11, n):\n        # Define a variable to store the sum of the digits of i\n        digit_sum = 0\n        \n        # Loop through the digits of i\n        while i > 0:\n            # Add the last digit to the sum\n            digit_sum += i % 10\n            # Remove the last digit from the number\n            i //= 10\n        \n        # If the sum is already in the list, return it\n        if digit_sum in polite_numbers:\n            return digit_sum\n    \n    # If the loop completes without returning anything, return None\n    return None"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    n = len(l1)\n    if n < 2:\n        return result\n    else:\n        for i in range(n-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(lst):\n    n = len(lst)\n    if n < 2:\n        return []\n    return [(lst[i], lst[i+1]) for i in range(n-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    n = len(l1)\n    pairs = []\n    for i in range(n):\n        if i == n-1:\n            pairs.append((l1[i], None))\n        else:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference as a new list.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the difference between the two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are present in list 1 but not in list 2.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    This function finds the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n    i = 1\n    while i <= n:\n        num = 3**i\n        if num % 2!= 0:\n            sum += num\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of odd number i\n        fourth_pow = i**4\n\n        # Add fourth_pow to sum\n        sum += fourth_pow\n\n    # Return sum of fourth powers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    \n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n            i += 1\n            \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    \n    while count < n:\n        count += 1\n        if count % 2 == 1:\n            total += count ** 4\n    \n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = 1\n        for j in range(i):\n            num += 2\n        sum += num**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a queue to store opening parentheses\n    opening_parentheses = deque()\n\n    # Loop through each character in the expression\n    for char in exp:\n\n        # If the character is an opening parenthesis, add it to the queue\n        if char == '(':\n            opening_parentheses.append(char)\n\n        # If the character is a closing parenthesis, check if its corresponding opening parenthesis is in the queue\n        elif char == ')':\n            if not opening_parentheses:\n                return False\n            elif opening_parentheses[-1] == '(':\n                opening_parentheses.pop()\n            else:\n                return False\n\n    # If the queue is not empty, the expression is not balanced\n    return not opening_parentheses"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if i - top!= 1:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '[', '{'] and last_char not in [')', ']', '}']:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # create an empty stack to store the opening parenthesis\n    stack = deque()\n\n    # iterate through the expression\n    for i in range(len(exp)):\n        # if the current character is an opening parenthesis, push it to the stack\n        if exp[i] == '(':\n            stack.append(i)\n\n        # if the current character is a closing parenthesis, pop the top element from the stack\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n\n    # if the stack is not empty, then all opening parenthesis have been closed\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, char in enumerate(exp):\n        if char in ['(', ')']:\n            stack.append(char)\n        elif char in ['+', '-']:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top not in ['(', ')', '+', '-']:\n                return False\n            if char == '+' and top == '(':\n                return False\n            stack.append(char)\n    if len(stack) > 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the words without k length\n    result = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, append it to the result list\n            result.append(word)\n\n    # Join the result list into a single string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # convert the string into a list of words\n    words = test_str.split()\n    # initialize an empty list to store the words that meet the length constraint\n    result = []\n    # loop through the words in the list\n    for word in words:\n        # check if the length of the word is less than or equal to K\n        if len(word) <= K:\n            # add the word to the result list\n            result.append(word)\n    # join the words in the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the new string\n    new_str = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the new string\n            new_str.append(word)\n    # Join the new words into a string and return it\n    return''.join(new_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Remove words with length equal to K\n    words = [word for word in words if len(word)!= K]\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Matches found:\")\n        for match in matches:\n            print(f\"Match: {match[0]} (position: {match.start()})\")\n        return matches\n    else:\n        print(\"No matches found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n\n    if matches:\n        for match in matches:\n            return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return (m.group(), m.start(), m.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        for match in result:\n            print(\"The substring '{}' occurs at position {} in the string '{}'\".format(match, text.index(match), text))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Match the pattern with regular expressions\n    matches = re.finditer(pattern, text)\n\n    # Initialize a list to store the matches\n    matches_list = []\n\n    # Loop through the matches and append them to the list\n    for match in matches:\n        matches_list.append(match.group())\n\n    # Check if the list is empty, which means no matches were found\n    if not matches_list:\n        return None\n\n    # Get the position of each match in the text\n    positions = []\n    for match in matches_list:\n        positions.append(text.find(match))\n\n    # Find the maximum position\n    max_pos = max(positions)\n\n    # Return the matches and their positions as a dictionary\n    result = {}\n    for i, match in enumerate(matches_list):\n        result[match] = positions[i]\n    return result, max_pos"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # use regex to find all matches\n    matches = re.findall(pattern, text)\n\n    # if there are no matches return None\n    if not matches:\n        return None\n\n    # find the first match and store its index\n    match_index = text.find(matches[0])\n\n    # create a dictionary to store the occurrence and position of each match\n    occurrences = {}\n\n    # iterate through the matches and store their occurrence and position in the dictionary\n    for i, match in enumerate(matches):\n        occurrences[match] = (match_index + i, match_index + len(match))\n\n    return occurrences"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether every odd index contains odd numbers\n    odd_positions = True\n\n    # Loop through each element in the list and check if it's an odd number\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            # If the element is odd, check if the corresponding odd index is even\n            if i % 2!= 0:\n                # If the odd index is not even, set the boolean variable to False\n                odd_positions = False\n                break\n\n    # Return the boolean variable indicating whether every odd index contains odd numbers\n    return odd_positions"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if not any(num % 2 == 0 for num in nums[i:]):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0: # checking if the index is odd\n            count = 0\n            for j in nums[i]:\n                if j % 2 == 0:\n                    count += 1\n            if count % 2 == 1: # checking if the count of odd numbers in the current index is odd\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    odd_count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = [i for i, num in enumerate(nums) if i % 2 == 1] # get all odd indices\n    \n    for index in odd_indices:\n        count = 0\n        for num in nums[index:]: # loop through odd numbers in the odd indices\n            if num % 2 == 1:\n                count += 1\n            if count > 1:\n                break # if more than one odd number is found, break the loop\n        else: # if the loop completes without finding more than one odd number, return False\n            return False\n    \n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers and checks whether every odd index contains odd numbers.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    # loop through all the indices of the list\n    for i in range(len(nums)):\n        # if the index is odd and the number at that index is odd, then return False\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n            \n    # if we reach here, then all the odd indices contain odd numbers\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if index is odd\n            count = 0\n            for num in nums:\n                if num % 2!= 0:  # check if current number is odd\n                    count += 1\n            if count % 2 == 0:  # check if count of odd numbers is even\n                return False  # odd position found but odd count found\n    return True  # no odd position found"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        \n        if test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n            \n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)):\n        for j in range(len(test_str)):\n            if i!= j:\n                if test_str[i] in vowels and test_str[j] in vowels:\n                    count += 1\n                    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # create a set of vowels\n    count = 0 # initialize count as 0\n    for i in range(len(test_str)-1): # loop through each character in the string\n        if test_str[i] in vowels and test_str[i+1] in vowels: # check if the two characters are vowels\n            count += 1 # increment count if they are\n    return count # return the count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store unique elements of the list\n    unique_dict = {}\n    # Initialize the sum variable\n    sum = 0\n    # Iterate through the list\n    for num in arr:\n        # If the element is not already in the dictionary, add it and update the sum\n        if num not in unique_dict:\n            unique_dict[num] = 1\n            sum += num\n        # If the element is already in the dictionary, increment its count\n        else:\n            unique_dict[num] += 1\n    # Return the final sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements and their frequency\n    freq_dict = {}\n    for num in arr:\n        if num not in freq_dict:\n            freq_dict[num] = 1\n        else:\n            freq_dict[num] += 1\n    \n    # create an empty list to store the non-repeated elements\n    non_repeat_list = []\n    \n    # loop through the dictionary and add the elements with frequency greater than 1 to the non_repeat_list\n    for key, value in freq_dict.items():\n        if value > 1:\n            non_repeat_list.append(key)\n    \n    # calculate the sum of the non-repeated elements\n    sum_non_repeat = sum(non_repeat_list)\n    \n    return sum_non_repeat\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set of the elements in the array to get the unique elements\n    unique_elements = set(arr)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Loop through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum += element\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store the non-repeated elements of the list\n    non_repeated_set = set()\n    \n    # Iterate through the list and add each element to the set if it's not already there\n    for num in arr:\n        if num not in non_repeated_set:\n            non_repeated_set.add(num)\n    \n    # Return the sum of all elements in the set\n    return sum(non_repeated_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to keep track of the unique elements in the list\n    unique_set = set(arr)\n    \n    # iterate over the unique set and add up their values\n    sum = 0\n    for num in unique_set:\n        sum += num\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    # remove duplicates from the list\n    unique_arr = list(set(arr))\n    # initialize a variable to store the sum of the non-repeated elements\n    sum_unique = 0\n    # iterate through the unique elements and add their value to the sum_unique variable\n    for num in unique_arr:\n        sum_unique += num\n    # return the sum of the non-repeated elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Loop through the frequency dictionary and add up all the elements with a frequency of 1\n    for num, count in freq.items():\n        if count == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_elements = sum(unique_elements)\n    return sum_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # loop through the list and update the count of each element in the dictionary\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the dictionary to calculate the sum of the non-repeated elements\n    for num, count in count_dict.items():\n        if count == 1:\n            sum += num\n    \n    return sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # create a list comprehension to group consecutive duplicates of list1\n    grouped_list = [(k, list(g)) for k, g in groupby(list1) if not k]\n\n    # loop through the grouped list and append each consecutive duplicates into a new sublist\n    packed_list = []\n    for key, sublist in grouped_list:\n        if len(sublist) > 1:\n            for i in range(len(sublist)-1):\n                packed_list.append(sublist[i:i+2])\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Using groupby function from itertools library to group consecutive duplicates of elements\n    grouped_list = list(groupby(list1))\n    \n    # Creating empty list to store sublists\n    sublist = []\n    \n    # Looping through grouped list to create sublists\n    for key, group in grouped_list:\n        \n        # If group contains only one element, adding it to sublist\n        if len(list(group)) == 1:\n            sublist.append(list(group)[0])\n            \n        # If group contains multiple elements, adding sublist to result list\n        else:\n            sublist.append(list(group))\n            \n    return sublist"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(lst)\n    return [list(g) for k, g in grouped if len(list(g)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates and pack them into sublists\n    grouped_list = [list(group) for key, group in groupby(list1) if not key]\n    return grouped_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, key=lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n    lst (list): a list of elements.\n\n    Returns:\n    list: a list of sublists, where each sublist contains consecutive duplicates of lst elements.\n    \"\"\"\n    # group the list elements by the same key\n    grouped = groupby(lst)\n\n    # create a sublist for each group of consecutive duplicates\n    result = [list(g) for k, g in grouped]\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists\n    unique_sublist_dict = {}\n    \n    # Iterate through the list of lists and count the unique sublists\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in unique_sublist_dict:\n            # If it does, increment its value by 1\n            unique_sublist_dict[sublist_tuple] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a value of 1\n            unique_sublist_dict[sublist_tuple] = 1\n            \n    # Return the dictionary of unique sublists\n    return unique_sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        if list1[i] not in count_dict:\n            count_dict[list1[i]] = 1\n        else:\n            count_dict[list1[i]] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for item in list1:\n        if isinstance(item, list):\n            sublists.append(tuple(item))\n    sublist_dict = {}\n    for sublist in sublists:\n        if sublist not in sublist_dict:\n            sublist_dict[sublist] = 1\n        else:\n            sublist_dict[sublist] += 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n    # Loop through all possible sublists of the given list\n    for i in range(1, len(list1) + 1):\n        for sublist in zip(*[iter(list1)] * i):\n            # Convert the sublist to a tuple and add it to the dictionary\n            counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple already exists in the dictionary\n        if sublist_tuple in sublist_count:\n            # Increment the count of the tuple by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # If the tuple does not exist in the dictionary, add it with a count of 1\n            sublist_count[sublist_tuple] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            item = tuple(item)\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublists[tuple(list1[i])] = sublists.get(tuple(list1[i]), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_count:\n            sublist_count[tuple(sublist)] += 1\n        else:\n            sublist_count[tuple(sublist)] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # Loop through each list in the input list\n    for lst in list1:\n        # Turn each list into a tuple and check if it's already in the dictionary\n        tup = tuple(sorted(lst))\n        if tup in counts:\n            # If it is, increment its count in the dictionary\n            counts[tup] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            counts[tup] = 1\n\n    # Return the dictionary of counts of unique sublists\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a list of tuples of unique tuples from the input list\n    unique_tuples = list(set(tuple(sorted(x)) for x in test_list))\n\n    # Iterate through all possible combinations of sums with tuples in the unique tuples\n    for comb in combinations(unique_tuples, r=2):\n        # If the sum of the tuples in the combination is present in the input list, print the combination\n        if sum(comb) in test_list:\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = list(test_list) # Convert the list to a mutable list\n    result_list = []\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            subset = tuple(sorted(test_list[i:j])) # Sort the subsets\n            result_list.append(subset)\n    \n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all combinations of sums of tuples in the list.\n    The function uses itertools library to find all combinations of sums using combinations function.\n    '''\n\n    # initialize an empty list to store all combinations\n    comb_list = []\n\n    # loop through all possible combinations of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n\n            # calculate the sum of the two tuples\n            sum_ = sum(test_list[i]) + sum(test_list[j])\n\n            # check if the sum is already in the comb_list\n            if sum_ not in comb_list:\n                comb_list.append(sum_)\n\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Get the sum of all tuples in the list\n    total_sum = sum(sum(t) for t in test_list)\n    \n    # Find all combinations of sums with tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Combine the first two tuples\n            curr_tuple = tuple(test_list[i]+test_list[j])\n            # Find the difference between the total sum and the sum of the first two tuples\n            diff = total_sum - sum(test_list[i]+test_list[j])\n            \n            # Check if the difference is present in the remaining tuples in the list\n            if diff in test_list[j+1:]:\n                print(curr_tuple)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                for l in range(k, n+1):\n                    for m in range(l, n+1):\n                        if sum(test_list[i:j]) == sum(test_list[k:m]) and sum(test_list[i:j])!= sum(test_list[l:m]):\n                            print(tuple(test_list[i:j]), tuple(test_list[k:m]), tuple(test_list[l:m]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Helper function to check if two tuples are equal\n    def is_equal(t1, t2):\n        return sorted(t1) == sorted(t2)\n\n    # Loop through all possible pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the two tuples is equal to the sum of the whole list\n            if test_list[i][0] + test_list[j][0] == sum(test_list):\n                # Check if the two tuples are equal\n                if is_equal(test_list[i], test_list[j]):\n                    # If they are equal, add them to the combination list\n                    combination = (test_list[i], test_list[j])\n                    combinations.append(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if sum(test_list[i]) + sum(test_list[j]) + sum(test_list[k]) + sum(test_list[l]) == sum(test_list):\n                        print(tuple(sorted(test_list[i])), tuple(sorted(test_list[j])), tuple(sorted(test_list[k])), tuple(sorted(test_list[l])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 0:\n                yield comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the sum of each tuple in the list\n    tuple_sums = []\n    for tup in test_list:\n        tuple_sums.append(sum(tup))\n\n    # Find the combinations of sums using itertools.combinations()\n    combinations_list = list(combinations(tuple_sums, len(tuple_sums)))\n\n    # Filter out combinations that have duplicate elements\n    unique_combinations_list = []\n    for combo in combinations_list:\n        if not combo in unique_combinations_list:\n            unique_combinations_list.append(combo)\n\n    # Return the unique combinations\n    return unique_combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the given list of tuples\n    test_list = sorted(test_list)\n    # Initialize a list to store the combinations\n    result = []\n    # Loop through all pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the current pair of tuples\n            current_sum = sum(test_list[i]) + sum(test_list[j])\n            # Check if the sum is in the given list of sums\n            if current_sum in test_list:\n                # Create a tuple from the current pair of tuples\n                current_combination = tuple(sorted((test_list[i], test_list[j])))\n                # Append the current combination to the result list\n                result.append(current_combination)\n    # Return the list of combinations\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a number and returns whether the count is even or odd.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    if len(divisors) == len(set(divisors)):\n        return \"Even\", divisors\n    else:\n        return \"Odd\", divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculating number of divisors \n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1 \n    if n > 1 and count == 0:\n        return \"Even\"\n    elif n > 1 and count == 1:\n        return \"Odd\"\n    else:\n        return \"Prime\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and count == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\"\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            if i!= n//i:\n                divisors.append(i)\n                divisors.append(n//i)\n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count % 2 == 0:\n        print(f\"{n} has an even number of divisors\")\n    else:\n        print(f\"{n} has an odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # function to count the number of divisors of a given number \n    def count_div(num): \n        count = 0 \n        for i in range(1, num + 1): \n            if (num % i) == 0: \n                count += 1 \n        return count\n    \n    # function to check whether the count of divisors is even or odd \n    def even_or_odd(count): \n        if count % 2 == 0: \n            return True \n        else: \n            return False\n    \n    # calling the function to count the number of divisors of a given number \n    count = count_div(n) \n    \n    # calling the function to check whether the count of divisors is even or odd \n    result = even_or_odd(count)\n    \n    # printing the result \n    print(\"The count of divisors is even or odd:\", result)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # initializing variables to store count of divisors and even or odd count\n    count = 0\n    even_odd = True\n    \n    # finding count of divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            \n            # if count is odd, set even_odd to False\n            if count % 2!= 0:\n                even_odd = False\n                break\n    \n    # if count is even, set even_odd to True\n    if count % 2 == 0:\n        even_odd = True\n    \n    # returning even_odd\n    return even_odd"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the number of divisors of n\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            divisors.append(i)\n            if i!= n // i: \n                divisors.append(n // i)\n    divisors.append(n)\n    # Check whether the count of divisors is even or odd\n    count = len(divisors)\n    if count % 2 == 0: \n        print(f\"The count of divisors of {n} is even\")\n    else: \n        print(f\"The count of divisors of {n} is odd\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            total += arr[j]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum_odd_len_subarray = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 2, len(arr) + 1):\n            subarray = arr[i:j]\n            if len(subarray) % 2!= 0:\n                sum_odd_len_subarray += sum(subarray)\n    return sum_odd_len_subarray"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all odd length subarrays.\n\n    :param arr: input array\n    :type arr: list\n    :return: sum of all odd length subarrays\n    :rtype: int\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i + 1 % 2 == 1:\n                subarray = arr[i:j+1]\n                total_sum += sum(subarray)\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    # Initialize the sum to zero\n    sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Initialize a variable to store the sum of the current subarray\n        subarray_sum = 0\n\n        # Iterate through the current subarray\n        for j in range(i, len(arr)):\n            # If the current element is odd, add it to the subarray sum\n            if arr[j] % 2!= 0:\n                subarray_sum += arr[j]\n\n        # Add the subarray sum to the overall sum\n        sum += subarray_sum\n\n    # Return the overall sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                subarr = arr[i:j+1]\n                result += sum(subarr)\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n-2):\n        if i == n-3:\n            continue\n        for j in range(i+2, n):\n            if j == n-2:\n                continue\n            sum_odd += arr[j]\n            if j == n-3:\n                continue\n            if (j - i) % 2!= 0:\n                sum_odd -= arr[i]\n            elif (j - i) % 2 == 0 and (j - i + 1) % 2!= 0:\n                sum_odd += arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, min(i+4, n)+1, 2):\n            res += arr[j]\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    prefix_sum = [0] * (2 * n)\n    \n    for i in range(n):\n        prefix_sum[i] = arr[i]\n        prefix_sum[i + n] = arr[i]\n    \n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            prefix_sum[i + length] = prefix_sum[i] + prefix_sum[i + length - 1] - prefix_sum[i + length - 2]\n    \n    return prefix_sum[n]"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if (j-i)%2!= 0:\n                sum += arr[i:j].sum()\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    :param arr: A list of integers.\n    :return: An integer. The sum of all odd length subarrays.\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    total = 0\n\n    # Loop through each element of the array\n    for i in range(len(arr)):\n        # Loop through each element in the array\n        for j in range(i+1, len(arr)+1, 2):\n            # Add the sum of the two subarrays to the total\n            total += sum(arr[i:j])\n\n    return total"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: The red component of the color.\n    :param g: The green component of the color.\n    :param b: The blue component of the color.\n    :return: A tuple containing the Hue, Saturation, and Value components of the color.\n    \"\"\"\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_component = max(r, g, b)\n    min_component = min(r, g, b)\n    delta = max_component - min_component\n\n    if max_component == min_component:\n        hue = 0.0\n    elif max_component == r:\n        hue = (g - b) / delta\n    elif max_component == g:\n        hue = 2.0 + (b - r) / delta\n    else:\n        hue = 4.0 + (r - g) / delta\n\n    hue = hue % 6.0\n\n    if delta == 0:\n        saturation = 0.0\n    else:\n        saturation = delta / (1 - abs(2 * hue - 1))\n\n    value = max_component\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red value in range [0, 255].\n        g (int): Green value in range [0, 255].\n        b (int): Blue value in range [0, 255].\n\n    Returns:\n        tuple: Hue, Saturation, Value\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    saturation = 0\n    value = max_value\n\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    if hue < 0:\n        hue += 6\n\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    if value == 0:\n        hue = 0\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Converting rgb to float\n    r = float(r)/255\n    g = float(g)/255\n    b = float(b)/255\n    \n    # Minimum value\n    min_val = min(r,g,b)\n    \n    # Maximum value\n    max_val = max(r,g,b)\n    \n    # Delta value\n    delta = max_val - min_val\n    \n    # Hue value\n    if max_val == min_val:\n        hue = 0\n    elif r == max_val:\n        hue = ((g-b)/delta) % 6\n    elif g == max_val:\n        hue = ((b-r)/delta) + 2\n    else:\n        hue = ((r-g)/delta) + 4\n    \n    # Hue value\n    if hue < 0:\n        hue += 6\n    \n    # Saturation value\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta/max_val\n    \n    # Value value\n    value = max_val\n    \n    # Returning hsv values\n    return [hue, saturation, value]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_value\n    \n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        delta = max_value - min_value\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n            \n        h *= 60\n        \n        if h < 0:\n            h += 360\n            \n        s = delta / max_value\n        \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == 0:\n        h = 0\n    elif delta == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6.0\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    v = max_value\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert the RGB values to HSV values\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    # Hue\n    if cmax == r:\n        hue = (g - b) / delta\n    elif cmax == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue *= 60 if hue < 0 else 0\n\n    # Saturation and Value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    value = cmax\n\n    # Convert the HSV values to HSV values\n    hsv = (hue, saturation, value)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three integer parameters r, g, and b and returns a tuple of the equivalent hsv values.\n    The hsv color model is a variant of the hsv color space used in computer graphics.\n    HSV stands for hue, saturation, and value. Hue represents the color in terms of an angle on a circle, while \n    saturation represents the brightness of the color and value represents the intensity of the color.\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_rgb / 255.0\n    \n    delta = max_rgb - min_rgb\n    if max_rgb == min_rgb:\n        s = 0\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        s = delta / max_rgb\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color model.\n    \n    Parameters:\n    r (int): Red value of the color (0-255).\n    g (int): Green value of the color (0-255).\n    b (int): Blue value of the color (0-255).\n    \n    Returns:\n    h (int): Hue value of the color (0-360).\n    s (int): Saturation value of the color (0-100).\n    v (int): Value of the color (0-100).\n    \"\"\"\n    \n    r, g, b = r / 255, g / 255, b / 255\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n    \n    v = max_c * 100\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_c == r:\n            h = ((g - b) / delta) % 6\n        elif max_c == g:\n            h = (b - r) / delta + 2\n        elif max_c == b:\n            h = (r - g) / delta + 4\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n    \n    if max_c == min_c:\n        s = 0\n    else:\n        s = (delta / (1 - abs(2 * max_c - 1))) * 100\n    \n    return int(h * 360), int(s), int(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three arguments - red, green and blue values of the color (between 0 and 255).\n    It returns the hsv values of the color in a tuple.\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == min_value:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        elif h > 6:\n            h -= 6\n    s = delta / max_value\n    v = max_value\n    return (int(h*255), int(s*255), int(v*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    h = 0\n    if r == g and r == b:\n        h = 0\n    elif r == g:\n        h = 60 * ((g - b) / (r - min(r, g, b)))\n    elif r == b:\n        h = 60 * ((g - r) / (r - min(r, g, b))) + 120\n    elif g == b:\n        h = 60 * ((b - r) / (r - min(r, g, b))) + 240\n    else:\n        h = 0\n    \n    if r == max(r, g, b):\n        s = (r - min(r, g, b)) / (max(r, g, b) - min(r, g, b))\n    elif g == max(r, g, b):\n        s = (r - min(r, g, b)) / (max(r, g, b) - min(r, g, b)) + (max(r, g, b) - min(r, g, b)) / (max(r, g, b) - min(r, g, b))\n    else:\n        s = (r - min(r, g, b)) / (max(r, g, b) - min(r, g, b)) + (max(r, g, b) - min(r, g, b)) / (max(r, g, b) - min(r, g, b))\n    \n    v = max(r, g, b)\n    \n    # Convert HSV to RGB\n    r_val = 0\n    g_val = 0\n    b_val = 0\n    \n    if s == 0:\n        r_val = v\n        g_val = v\n        b_val = v\n    else:\n        if h < 60:\n            h_val = h\n            s_val = s\n            v_val = v\n        elif h < 120:\n            h_val = 240 - h\n            s_val = s\n            v_val = v\n        elif h < 180:\n            h_val = h - 120\n            s_val = s\n            v_val = v\n        elif h < 240:\n            h_val = 60 - h\n            s_val = s\n            v_val = v\n        else:\n            h_val = 0\n            s_val = s\n            v_val = v\n        \n        r_val = 255 * ((v_val - min(v_val, min(r_val, g_val, b_val))) / (max(v_val, min(r_val, g_val, b_val)) - min(v_val, min(r_val, g_val, b_val))))\n        g_val = 255 * ((v_val - min(v_val, min(r_val, g_val, b_val))) / (max(v_val, min(r_val, g_val, b_val)) - min(v_val, min(r_val, g_val, b_val))))\n        b_val = 255 * ((v_val - min(v_val, min(r_val, g_val, b_val))) / (max(v_val, min(r_val, g_val, b_val)) - min(v_val, min(r_val, g_val, b_val))))\n    \n    return r_val, g_val, b_val"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Given a list of integers, return the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number in the list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    \n    if even_sum!= 0:\n        return even_sum * odd_sum\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even = 1\n    odd = 1\n    prod = 1\n    for num in lst:\n        if num % 2 == 0:\n            if even == 1:\n                even = 0\n            else:\n                prod *= num\n            if odd == 1:\n                odd = 0\n            else:\n                prod *= num\n        else:\n            if odd == 1:\n                odd = 0\n            else:\n                prod *= num\n    return prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and finds the product of first even and odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product = num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product = num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # iterate through the list\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        # check if both even and odd numbers have been found\n        if even_count > 0 and odd_count > 0:\n            product *= num\n            even_count -= 1\n            odd_count -= 1\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number in the list.\n    \"\"\"\n    num_even = 0\n    num_odd = 0\n    \n    for i in lst:\n        if i % 2 == 0:\n            num_even += i\n        else:\n            num_odd += i\n    \n    return num_even * num_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    product = even_num * odd_num\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = list(test_str)\n    int_tuple = ()\n    for char in test_str_list:\n        if char.isdigit():\n            int_tuple += (int(char),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for item in test_str:\n        if item.isdigit():\n            int_tuple.append(int(item))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a function to convert a string to an integer\n    def str_to_int(s):\n        try:\n            return int(s)\n        except ValueError:\n            return None\n\n    # Define a function to convert a tuple of strings to a tuple of integers\n    def tuple_str_to_int_tuple(t):\n        return tuple(map(str_to_int, t))\n\n    # Convert the input string to a tuple of strings\n    str_list = test_str.split(',')\n    # Convert the tuple of strings to a tuple of integers\n    int_tuple = tuple_str_to_int_tuple(str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Parameters:\n    test_str: tuple string\n\n    Returns:\n    integer tuple\n    \"\"\"\n\n    # Split the string into a list of strings\n    string_list = list(test_str)\n\n    # Initialize an empty integer tuple\n    int_tuple = ()\n\n    # Loop through each string in the list\n    for string in string_list:\n\n        # Convert the string to an integer and append to the integer tuple\n        int_tuple += (int(string),)\n\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert string to tuple\n    test_tuple = tuple(test_str.split())\n    \n    # Convert integer tuple to integer list\n    int_list = [int(i) for i in test_tuple]\n    \n    # Return integer list\n    return int_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    test_list = test_str.split(\",\")\n\n    # Create an empty list to store the converted integers\n    int_list = []\n\n    # Loop through each string in the list\n    for item in test_list:\n        # Convert the string to an integer\n        int_item = int(item.strip())\n        # Add the converted integer to the list\n        int_list.append(int_item)\n\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize empty tuple\n    int_tuple = ()\n    # split the string into a list of words\n    words = test_str.split()\n    # loop through the words and convert each to an integer\n    for word in words:\n        try:\n            int_tuple += (int(word),)\n        except ValueError:\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(\",\")\n    \n    # Initialize an empty list to hold the integer values\n    int_list = []\n    \n    # Loop through each string in the list\n    for s in str_list:\n        # Convert the string to an integer and append it to the list\n        int_list.append(int(s))\n    \n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by ',' and convert each part to an integer using int() function\n    int_tuple = tuple(int(x) for x in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by the comma and remove whitespace\n    test_list = test_str.split(',')\n    test_list = [word.strip() for word in test_list]\n    \n    # convert the list of strings to a list of integers\n    int_list = [int(word) for word in test_list]\n    \n    # convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # find the index where x should be inserted\n    i = bisect.bisect_right(a, x)\n    # if x is greater than all the elements in a, then i will be equal to the length of a\n    if i == len(a):\n        i -= 1\n    # if x is greater than the element at index i, then it should be inserted after i\n    if i < len(a) and a[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): A sorted list of integers.\n    x (int): An integer to be inserted into the list.\n\n    Returns:\n    int: The index at which the value should be inserted to maintain sorted order.\n    \"\"\"\n\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Binary search for the right insertion point\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        # If the value is not found in the sorted array, append it at the end of the array\n        a.append(x)\n        i = len(a) - 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    This function takes in a sorted list of numbers a and a value x and returns the right insertion point for x in a.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{2}b{3}')\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text, re.DOTALL)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a+b{3}\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_three(text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba{3}b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # join the strings and convert to a tuple\n    new_tuple = tuple(test_str.split())\n    # return the concatenated tuple\n    return new_tuple + test_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple and append the string to it\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str) + tuple(test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list\n    test_list = list(test_str)\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists and convert it to a tuple\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 2:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len([num for num in nums if num % 2 == 0]) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # create a boolean list to store the even occurrence of each number in the list\n    even_occurrence = [False] * 100\n    for num in nums:\n        if num % 2 == 0:\n            even_occurrence[num] = True\n    # check if all even occurrences of a number are True in the list\n    for i in range(0, 100, 2):\n        if even_occurrence[i] == False:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Check if every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if not all(x % 2 == 0 for x in nums[i:i+2]):\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Loop through the list and check if the current index is even\n    for i in range(0, len(nums), 2):\n        # Check if the current even index contains an even number\n        if nums[i] % 2!= 0:\n            return False\n    \n    # If we made it this far, the even index contains even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                even_count += 1\n                if even_count > 1:\n                    return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 0:\n                    count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    \n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    \n    if even_count == len(nums)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([item for sublist in test_tup for item in sublist])"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(x) for x in test_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for element in test_tup:\n        if isinstance(element, tuple):\n            new_list.extend(remove_nested(element))\n        else:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            nested_list.extend(item)\n        else:\n            nested_list.append(item)\n    return nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = [item for sublist in test_tup for item in sublist]\n    return tuple(set(flattened_list))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            flat_list.extend(remove_nested(elem))\n        else:\n            flat_list.append(elem)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem) is not tuple:\n            new_tup.append(elem)\n        else:\n            for inner_elem in elem:\n                new_tup.append(inner_elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A list of integers in ascending order.\n    x (int): The element whose last position needs to be found in the array.\n\n    Returns:\n    int: The last position of the element in the sorted array.\n\n    \"\"\"\n    # Using binary search to find the last position of the element\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two parameters:\n    - arr: A sorted array\n    - x: The element to find the last position of\n    \n    The function returns the last position of the element x in the array arr. If the element is not found, the function returns -1.\n    \n    This function has a time complexity of O(log n) due to the binary search algorithm.\n    '''\n    \n    # Initialize left and right pointers to the beginning of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Perform binary search to find the last position of the element\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if the mid element is equal to the target element\n        if arr[mid] == x:\n            # If it is, check if the next element is equal to the target element\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                # If the next element is not equal to the target element, update the left pointer to mid + 1\n                left = mid + 1\n        # If the mid element is less than the target element, update the right pointer to mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the mid element is greater than the target element, update the left pointer to mid + 1\n        else:\n            right = mid - 1\n    \n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element as input and returns the last position of the element in the array.\n    If the element is not present in the array, the function will return -1.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    This function takes a sorted array and an element x as inputs and returns the index of the last occurrence of x in the array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments - an array and an element x. \n    It then uses binary search to find the last position of the element x in the array.\n    If x is not found, it returns -1.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0]==x:\n        return 0\n    i=1\n    while i<len(arr):\n        if arr[i]==x:\n            return i\n        elif arr[i]<x:\n            i+=1\n        else:\n            return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # If the element is not present in the array."
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # loop through the array from the end to the beginning\n    for i in range(len(arr)-1, -1, -1):\n        # check if the current element matches the given element\n        if arr[i] == x:\n            return i\n    # if no element matches the given element, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # find the first index of the element in the array\n    first_index = bisect.bisect_left(arr, x)\n\n    # if the element is not found, return -1\n    if first_index == len(arr) or arr[first_index]!= x:\n        return -1\n\n    # find the last index of the element in the array\n    last_index = bisect.bisect_right(arr, x) - 1\n\n    # if the element is not found, return -1\n    if last_index < 0 or arr[last_index]!= x:\n        return -1\n\n    # return the last index of the element\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?P<start>a)\\s*(?P<end>.*)b'\n    match = re.match(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group('start'), match.group('end')\n    else:\n        return None, None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^b]*)b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a[^b]*b\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range: \").split())\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = int(input(\"Enter the lower limit of the range:\")), int(input(\"Enter the upper limit of the range: \"))\n    count = 0\n    sum_odd = 0\n    \n    for i in range(l, r+1):\n        if i % 2 == 1:\n            count += 1\n            sum_odd += i\n    \n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", sum_odd)\n    print(\"There are\", count, \"odd numbers within the range\")"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total = 0\n    while l <= r:\n        if l % 2!= 0:\n            total += l\n        l += 1\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:  \n        sum += i  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_array(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(arr):\n    \"\"\"\n    This function takes in an array as an input and returns the sum of all elements in the array.\n    \"\"\"\n    total = 0\n    for element in arr:\n        total += element\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not isinstance(arr, list):\n        return None\n\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as an input and returns the sum of the array.\n    \"\"\"\n    # Initialize a variable to store the sum of the array\n    total_sum = 0\n    \n    # Loop through each element in the array and add it to the total sum\n    for num in arr:\n        total_sum += num\n        \n    # Return the total sum of the array\n    return total_sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # extract the last d bits from the number\n    mask = (1 << d) - 1\n    shifted = (n & mask) << (32 - d)\n    # shift the number to the left by d bits\n    result = (n >> d) | shifted\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Mask to get the least significant d bits\n    mask = (1 << d) - 1\n    # Shift the number to the left by d bits\n    rotated_number = n << d\n    # Shift the number to the right by (32 - d) bits\n    shifted_number = n >> (32 - d)\n    # Combine the shifted and rotated numbers and return the result\n    return rotated_number | shifted_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n &= 0xffffffff  # make sure n is a 32-bit integer\n    d &= 0x1f  # make sure d is a valid number of bits to rotate\n    n = ((n << d) | (n >> (32 - d))) & 0xffffffff  # rotate left d bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the sign bit from the number\n    sign = (n >> 31) & 1\n\n    # Shift the number to the left by d bits\n    n <<= d\n\n    # Set the most significant bit of the number to the sign bit\n    n |= sign << (32 - d)\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # get the binary representation of the given number\n    binary_representation = bin(n)[2:]\n    # compute the number of bits to rotate left\n    number_of_bits_to_rotate = len(binary_representation) - d % len(binary_representation)\n    # rotate the binary representation by the specified number of bits\n    rotated_binary_representation = binary_representation[number_of_bits_to_rotate:] + binary_representation[:number_of_bits_to_rotate]\n    # convert the rotated binary representation back to an integer and return it\n    return int(rotated_binary_representation, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Find the binary representation of n\n    binary_n = bin(n)[2:].zfill(32)\n\n    # Calculate the number of times to rotate left\n    num_rotations = d // 32\n    if d % 32!= 0:\n        num_rotations += 1\n\n    # Rotate the binary representation\n    rotated_binary = binary_n[num_rotations:] + binary_n[:num_rotations]\n\n    # Convert the rotated binary representation back to an integer\n    rotated_n = int(rotated_binary, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xffffffff  # 32 bits for 32 bit number\n    mask_d = mask << d  # mask for d bits\n\n    return (n & mask_d) | (n & mask_d >> 32 - d)  # left rotate by d bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to rotate left\n    num_bits = n.bit_length()\n    bits_to_rotate = d % num_bits\n\n    # Shift the number to the left by the number of bits to rotate\n    n = n << bits_to_rotate\n\n    # Shift the rotated number to the right by the original number of bits\n    n = n >> num_bits\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Find the number of bits in the given number\n    num_bits = 32\n\n    # Check if the number of bits to rotate is greater than the number of bits in the number\n    if d >= num_bits:\n        return 0\n\n    # Extract the last d bits and shift the first d bits to the right\n    mask = (1 << d) - 1\n    rotated = (n >> d) | (n << (num_bits - d))\n\n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespace characters with a single space\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    for i in range(100):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        for j in range(i+1,3):\n            if x == y and y == z or x == z and y == x or x == y and z == x:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == z and x == y:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, min(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z), max(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr): \n    if len(arr) < 2: \n        return 0\n\n    # Find the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    # Perform a binary search to find the minimum number of rotations required\n    mid_val = (min_val + max_val) // 2\n    left = 0\n    right = len(arr) - 1\n    count = 0\n\n    while left <= right:\n        # Check if the mid_val is the minimum or maximum value in the array\n        if arr[left] == mid_val:\n            return count\n        elif arr[left] < mid_val:\n            left += 1\n        else:\n            right -= 1\n        count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # check if array is already sorted in reverse\n    if arr == sorted(arr[::-1]):\n        return n\n\n    # binary search for first element greater than the middle element\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[n // 2]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # binary search for first element greater than the last element\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < arr[n - 1]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    # calculate the number of rotations required\n    rotation = (right - left + 1) // 2\n\n    return rotation"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Calculate the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize the count of rotations\n    count = 0\n\n    # Traverse the array from right to left\n    for i in range(n - 1, -1, -1):\n        # If the element at the current index is less than the minimum element, then there is a rotation required\n        if arr[i] < min_element:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[i] >= arr[j]:\n            j += 1\n        if j - i > 1:\n            return j - i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # Traverse the array from left to right\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n                break\n        # If the element is already at its correct position, then no rotation is required.\n        if i == j-1:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the smallest element in the array\n    min_val = min(arr)\n\n    # Initialize the count of rotations to 0\n    count = 0\n\n    # Traverse the array from left to right\n    for i in range(n):\n\n        # Check if the element at index i is greater than min_val\n        if arr[i] > min_val:\n\n            # Check if the element at index i+n-1 is greater than the element at index i\n            if arr[i+n-1] > arr[i]:\n\n                # Increment the count of rotations by 1\n                count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # swap elements arr[i] and arr[i+1]\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            # swap elements arr[0] and arr[n-1]\n            arr[0], arr[n-1] = arr[n-1], arr[0]\n            # swap elements arr[0] and arr[i]\n            arr[0], arr[i] = arr[i], arr[0]\n            # find the smallest element in the remaining unsorted portion of the array\n            min_val = arr[i+1]\n            for j in range(i+2, n):\n                if arr[j] < min_val:\n                    min_val = arr[j]\n            # swap elements arr[i+1] and min_val\n            arr[i+1], min_val = min_val, arr[i+1]\n            # swap elements arr[0] and arr[i+1]\n            arr[0], arr[i+1] = arr[i+1], arr[0]\n            # swap elements arr[0] and arr[i]\n            arr[0], arr[i] = arr[i], arr[0]\n            # decrement n to reflect the new size of the array\n            n -= 1\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize two pointers, one at the start of the array and one at the end of the array.\n    i, j = 0, n - 1\n    # Initialize two variables to keep track of the number of rotations required.\n    count1, count2 = 0, 0\n    # Loop until the two pointers meet in the middle of the array.\n    while i < j:\n        # If the elements at the two pointers are equal, increment both counts.\n        if arr[i] == arr[j]:\n            count1 += 1\n            count2 += 1\n            i += 1\n            j -= 1\n        # If the element at the start of the array is greater than the element at the end of the array,\n        # rotate the array to the right until they meet.\n        elif arr[i] < arr[j]:\n            count2 += 1\n            i += 1\n        # If the element at the end of the array is greater than the element at the start of the array,\n        # rotate the array to the left until they meet.\n        else:\n            count1 += 1\n            j -= 1\n    # If the elements at the two pointers are not equal, increment the count of the smaller element.\n    if arr[i] < arr[j]:\n        count1 += 1\n    else:\n        count2 += 1\n    return count1, count2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Traverse the array for 2 rounds and keep the count of swaps\n    for i in range(n):\n        # If current element is greater than next element, swap them\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n            count += 1\n        \n        # If current element is equal to next element, do nothing\n        elif arr[i] == arr[i+1]:\n            continue\n        \n        # If current element is less than next element, rotate the array by one position to make it sorted\n        else:\n            # Copy the array\n            temp = arr.copy()\n            \n            # Rotate the array\n            for j in range(n-1, i, -1):\n                arr[j] = temp[j-1]\n            \n            # Move the last element to its correct position\n            arr[i] = temp[0]\n            count += n-i-1\n            \n            # Continue the rotation process\n            for j in range(n-2, i, -1):\n                arr[j] = temp[j-1]\n            \n            arr[i] = temp[0]\n            count += n-i-1\n    \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Taking the square root of n using the babylonian method\n    root = 0.5 * (n + n // 2 + n // 4 + n // 8 + n // 16 + n // 32 + n // 64 + n // 128)\n    # Comparing the square root with n\n    if root == int(root) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square, False otherwise.\n    \"\"\"\n    # Check if n is a negative number.\n    if n < 0:\n        return False\n    # Check if n is equal to 0.\n    elif n == 0:\n        return True\n    # Check if n is greater than 0.\n    else:\n        # Initialize a variable to store the square root of n.\n        sqrt_n = n\n        # Iterate from 1 to sqrt_n.\n        for i in range(1, int(sqrt_n) + 1):\n            # If i * i is greater than n, then we can't square n.\n            if i * i > n:\n                return False\n            # If i * i is equal to n, then n is a perfect square.\n            elif i * i == n:\n                return True\n            # If i * i is less than n, then we can continue iterating.\n            elif i * i < n:\n                continue\n        # If we have not returned from the inner loop, then n is not a perfect square.\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # check if the number is less than 1\n    if n < 1:\n        return False\n    \n    # check if the number is a perfect square\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n\n    :param n: The number to check.\n    :return: True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        for i in range(int(n ** 0.5) + 1):\n            if n - i * i == 0:\n                return True\n            elif n - i * i > 0:\n                return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    This function takes a positive integer n as input and returns True if it is a perfect square, False otherwise.\n    A perfect square is a positive integer that is equal to the square of its square root.\n    '''\n    import math\n    sqrt_n = math.sqrt(n)\n    return sqrt_n**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square else False\n    \"\"\"\n    if n < 2:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return False\n\n    # find the square root of the number\n    sqrt_n = int(n**0.5) + 1\n\n    # check if the square root is equal to the integer part of the number\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    square = 0\n    root = n\n    while square < root:\n        square += root\n        root = (root + square) // 2\n    return square == root * root"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Function to check whether a given number is a perfect square or not.\n\n    Args:\n    n: A positive integer.\n\n    Returns:\n    True if the given number is a perfect square, False otherwise.\n    \"\"\"\n\n    # Base case: if n is 1 or 0, it is a perfect square\n    if n == 1 or n == 0:\n        return True\n\n    # Get the square root of n using binary search\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # initialize the square root\n    sqrt_n = int(n ** 0.5) + 1\n    \n    # check if square root is greater than or equal to the number\n    if sqrt_n >= n:\n        return False\n    else:\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of all the numbers is even.\"\n    else:\n        return \"The product of all the numbers is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_sum_list = []\n    for list in lists:\n        sum = sum(list)\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return None\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lists:\n        sum_of_elements = sum(sublist)\n        if sum_of_elements > max_sum:\n            max_sum = sum_of_elements\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the input list of lists\n    whose sum of elements is the highest.\n\n    This function works by iterating over each list in the input list of lists and keeping track of the maximum\n    sum seen so far and the corresponding list.\n\n    The function returns the second item in the tuple, which is the list whose sum of elements is the highest.\n    '''\n\n    max_sum = -float('inf')\n    max_list = None\n\n    for lst in lists:\n        curr_sum = sum(lst)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of maximum sum and the list with that sum\n    max_sum = float('-inf')\n    max_list = None\n    # Loop through each list in the input list of lists\n    for list_i in lists:\n        # Initialize variables to keep track of current sum and the list with that sum\n        current_sum = 0\n        current_list = list_i\n        # Loop through each element in the current list\n        for element in current_list:\n            # Add the current element to the current sum\n            current_sum += element\n            # If the current sum is greater than the maximum sum so far, update the maximum sum and the list with that sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = current_list\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the sum of the current sublist\n    current_sum = 0\n    # initialize a variable to store the index of the list with the highest sum\n    max_sum_index = 0\n    # loop through each sublist in the main list\n    for index, sublist in enumerate(lists):\n        # loop through each element in the sublist\n        for element in sublist:\n            # add the current element to the current sum\n            current_sum += element\n            # check if the current sum is greater than the current max sum\n            if current_sum > lists[max_sum_index][current_sum - element]:\n                # update the index of the list with the highest sum\n                max_sum_index = index\n    # return the sublist with the highest sum\n    return lists[max_sum_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + lists[i][j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = []\n    \n    for l in lists:\n        # check if sum of elements is greater than max sum\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            current_sum = lists[i][j]\n            for k in range(1, len(lists)):\n                current_sum += lists[k][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n                \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters.\n    \"\"\"\n    run_start = 0\n    run_len = 1\n    max_run = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            run_len += 1\n        else:\n            if run_len > max_run:\n                max_run = run_len\n            run_start = i\n            run_len = 1\n    if run_len > max_run:\n        max_run = run_len\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run = 1\n    uppercase = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase += 1\n        else:\n            run = max(run, uppercase)\n            uppercase = 0\n    return run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    end = 0\n    max_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            end = i\n        else:\n            if count > max_count:\n                max_count = count\n                start = start\n            count = 0\n    if count > max_count:\n        max_count = count\n        start = 0\n    return test_str[start:end+1], max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > 1:\n                return test_str[start:i+1]\n        else:\n            count = 0\n\n    return test_str[start:]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_index = i\n        else:\n            count = 0\n    return max_count, max_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 0\n    start = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                start = i\n        else:\n            count = 0\n    \n    return max_run, start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            uppercase_count = 0\n            \n    if uppercase_count > max_run:\n        max_run = uppercase_count\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            if not uppercase:\n                current_run = 1\n            else:\n                current_run += 1\n            uppercase = True\n        else:\n            uppercase = False\n            if current_run > max_run:\n                max_run = current_run\n                current_run = 1\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables\n    max_run = 1\n    current_run = 1\n    prev_char =''\n    # loop through the string\n    for char in test_str:\n        # check if the current character is uppercase\n        if char.isupper():\n            # if it is, check if it's a run of uppercase characters\n            if char == prev_char:\n                current_run += 1\n            else:\n                # if not, reset the current run and update the max run if necessary\n                current_run = 1\n                if current_run > max_run:\n                    max_run = current_run\n            # update the previous character\n            prev_char = char\n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    current_run = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count == 1:\n                current_run = 1\n            else:\n                current_run += 1\n        else:\n            if uppercase_count > 0:\n                if current_run > max_run:\n                    max_run = current_run\n            uppercase_count = 0\n            current_run = 0\n\n    if uppercase_count > 0:\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"No odd numbers found in the list\""
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a value K as input and returns a boolean value indicating whether the tuple contains the K or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if K in i:\n            count += 1\n    return count >= K"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Check if the K is a tuple\n    if type(K)!= tuple:\n        raise TypeError(\"K should be a tuple\")\n\n    # Check if the length of K is equal to the length of the tuple\n    if len(K)!= len(test_tup):\n        return False\n\n    # Check if all the elements of the K tuple are present in the tuple\n    for k in K:\n        if k not in test_tup:\n            return False\n\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if test_tup[i] == K:\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[K:]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    }
]