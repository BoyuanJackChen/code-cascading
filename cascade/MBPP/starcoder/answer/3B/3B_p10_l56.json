[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            common.append(elem1)\n    return common"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # create sets from the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Create a set of all elements in the first list\n    set1 = set(list1)\n\n    # Create a set of all elements in the second list\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create empty sets to store shared elements\n    shared_set1 = set()\n    shared_set2 = set()\n\n    # Loop through the lists and add the shared elements to their respective sets\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_set1.add(elem)\n            shared_set2.add(elem)\n\n    # Find the intersection of the two sets and return it as a list\n    return list(shared_set1.intersection(shared_set2))"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for item1 in test_tup1:\n        if item1 in test_tup2:\n            shared_elements.append(item1)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # find the intersection of the two lists\n    shared_set = set(test_tup1).intersection(set(test_tup2))\n    \n    # convert the set to a list\n    shared_list = list(shared_set)\n    \n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # create sets of unique elements from each list\n    unique_elements1 = set(test_tup1)\n    unique_elements2 = set(test_tup2)\n\n    # find the intersection of the two sets and convert it back to a list\n    shared_elements = list(unique_elements1.intersection(unique_elements2))\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # check if the input tuples are not empty\n    if not test_tup1 or not test_tup2:\n        return \"Both input lists must not be empty.\"\n\n    # get the first and second elements of the input tuples\n    first_elem = test_tup1[0]\n    second_elem = test_tup2[0]\n\n    # check if the first element is the same in both tuples\n    if first_elem == second_elem:\n        return \"The first element is shared.\"\n\n    # get the remaining elements of the first tuple\n    remaining_elem1 = test_tup1[1:]\n\n    # check if any of the remaining elements are the same in the second tuple\n    for elem in remaining_elem1:\n        if elem == second_elem:\n            return \"The first element is shared.\"\n\n    # check if any of the remaining elements are the same in the second tuple\n    for elem in test_tup2[1:]:\n        if elem == first_elem:\n            return \"The first element is shared.\"\n\n    return \"No common elements found.\""
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is not a prime number, else False.\n    A prime number is a number that is divisible only by 1 and itself.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return True\n    \n    # check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    \n    # check odd numbers up to sqrt(n)\n    for i in range(5, int(math.sqrt(n))+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3 or n == 5 or n == 7 or n == 11:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n == 2 or n == 3:\n        return False\n\n    if n % 2 == 0:\n        return True\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    heap = [float('-inf')] * n\n    hq.heapify(heap)\n\n    # add the first n numbers to the heap\n    for num in nums[:n]:\n        hq.heappushpop(heap, num)\n\n    # add the remaining numbers to the heap in descending order\n    for num in nums[n:]:\n        hq.heappush(heap, num)\n\n    # return the n largest numbers from the heap in descending order\n    return [num for num in heap[:n]]\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max heap from the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # Add the remaining elements to the max heap\n    for i in range(n,len(nums)):\n        hq.heappush(nums[i:])\n\n    # Return the n largest elements of the max heap\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # Convert the list of numbers to a heap and keep the largest n elements\n    heap = [(-num, i) for i, num in enumerate(nums[:n])]\n    hq.heapify(heap)\n    # Return the largest n elements in descending order\n    return [num for _, num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap from the input list\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n    \n    # Remove the smallest elements from the heap\n    for _ in range(n):\n        hq.heappop(heap)\n    \n    # Return the remaining elements in the heap as the n largest integers\n    return [-x for x in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            # if the max heap is not full, compare the current number with the top element and replace if necessary\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    # return the max heap as a list\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest_nums = []\n    heapq.heapify(largest_nums)\n\n    for num in nums:\n        heapq.heappushpop(largest_nums, num)\n\n        if len(largest_nums) > n:\n            heapq.heappop(largest_nums)\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min heap with the first n elements of the list as the initial elements\n    hq.heapify(nums[:n])\n\n    # Iterate through the remaining elements of the list, adding each element to the min heap\n    for num in nums[n:]:\n        hq.heappush(nums[:n], num)\n\n    # Return the n largest elements of the heap as a list\n    return hq.nsmallest(n, nums[:n])"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    heap = [nums[0]] * n\n\n    # fill the heap with the remaining n-1 integers\n    for num in nums[1:n]:\n        if len(heap) < n:\n            heap.append(num)\n        else:\n            if num > heap[0]:\n                heapq.heapreplace(heap, num)\n\n    # return the largest n integers from the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a max heap\n    nums_heap = [-num for num in nums]\n    heapq.heapify(nums_heap)\n\n    # Remove the n largest elements from the heap and return them in a list\n    return [-heapq.heappop(nums_heap) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x)!= bin(x ^ (x-1))[2:]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    else: \n        while x!= 1: \n            if x % 2 == 0: \n                x = x//2\n            else: \n                x = 3*x + 1\n        return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # check if x is a power of two or not\n    if x == 0 or (x & (x - 1)) == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:  # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & 1 == 0:\n        x >>= 1\n    \n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the given number is a power of 2 or not.\n    If the number is a power of 2, it returns True, otherwise it returns False.\n    '''\n    if x == 0:\n        return False\n    else:\n        if x & (x-1) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the difference between x and its power of 2 is exactly one,\n    and False otherwise.\n    '''\n    if x & (x-1) == 0: # checking if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1 == 0:\n            x >>= 1\n        else:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x)[2:].count('1') == 1 and bin(x)[2:].count('0') == 1\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text) # split the text into words using regular expression\n    result = [] # create an empty list to store the long words\n    \n    for word in words: # iterate through each word\n        if len(word) >= 4: # check if the length of the word is at least 4\n            result.append(word) # if it is, append it to the list of long words\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Find all words with at least 4 characters\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    char_long_words = []\n    \n    for word in words:\n        if len(word) >= 4:\n            char_long_words.append(word)\n    \n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Convert all words to lowercase to simplify the search\n    text = text.lower()\n    # Use regular expressions to find all words of length 4 or more\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Find all words with length at least 4\n    long_words = [word for word in words if len(word) >= 4]\n    \n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b[a-zA-Z]{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'  # matches words with at least 4 characters\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create a new list to store the squares of the original elements\n    squares = []\n    for num in nums:\n        # add the square of the current element to the squares list\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    min_rot = 0\n    for i in range(n): \n        count = 0 \n        for j in range(n): \n            if j!= i and str[j] == str[(i+j) % n]: \n                count += 1 \n        min_rot = max(min_rot, count) \n    return min_rot "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Initialize the count of rotations to 0\n    count = 0\n\n    # Initialize the list of characters that appear more than once\n    duplicates = []\n\n    # Loop through each character in the string\n    for char in str:\n        # If the character is not in the list of duplicates, add it to the list\n        if char not in duplicates:\n            duplicates.append(char)\n\n        # If the character is in the list of duplicates, increment the count of rotations\n        else:\n            count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 1:\n        return 0\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the maximum frequency\n    max_freq = 0\n    for freq_count in freq.values():\n        if freq_count > max_freq:\n            max_freq = freq_count\n\n    # Create a new string with the same characters repeated n/max_freq times\n    rotated_str = ''\n    for char in str:\n        if freq[char] > max_freq:\n            rotated_str += char * (n//max_freq)\n        else:\n            rotated_str += char\n\n    # Calculate the minimum number of rotations required to get the same string\n    if rotated_str == str:\n        return 0\n    else:\n        return find_Rotations(rotated_str) + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    for i in range(n//2): \n        if str[i]!= str[n-i-1]: \n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Find the smallest and largest characters in the string\n    min_char = str[0]\n    max_char = str[0]\n    for i in range(n):\n        if str[i] < min_char:\n            min_char = str[i]\n        elif str[i] > max_char:\n            max_char = str[i]\n    # Find the difference between the maximum and minimum characters\n    diff = max_char - min_char\n    # If the difference is 1, there are no rotations to be made\n    if diff == 1:\n        return 0\n    # If the difference is greater than 1, find the count of rotations required\n    count = 0\n    while diff > 0:\n        # If the difference is odd, divide by 2 and count the number of rotations required\n        if diff % 2!= 0:\n            count += 1\n        # If the difference is even, multiply by 2 and subtract 1 from the difference\n        else:\n            diff = diff // 2\n            diff -= 1\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    \n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            temp = dp[i+1][j-1]\n            if temp == 0:\n                for k in range(i, j):\n                    temp = temp + dp[i][k] + dp[k+1][j]\n                    if temp == 0:\n                        dp[i][j] = 1\n            else:\n                dp[i][j] = temp + 1\n    return dp[0][n-1]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    # Convert the string to lowercase to ignore case sensitivity \n    str = str.lower() \n\n    # Initialize variables to store the length of the string and the count of characters in the string \n    length = len(str) \n    count = 0 \n\n    # Loop through the string and count the number of characters \n    for char in str: \n        if char not in count: \n            count[char] = 0 \n        count[char] += 1 \n\n    # Find the minimum number of rotations required \n    min_rotations = length \n    for i in range(26): \n        if count[chr(ord('a') + i)] > 0: \n            min_rotations = min(min_rotations, length - count[chr(ord('a') + i)]) \n\n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    temp = str\n    while temp!= str:\n        temp = temp[1:] + str[:1]\n        rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # get the length of the string\n    n = len(str)\n\n    # create a boolean array to store the flags of characters that can be rotated\n    flag = [False] * 26\n\n    # loop through the string and fill the flag array\n    for i in range(n):\n        flag[ord(str[i]) - ord('a')] = True\n\n    # loop through the flag array and count the number of rotations required\n    rotations = 0\n    for i in range(26):\n        if flag[i]:\n            rotations += n - i\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for c in str:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n    # check if the number of characters is odd or even\n    if n % 2 == 0:\n        # if it's even, we need to rotate the string by 1 to get the same count of each character\n        min_rotations = 1\n        for i in range(1, n):\n            # if we find a character whose count is less than the current count, we need to rotate by 1 more\n            if char_count[str[i]] < char_count[str[i-1]]:\n                min_rotations += 1\n                break\n        return min_rotations\n    else:\n        # if it's odd, we can rotate the string by any number of times to get the same count of each character\n        min_rotations = 0\n        for i in range(1, n):\n            # if we find a character whose count is less than the current count, we can rotate by 1 more\n            if char_count[str[i]] < char_count[str[i-1]]:\n                min_rotations += 1\n                break\n        return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove the first occurrence of the character from the string\n    s = s.replace(ch, '')\n    # Remove the last occurrence of the character from the string\n    s = s.replace(ch, '', s.rfind(ch))\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, '')[1:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is present at the first or last position of the string\n    if s.find(ch) == 0:\n        # Remove the first occurrence of the character from the string\n        s = s[1:]\n    elif s.find(ch) == len(s)-1:\n        # Remove the last occurrence of the character from the string\n        s = s[:-1]\n    else:\n        # Remove all occurrences of the character from the string\n        s = s.replace(ch, \"\")\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s[:len(s)-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    # Check if the character is present in the string\n    if ch in s:\n        # Split the string into two parts: before and after the character\n        before, after = s.split(ch)\n        # Remove the first occurrence of the character\n        s = before[1:]\n        # Remove the last occurrence of the character\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'')\n    if ch in s:\n        s=s[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of the character\n    s = s.replace(ch,'')\n    # remove last occurrence of the character\n    s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    # Remove first occurrence of the character from the string\n    s = s.replace(ch, '', 1)\n    # Remove last occurrence of the character from the string\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    # get the dimensions of the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # create a new matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(m)] for i in range(n)]\n    \n    # loop through the rows of the matrix\n    for i in range(n):\n        # initialize a variable to keep track of the minimum sum\n        min_sum = float('inf')\n        # loop through the columns of the matrix\n        for j in range(m):\n            # add the current element to the sum of the row\n            row_sum = sum(M[i])\n            # check if the current element is smaller than the minimum sum\n            if M[i][j] < min_sum:\n                min_sum = M[i][j]\n                # check if the minimum sum is smaller than the sum of the row\n                if row_sum < min_sum:\n                    # if it is, swap the minimum sum with the current element\n                    sorted_M[i][j], sorted_M[i][row_sum-min_sum] = sorted_M[i][row_sum-min_sum], sorted_M[i][j]\n    \n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize variables to store the minimum sum of row and the matrix\n    min_sum = float('inf')\n    sorted_matrix = []\n    \n    # Iterate through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        \n        # If the sum is less than the minimum sum so far, update the minimum sum and the sorted matrix\n        if row_sum < min_sum:\n            min_sum = row_sum\n            sorted_matrix = [row]\n        elif row_sum == min_sum:\n            sorted_matrix.append(row)\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Create a copy of the matrix\n    M_copy = M.copy()\n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Find the row with the maximum sum\n        max_sum = float('-inf')\n        max_row = None\n        for j in range(n):\n            if M[i][j] > max_sum:\n                max_sum = M[i][j]\n                max_row = j\n        # Swap the maximum row with the current row\n        if max_row!= i:\n            M_copy[i], M_copy[max_row] = M_copy[max_row], M_copy[i]\n    return M_copy"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n\n    # create a new matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(m)] for i in range(n)]\n\n    # initialize a variable to store the sum of the current row\n    row_sum = 0\n\n    # sort the matrix in ascending order according to the sum of its rows\n    for i in range(n):\n        # get the current row\n        row = M[i]\n\n        # sort the row in ascending order\n        row.sort()\n\n        # add the sorted row to the sum of the previous rows\n        for j in range(m):\n            row_sum += row[j]\n\n        # add the sorted row and its sum to the sorted matrix\n        for j in range(m):\n            sorted_M[i][j] = row[j]\n            sorted_M[i][j] += row_sum\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize two empty lists to store the sorted rows and their sums\n    sorted_rows = []\n    sorted_sums = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        # Append the row and its sum to the sorted_rows and sorted_sums lists\n        sorted_rows.append(row)\n        sorted_sums.append(row_sum)\n    \n    # Sort the sorted_rows list in ascending order\n    sorted_rows.sort(key=lambda x: sorted_sums.index(sum(x)))\n    \n    # Loop through the sorted_rows list and add the sorted rows to the original matrix\n    for i, row in enumerate(sorted_rows):\n        M[i] = row"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Initialize variables for the sorted matrix and a list to store the indices of each row\n    sorted_M = []\n    row_indices = []\n\n    # Iterate through each row of the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the current row's sum\n        row_sum = 0\n\n        # Iterate through each element in the current row\n        for j in range(len(M[i])):\n            # Add the element to the row sum\n            row_sum += M[i][j]\n\n        # Add the current row's sum to the sorted matrix\n        sorted_M.append([row_sum])\n\n        # Add the index of the current row to the row_indices list\n        row_indices.append(i)\n\n    # Sort the sorted_M matrix in ascending order based on the sum of its rows\n    sorted_M = sorted(sorted_M, key=lambda x: x[0])\n\n    # Iterate through the sorted_M matrix and swap the row indices with the row indices in row_indices\n    for i in range(len(sorted_M)):\n        sorted_M[i].append(row_indices.pop(0))\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # iterate through each row of the matrix\n    for i in range(len(M)):\n        # iterate through each element of the row\n        for j in range(len(M[i])):\n            # calculate the sum of the row\n            row_sum = sum(M[i])\n            # if the current element is greater than the row sum, swap it with the row sum\n            if M[i][j] > row_sum:\n                M[i][j], M[i][row_sum.index(M[i][j])] = M[i][row_sum.index(M[i][j])], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows based on the sum\n    row_sums.sort()\n    # Create a new matrix with the sorted rows\n    sorted_M = [M[i] for i in range(n) if row_sums[i] == row_sums[-1]]\n    # Create a new matrix with the remaining rows in descending order of the sum\n    remaining_M = [M[i] for i in range(n) if row_sums[i]!= row_sums[-1]]\n    remaining_M.sort(key=lambda x: sum(x), reverse=True)\n    # Merge the sorted and remaining matrices\n    return sorted_M + remaining_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Loop through each row\n    for i in range(n):\n        # Sort the elements in the current row in ascending order\n        M[i].sort()\n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n        # Add the current row sum to the list of row sums\n        row_sums.append(row_sum)\n        # Loop through each column except the current one\n        for j in range(i+1, n):\n            # Check if the sum of the two rows is greater than the sum of the first row\n            if row_sum + M[j][i] > row_sums[i]:\n                # Swap the elements of the two rows\n                M[i], M[j] = M[j], M[i]\n                # Update the row sums\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                # Break out of the inner loop\n                break\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = l * b * h\n    volume = area / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*(l*b*h)\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the area of the prism\n    V = 0.5 * l * b * h\n\n    # Calculate the volume of the prism\n    volume = V * math.sqrt(3)\n\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h #Calculating the volume using the formula for a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculate the area of the prism\n    area = 0.5 * l * b\n\n    # calculate the volume of the prism\n    volume = area * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'(?<=[a-z])[A-Z]|(?<=\\s)[a-z]'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+[_]+[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b_[a-z]+\\b'\n    \n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return True if the list of matches is not empty and False otherwise\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)_([a-z]+)')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Remove non-alphanumeric characters from the string\n    text = re.sub(r'[^a-zA-Z0-9]+', '', text)\n\n    # Check if the string contains lowercase letters followed by an underscore\n    pattern = r'([a-z])_+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)[a-z]+(?=\\b_)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)(_[a-z]+)*'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<![_])[a-z]+(?![_])\"\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'^[a-z][a-z0-9_]*[a-z]$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    char_list = list(string)\n\n    # create a new list without the characters present in the second string\n    new_char_list = [char for char in char_list if char not in set(string)]\n\n    # convert the new list back to a string\n    new_string = ''.join(new_char_list)\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list of characters\n    char_list = list(string)\n    # Remove characters from the list which are present in the second string\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n    # Convert the list of characters back to string\n    result_string = ''.join(char_list)\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        if string[i] not in list:\n            list.append(string[i])\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list of characters\n    char_list = list(string)\n    # initialize an empty list to store the characters to be removed\n    remove_list = []\n    # loop through the characters in the string and check if they are present in the second string\n    for char in char_list:\n        if char not in string:\n            remove_list.append(char)\n    # remove the characters from the list of characters to be removed from the string\n    for char in remove_list:\n        char_list.remove(char)\n    # convert the list of characters to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    first_set = set(string)\n    second_set = set(''.join(string.split()))\n    result = [char for char in first_set if char not in second_set]\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    ascii_set = set(range(NO_OF_CHARS))\n    char_set = set(string)\n    return ''.join([chr(x) for x in ascii_set.difference(char_set)])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    NO_OF_CHARS = 256\n    char_list = []\n    for i in range(NO_OF_CHARS): \n        if i not in string: \n            char_list.append(chr(i)) \n    return ''.join(char_list) "
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    char_set = set(string)\n    result = [None] * len(string)\n    count = 0\n    for i in range(len(string)):\n        if string[i] not in char_set:\n            result[count] = string[i]\n            count += 1\n    result = ''.join(result)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    index = 0\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n        index += 1\n        if index == NO_OF_CHARS:\n            break\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Remove the characters from the first string which are present in the second string\n    for char in string:\n        if char in string[::-1]:\n            string = string.replace(char, '', 1)\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the array\n    counts = {}\n    for num in arraynums:\n        # If the element is already in the dictionary, increment its count\n        if num in counts:\n            counts[num] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            counts[num] = 1\n    \n    # Iterate over the dictionary and return True if any element has a count greater than 1\n    for count in counts.values():\n        if count > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize a set to store unique elements\n    unique_set = set()\n\n    # Iterate through each element in the array\n    for num in arraynums:\n        # Check if the element is already in the set\n        if num in unique_set:\n            # If it is, return True\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n\n    # If all elements are unique, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    \n    # Check if the set has more than one element\n    if len(unique_set) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each integer\n    count_dict = {}\n\n    # Loop through each integer in the array\n    for num in arraynums:\n        # If the integer is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the integer is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Check if any integer in the dictionary appears more than once\n    for count in count_dict.values():\n        if count > 1:\n            return True\n\n    # If no integers appear more than once, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # loop through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    # check if the set has any elements\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store unique elements of the array\n    unique_dict = {}\n    \n    # loop through the array and add each element to the dictionary\n    for num in arraynums:\n        unique_dict[num] = True\n    \n    # check if the dictionary has any duplicate elements\n    if len(unique_dict)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the numbers and their counts\n    num_count = {}\n    # loop through the array\n    for num in arraynums:\n        # if the number already exists in the dictionary, increment its count\n        if num in num_count:\n            num_count[num] += 1\n        # if the number doesn't exist in the dictionary, add it with a count of 1\n        else:\n            num_count[num] = 1\n    # loop through the dictionary to check for duplicates\n    for num in num_count:\n        if num_count[num] > 1:\n            return True\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 7 == 0 and x % 5 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the set of valid numbers for woodball\n    valid_woodall = {12, 34, 56, 78, 90}\n    # Check if the number is in the set of valid numbers\n    if x in valid_woodall:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 3 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x == 2 or x == 4 or x == 6 or x == 8 or x == 10:\n            return True\n        else:\n            return False\n    else:\n        if x == 1 or x == 3 or x == 5 or x == 7 or x == 9:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        if x % 5 == 0:\n            if x % 3 == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 0:\n        return \"0 is not a woodball\"\n    elif x % 2 == 0:\n        return x + \" is a woodball\"\n    else:\n        return x + \" is not a woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 10, 100, 1000]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Compute the reverse of the number\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    \n    # Check if the reverse of the reverse is the original number\n    return rev_num * 2 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string and reverse it\n    reverse = str(num)[::-1]\n    # convert the reversed number back to an integer and check if it's one less than twice the original number\n    result = int(reverse) - 1 < num\n    return result"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    \n    # Check if the given number is one less than twice its reverse\n    if num == rev_int + 1:\n        print(f\"{num} is one less than twice its reverse!\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the given number and get the reversed number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n\n    # Check if the reverse number is one less than twice the original number\n    if reverse < 2 * num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - 2*reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse - num\n\nnum = int(input(\"Enter a number: \"))\nresult = rev(num)\nprint(result)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < (int(str(num)[::-1]) * 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # Subtract the original number from the reversed integer\n    diff = num - rev_int\n    # Check if the difference is one less than twice the original number\n    if diff < 0:\n        return False\n    elif diff == 0:\n        return True\n    elif diff % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Reverse the number\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Check if the reversed number is one less than twice the original number\n    return rev_num - num < 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # convert the input number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the reversed number is one less than twice the original number\n    if (rev_num + 1) < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # We need to sort the given list of digits in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the largest number as 0\n    largest = 0\n\n    # Initialize the count of digits as 0\n    count = 0\n\n    # Iterate through the sorted digits\n    for digit in arr:\n        # We need to add the digit to the largest number and increment the count of digits\n        largest += digit\n        count += 1\n\n        # If the count of digits is equal to the length of the list of digits, then we have found the largest number\n        if count == len(arr):\n            break\n\n    # Return the largest number\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) :\n        if i == 0 :\n            max_num += arr[i]\n        else :\n            max_num += max_num * arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_arr = arr[i:j]\n            sub_arr.sort(reverse=True)\n            max_sum = max(max_sum, sum(sub_arr))\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed by the digits.\n    '''\n    \n    # Initialize variables for the maximum number formed so far and the current number to be formed\n    max_num = 0\n    curr_num = 0\n    \n    # Iterate over each digit in the input list\n    for digit in arr:\n        \n        # If the digit is 0, add it to the current number and move on to the next digit\n        if digit == 0:\n            curr_num = curr_num * 10\n            continue\n        \n        # Calculate the next number by adding the digit to the current number and multiplying it by 10\n        next_num = curr_num + digit * 10\n        \n        # Update the maximum number if the next number is greater than the current maximum\n        if next_num > max_num:\n            max_num = next_num\n        \n        # Move on to the next digit\n        curr_num = next_num\n    \n    # Return the maximum number formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, int(arr[i])*pow(10, len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sorting the list of digits in descending order\n    arr.sort(reverse=True)\n\n    # initializing the maximum number with the first digit\n    max_num = arr[0]\n\n    # iterating over the remaining digits of the list\n    for i in range(1, len(arr)):\n        # multiplying the current maximum number with the next digit\n        max_num = max_num * arr[i]\n\n        # adding the current digit to the maximum number\n        max_num += arr[i]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort() # sort the list in ascending order\n    max_num = 0\n    for i in range(len(arr)):\n        if i % 2 == 0: # if the number is odd\n            max_num = max(max_num, int(arr[i]) + int(arr[i-1])) # add the next odd digit to the current max_num\n        else: # if the number is even\n            max_num = max(max_num, int(arr[i]) + int(arr[i-1]) + int(arr[i-2])) # add the next even digit to the current max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list of digits in non-descending order\n    arr.sort(reverse=True)\n    # Initialize a variable to store the maximum number\n    max_num = 0\n    # Loop through the list of digits and multiply them with their corresponding powers of 10\n    for i in range(len(arr)):\n        max_num += arr[i] * 10**i\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_num += (10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            curr_num = arr[i] * 10 + arr[j]\n            if curr_num > max_num:\n                max_num = curr_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x == 0 and y == 0:\n        return True\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        print(\"The two numbers have opposite signs.\")\n    else:\n        print(\"The two numbers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs,\n    False otherwise.\n    '''\n    if x*y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    if x*y <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0: \n        print(\"The two numbers have opposite signs\") \n    elif x < 0 and y < 0: \n        print(\"The two numbers have opposite signs\") \n    else: \n        print(\"The two numbers have the same sign\") "
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    j = 1\n    octagonal = 1\n    while j <= n:\n        i += 1\n        j += 1\n        octagonal += i\n    return octagonal\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    print(is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return 4 * (n - 2) + 1\n\ndef octagonal_numbers():\n    '''\n    Write a function to generate all octagonal numbers up to a specified limit.\n    '''\n    limit = int(input('Enter a limit: '))\n    oct_numbers = []\n    for i in range(1, limit + 1):\n        oct_numbers.append(is_octagonal(i))\n    return oct_numbers\n\nif __name__ == '__main__':\n    oct_numbers = octagonal_numbers()\n    for oct_num in oct_numbers:\n        print(oct_num)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes a positive integer as input and returns True if the number is an octagonal number and False otherwise.\n    '''\n    def is_octagonal_helper(n):\n        if n == 0:\n            return True\n        if n < 0:\n            return False\n        return is_octagonal_helper(n-1)**2 == n\n\n    return is_octagonal_helper(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # We can use the formula:\n    # n^2 + 2n + 3\n    # to find the nth octagonal number\n    return n*n + 2*n + 3"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 8\n    elif n == 2:\n        return 24\n    else:\n        return 64 - (n - 3) * (n - 1) + 24 * n - 24"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**3 + n**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        i = 1\n        j = n-1\n        while i <= j:\n            if i**2 + j**2 == 8*n - 1:\n                return i\n            elif i**2 + j**2 < 8*n - 1:\n                i += 1\n            else:\n                j -= 1\n        return \"No octagonal number exists for the given input.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    def triangular(n):\n        \"\"\"\n        Return the nth triangular number.\n        \"\"\"\n        return (n * (n + 1)) // 2\n\n    def octagonal(n):\n        \"\"\"\n        Return the nth octagonal number.\n        \"\"\"\n        return (n * (3 * n - 1)) // 2\n\n    return octagonal(triangular(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_sqrt(n):\n        return int(n**0.5)\n    \n    def get_square(n):\n        return n**2\n    \n    def get_sum_of_squares(n):\n        return get_square(get_sqrt(n))\n    \n    def get_sum_of_powers(n):\n        return sum(i**2 for i in range(1, get_sqrt(n)+1))\n    \n    def get_n_octagonal(sqrt_n):\n        return 8 * sqrt_n**2 + 2 * sqrt_n\n    \n    return get_n_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a = 1\n    b = 1\n    c = 0\n    d = 0\n    for i in range(1, n+1):\n        if a+b+c+d == 2*i-1:\n            return a+b+c+d\n        elif a+b+c+d < 2*i-1:\n            c += 1\n            d += 1\n        else:\n            a += 1\n            b += 1\n    return None"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits = sum(int(digit) for digit in substring)\n            if digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings of each length\n    count_dict = defaultdict(int)\n    \n    # Loop through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count_dict[j-i] += 1\n    \n    # Return the count of substrings of each length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [defaultdict(int) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, s[i:j+1])) == j-i+1:\n                dp[i][j] = 1 + dp[i+1][j-1]\n                \n    return sum(dp[0])"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Substrings(s):\n    # create a dictionary to store count of substrings\n    count = defaultdict(int)\n\n    for i in range(len(s)):\n        # for each substring, check if the sum of digits is equal to its length\n        for j in range(i, len(s)):\n            # add the length of substring to the sum of digits\n            sum_of_digits = sum([int(digit) for digit in s[j:i+1]])\n            # add the count of substring to the dictionary\n            count[(i, j)] += sum_of_digits\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            digits = [int(digit) for digit in s[i:j]]\n            digit_sum = sum(digits)\n            if digit_sum == len(digits):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the frequency of digits in each substring\n    freq = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Get the substring starting at the current index\n        substring = s[i:]\n        \n        # Calculate the sum of digits in the substring\n        total_digits = sum([int(digit) for digit in substring])\n        \n        # Increment the frequency of the total digits in the dictionary\n        freq[total_digits] += 1\n    \n    # Return the total number of substrings with the sum of digits equal to their length\n    return sum([freq[total_digits] for total_digits in freq])"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    def count_substrings(s):\n        n = len(s)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if (s[i] - '0') == (s[j - 1] - '0'):\n                    dp[i][j] = dp[i + 1][j - 1] + 1\n                else:\n                    dp[i][j] = 0\n\n        return dp[0][n]\n\n    def count_substrings_with_sum(dp, n, target_sum):\n        count = 0\n        for i in range(n):\n            if dp[i][i] > 0:\n                count += dp[i][i]\n            if i + dp[i][i] < n:\n                if dp[i + dp[i][i]][n - 1] >= target_sum - dp[i][i]:\n                    count += count_substrings_with_sum(dp, n - dp[i][i] - 1, target_sum - dp[i][i])\n        return count\n\n    dp = count_substrings(s)\n    target_sum = dp[0][len(s)]\n    result = count_substrings_with_sum(dp, len(s), target_sum)\n\n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)  # dictionary to store the count of digits in each substring\n    \n    # loop through each character in the string\n    for i in range(len(s)):\n        # convert the current substring to a list of digits\n        substring = list(map(int, list(str(s[i:]))))\n        # add the count of digits to the dictionary\n        digit_count[''.join(str(digit) for digit in substring)] += 1\n    \n    # return the count of substrings with a sum of digits equal to their length\n    return sum(1 for count in digit_count.values() if count == len(s))"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize a dictionary to store the frequency of substrings\n    freq_dict = defaultdict(int)\n\n    # Loop through each substring of length 1 to n-1\n    for i in range(len(s)):\n        # Calculate the sum of digits in the current substring\n        substring_sum = sum(int(c) for c in s[i:i+len(s)-i])\n        # Add the current substring to the dictionary with its frequency as the value\n        freq_dict[substring_sum] += 1\n\n    # Return the total number of substrings with a sum of digits equal to their length\n    return sum(freq_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Loop through the input string\n    for i in range(len(s)):\n        # Loop through the substring starting from the current index\n        for j in range(i, len(s)):\n            # Check if the substring is valid (i.e., has sum of digits equal to its length)\n            if sum(int(digit) for digit in s[i:j+1]) == j-i+1:\n                # Increment the count in the dictionary\n                count_dict[j-i+1] += 1\n\n    # Return the count of valid substrings\n    return count_dict"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    # Initialize a variable to store the smallest number\n    smallest = xs[0]\n    # Loop through each number in the list\n    for i in range(1, len(xs)):\n        # If the current number is smaller than the smallest number, update the smallest number\n        if xs[i] < smallest:\n            smallest = xs[i]\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the given list\n    sorted_list = sorted(test_list)\n\n    # Initialize variables to store the maximum difference and the maximum difference index\n    max_diff = 0\n    max_diff_index = -1\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)-1):\n        # Calculate the difference between the current element and the next element\n        diff = sorted_list[i+1] - sorted_list[i]\n\n        # If the difference is greater than the maximum difference found so far, update the maximum difference and its index\n        if diff > max_diff:\n            max_diff = diff\n            max_diff_index = i\n\n    # Return the maximum difference and its index\n    return max_diff, max_diff_index"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.add((test_list[i], test_list[j]))\n            if max_diff < (test_list[j] - test_list[i]):\n                max_diff = test_list[j] - test_list[i]\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    sorted_list = sorted(test_list)\n    \n    # Initialize variables for maximum difference and current difference\n    max_diff = float('-inf')\n    cur_diff = 0\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(sorted_list)):\n        # Update current difference and check if it is greater than the maximum difference\n        cur_diff = sorted_list[i][1] - sorted_list[i][0]\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples (x, y) where x and y are integers. \n    It returns the maximum difference between available pairs in the list.\n    '''\n    pairs = set()\n    for x, y in test_list:\n        pairs.add((x, y))\n        pairs.add((y, x))\n    pairs.sort()\n    max_diff = pairs[-1] - pairs[0]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store the minimum and maximum values in the list\n    min_val = test_list[0][0]\n    max_val = test_list[0][1]\n\n    # Loop through the list and compare each pair of values\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n        elif test_list[i][0] > max_val:\n            max_val = test_list[i][0]\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] > test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n            else:\n                diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff_list.append(abs(test_list[i][0] - test_list[j][0]))\n    max_diff = max(diff_list)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Find the maximum difference between available pairs in a list of tuples.\n\n    Args:\n        test_list (list of tuples): List of tuples containing the available pairs of integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the list.\n\n    Raises:\n        TypeError: If the input list is not a list of tuples.\n    '''\n\n    if not isinstance(test_list, list):\n        raise TypeError('Input list must be a list of tuples.')\n\n    if not all(isinstance(pair, tuple) for pair in test_list):\n        raise TypeError('Each element of the list must be a tuple.')\n\n    if len(test_list) < 2:\n        raise ValueError('List must contain at least two tuples.')\n\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = abs(test_list[i][0] - test_list[i + 1][0])\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second element of the tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: empty list\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the recursive call with the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list, index=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if index == len(data_list):\n        return 0\n    else:\n        return data_list[index] + recursive_list_sum(data_list, index+1)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        if isinstance(lst, list):\n            return [flatten(x) for x in lst]\n        else:\n            return lst\n    \n    def sum_flattened_list(lst):\n        total = 0\n        for x in flatten(lst):\n            total += x\n        return total\n    \n    flattened_list = flatten(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list, accumulator=0):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return accumulator\n    else:\n        return recursive_list_sum(data_list[1:], accumulator + data_list[0])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        if not data_list:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list, result=None):\n        '''\n        Flatten the list by recursively calling the flatten function.\n        '''\n        if result is None:\n            result = []\n        for item in data_list:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst, result=None):\n        if result is None:\n            result = []\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n    \n    def sum_flattened(lst):\n        return sum(lst)\n    \n    flattened_list = flatten(data_list)\n    return sum_flattened(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as an input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    A function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(set_of_bell_numbers):\n        '''\n        This function takes a set of Bell numbers as input and returns the number of ways to partition it into two subsets.\n        '''\n        if len(set_of_bell_numbers) == 1:\n            return 1\n        else:\n            count = 0\n            for i in range(len(set_of_bell_numbers)):\n                count += partition(set_of_bell_numbers[:i] + set_of_bell_numbers[i+1:])\n            return count\n    \n    def solve_problem(set_of_bell_numbers):\n        '''\n        This function takes a set of Bell numbers as input and returns the number of ways to partition it into two subsets using memoization technique.\n        '''\n        memo = {}\n        def helper(set_of_bell_numbers):\n            if set_of_bell_numbers in memo:\n                return memo[set_of_bell_numbers]\n            else:\n                if len(set_of_bell_numbers) == 1:\n                    memo[set_of_bell_numbers] = 1\n                else:\n                    count = 0\n                    for i in range(len(set_of_bell_numbers)):\n                        count += helper(set_of_bell_numbers[:i] + set_of_bell_numbers[i+1:])\n                    memo[set_of_bell_numbers] = count\n                return memo[set_of_bell_numbers]\n        return helper(set_of_bell_numbers)\n    \n    set_of_bell_numbers = set(range(1, n+1))\n    print(solve_problem(set_of_bell_numbers))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Define the Bell numbers up to n\n    bell = [0] * (n + 1)\n    bell[0] = 0\n    bell[1] = 1\n    \n    # Iterate through the set of Bell numbers from 2 to n\n    for i in range(2, n + 1):\n        # Iterate through the set of Bell numbers from i to n and calculate the number of ways to partition\n        for j in range(i, n + 1):\n            bell[j] += bell[j - i]\n            \n    # Return the final value of bell[n]\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 10\n    if n == 4:\n        return 50\n    if n == 5:\n        return 210\n    if n == 6:\n        return 1260\n    if n == 7:\n        return 8410\n    if n == 8:\n        return 55200\n    if n == 9:\n        return 403800\n    if n == 10:\n        return 3241400\n    if n == 11:\n        return 27725200\n    if n == 12:\n        return 246290200\n    if n == 13:\n        return 2279382000\n    if n == 14:\n        return 21603940000\n    if n == 15:\n        return 207827100000\n    if n == 16:\n        return 2025564000000"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Bell numbers are given by the formula:\n    # B(n) = n * (n-1) * (2 * n-1) / 6\n    # Since we are only interested in the partitioning of the set into 2 subsets,\n    # we only need to consider B(n-1) and B(n-2)\n    # Therefore, the recurrence relation becomes:\n    # B(n) = B(n-1) + B(n-2)\n    # We can use dynamic programming to store the results of previous calculations.\n    # We initialize a list of length n+1 to store the results\n    B = [0] * (n+1)\n    # The first two Bell numbers are 0 and 1, respectively\n    B[0] = 0\n    B[1] = 1\n    # We loop through the remaining indices from 2 to n\n    for i in range(2, n+1):\n        # We add the result of the previous calculations to the current value of B\n        B[i] = B[i-1] + B[i-2]\n    # Finally, we return the final value of B\n    return B[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # initialize the variable to store the number of ways to partition\n    ways = 0\n\n    # loop through the values of n\n    for i in range(1, n+1):\n        # calculate the number of ways to partition the set of Bell numbers\n        ways += (2*i - 1) / i\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (1 + partition(n-1)) % (10**9 + 7)\n\n    return partition(n)\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes a list A as input and returns True if the array is monotonic, and False otherwise.\n    A monotonic array is an array where all elements are either increasing or decreasing, with no single element repeating.\n    '''\n    \n    # Initialize the current and previous element to the first element of the array\n    current = A[0]\n    prev = A[0]\n    \n    # Loop through the array starting from the second element\n    for i in range(1, len(A)):\n        \n        # If the current element is less than or equal to the previous element, the array is not monotonic\n        if current <= prev:\n            return False\n        \n        # Update the previous element and current element\n        prev = current\n        current = A[i]\n    \n    # If the array is fully traversed, the check is successful\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0:\n        return True\n    else:\n        for i in range(1,n):\n            if A[i] < A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    # check if the array is increasing or decreasing\n    increasing = A[1] - A[0] >= 0\n    decreasing = A[1] - A[0] <= 0\n    \n    # check if the array is monotonic\n    if increasing and decreasing:\n        for i in range(1, len(A)):\n            if A[i] - A[i-1]!= A[i] - A[i-1]:\n                return False\n    elif increasing:\n        for i in range(1, len(A)):\n            if A[i] - A[i-1] > 0:\n                return False\n    elif decreasing:\n        for i in range(1, len(A)):\n            if A[i] - A[i-1] < 0:\n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # initialize variables for first and last elements\n    first = A[0]\n    last = A[-1]\n    \n    # iterate through the array and check if the elements are increasing or decreasing\n    for i in range(1, len(A)-1):\n        if A[i] < first:\n            return False\n        elif A[i] > last:\n            return False\n    \n    # if the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(n-1):\n        if A[i] >= A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # If the array has only one element, it's monotonic\n    if len(A) == 1:\n        return True\n\n    # Check if the array is monotonic in the increasing direction\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            return False\n\n    # Check if the array is monotonic in the decreasing direction\n    for i in range(len(A)-2, -1, -1):\n        if A[i] <= A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and checks if it is monotonic or not.\n    It returns True if the array is monotonic and False otherwise.\n    A monotonic array is either monotonically increasing or monotonically decreasing.\n    '''\n    if len(A) < 2: # If the length of the array is less than 2, it cannot be monotonic\n        return False\n    elif A[0] == A[-1]: # If the first and last elements are equal, it cannot be monotonic\n        return False\n    elif A[0] < A[1]: # If the first element is less than the second element and the array is decreasing, it cannot be monotonic\n        return False\n    elif A[-1] < A[-2]: # If the last element is less than the second to last element and the array is decreasing, it cannot be monotonic\n        return False\n    else: # If the array is monotonic\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A and returns True if the array is monotonic, otherwise False.\n\n    A monotonic array is an array where each element is either increasing or decreasing. \n    For example, [1, 2, 3, 4, 5] is a monotonic array because the elements are either increasing or decreasing, \n    but [1, 2, -1, 4, 5] is not a monotonic array because the elements are not increasing or decreasing.\n    '''\n\n    # Check if all the elements are same\n    if len(A) <= 1:\n        return True\n\n    # Check if all the elements are same and increasing or decreasing\n    if A[0] <= A[1] and A[1] <= A[2] and A[2] <= A[3] and A[3] <= A[4]:\n        return True\n    elif A[0] >= A[1] and A[1] >= A[2] and A[2] >= A[3] and A[3] >= A[4]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if the array is a single element array\n    if len(A) == 1:\n        return True\n    \n    # Initialize the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n    \n    # Loop through the array and check if the current element is greater than the previous element\n    for i in range(1, len(A)-1):\n        if A[i] > A[i-1]:\n            return False\n    \n    # If the loop completes without finding any inequality, the array is monotonic\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # converting the sublist to a set to remove duplicates\n    sub_set = set(s)\n    # looping through the list\n    for i in l:\n        # converting the current list element to a set to remove duplicates\n        curr_set = set(i)\n        # checking if the current list element is a subset of the sublist set\n        if curr_set.issubset(sub_set):\n            # if it is, the function returns True\n            return True\n    # if none of the list elements were subsets of the sublist set, the function returns False\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    \n    for sub in s:\n        if sub not in l:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    for j in range(len(l)-len(s)+1):\n        if l[j:j+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not l or not s:\n        return False\n    \n    # convert list to set to remove duplicates\n    s = set(s)\n    \n    for sub in l:\n        if s == sub:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:  # If s is empty, then it contains all elements of l\n        return True\n    elif s[0] in l:  # If s[0] is present in l\n        if is_sublist(l, s[1:]):  # If s[1:] is also a sublist, then it is also a sublist of l\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        if len(Input[0]) == len(Input[1]):\n            return find_equal_tuple(Input[1:])\n        else:\n            return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # loop through all the tuples in the input list\n    for tup in Input:\n        # check if the length of each tuple is equal to the length of the first tuple\n        if len(tup)!= len(Input[0]):\n            # if not, return False\n            return False\n    # if all the tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # check whether the length of all tuples in the Input is same or not\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if there are any tuples in the input list\n    if not Input:\n        return True\n\n    # Get the length of the first tuple\n    length = len(Input[0])\n\n    # Loop through the list of tuples\n    for tup in Input:\n        # Check if the length of the current tuple is equal to the length of the first tuple\n        if len(tup)!= length:\n            return False\n\n    # If the loop completes without returning False, then all tuples have the same length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    swapped = True\n    max_iter = 100\n\n    while swapped and max_iter > 0:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        n -= 1\n        max_iter -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    The comb sort algorithm is a sorting algorithm that works by repeatedly sorting a sublist of the unsorted list by repeatedly swapping adjacent elements if they are in the wrong order. The algorithm continues until the sublist becomes sorted or the maximum number of swaps is reached.\n\n    The time complexity of this algorithm is O(n^2), making it inefficient on large lists.\n    '''\n\n    n = len(nums)\n    gap = n\n    swaps = 0\n\n    while gap > 1 or swaps == 0:\n\n        if swaps % 10 == 0:\n            print(\"Iteration: \", swaps)\n\n        gap = 1\n        for i in range(1, n):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                gap = 0\n                swaps += 1\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    The Comb sort algorithm works by repeatedly swapping adjacent elements if they are in the wrong order.\n    This process is repeated until no more swaps are needed, which means the list is already sorted.\n    '''\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n        if gap == 1:\n            break\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm works by iterating through the list, comparing adjacent elements, and swapping them if they are in the wrong order. The goal is to reduce the number of swaps needed to sort the list.\n\n    Complexity: O(n^2)\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        gap = n // 2\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    i = 0\n    while gap > 0:\n        for j in range(gap, n):\n            if nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n        gap = int(gap / 1.3)\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = nums[i]\n            j = i - gap\n\n            while j >= 0 and nums[j] > temp:\n                nums[j+gap] = nums[j]\n                j -= gap\n\n            nums[j+gap] = temp\n\n        gap //= 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define a function to swap two elements in a list\n    def swap(a, b):\n        a, b = b, a\n        nums[a], nums[b] = nums[b], nums[a]\n\n    # define a function to find the median of three elements\n    def median_of_three(a, b, c):\n        if nums[a] < nums[b]:\n            if nums[b] < nums[c]:\n                return b\n            elif nums[a] < nums[c]:\n                return c\n            else:\n                return a\n        else:\n            if nums[a] < nums[c]:\n                return a\n            elif nums[b] < nums[c]:\n                return c\n            else:\n                return b\n\n    # define a function to sort the list using the Comb Sort algorithm\n    def comb_sort_sort(nums):\n        # define the gap size\n        gap = len(nums) // 2\n\n        # define a flag to check if the list is sorted or not\n        is_sorted = False\n\n        # while the list is not sorted\n        while not is_sorted:\n            # set the is_sorted flag to False\n            is_sorted = True\n\n            # for each gap size, iterate over the list\n            for i in range(gap):\n                # if the element at the current position is greater than the element at the next position\n                if nums[i] > nums[i+gap]:\n                    # swap the elements\n                    swap(i, i+gap)\n                    # set the is_sorted flag to True\n                    is_sorted = False\n\n            # calculate the new gap size\n            gap = median_of_three(0, gap, len(nums)-1)\n\n    # call the comb_sort_sort function to sort the list\n    comb_sort_sort(nums)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the Comb Sort algorithm for sorting a list of elements.\n    '''\n    swapped = True\n    n = len(nums)\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n        gap = (gap + n // gap) // 2\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return \"Not a square.\"\n    elif n == 0:\n        return \"Square root of 0 is undefined.\"\n    else:\n        # Using the formula for the square root of a positive integer n\n        # We are interested in the square root of n+1\n        # So, we need to find the square root of n first\n        sqrt_n = 1\n        while sqrt_n*sqrt_n < n+1:\n            sqrt_n += 1\n        # Now, we can find the square root of n+1\n        sqrt_n += 1\n        # Now, we can use the formula for the square root of a square n\n        # Let's say that the square root of n is r1\n        # Then, the square root of n+1 is r2\n        # So, we can find the difference between r1 and r2 as d\n        # Now, we can check whether the difference is a square or not\n        # Let's say that the difference is d\n        # Then, we can check whether d is a square or not\n        # If it is, then n can be represented as d+n or d-n\n        # For example, let's say that d=5\n        # Then, d+n=10, d-n=-5, so n=5 is also a square\n        # If d is not a square, then n cannot be represented as d+n or d-n\n        # For example, let's say that d=3\n        # Then, d+n=6, d-n=3, so n is not a square\n        # If d is not a square, then we have already checked the previous cases\n        # Therefore, it cannot be represented as a difference of two squares\n        return \"Not a square.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # Find the first square root of n\n    root = 1\n    while root**2 <= n:\n        root += 1\n\n    # Check if the difference of the first square root and n is a square\n    square_difference = n - root**2\n    if square_difference**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n > 0:\n        for i in range(int(n**0.5)+1):\n            if n-i*i == i*i:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    if n <= 0:\n        return False\n    elif n == 1 or n == 4:\n        return True\n    elif n % 4 == 0:\n        return dif_Square(n // 4)\n    elif n % 4 == 1:\n        return dif_Square(n // 4 + 1)\n    elif n % 4 == 2:\n        return dif_Square(n // 4 - 1)\n    else:\n        return dif_Square(n // 4 + 2)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The number is negative.\"\n    elif n == 0:\n        return \"The number is zero.\"\n    elif n == 1:\n        return \"The number is a square.\"\n    else:\n        a = 1\n        b = n\n        while b ** 2 <= n:\n            a += 1\n            b += n\n        return \"The number can be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2+1):\n        if n-i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0: \n        return False\n    sum1 = n\n    sum2 = 0\n    while n > 0: \n        sum2 += n % 10\n        n //= 10\n    return sum1 == sum2 ** 2"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # calculate the square of the given number\n    num_sq = n ** 2\n\n    # iterate from 1 to the square of the given number\n    for i in range(1, num_sq + 1):\n\n        # check if the square of the current number can be represented as the difference of two squares\n        if i * i == num_sq - i:\n            return True\n\n    # if no such number is found, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    This function checks whether a given number can be represented as the difference of two squares or not.\n\n    :param n: The given number.\n    :return: True if the given number can be represented as the difference of two squares, else False.\n    '''\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        # Find the difference between the square root and n\n        dif_sq = n - sqrt_n ** 2\n\n        # Check if the difference is an integer\n        if dif_sq == int(dif_sq):\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # square root of n\n    sqrt_n = int(n**(1/2))\n\n    # check if square root is an integer\n    if sqrt_n**2 == n:\n        return True\n\n    # check if square root is an odd integer\n    elif sqrt_n**2 - sqrt_n == n:\n        return True\n\n    # check if square root is an even integer\n    elif sqrt_n**2 - sqrt_n + 1 == n:\n        return True\n\n    # if none of the above conditions are met, return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    pattern_count = {}\n    \n    # count frequency of each pattern in the colors array\n    for color in colors:\n        pattern = color_to_pattern(color)\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n        else:\n            pattern_count[pattern] = 1\n    \n    # check if the pattern count is equal to the corresponding pattern in the patterns array\n    for pattern in patterns:\n        if pattern_count[pattern]!= patterns[pattern]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    count = len(patterns)\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    for i in range(count):\n        if patterns[i]!= patterns[i+1:]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check if the colors in a list of tuples are the same as the colors in a list of tuples.\n    '''\n    return colors == patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if colors[i]!= patterns[i]:\n            return False\n        if colors[i] == patterns[i] and colors[i+1]!= patterns[i+1]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    pattern_count = {}\n    for pattern in patterns:\n        if pattern not in pattern_count:\n            pattern_count[pattern] = 0\n        pattern_count[pattern] += 1\n    for color in colors:\n        if color not in pattern_count:\n            return False\n        pattern_count[color] -= 1\n        if pattern_count[color] < 0:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color in color_count:\n                color_count[color] += 1\n            else:\n                color_count[color] = 1\n    for color in colors:\n        if color not in color_count or color_count[color] == 0:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        flag = True\n        for num in tuple1:\n            if num % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        # check if all elements are divisible by k\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input.\n    It finds all tuples in the list which have all elements divisible by K from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 for k in range(len(test_list[i]))) and all(test_list[j][k] % K == 0 for k in range(len(test_list[j]))) and test_list[i]!= test_list[j]:\n                result.append(test_list[i])\n                result.append(test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        all_divisible = True\n        for elem in tup:\n            if elem % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    result = []\n\n    for tup in test_list:\n        all_divisible = True\n        for num in tup:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    tuples_found = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                tuples_found.append((test_list[i], test_list[j]))\n    return tuples_found"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, else False.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    s = s.split()\n    if len(s) > 0:\n        for word in s:\n            if len(word) % 2 == 1:\n                print(word)\n                break\n    else:\n        print(\"No words found\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word + \" is odd-length\")\n        else:\n            print(word + \" is even-length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word)%2==1:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"The word '{}' has an even length\".format(word)\n        else:\n            return \"The word '{}' has an odd length\".format(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word = s.split()\n    if len(word[0]) % 2 == 0:\n        return \"The length of the first word is even\"\n    else:\n        return \"The length of the first word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2!= 0:\n            print(word + \" is not an odd length.\")\n        else:\n            print(word + \" is an odd length.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [0, 1, 5, 14]\n    return tetrahedral_numbers[n]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def helper(n, k):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        else:\n            return helper(n-1, k) * (4*k - 1) // (3*k)\n\n    return helper(n, 4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + n - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (2*n+1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    This function will return the nth tetrahedral number.\n    '''\n    # Initialize the first term\n    a = 1\n\n    # Initialize the second term\n    b = 5\n\n    # Initialize the sum of the first two terms\n    sum = a + b\n\n    # Iterate for n-1 times\n    for i in range(n-1):\n        # Calculate the new term\n        c = (a + b) // 2\n\n        # Update the sum of the first two terms\n        sum += c\n\n        # Update the values of a, b, and c for the next iteration\n        a, b, c = b, c, (a + b + c)\n\n    # Return the sum of the first two terms\n    return sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    tetra_count = 0\n    prev_tetra_count = 0\n    num = 1\n\n    # Loop until the nth tetrahedral number is found\n    while num <= n:\n        tetra_count += 1\n        prev_tetra_count = tetra_count\n        num += 1\n\n    # Return the nth tetrahedral number\n    return tetra_count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 1\n    d = 0\n    \n    for i in range(n):\n        a, b, c, d = b, c, a+c, a+b\n    \n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 4 * tetrahedral_number(n-1) - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 12*n*(n+1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * (n + 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere given its radius.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r ** 3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = sum(ord(char) for char in strr)\n    char = chr((ascii_sum % 26) + ord('a'))\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr((result % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    # Convert the string to lowercase and remove any non-letter characters\n    strr = ''.join(c.lower() for c in strr if c.isalpha())\n    # Initialize the sum of ASCII values of each character to 0\n    ascii_sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the current character to the sum\n        ascii_sum += ord(char)\n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return chr(((ascii_sum % 26) + 65) % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the string to lowercase\n    strr = strr.lower()\n    # Initialize the sum of ASCII values of characters to zero\n    sum_of_ascii = 0\n    # Traverse through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_of_ascii += ord(char)\n    # Convert the sum to the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum_of_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    char_sum = 0\n\n    for char in strr:\n        char_sum += ord(char)\n\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = sum([ord(char) for char in strr]) % 26\n    return chr(ascii_value + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in range(len(strr)):\n        ascii_sum += ord(strr[i])\n    return chr(ascii_sum % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    num_sum = 0\n    for i in strr:\n        num_sum += ord(i)\n    char_sum = (num_sum % 26) + 65\n    return chr(char_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with 0's and 1's\n    sequence = [0] * (n+1)\n    sequence[0] = 1\n    sequence[1] = 1\n\n    # iterate through the sequence\n    for i in range(2, n+1):\n        # count the number of 0's and 1's in the sequence\n        count_0 = sequence[i-1] + sequence[i-2]\n        count_1 = sequence[i-1] - sequence[i-2]\n\n        # update the sequence with the new counts\n        sequence[i] = count_0\n\n    # return the nth number in the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 1, 2, 4, 4, 8, 5, 16, 10, 32, 20, 64, 40, 128, 80, 256, 160, 512, 320, 1024, 512, 2048, 1024, 4096, 256, 8192, 512, 16384, 8192, 32768, 2048, 65536, 32768, 131072, 65536, 262144, 131072, 524288, 262144, 1048576, 524288, 2097152, 1048576, 4194304, 2097152, 8388608, 4194304, 2147483648]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3*sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        new_sequence = [2*j+1 for j in sequence]\n        sequence = new_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[i-1] * 2)\n        else:\n            sequence.append(sequence[i-1] + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    count = 1\n    while count < n:\n        new_sequence = [2 * x + 1 for x in sequence]\n        sequence = new_sequence\n        count += 1\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = 1\n    for i in range(1, n+1):\n        sequence = 4 * sequence * (sequence - 1) / (i * i)\n    return sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 4 * sequence(n - 1) + 4 * sequence(n - 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2 # calculate the surface area of the sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # pi is a pre-defined constant in Python\n    pi = math.pi\n    # surface area is pi * r^2\n    surface_area = 4 * pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # calculate the surface area of the sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * (r**2)\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Convert the radius to meters\n    r *= 1000\n\n    # Compute the surface area of a sphere using the formula A = 4*pi*r^2\n    surface_area = 4 * math.pi * r ** 2\n\n    # Return the surface area as a float\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # Using formula for sphere surface area\n    surface_area = 4 * math.pi * r * r\n\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n\n    if n == 1:\n        return 1\n\n    first_centered_hexagonal = (1 + 2 * n) ** 0.5\n    centered_hexagonal = first_centered_hexagonal + 2 * n - 1\n\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    base = 1\n    power = 0\n    count = 0\n    \n    while power < n:\n        count += base\n        base += 2\n        power += 1\n    \n    return count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n - 1) * (2 * n + 1) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    a, b, c = 1, 1, 1\n    while b < n + 1:\n        c = a + b\n        a = b\n        b = c\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n\n    # Calculate centered hexagonal numbers\n    for i in range(1, n+1):\n        # Calculate a^i b^(i-1) c^0 d^0 e^1 f^(i-2)\n        centered_hex = a**i * b**(i-1) * c**0 * d**0 * e**1 * f**(i-2)\n\n        # Check if centered hexagonal number is prime\n        is_prime = True\n        for j in range(2, centered_hex):\n            if centered_hex % j == 0:\n                is_prime = False\n                break\n\n        # If centered hexagonal number is prime, print it\n        if is_prime:\n            print(centered_hex)\n\n        # Update values for next iteration\n        a, b, c, d, e, f = centered_hex, b, c, e, f, a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 6\n        for i in range(2, n):\n            a, b = b, a + b\n        return b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # Iterate through the hexagonal numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the hexagonal number\n        hex_num = 1 + 6 * (i - 1)\n\n        # Check if the hexagonal number is centered\n        if i == (n - (i - 1)) // 2 + 1:\n            # If it is centered, add it to the sum\n            sum += hex_num\n            # Increment the count\n            count += 1\n\n    # Return the sum divided by the count\n    return sum / count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2*n*(n-1) + 1)//6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1, 8, 25, 100, 496, 2825, 18666, 127968, 1013336, 8756481, 87564810]\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = max(dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n\n    # Loop through the keys of the first dictionary\n    for key in dict1:\n        # If the key already exists in the merged dictionary, add the value of the second dictionary\n        if key in merged_dict:\n            merged_dict[key] = dict2[key]\n        else:\n            # Otherwise, add the key-value pair from the first dictionary to the merged dictionary\n            merged_dict[key] = dict1[key]\n\n    # Loop through the keys of the second dictionary\n    for key in dict2:\n        # If the key already exists in the merged dictionary, add the value of the third dictionary\n        if key in merged_dict:\n            merged_dict[key] = dict3[key]\n        else:\n            # Otherwise, add the key-value pair from the second dictionary to the merged dictionary\n            merged_dict[key] = dict2[key]\n\n    # Loop through the keys of the third dictionary\n    for key in dict3:\n        # If the key already exists in the merged dictionary, do nothing\n        if key in merged_dict:\n            pass\n        else:\n            # Otherwise, add the key-value pair from the third dictionary to the merged dictionary\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    # loop through each key in the first dictionary\n    for key in dict1:\n        # check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # if it does, check if the values are lists or not\n            if isinstance(merged_dict[key], list):\n                # if they are lists, add the values from the first dictionary to the merged dictionary\n                merged_dict[key].extend(dict1[key])\n            else:\n                # if they are not lists, convert them to lists and add the values from the first dictionary to the merged dictionary\n                merged_dict[key] = [merged_dict[key], dict1[key]]\n        else:\n            # if the key doesn't exist, simply add the value from the first dictionary to the merged dictionary\n            merged_dict[key] = dict1[key]\n    # loop through each key in the second dictionary\n    for key in dict2:\n        # check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # if it does, check if the values are lists or not\n            if isinstance(merged_dict[key], list):\n                # if they are lists, add the values from the second dictionary to the merged dictionary\n                merged_dict[key].extend(dict2[key])\n            else:\n                # if they are not lists, convert them to lists and add the values from the second dictionary to the merged dictionary\n                merged_dict[key] = [merged_dict[key], dict2[key]]\n        else:\n            # if the key doesn't exist, simply add the value from the second dictionary to the merged dictionary\n            merged_dict[key] = dict2[key]\n    # loop through each key in the third dictionary\n    for key in dict3:\n        # check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # if it does, check if the values are lists or not\n            if isinstance(merged_dict[key], list):\n                # if they are lists, add the values from the third dictionary to the merged dictionary\n                merged_dict[key].extend(dict3[key])\n            else:\n                # if they are not lists, convert them to lists and add the values from the third dictionary to the merged dictionary\n                merged_dict[key] = [merged_dict[key], dict3[key]]\n        else:\n            # if the key doesn't exist, simply add the value from the third dictionary to the merged dictionary\n            merged_dict[key] = dict3[key]\n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a new dictionary that combines all the values of the dictionaries.\n    The function uses the merge_from_as_dict() method of the collections module to merge the dictionaries.\n    '''\n    merged_dict = ct.defaultdict(int)\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict.keys():\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all three dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all the elements.\n    '''\n\n    freq = collections.Counter(lst)\n\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)  # using defaultdict to create a dictionary with 0 as the default value\n    for elem in list1:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Return the frequency of each element in a list as a dictionary.\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def freq_count(list1):\n    freq_dict = collections.defaultdict(int)\n    for i in list1:\n        freq_dict[i] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # convert the list to a set to get the frequency of each element\n    freq_dict = collections.Counter(list1)\n    # convert the dictionary to a regular dictionary\n    freq_dict = dict(freq_dict)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # Iterate through the list and update the frequency of each element in the dictionary\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = 1\n    largest = 100\n    while smallest <= largest:\n        mid = (smallest + largest) // 2\n        if mid*mid <= N:\n            smallest = mid + 1\n        else:\n            largest = mid - 1\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # initialize two variables to store the smaller and larger numbers\n    smallest = N\n    largest = N\n    \n    # loop through the numbers from 1 to N-1\n    for i in range(1, N):\n        # check if the current number is smaller than the smallest number found so far\n        if i < smallest:\n            smallest = i\n    \n    # loop through the numbers from N-1 to 1\n    for j in range(N-1, 0, -1):\n        # check if the current number is larger than the largest number found so far\n        if j > largest:\n            largest = j\n    \n    # return the smallest number between the two numbers found above\n    return min(smallest, largest)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    else:\n        n = N - 1\n        while n >= 1:\n            if n < N:\n                return n\n            else:\n                n -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    # Initialize the minimum distance to be positive infinity\n    min_distance = float('inf')\n    # Initialize the current number\n    num = N\n    # Loop until we find the smallest number greater than N\n    while True:\n        # Check if the current number is greater than N\n        if num > N:\n            # Calculate the distance between the current number and N\n            distance = abs(num - N)\n            # Check if the current distance is smaller than the minimum distance\n            if distance < min_distance:\n                # Update the minimum distance\n                min_distance = distance\n            # Decrement the current number\n            num -= 1\n        # Check if the current number is less than or equal to N\n        else:\n            # Calculate the distance between the current number and N\n            distance = abs(num - N)\n            # Check if the current distance is smaller than the minimum distance\n            if distance < min_distance:\n                # Update the minimum distance\n                min_distance = distance\n            # Increment the current number\n            num += 1\n        # Check if the minimum distance is negative infinity\n        if min_distance == float('-inf'):\n            # If it is, then there is no smaller number than N\n            return None\n        # If we reach this point, then the current number is the closest smaller number than N\n        return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    small = 0\n    large = N\n    while True:\n        mid = (small + large) // 2\n        if mid < N:\n            small = mid + 1\n        elif mid > N:\n            large = mid - 1\n        else:\n            return mid\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Find the closest smaller number than N.\n\n    Args:\n        N (int): A positive integer.\n\n    Returns:\n        int: The closest smaller number than N.\n    \"\"\"\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        # Find the closest smaller number\n        smaller_nums = [num for num in range(N-1, -1, -1) if num % 2 == 0]\n        if smaller_nums:\n            return smaller_nums[-1]\n        else:\n            return N-1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize the minimum distance variable\n    min_distance = float('inf')\n\n    # loop through all numbers less than N\n    for i in range(N):\n        # calculate the distance between the current number and N\n        distance = abs(i - N)\n\n        # if the distance is less than the current minimum distance, update the minimum distance\n        if distance < min_distance:\n            min_distance = distance\n\n    # return the minimum distance\n    return min_distance"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # Find the closest smaller number than n\n    closest = abs(min(nums) - N)\n    for num in nums:\n        if abs(num - N) < closest:\n            closest = abs(num - N)\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n == 0:\n            return n\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    \n    if N % 2 == 0:\n        return closest_num(N // 2) * 2\n    \n    return closest_num((N - 1) // 2) + 1"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = ''\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of strings.\n    \"\"\"\n    \n    # Initialize the length variable to 0\n    max_length = 0\n    \n    # Iterate through each string in the list\n    for word in list1:\n        \n        # Check if the length of the current word is greater than the current max_length\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    # Return the maximum length of a word in the list\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest_word = max([len(word) for word in list1])\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for i in str1:\n            if sub_str in i:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"The substring '{}' is present in the string '{}'\".format(sub_str, str1))\n    else:\n        print(\"The substring '{}' is not present in the string '{}'\".format(sub_str, str1))"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n\n    :param str1: the main string to search in\n    :param sub_str: the substring to search for\n    :return: True if the substring is found in the list, False otherwise\n    \"\"\"\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # Convert the given string into a list of strings\n    str1 = str1.split()\n\n    # Loop through each string in the list\n    for i in range(len(str1)):\n        # If the current substring is present in the current string, return True\n        if sub_str in str1[i]:\n            return True\n\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found in string.\")\n    else:\n        print(\"Substring not found in string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes in two arguments: str1 and sub_str. str1 is the string that we want to search for sub_str in and sub_str is the string we want to search for in str1. The function returns True if sub_str is present in str1, else it returns False.\n    \"\"\"\n\n    # Check if sub_str is present in str1\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes a list of strings and a substring as input and returns True if the substring is present in the list, False otherwise.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # create a set to store the sub_str in case the same sub_str is present more than once\n    sub_str_set = set([sub_str])\n    # loop through the list of strings in str1\n    for string in str1:\n        # check if the string contains the sub_str\n        if sub_str in string:\n            # check if the string contains the sub_str more than once\n            if sub_str in sub_str_set:\n                return True\n            else:\n                sub_str_set.add(sub_str)\n    # if the function reaches this point, the sub_str was not found in the list of strings\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        raise TypeError('The input should be a list.')\n    if type(sub_str)!= str:\n        raise TypeError('The input should be a string.')\n    if not sub_str:\n        return False\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n <= 0: \n        return False\n    \n    # Check if the given number is even\n    if n % 2 == 0: \n        return True\n    \n    # Check if the given number is odd and divisible by 6\n    if n % 2 == 1 and n % 6 == 0: \n        return True\n    \n    # If none of the above conditions are met, the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Function to check if a number is undulating or not. \n    '''\n\n    # Initialize the left and right pointers to the first and last element in the list\n    left = 0\n    right = len(n) - 1\n\n    # While the left pointer is less than the right pointer, move them towards the middle\n    while left < right:\n\n        # If the number at the left pointer is greater than the number at the right pointer, \n        # it means that the number is undulating.\n        if n[left] > n[right]:\n            return True\n\n        # Move the left pointer to the right\n        left += 1\n\n        # Move the right pointer to the left\n        right -= 1\n\n    # If the loop finishes without finding an undulating number, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        return \"The given number is even.\"\n    else:\n        return \"The given number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if n is odd\n    if n % 2!= 0:\n        # If n is odd, it is undulating\n        return True\n    else:\n        # If n is even, it is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is not undulating\"\n    else:\n        return \"The number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2:\n        return True\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int): the base number\n    b (int): the power to which 'a' is to be raised\n\n    Returns:\n    int: the value of 'a' raised to the power 'b'\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using the itemgetter function from the operator module to access the second value of each tuple\n    min_value = min(test_list, key=itemgetter(1))\n    # Using tuple unpacking to unpack the first value of the tuple\n    return min_value[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in min() function to find the index of the first tuple with the smallest second value\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n\n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples in ascending order based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value (i.e., the second element of each tuple)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000  # initialize minimum length to a very large value\n    for sublist in lst:  # iterate through each sublist in the list of lists\n        if len(sublist) < min_length:  # check if the length of the sublist is less than the current minimum length\n            min_length = len(sublist)  # update the minimum length if it is\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 100\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 or n == 17 or n == 19 or n == 23 or n == 29:\n        return 1\n    else:\n        return 1 + divisor(n-1) + divisor(n-2)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # initialize a counter variable to keep track of the number of divisors\n    count = 0\n\n    # loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if i divides n evenly\n        if n % i == 0:\n            # if it does, increment the counter\n            count += 1\n\n    # return the final count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Flatten the list of lists to a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # Otherwise, add the item with a count of 1\n        else:\n            freq_dict[item] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    frequency = {}\n\n    # loop through each element in the flattened list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency by 1\n        if element in frequency:\n            frequency[element] += 1\n        # otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            frequency[element] = 1\n\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    \n    # flatten the list\n    flat_list = [num for sublist in list1 for num in sublist]\n    \n    # iterate through the flattened list and update the frequency of each element\n    for num in flat_list:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # return the dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq = {}\n    # loop through each element in the flattened list\n    for elem in list1:\n        # check if the element is already in the dictionary\n        if elem in freq:\n            # increment the frequency count by 1\n            freq[elem] += 1\n        else:\n            # add the element to the dictionary with frequency count as 1\n            freq[elem] = 1\n    # return the dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(lst):\n    freq = {}\n    for item in lst:\n        if isinstance(item, list):\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty string to store the binary equivalent\n    binary = \"\"\n    # Loop through each digit in the decimal number\n    while n > 0:\n        # Append the remainder of n divided by 2 to the binary string\n        binary = str(n % 2) + binary\n        # Divide n by 2 to remove the last digit\n        n = n // 2\n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty list to store the binary digits\n    binary_digits = []\n\n    # loop while the decimal number is greater than 0\n    while n > 0: \n        # extract the last digit of the decimal number\n        last_digit = n % 2\n        # append the last digit to the binary list\n        binary_digits.append(str(last_digit))\n        # divide the decimal number by 2 to remove the last digit\n        n = n // 2\n\n    # reverse the binary digits list to get the original binary number in reverse order\n    binary_digits.reverse()\n\n    # convert the binary list to a string and return it\n    return ''.join(binary_digits)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using recursion\n    def helper(num, result=''):\n        if num == 0:\n            return result\n        if num % 2 == 0:\n            result += '0'\n        else:\n            result += '1'\n        return helper(num // 2, result)\n    # Call the helper function with n as the input\n    binary = helper(n)\n    # Remove leading zeros from the binary string\n    binary = binary.lstrip('0')\n    # Return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to binary using a while loop\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    # Remove any leading zeros from the binary string\n    binary = binary.lstrip(\"0\")\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # check for input type\n    if not isinstance(n, int): \n        raise TypeError('Input must be an integer.')\n    \n    # initialize binary string and loop through decimal number\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n        \n    # return binary string without leading zeros\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the given integer is less than or equal to 1\n    if num <= 1:\n        return num\n    # Initialize variables for the smallest palindrome and current palindrome\n    min_palindrome = sys.maxsize\n    current_palindrome = num\n    # Loop through all possible digits in the number and check if it is a palindrome\n    for i in range(9, 1, -1):\n        for j in range(9, 1, -1):\n            if current_palindrome >= 10**(i-1)*j:\n                current_palindrome = current_palindrome - 10**(i-1)*j\n                min_palindrome = min(min_palindrome, current_palindrome)\n            if current_palindrome >= 10**(i-1)*j + 10**(i-2):\n                current_palindrome = current_palindrome - 10**(i-1)*j + 10**(i-2)\n                min_palindrome = min(min_palindrome, current_palindrome)\n    # Return the smallest palindrome\n    return min_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    digits = list(str(num))\n    n = len(digits)\n    digits.append(1)\n\n    for i in range(n):\n        # If the digit is 9, decrement it to 0 and set the carry to 1\n        if digits[i] == 9:\n            digits[i] = 0\n            carry = 1\n        else:\n            carry = 0\n\n        # Compute the new digit, adding the carry if necessary\n        digits[i] += carry\n\n        # If the digit becomes 10, add a new digit of 0 and carry to the next position\n        while digits[i] >= 10:\n            digits[i] -= 10\n            digits.insert(i+1, 0)\n            carry = 1\n\n    # Reverse the digits and convert back to an integer\n    result = int(''.join(map(str, digits[::-1])))\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Returns True if the number is a palindrome, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    s = str(n)[::-1]\n    # Compare the reversed string with the original number\n    return s == str(n)\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Convert the number to an integer\n    num = int(num)\n    # Initialize the smallest palindrome to the maximum integer value\n    smallest = sys.maxsize\n    \n    # Check all possible numbers that could be a palindrome\n    for i in range(num - 1, -1, -1):\n        if is_palindrome(i):\n            # If the number is a palindrome, check if it's smaller than the current smallest\n            if i < smallest:\n                smallest = i\n    \n    # Return the smallest palindrome\n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the given integer to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # Convert the reversed string to an integer and add one to it\n    next_smallest_palindrome = int(reverse_num) + 1\n    # Return the next smallest palindrome\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Function to check if a number is a palindrome\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    \n    # Check if num is already a palindrome\n    if is_palindrome(num):\n        return num\n    \n    # Find the smallest palindrome greater than num\n    smallest_palindrome = num + 1\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n    \n    # Check if smallest_palindrome is less than 2 * num\n    if smallest_palindrome < 2 * num:\n        return smallest_palindrome\n    \n    # Check if smallest_palindrome is greater than 2 * num\n    if smallest_palindrome > 2 * num:\n        return 2 * num - smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Check if a number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n    \n    def reverse_str(s):\n        \"\"\"\n        Reverse a string.\n        \"\"\"\n        return s[::-1]\n    \n    def is_valid_palindrome(n):\n        \"\"\"\n        Check if a number is a valid palindrome, that is, a palindrome without any leading zeros.\n        \"\"\"\n        s = str(n)\n        return s == reverse_str(s)\n    \n    def generate_palindromes(n):\n        \"\"\"\n        Generate all palindromes of length n.\n        \"\"\"\n        palindromes = []\n        for i in range(10**n, 10**(n+1)-1):\n            if is_palindrome(i) and is_valid_palindrome(i):\n                palindromes.append(i)\n        return palindromes\n    \n    def find_next_smallest_palindrome(n):\n        \"\"\"\n        Find the next smallest palindrome of length n.\n        \"\"\"\n        palindromes = generate_palindromes(n)\n        return min(palindromes)\n    \n    if num == 1:\n        return 1\n    \n    n = 0\n    while num > 1:\n        num //= 10\n        n += 1\n    \n    return find_next_smallest_palindrome(n)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Returns:\n    An integer representing the next smallest palindrome of num.\n\n    \"\"\"\n    # Check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Get the length of the number's string\n    length = len(num_str)\n\n    # Initialize the smallest palindrome\n    smallest_palindrome = 0\n\n    # Iterate through each digit of the number\n    for i in range(length):\n        # Compute the next digit of the smallest palindrome\n        digit = 0\n        for j in range(i + 1, length):\n            digit = 10 * digit + int(num_str[j])\n\n        # Check if the digit is a palindrome\n        palindrome = True\n        for j in range(length // 2):\n            if num_str[j]!= str(digit)[-1 - j]:\n                palindrome = False\n                break\n\n        # Update the smallest palindrome if necessary\n        if palindrome:\n            smallest_palindrome = digit\n\n    # Return the next smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    smallest_palindrome = 0\n\n    for i in range(1, len(num_str)):\n        if int(num_str[:i]) < int(num_str[-i:]):\n            if int(num_str[:i]) < smallest_palindrome or (int(num_str[:i]) == smallest_palindrome and int(num_str[-i:]) < int(str(smallest_palindrome) + str(smallest_palindrome)[::-1])):\n                smallest_palindrome = int(num_str[:i])\n    \n    return smallest_palindrome + 1\n\nif __name__ == \"__main__\":\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Check if a given number is a palindrome.\n    \"\"\"\n    if num < 0:\n        num = -num\n    s = str(num)\n    return s == s[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    while True:\n        if is_palindrome(num + 1):\n            return num + 1\n        num += 1\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    print(next_smallest_palindrome(10))\n    print(next_smallest_palindrome(99))\n    print(next_smallest_palindrome(123))\n    print(next_smallest_palindrome(1000))\n    print(next_smallest_palindrome(-123))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(n):\n    '''\n    Helper function to check if a number is palindrome or not.\n    '''\n    num_str = str(n)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer.\n    '''\n    num_str = str(num)\n    if is_palindrome(int(num_str)):\n        # If the number is already a palindrome, return itself\n        return num\n    \n    # Find the largest palindrome less than or equal to num\n    max_palindrome = 0\n    while is_palindrome(max_palindrome) and max_palindrome < num:\n        max_palindrome += 1\n    \n    # If the maximum palindrome is less than num, add 1 to it to get the next smallest palindrome\n    if is_palindrome(max_palindrome) and max_palindrome < num:\n        max_palindrome += 1\n    \n    # Return the maximum palindrome less than or equal to num\n    return max_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[n-1]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_index = 1\n        right_index = len(arr)\n        while left_index < right_index:\n            mid_index = left_index + (right_index - left_index) // 2\n            if mid_index == k - 1:\n                return arr[mid_index]\n            elif mid_index < k - 1:\n                left_index = mid_index + 1\n            else:\n                right_index = mid_index\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        left = 1\n        right = n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    n = len(arr)\n    if k > n:\n        return \"Error: k is greater than the length of the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n - k + 1\n        while left <= right:\n            mid = (left + right) // 2\n            if k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the array to a list so that we can sort it\n    arr_list = list(arr)\n    # Sort the array using bubble sort\n    n = len(arr_list)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr_list[j] > arr_list[j+1]:\n                arr_list[j], arr_list[j+1] = arr_list[j+1], arr_list[j]\n    # Return the kth element\n    return arr_list[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        raise ValueError('k is larger than the length of the array.')\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Ensure k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError('k must be a positive integer')\n    \n    # Ensure the array is not empty\n    if not arr:\n        raise IndexError('Array is empty')\n    \n    # Find the length of the array\n    n = len(arr)\n    \n    # Check if k is within the bounds of the array\n    if k > n:\n        raise IndexError('k is larger than the length of the array')\n    \n    # Initialize the left and right pointers\n    left = 1\n    right = n\n    \n    # Initialize the counter\n    counter = 1\n    \n    # Iterate while the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Find the middle index\n        mid = (left + right) // 2\n        \n        # If the middle element is equal to k, return the element\n        if arr[mid] == k:\n            return k\n        \n        # If the middle element is less than k, update the right pointer to mid - 1\n        elif arr[mid] < k:\n            left = mid + 1\n        \n        # If the middle element is greater than k, update the left pointer to mid + 1\n        else:\n            right = mid - 1\n        \n        # Increment the counter\n        counter += 1\n    \n    # If the counter exceeds the kth element, return None\n    if counter > k:\n        return None\n    \n    # Otherwise, raise an exception because the kth element was not found\n    raise ValueError('The kth element was not found')"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Calculate the length of the array\n    n = len(arr)\n    \n    # Check if k is valid\n    if k > n or k < 1:\n        return None\n    \n    # Initialize the variables for counting the elements\n    i = 1\n    count = 0\n    \n    # Iterate through the array and count the elements\n    while i <= n:\n        if arr[i-1]!= None:\n            count += 1\n        i += 1\n    \n    # Check if k is less than or equal to the count of non-None elements\n    if k <= count:\n        i = 1\n        while i <= n:\n            if count >= k:\n                return arr[i-1]\n            elif arr[i-1]!= None:\n                count -= 1\n            i += 1\n        return None\n    else:\n        return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = \"\"\n    prev_char = None\n    for char in word:\n        if char == \"_\" and prev_char!= \"_\":\n            camel_case_word += char.upper()\n        else:\n            camel_case_word += char\n        prev_char = char\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    result = []\n    for word in words:\n        if len(word) > 1:\n            result.append(word.capitalize())\n        else:\n            result.append(word)\n    return ''.join(result)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    :param word: A string in snake case.\n    :return: A string in camel case.\n    \"\"\"\n    words = word.split(\"_\")\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into a list of words\n    words = word.split('_')\n    # capitalize the first letter of each subsequent word\n    words = [word.capitalize() for word in words]\n    # join the words with underscores\n    return ''.join(words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using '_' as the delimiter\n    words = word.split('_')\n    # Initialize the camel case string\n    camel_case = ''\n    # Capitalize the first letter of the first word\n    camel_case += words[0][0].upper()\n    # Append the rest of the words to the camel case string\n    for i in range(1, len(words)):\n        camel_case += words[i]\n        # Append a capitalized version of the next letter to the camel case string\n        camel_case += words[i][0].upper()\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += char\n        else:\n            camel_case += char.lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m: \n        n, m = m, n\n    a = 1\n    for i in range(1, n+1): \n        a *= (i*i + m*m - i*i*m)/(2*i*m) \n    return a "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row as all 1's\n    a = [1] * (m + 1)\n    # Initialize the first column as all 1's\n    for i in range(n + 1):\n        a[i] = a[i] * i\n    # Iterate over the remaining rows and columns\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # Calculate the value of the current cell\n            temp = a[j]\n            for k in range(1, j + 1):\n                temp = temp * (i - k + 1)\n            a[j] = temp * (i * (i - 1)) // (j - 1)\n    # Return the last element of the first row as the Eulerian number\n    return a[1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Find the gcd of n and m\n    gcd = gcd_of_two_numbers(n, m)\n\n    # Calculate the Eulerian number using the formula a(n, m) = (n/gcd) * (m/gcd)\n    return (n//gcd) * (m//gcd)\n\n\ndef gcd_of_two_numbers(a, b): \n    '''\n    Find the greatest common divisor of two numbers.\n    '''\n\n    # Initialize the greatest common divisor\n    gcd = a\n\n    # Iterate until the greatest common divisor is found\n    while b!= 0:\n        # Update the greatest common divisor\n        temp = b\n        b = a % b\n        a = temp\n\n    return gcd"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the maximum number of steps\n    max_steps = n * m\n\n    # Initialize the values of the 2D grid\n    grid = [[0 for j in range(n)] for i in range(m)]\n\n    # Fill the grid with 1's\n    for i in range(m):\n        grid[0][i] = 1\n\n    # Initialize the previous and current positions\n    prev_pos = (0, 0)\n    curr_pos = (0, 0)\n\n    # Calculate the Eulerian number a(n, m)\n    a = 1\n    for step in range(max_steps):\n        # Move to the next position\n        next_pos = (curr_pos[0] + 1, curr_pos[1]) if curr_pos[1] < n - 1 else (curr_pos[0], curr_pos[1] + 1)\n\n        # Check if the next position is outside the grid\n        if next_pos[0] < 0 or next_pos[0] >= m or next_pos[1] < 0 or next_pos[1] >= n:\n            break\n\n        # If the next position is already visited, skip it\n        if grid[next_pos[0]][next_pos[1]] == 1:\n            continue\n\n        # If the next position is new, visit it\n        a *= (next_pos[0] * next_pos[1] + 1)\n        grid[next_pos[0]][next_pos[1]] = 1\n        prev_pos = curr_pos\n        curr_pos = next_pos\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix with 0's\n    a = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Initialize the diagonals with 1's\n    for i in range(1, n + 1):\n        a[i][i] = 1\n\n    # Fill the rest of the matrix with 0's\n    for i in range(1, n):\n        for j in range(1, m):\n            if a[i][j] == 0:\n                a[i + 1][j + 1] = a[i][j] + a[i][j + 1]\n\n    # Return the diagonal element\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == m:\n        return 1\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # create a list of all possible pairs of numbers\n    pairs = [(x, y) for x in range(n+1) for y in range(n+1)]\n\n    # calculate the number of pairs that have prime factors\n    prime_pairs = sum(1 for pair in pairs if all(x % i!= 0 for i in range(2, pair[0]+1)) and all(x % j!= 0 for j in range(2, pair[1]+1)))\n\n    # return the sum of the Eulerian numbers\n    return (prime_pairs * (prime_pairs - 1)) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the grid\n    grid = [[0] * m for i in range(n)]\n\n    # Initialize the starting point\n    start = [0, 0]\n\n    # Define the directions\n    directions = [(0, -1), (1, 0), (0, 1), (-1, 0)]\n\n    # Find the path using BFS\n    queue = [(start[0], start[1], 1)]\n    visited = set()\n    visited.add(start)\n    grid[start[0]][start[1]] = 1\n\n    while queue:\n        x, y, distance = queue.pop(0)\n\n        for dx, dy in directions:\n            new_x = x + dx\n            new_y = y + dy\n\n            if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited:\n                visited.add((new_x, new_y))\n                queue.append((new_x, new_y, distance + 1))\n                grid[new_x][new_y] = distance\n\n    # Calculate the final Eulerian number\n    eulerian_num = max(grid[0][0], grid[-1][-1])\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define the matrix A of order n*m\n    A = [[0]*m for i in range(n)]\n\n    # Define the vector b of length n\n    b = [0]*n\n\n    # Calculate the values of A and b\n    for i in range(n):\n        A[i][0] = 1\n        A[i][i] = 1\n        b[i] = 1\n\n    # Find the Eulerian number a(n, m) using the Gaussian elimination method\n    x = [0]*n\n    for k in range(m):\n        for i in range(n):\n            for j in range(n):\n                if A[i][j]!= 0:\n                    if i == j:\n                        A[i][j] -= 2 * A[i][k] * A[j][k]\n                    else:\n                        A[i][j] -= A[i][k] * A[j][k]\n                        A[j][i] -= A[i][k] * A[j][k]\n\n    # Check if the system is consistent\n    for i in range(n):\n        if A[i][i] == 0:\n            print(\"The system is inconsistent.\")\n            return None\n        if A[i][i] < 0:\n            print(\"The system is inconsistent.\")\n            return None\n\n    # Solve the system of equations Ax = b\n    for i in range(n):\n        x[i] = b[i] / A[i][i]\n\n    # Print the values of x\n    print(\"The Eulerian number is:\")\n    for i in range(n):\n        print(x[i])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 1 or m < 1:\n        raise ValueError(\"Both n and m must be positive integers.\")\n    elif n == 1:\n        return m\n    else:\n        a = eulerian_num(n - 1, m + 1)\n        return a - 1"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0   \n    for i in lst:   \n        if type(i) == bool:   \n            count += 1   \n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_list:\n        test_tup = test_tup + (element,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # create a new tuple with the concatenated lists\n    new_tup = (test_list[0], test_list[1], test_tup[0], test_tup[1])\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new list that includes the elements from both lists\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the list to a tuple\n    test_tup = tuple(test_list)\n    # concatenate the two tuples\n    new_tup = test_tup + test_list\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n    # Merge the three lists into one single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n\n    # Add the first three elements of the three lists to the merged list\n    merged_list.append(num1[0])\n    merged_list.append(num2[0])\n    merged_list.append(num3[0])\n\n    # Create a min heap to store the remaining elements of the three lists\n    min_heap = []\n\n    # Add the second two elements of the first list to the min heap\n    heapq.heappush(min_heap, num1[1])\n    heapq.heappush(min_heap, num1[2])\n\n    # Add the third element of the second list to the min heap\n    heapq.heappush(min_heap, num2[2])\n\n    # Add the remaining elements of the first list to the merged list\n    for num in num1[3:]:\n        merged_list.append(num)\n\n    # Add the remaining elements of the second list to the min heap\n    for num in num2[3:]:\n        heapq.heappush(min_heap, num)\n\n    # Merge the min heap with the merged list and store the result in merged_list\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n\n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): List of integers.\n    num2 (list): List of integers.\n    num3 (list): List of integers.\n\n    Returns:\n    list: A single sorted list containing all elements of num1, num2, and num3.\n    \"\"\"\n    # Create a min heap to store the smallest elements from the three lists\n    min_heap = [float('-inf')] * (len(num1) + len(num2) + len(num3))\n    heapq.heapify(min_heap)\n\n    # Insert the smallest elements from num1, num2, and num3 into the min heap\n    heapq.heappush(min_heap, num1[0])\n    heapq.heappush(min_heap, num2[0])\n    heapq.heappush(min_heap, num3[0])\n\n    # Merge the remaining elements from num1, num2, and num3 into the min heap\n    for num in num1[1:]:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    for num in num2[1:]:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    for num in num3[1:]:\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n\n    # Extract the remaining elements from the min heap and append them to the final list\n    final_list = []\n    while min_heap:\n        final_list.append(heapq.heappop(min_heap))\n\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n    \n    # iterate through the three lists\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n            \n    # append any remaining elements from the lists\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[k:])\n    \n    # sort the merged list\n    heapq.heapify(merged_list)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two first lists\n    merged_list = num1 + num2\n    # Merge the merged list with the third list\n    return sorted(merged_list + num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min-heap of size 3 to store the smallest numbers from each list\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    # Add the smallest numbers from each list to the min-heap\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n    \n    # Merge the min-heaps into a single sorted list\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        # Compare the smallest numbers in the min-heaps\n        if heapq.heappop(heap1) <= heapq.heappop(heap2):\n            merged_list.append(heapq.heappop(heap1))\n        else:\n            merged_list.append(heapq.heappop(heap2))\n    \n    # Add any remaining numbers from the min-heaps to the merged list\n    while heap1:\n        merged_list.append(heapq.heappop(heap1))\n    while heap2:\n        merged_list.append(heapq.heappop(heap2))\n    while heap3:\n        merged_list.append(heapq.heappop(heap3))\n    \n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the merged list\n    heapq.heapify(merged_list)\n\n    # Reverse the sorted list and return it\n    return heapq.nlargest(len(merged_list), merged_list)[::-1]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # initialize an empty list to store the merged list\n    merged_list = []\n\n    # initialize two empty stacks to store the three input lists\n    stack1 = []\n    stack2 = []\n    stack3 = []\n\n    # push the elements of num1, num2 and num3 into the stacks in the right order\n    for i in range(len(num1)):\n        heapq.heappush(stack1, -num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(stack2, -num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(stack3, -num3[i])\n\n    # pop elements from the stacks and append them to the merged list\n    while len(stack1) > 0 and len(stack2) > 0 and len(stack3) > 0:\n        if -heapq.heappop(stack1) <= -heapq.heappop(stack2) <= -heapq.heappop(stack3):\n            merged_list.append(-heapq.heappop(stack1) + -heapq.heappop(stack2) + -heapq.heappop(stack3))\n        elif -heapq.heappop(stack1) < -heapq.heappop(stack2) < -heapq.heappop(stack3):\n            merged_list.append(-heapq.heappop(stack1))\n        elif -heapq.heappop(stack1) > -heapq.heappop(stack2) > -heapq.heappop(stack3):\n            merged_list.append(-heapq.heappop(stack2))\n        elif -heapq.heappop(stack1) >= -heapq.heappop(stack2) >= -heapq.heappop(stack3):\n            merged_list.append(-heapq.heappop(stack3))\n\n    # append any remaining elements of the stacks to the merged list\n    while len(stack1) > 0:\n        merged_list.append(-heapq.heappop(stack1))\n    while len(stack2) > 0:\n        merged_list.append(-heapq.heappop(stack2))\n    while len(stack3) > 0:\n        merged_list.append(-heapq.heappop(stack3))\n\n    # convert the merged list to a tuple and return it\n    return tuple(merged_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Convert lists to sets to remove duplicates\n    num1 = set(num1)\n    num2 = set(num2)\n    num3 = set(num3)\n\n    # Merge the three sets into a single set of unique elements\n    merged_set = num1.union(num2, num3)\n\n    # Convert the set back to a list\n    merged_list = list(merged_set)\n\n    # Sort the merged list in ascending order\n    heapq.heapify(merged_list)\n\n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): A sorted list of integers.\n    num2 (list): A sorted list of integers.\n    num3 (list): A sorted list of integers.\n\n    Returns:\n    list: A single sorted list of integers.\n\n    \"\"\"\n\n    # Merge the three lists into one.\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list in ascending order.\n    heapq.heapify(merged_list)\n\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two arguments:\n    s - the binary string to be rotated\n    n - the number of times to rotate the string\n    \n    This function calculates the number of odd numbers in the rotated string and returns it.\n    \n    \"\"\"\n    # Calculate the length of the string\n    n_bits = len(s)\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Initialize a variable to keep track of the current position\n    pos = 0\n    \n    # Loop n times\n    for i in range(n):\n        # Initialize a variable to keep track of the sum of odd numbers in the current rotation\n        odd_sum = 0\n        \n        # Loop through the bits in the current position\n        for j in range(n_bits):\n            \n            # Calculate the sum of odd numbers in the current position\n            if s[j] == \"1\":\n                odd_sum += (2**(n_bits-j-1))\n                \n        # If there are odd numbers in the current position, increment the count variable\n        if odd_sum!= 0:\n            count += 1\n        \n        # Move the current position one bit to the right\n        pos = (pos + 1) % n_bits\n    \n    # Return the count of odd numbers in the rotated string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert binary string to a list of binary digits\n    binary_digits = [int(digit) for digit in s]\n\n    # rotate the binary list the given number of times\n    for _ in range(n):\n        rightmost = binary_digits.pop()\n        binary_digits.insert(0, rightmost)\n\n    # count the number of odd digits in the rotated list\n    count = 0\n    for digit in binary_digits:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n):\n        s = s[-1:] + s[:-1]\n        for j in range(len(s)):\n            if s[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = n % len(s) # make sure n is less than length of string\n    odd_count = 0\n    for i in range(n):\n        if s[i] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of odd numbers when rotating a binary string the given number of times.\n\n    Args:\n    s: a binary string\n    n: the number of rotations\n\n    Returns:\n    the number of odd numbers when rotating s n times\n    \"\"\"\n\n    # convert the binary string to a list of digits\n    s = [int(i) for i in s]\n\n    # rotate the digits the given number of times\n    for i in range(n):\n        s.append(s.pop(0))\n\n    # count the number of odd numbers in the rotated list\n    count = 0\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of binary digits\n    digits = [int(d) for d in s]\n    # Initialize the counter\n    count = 0\n    # Iterate over the given number of rotations\n    for i in range(n):\n        # Rotate the digits\n        digits = digits[1:] + [digits[0]]\n        # Count the number of odd digits\n        count += sum([1 for d in digits if d % 2!= 0])\n    # Return the number of odd digits after the rotations\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize variables\n    odd_count = 0\n    temp = []\n\n    # Convert binary string to a list\n    s = list(s)\n\n    # Iterate over the binary string n times\n    for i in range(n):\n        # Reverse the binary string\n        s.reverse()\n\n        # Iterate over the reversed list and count the odd values\n        for j in s:\n            if int(j) % 2 == 1:\n                odd_count += 1\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize counter to zero\n    counter = 0\n    # Convert the binary string into a list of characters\n    lst = list(s)\n    # Perform n rotations\n    for i in range(n):\n        # Reverse the list\n        lst = lst[::-1]\n        # Initialize a boolean flag to keep track of whether an odd value was found\n        odd_found = False\n        # Iterate through the reversed list\n        for j in lst:\n            # If an odd value was found, increment the counter and set the flag to True\n            if int(j) % 2 == 1:\n                counter += 1\n                odd_found = True\n                break\n        # If no odd value was found, break out of the loop and continue with the next rotation\n        if not odd_found:\n            break\n    # Return the final counter value\n    return counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # check if the string is a binary string\n    if not s.isnumeric():\n        raise ValueError(\"Input string should only contain binary digits\")\n\n    # initialize variables\n    count = 0\n    # convert the string to binary\n    binary = bin(int(s))[2:]\n    # rotate the binary string the given number of times\n    for i in range(n):\n        # check if the last character is 1\n        if binary[-1] == '1':\n            # add 1 to the count variable\n            count += 1\n        # remove the last character from the binary string\n        binary = binary[:-1]\n\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    common_set = set()\n    for item in nestedlist:\n        if isinstance(item, list):\n            common_set.update(common_in_nested_lists(item))\n        else:\n            common_set.add(item)\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Define a set to store the common elements\n    common = set()\n\n    # Loop through each nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for elem in lst:\n            # If the element is already in the set, add it to the common set\n            if elem in common:\n                common.remove(elem)\n            else:\n                common.add(elem)\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Iterate through each list in the nested list\n    for lst in nestedlist:\n        # Iterate through each element in the current list\n        for elem in lst:\n            # Check if the element is already in the set of common elements\n            if elem in common:\n                # If it is, add it to a list of common elements\n                common.remove(elem)\n                common.add(elem)\n\n    # Convert the set of common elements to a list\n    common = list(common)\n\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for item in nestedlist:\n        if type(item) is list:\n            sublist_common = common_in_nested_lists(item)\n            common.extend(sublist_common)\n        else:\n            common.append(item)\n    return list(set(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Step 1: Initialize a set to store the common elements found\n    common_elements = set()\n\n    # Step 2: Iterate over all the nested lists in the list\n    for lst in nestedlist:\n        # Step 3: Iterate over all the elements of the nested list\n        for elem in lst:\n            # Step 4: If the element is already in the set, add it to the common_elements set\n            if elem in common_elements:\n                common_elements.remove(elem)\n\n    # Step 5: Return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common_elements = set()\n\n    # iterate over all the elements in the nested list\n    for element in nestedlist:\n        # if the element is a list, recursively find the common elements\n        if isinstance(element, list):\n            common_elements |= common_in_nested_lists(element)\n        # if the element is not a list, add it to the set of common elements\n        else:\n            common_elements.add(element)\n\n    # convert the set of common elements to a list and return it\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            common_elements.add(nestedlist[i][j])\n    return list(common_elements)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    # check if the input is a string\n    if not isinstance(text, str):\n        return \"Error: Input must be a string.\"\n    \n    # remove whitespace from the input string\n    text = text.replace(\" \", \"\")\n    \n    # check if the input string can be converted to an integer\n    try:\n        int(text)\n    except ValueError:\n        return \"Error: Input is not an integer.\"\n    \n    # the input is an integer\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for item in list1:\n        if item:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for item in list1:\n            if item:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if len(dict1) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for dict in list1:\n        if len(dict)!= 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty list to store the integers\n    int_list = []\n    # loop through the tuple and append each integer to the list\n    for num in nums:\n        int_list.append(num)\n    # convert the list to a single integer using the sum() function\n    return sum(int_list)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # convert the tuple of integers into a string\n    string = str(nums)\n    # split the string into individual characters and convert each character to an integer\n    int_list = [int(char) for char in string]\n    # sum up all the integers in the list\n    result = sum(int_list)\n    # return the sum as the single integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j])!= float:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n            except ValueError:\n                subitem = None\n            else:\n                subitem = float(subitem)\n            finally:\n                item[item.index(subitem)] = subitem"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through the list of lists\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for item in sublist:\n            # Check if the item can be converted to a float\n            try:\n                float(item)\n                # If it can be converted, convert it to a float and add it to a new list\n                new_list.append(float(item))\n            except ValueError:\n                # If it cannot be converted, just add the original item to the new list\n                new_list.append(item)\n    # Return the new list of floats\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == str and (test_list[i][j].strip().startswith('$') or test_list[i][j].strip().startswith('\u00a3') or test_list[i][j].strip().startswith('\u20ac')):\n                try:\n                    test_list[i][j] = float(test_list[i][j].strip().replace(',', '.'))\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string by space character and return a list of the resulting strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    # Initialize a variable to keep track of the frequency of each element in the array\n    freq = {}\n    # Iterate through the array and increment the frequency of each element\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    # Iterate through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count variable to store the frequency of each element in the array\n    count = [0] * (arr[-1] + 1)\n\n    # Count the frequency of each element in the array\n    for i in range(len(arr)):\n        count[arr[i]] += 1\n\n    # Initialize the result variable to store the element that appears only once\n    result = None\n\n    # Iterate through the count array and find the element that appears only once\n    for i in range(1, len(count)):\n        if count[i] == 1 and (result is None or i < result):\n            result = i\n\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n\n    # Iterate through the array\n    for num in arr:\n\n        # If the element is already in the dictionary, increment its count\n        if num in count:\n            count[num] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            count[num] = 1\n\n    # Iterate through the dictionary to find the element that appears only once\n    for num, count in count.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    last_elem = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == last_elem:\n            count += 1\n        else:\n            last_elem = arr[i]\n            count = 1\n    return last_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    # Initialize the element that appears only once to be None\n    result = None\n    # Loop through the array and increment the count for each element\n    for i in range(len(arr)):\n        count += 1\n        # Check if the current element is the same as the previous element\n        if i > 0 and arr[i] == arr[i - 1]:\n            # If it is, decrement the count and set the result to the current element\n            count -= 1\n            result = arr[i]\n            # Stop looping\n            break\n    # Return the result\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    # Iterate through the array and increment the count of each element in the dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Iterate through the array again and find the element(s) that appear only once\n    for num in arr:\n        if count[num] == 1:\n            return num\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers to the start and end of the array\n    start = 0\n    end = len(arr) - 1\n\n    # Initialize variables to keep track of the current element and its frequency\n    current = arr[start]\n    frequency = 1\n\n    # Loop through the array until we reach the end\n    while end > start:\n        # If the current element is equal to the previous element, increment its frequency\n        if current == arr[end]:\n            frequency += 1\n        # If the current element is greater than the previous element, break out of the loop\n        elif current > arr[end]:\n            break\n\n        # Move the start pointer to the right\n        start += 1\n\n    # If the frequency is 1, return the current element\n    if frequency == 1:\n        return current\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables for counting the frequency of each element in the array\n    freq = [0] * len(arr)\n\n    # Iterate through the array and count the frequency of each element\n    for i in range(len(arr)):\n        freq[arr[i]] += 1\n\n    # Iterate through the frequency array and find the element that appears only once\n    for i in range(len(arr)):\n        if freq[i] == 1:\n            return arr[i]\n\n    # If the element appears multiple times, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize two pointers at the start and end of the array respectively\n    start = 0\n    end = n - 1\n\n    # Initialize a hash table to store the frequency of each element\n    freq = [0] * (arr[end] + 1)\n\n    # Traverse through the array and update the frequency of each element\n    for i in range(n):\n        freq[arr[i]] += 1\n\n    # Traverse through the array again and find the element that appears only once\n    for i in range(n):\n        if freq[arr[i]] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, this function will return the maximum absolute product between pairs of numbers.\n\n    :param lst: A list of tuples of integers.\n    :return: An integer representing the maximum absolute product.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n    list2 = []\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_value = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            if max_value > max_product:\n                max_product = max_value\n            list2.append((list1[i][0]*list1[j][1], list1[i][1]*list1[j][0]))\n    return max_product, list2"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the maximum absolute product between numbers\n    in pairs of tuples within the list.\n    '''\n\n    # initialize variables to store the maximum product and the absolute value of the product\n    max_product = 0\n    abs_max_product = 0\n\n    # loop through the list of tuples\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            # calculate the absolute value of the product\n            product = abs(list1[i][0] * list1[j][1])\n\n            # update the maximum product and absolute maximum product if the product is greater than the current maximum\n            if product > max_product:\n                max_product = product\n                abs_max_product = abs(product)\n\n            # if the product is less than the current maximum, check if it is greater than the absolute maximum\n            if product < max_product and abs(product) > abs_max_product:\n                abs_max_product = abs(product)\n\n    # return the absolute maximum product\n    return abs_max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_product = lst[i][0] * lst[j][0]\n            if current_product > max_product:\n                max_product = current_product\n            if current_product < min_product:\n                min_product = current_product\n    return max_product, min_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, pair_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, return the maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_product = max(max_product, abs(lst[i][0]*lst[j][1]), abs(lst[i][1]*lst[j][0]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n    \n    return amicable_sum\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    \n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and i!= 1:\n            for j in range(1, limit + 1):\n                if is_prime(j) and i!= j and i+j == limit:\n                    amicable_numbers.append(i + j)\n    return sum(amicable_numbers)\n\nlimit = 200\nresult = sum_amicable_numbers(limit)\nprint(result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(n):\n    \"\"\"\n    Returns the sum of all amicable numbers up to n.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, n+1):\n        if i in amicable_numbers(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef amicable_numbers(n):\n    \"\"\"\n    Returns a list of all amicable numbers up to n.\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i in amicable_numbers(i):\n            result.append(i)\n    return result\n\ndef main():\n    limit = int(input(\"Enter the limit: \"))\n    amicable_sum = sum_amicable_numbers(limit)\n    print(\"The sum of all amicable numbers up to\", limit, \"is\", amicable_sum)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i > 1:\n            for j in range(1, i):\n                if i % j == 0 and j % i == 0:\n                    break\n            else:\n                amicable_sum += i\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize a dictionary to store the sum of the pair\n    amicable_sum_dict = {}\n\n    # loop through numbers from 1 to the limit\n    for i in range(1, limit+1):\n        # calculate the sum of the pair\n        sum_of_pair = i + amicable_numbers(i)\n        # check if the sum is already in the dictionary\n        if sum_of_pair in amicable_sum_dict:\n            # if yes, add the pair to the list of pairs\n            amicable_sum_dict[sum_of_pair].append(i)\n        else:\n            # if no, add the pair and the number to the dictionary\n            amicable_sum_dict[sum_of_pair] = [i]\n\n    # initialize a variable to store the sum of all amicable numbers\n    amicable_sum = 0\n\n    # loop through all the pairs in the dictionary\n    for pair in amicable_sum_dict:\n        # add the pair to the sum\n        amicable_sum += pair\n\n    return amicable_sum\n\n\ndef amicable_numbers(num):\n    '''\n    Calculate the sum of all the amicable numbers less than or equal to a specified number.\n    '''\n\n    # initialize a variable to store the sum of the pair\n    sum_of_pair = 0\n\n    # loop through numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        # check if the number is divisible by i or if i and num/i have the same remainder\n        if (num % i == 0) or (i and num % (num/i) == 0):\n            # if yes, add the pair to the sum\n            sum_of_pair += i\n\n    return sum_of_pair"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    \"\"\"\n    This function checks if a number is amicable or not.\n    \"\"\"\n    # Check if the number is divisible by any number between 1 and the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            if is_prime(i) and is_prime(num/i):\n                return True\n    return False\n\ndef is_prime(num):\n    \"\"\"\n    This function checks if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nlimit = int(input(\"Enter the limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    a = 1\n    b = 2\n    amicable_sum = 0\n    while a <= limit:\n        if a == b:\n            amicable_sum += a\n            a += 1\n        else:\n            c = a + b\n            if a == b:\n                a += 1\n            elif b == c:\n                b += 1\n            else:\n                a += 1\n                b += 1\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the sum of every pair of amicable numbers\n    amicable_numbers = {}\n    # Iterate from 1 to limit and check if each number is amicable\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            # Check if i and j form a pair of amicable numbers\n            if i!= j and (i + j) in amicable_numbers:\n                # Add i and j to the sum of all amicable numbers\n                if (i + j) not in amicable_numbers:\n                    amicable_numbers[i + j] = 0\n                amicable_numbers[i + j] += i + j\n            # If i and j do not form a pair of amicable numbers, check if i is a perfect square\n            elif i!= j and i == int(i ** 0.5) ** 2:\n                # Add i to the sum of all perfect squares\n                if i not in amicable_numbers:\n                    amicable_numbers[i] = 0\n                amicable_numbers[i] += i\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers.values())"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable(num):\n    '''\n    Function to check if a given number is amicable or not.\n    '''\n    square = int(num**0.5)\n    sum_of_squares = num**2 + square**2\n    if sum_of_squares == 24:\n        return True\n    else:\n        return False\n\ndef sum_amicable_numbers(limit):\n    '''\n    Function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            sum += num\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        # Check if the number is amicable\n        if i == amicable_number(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef amicable_number(n):\n    '''\n    Write a function to find the sum of all the proper divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    sum_divisors = 0\n    for i in divisors:\n        sum_divisors += i\n    return sum_divisors"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.phase(a*b)\n    angle_degrees = 180 * angle / cmath.pi\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj*b\n    angle = cmath.phase(c)\n    angle_rad = angle/cmath.pi*180\n    return angle_rad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex number in radians.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    \"\"\"\n    angle = cmath.phase(a + b) # Use complex conjugate of both numbers to get the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function returns the angle of a complex number (a + bi).\n    \"\"\"\n    # calculate the angle using the arccosine function from cmath module\n    angle = cmath.phase(a + b * 1j)\n\n    # convert the angle to degrees and return it\n    return angle * 180 / cmath.pi"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zeros = sub_string.count('0')\n            ones = sub_string.count('1')\n            diff = abs(ones - zeros)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [0] * n\n    \n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1]\n            \n    max_diff = max(dp)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    \n    # Iterate through the binary string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        elif char == '1':\n            one_count += 1\n        \n        # If the zero count is greater than the one count, increment the maximum difference\n        if zero_count > one_count:\n            max_diff += one_count - zero_count\n        # If the one count is greater than the zero count, increment the maximum difference\n        else:\n            max_diff += zero_count - one_count\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    n = len(string)\n    diff = 0\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to store the count of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n    \n    # Iterate through the string and update the count of 0s and 1s\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n    \n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Iterate through the string again and calculate the difference between the count of 0s and 1s in each sub-string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            zero_count_sub = 0\n            one_count_sub = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    zero_count_sub += 1\n                else:\n                    one_count_sub += 1\n            \n            # Calculate the difference between the count of 0s and 1s in the sub-string\n            diff = abs(zero_count_sub - one_count_sub)\n            \n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # Initialize variables\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    # Loop through the string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        # Update the maximum difference\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(string[i:j+1]) % 2 == 0:\n                max_diff = max(max_diff, j-i)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # initialize variables\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    \n    # loop through the string and update count0 and count1\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        \n        # update max_diff if a smaller difference is found\n        if count0 - count1 > max_diff:\n            max_diff = count0 - count1\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    n = len(string)\n    diff = 0\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = string[i:j]\n            count_zero = sum(sub_string == '0')\n            count_one = sum(sub_string == '1')\n            if count_zero > count_one:\n                diff = count_one - count_zero\n                if diff > max_diff:\n                    max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a set to store the divisors of b\n    b_divisors = set()\n    # Loop through all integers from 1 to the square root of b\n    for i in range(1, int(b ** 0.5) + 1):\n        # Check if i is a divisor of b\n        if b % i == 0:\n            # If so, add it to the set of divisors of b\n            b_divisors.add(i)\n            # Check if i is a divisor of a\n            if a % i == 0:\n                # If so, add it to the set of divisors of a as well\n                a_divisors.add(i)\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop through the sets of divisors of a and b\n    for div in a_divisors:\n        if div in b_divisors:\n            # If div is a common divisor, add it to the total sum\n            total_sum += div\n    # Return the total sum of common divisors\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef sum_of_common_divisors(a, b):\n    return sum(a, b) - gcd(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the divisors of a and b\n    divisors_a = set([i for i in range(1, a + 1) if a % i == 0])\n    divisors_b = set([i for i in range(1, b + 1) if b % i == 0])\n    # Find the common divisors between the two sets\n    common_divisors = divisors_a.intersection(divisors_b)\n    # Calculate the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the set of divisors of a and b\n    divisors_a = set(set(a).union(set(b)))\n    divisors_b = set(set(b).union(set(a)))\n\n    # Find the intersection of the two sets\n    common_divisors = divisors_a.intersection(divisors_b)\n\n    # Calculate the sum of common divisors\n    total_sum = sum(common_divisors)\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the common divisor of those numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    \n    divisor = 1\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            return divisor\n        divisor += 1\n        \ndef sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    \n    return a + b - common_divisor(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers and returns a list of their common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers and returns the sum of their common divisors.\n    \"\"\"\n    divisors = common_divisors(a, b)\n    return sum(divisors)\n\ndef main():\n    \"\"\"\n    This function takes no arguments and prints the sum of their common divisors.\n    \"\"\"\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_of_common_divisors(a, b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two integers as input and returns the sum of their common divisors.\n    '''\n    common_divisors = []\n\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    if not common_divisors:\n        print(\"There are no common divisors in the given numbers.\")\n        return None\n\n    sum_of_common_divisors = sum(common_divisors)\n    print(\"The sum of common divisors is:\", sum_of_common_divisors)\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        '''\n        Write a python function to find the greatest common divisor of two given numbers.\n        '''\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        '''\n        Write a python function to find the lowest common multiple of two given numbers.\n        '''\n        return (a * b) // gcd(a, b)\n\n    def sum_of_common_factors(n, d):\n        '''\n        Write a python function to find the sum of common factors of a given number and its divisors.\n        '''\n        sum_of_factors = 0\n        for i in range(1, n):\n            if n % i == 0 and d % i == 0:\n                sum_of_factors += i\n        return sum_of_factors\n\n    def sum_of_common_divisors(a, b):\n        '''\n        Write a python function to find the sum of common divisors of two given numbers.\n        '''\n        common_factors = 0\n        divisors = []\n        for i in range(1, a):\n            if a % i == 0:\n                divisors.append(i)\n        for d in divisors:\n            common_factors += sum_of_common_factors(b, d)\n        return common_factors\n\n    return sum_of_common_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    # Function to find common divisors of two numbers\n    def find_common_divisors(num1, num2):\n        if num2 == 0:\n            return num1\n        else:\n            return find_common_divisors(num2, num1 % num2)\n\n    # Finding the sum of common divisors of the two input numbers\n    result = find_common_divisors(a, b)\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    divisor_set = set()\n\n    # Find all divisors of a and b\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            if i not in divisor_set:\n                common_divisors.append(i)\n                divisor_set.add(i)\n\n    # Calculate the sum of common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        remainder = x % 10\n        result += remainder * y\n        x //= 10\n        y = y // 10\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Given a list of words, returns a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, append it to the long_words_list\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Convert the string to a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_list = []\n\n    # Iterate over the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, append it to the long_list\n            long_list.append(word)\n\n    # Return the long_list\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Loop through the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # Add the word to the long_words list\n            long_words.append(word)\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n\n    # Check that the matrix has the correct number of rows and columns\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check that the matrix is a magic square\n    magic_sum = n * (n ** 2 + 1) // 2\n    for row in my_matrix:\n        row_sum = sum(row)\n        if row_sum!= magic_sum:\n            return False\n    for i in range(n):\n        col_sum = sum(my_matrix[i])\n        if col_sum!= magic_sum:\n            return False\n    for i in range(n):\n        sub_sum = 0\n        for j in range(n):\n            sub_sum += my_matrix[i][j]\n        if sub_sum!= magic_sum:\n            return False\n    for i in range(n - 1):\n        for j in range(n - 1):\n            sub_sum = my_matrix[i][j] + my_matrix[i][j + 1] + my_matrix[i + 1][j] + my_matrix[i + 1][j + 1]\n            if sub_sum!= magic_sum:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the input matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # initialize the magic square flag\n    magic_flag = False\n\n    # iterate through each row and column\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # check if the current element is equal to its row and column index\n            if my_matrix[i][j]!= i+1 and my_matrix[j][i]!= i+1:\n                return False\n\n            # check if the current element is a magic square number\n            if my_matrix[i][j] == j+1 or my_matrix[i][j] == i+1:\n                magic_flag = True\n\n    # check if the matrix is a magic square\n    if magic_flag:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    This function takes a 3x3 matrix as input and returns True if it is a magic square, and False otherwise.\n    A magic square is a square matrix where the sum of the diagonal elements, the sum of the first two rows, and the sum of the last two rows are all equal.\n    '''\n    \n    # check if the input matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        for j in range(i, len(my_matrix)):\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    # check if the sum of the diagonal elements, first row and last row are equal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(3))\n    if diagonal_sum!= my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]:\n        return False\n    \n    # check if the sum of the diagonal elements, second row and first row are equal\n    diagonal_sum = sum(my_matrix[i][2-i] for i in range(3))\n    if diagonal_sum!= my_matrix[1][1] + my_matrix[2][0] + my_matrix[0][2]:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Check if all columns have the same length\n    for col in range(len(my_matrix)):\n        if len(my_matrix[col])!= len(my_matrix):\n            return False\n    \n    # Check for zeroes in the matrix\n    for row in my_matrix:\n        for num in row:\n            if num == 0:\n                return False\n    \n    # Check for symmetry in the matrix\n    for row in my_matrix:\n        if row[0]!= row[8] or row[1]!= row[7] or row[2]!= row[6] or row[3]!= row[5] or row[4]!= row[4]:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    # Check that the input matrix is a list of lists\n    if not isinstance(my_matrix, list) or not all(isinstance(row, list) for row in my_matrix):\n        return False\n    \n    # Check that all rows and columns have the same length\n    row_lengths = [len(row) for row in my_matrix]\n    if len(set(row_lengths))!= 1:\n        return False\n    \n    # Check that each row and column has the same sum\n    for row in my_matrix:\n        if sum(row)!= sum(row_lengths) * len(row):\n            return False\n    \n    # Check that each element in the matrix is unique\n    if len(set(sum(row) for row in my_matrix))!= len(my_matrix):\n        return False\n    \n    # Check that the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= i + j:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n\n    # Check if each row, column, and diagonal are all the same length\n    for i in range(rows):\n        if len(my_matrix[i])!= len(my_matrix) or len(my_matrix[i])!= len(my_matrix[i][0]):\n            return False\n    \n    # Check if there are any duplicate values in the matrix\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[j]:\n                return False\n\n    # Check if the sum of the diagonal elements is equal to the total sum of the matrix\n    diagonal_sum = 0\n    for i in range(rows):\n        diagonal_sum += my_matrix[i][i]\n    if diagonal_sum!= total:\n        return False\n\n    # Check if the sum of the other diagonal elements is equal to the total sum of the matrix\n    for i in range(rows):\n        diagonal_sum = 0\n        for j in range(cols):\n            diagonal_sum += my_matrix[i][j]\n        if diagonal_sum!= total:\n            return False\n    \n    # Check if the sum of the right-hand column is equal to the total sum of the matrix\n    column_sum = 0\n    for j in range(cols):\n        for i in range(rows):\n            column_sum += my_matrix[i][j]\n        if column_sum!= total:\n            return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return \"The matrix must have 3 rows and 3 columns\"\n\n    # Check if the matrix is a magic square\n    rows = my_matrix\n    for i in range(3):\n        for j in range(3):\n            # Check if the element in the current row is equal to the sum of the elements in the current column\n            if sum(rows[i])!= rows[i][j] + rows[j][i]:\n                return \"The matrix is not a magic square\"\n\n    return \"The matrix is a magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the elements in each row\n    row_sums = [0] * len(my_matrix[0])\n    \n    # Initialize the sum of the elements in each column\n    col_sums = [0] * len(my_matrix)\n    \n    # Initialize the sum of the elements in the main diagonal\n    main_diagonal_sum = 0\n    \n    # Initialize the sum of the elements in the secondary diagonal\n    secondary_diagonal_sum = 0\n    \n    # Loop through the matrix and calculate the sums of the elements\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sums[j] += my_matrix[i][j]\n            col_sums[i] += my_matrix[j][i]\n            \n            # Check if the element is in the main diagonal\n            if i == j:\n                main_diagonal_sum += my_matrix[i][j]\n            \n            # Check if the element is in the secondary diagonal\n            if i == len(my_matrix)-j-1:\n                secondary_diagonal_sum += my_matrix[i][j]\n                \n    # Check if the matrix is a magic square by comparing the row sums, column sums, and diagonals\n    for i in range(len(my_matrix)):\n        if row_sums[i]!= main_diagonal_sum:\n            return False\n    \n    for j in range(len(my_matrix[0])):\n        if col_sums[j]!= main_diagonal_sum:\n            return False\n    \n    if main_diagonal_sum!= secondary_diagonal_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n\n    # Check if the matrix contains only non-zero integers\n    for row in my_matrix:\n        for num in row:\n            if num == 0:\n                return False\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            # Get the sum of the current element and its neighboring elements\n            neighbor_sum = my_matrix[i][j] + my_matrix[i][j+1] + my_matrix[i][j+2] + \\\n                           my_matrix[i+1][j] + my_matrix[i+1][j+1] + my_matrix[i+1][j+2] + \\\n                           my_matrix[i+2][j] + my_matrix[i+2][j+1] + my_matrix[i+2][j+2]\n            # Check if the current element is a magic square sum\n            if my_matrix[i][j] + neighbor_sum!= 15:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Define the size of the matrix\n    n = len(my_matrix)\n\n    # Check if the matrix is a square matrix\n    if n!= len(set(my_matrix)):\n        return False\n\n    # Initialize the sum of the diagonals\n    diagonal_sum = 0\n\n    # Check each row for a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum == n*(n+1)/2:\n            return True\n\n        # Check each column for a magic square\n        col_sum = 0\n        for j in range(n):\n            col_sum += my_matrix[j][i]\n        if col_sum == n*(n+1)/2:\n            return True\n\n    # Check the diagonals for a magic square\n    for i in range(n):\n        diagonal_sum += my_matrix[i][i]\n    if diagonal_sum == n*(n+1)/2:\n        return True\n\n    for i in range(n):\n        diagonal_sum += my_matrix[i][n-i-1]\n    if diagonal_sum == n*(n+1)/2:\n        return True\n\n    # Check if the matrix is a magic square\n    if diagonal_sum!= n*(n+1)/2:\n        return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the count of each item in the list\n    item_count = defaultdict(int)\n    for num in nums:\n        item_count[num] += 1\n    \n    # find the item with the maximum count\n    max_count = max(item_count.values())\n    for item, count in item_count.items():\n        if count == max_count:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n    \n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = None\n    max_freq = 0\n    \n    for num in freq:\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each number\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_count = 0\n    max_item = None\n    for item, count in count.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    # Iterate through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n    # Find the item with maximum frequency and return it\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    vowel_reversed = ''\n    for i in range(len(string) - 1, -1, -1):\n        if string[i] in vowels:\n            vowel_reversed += string[i]\n    return vowel_reversed"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            new_str = char.lower() + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    vowel_positions = []\n    result = \"\"\n\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_count += 1\n            vowel_positions.append(i)\n\n    if vowel_count == 0:\n        return str1\n\n    for i in range(len(vowel_positions)-1, -1, -1):\n        result += str1[vowel_positions[i]]\n\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.islower():\n                reversed_str += char.upper()\n            else:\n                reversed_str += char.lower()\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in string:\n        if char in vowels and char not in reversed_vowels:\n            reversed_vowels += char\n    return reversed_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str1_vowels = [char for char in str1 if char.lower() in vowels]\n    str1_non_vowels = [char for char in str1 if char.lower() not in vowels]\n    str1_vowels.sort(reverse=True)\n    str1_vowels.extend(str1_non_vowels)\n    return ''.join(str1_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert the tuple to a list and join it with comma and space\n    result = \", \".join(str(x) for x in tup1)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string\n    tup_str = str(tup1)\n    # Return the string\n    return tup_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    negatives_sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            negatives_sum += num\n    \n    # Return the sum of the negative numbers\n    return negatives_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    \n    for num in nums:\n        if num < 0:\n            negative_sum += num\n            \n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += num\n    return negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a, b = 1, 1\n    for _ in range(n):\n        print(a, end=' ')\n        a, b = b, a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    while a <= n: \n        print(a, end=\" \")\n        c = (a + b) // 2\n        a = b\n        b = c\n\nn = int(input(\"Enter the value of n: \"))\nhexagonal_num(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 0\n    for i in range(1, n+1):\n        hex_num += (2 * i - 1) * (2 * i - 3) // 2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2*n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    hex_num = 0\n    while n > 0:\n        hex_num += n * (2 * n - 1)\n        n -= 1\n    \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 0\n    b = 1\n    while n > 0:\n        print(a, end=' ')\n        c = a + b\n        a = b\n        b = c\n        n -= 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 1 + 6 * n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = (n * (2 * n - 1)) // 6\n    return num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a, b, c = 1, 6, 15\n    hexagonal_num = a + b*n + c*n*n\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    num = 1\n    hex_num = 1\n    # Calculate the nth hexagonal number\n    for i in range(1, n + 1): \n        num = num + 2 * (i - 1) + 1\n        hex_num = hex_num + num\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list of integers to avoid issues with numpy arrays\n    nums_list = list(nums)\n    # Initialize variables to count zeros and non-zeros\n    zeros = 0\n    non_zeros = 0\n    # Loop through the list of integers and count zeros and non-zeros\n    for num in nums_list:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    # Calculate the ratio of zeros to non-zeros\n    ratio = zeros / non_zeros\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    return (zero_count/non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize the zero count array with zeros\n    zero_count_arr = array('i', [0] * len(nums))\n\n    # Loop through the array and count the number of zeroes\n    for num in nums:\n        if num == 0:\n            zero_count_arr[nums.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = (zero_count_arr[1:] / zero_count_arr[:-1]).sum()\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    ratio = float(zero_count) / non_zero_count if non_zero_count!= 0 else 0\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_array = array('i', [0] * len(nums))\n    for num in nums:\n        count_array[num] += 1\n\n    non_zero_count = sum(count_array)\n    zero_count = len(nums) - non_zero_count\n    ratio = zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] += 1\n    non_zero_count = sum(count)\n    zero_count = sum(count[:nums.index(0)])\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize an empty array to store the count of non-zeroes\n    non_zero_count = array('i')\n\n    # Iterate through the array and count the number of non-zeroes\n    for num in nums:\n        if num!= 0:\n            non_zero_count.append(1)\n        else:\n            non_zero_count.append(0)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = sum(non_zero_count) / len(nums)\n\n    return round(zero_ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    non_zero_count = array('i', [0] * len(nums))\n\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n        else:\n            non_zero_count[nums.index(num)] += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = [non_zero/zero for non_zero, zero in zip(non_zero_count, zero_count)]\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list of integers\n    nums_list = list(nums)\n    # Initialize variables for non-zero count and zero count\n    non_zero_count = 0\n    zero_count = 0\n    # Iterate through the list of integers and count non-zero and zero values\n    for num in nums_list:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count/non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Initialize two variables to keep track of sum of powers of 2 and sum of non-zero powers of 2\n    sum_of_powers_of_2 = 0\n    sum_of_non_zero_powers_of_2 = 0\n    \n    # Iterate through all numbers from 2 to n\n    for i in range(2, n+1):\n        \n        # If the number is divisible by 2, add 1 to the sum of powers of 2\n        if i % 2 == 0:\n            sum_of_powers_of_2 += 1\n        \n        # If the number is not divisible by 2, add the sum of non-zero powers of 2 to the sum of powers of 2\n        else:\n            sum_of_non_zero_powers_of_2 += 1\n            \n            # If the sum of non-zero powers of 2 is equal to the number, then the number can be represented as sum of powers of 2\n            if sum_of_non_zero_powers_of_2 == i:\n                return True\n    \n    # If the loop completes, the number cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    i = 0\n    while n > 0:\n        if n & 1:\n            return False\n        n >>= 1\n        i += 1\n    return i == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def count_bits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num &= (num - 1)\n        return count\n    \n    # check if the number has at least one power of 2\n    if count_bits(n) < 1:\n        return False\n    \n    # check if the number can be written as sum of powers of 2\n    m = 1\n    while m <= n:\n        if n % m == 0:\n            n = n // m\n        else:\n            m <<= 1\n    return n == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it can be represented as sum of non-zero powers of 2, and False otherwise.\n    \"\"\"\n    # If n is less than 0, it cannot be represented as sum of powers of 2\n    if n < 0:\n        return False\n    \n    # Initialize the sum variable with 0\n    sum = 0\n    \n    # Iterate till n/2\n    for i in range(n//2):\n        # If the power of 2 is present at the current index i, add it to the sum\n        if (n & (1<<i)):\n            sum += (1<<i)\n    \n    # If the sum is equal to n, it can be represented as sum of powers of 2\n    if sum == n:\n        return True\n    \n    # Otherwise, it cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2 \n    sum_powers_of_two = 0\n    # Loop through all the numbers from 2 to sqrt(n) \n    for i in range(2, int(n ** 0.5) + 1): \n        # If the given number is divisible by i, then we can add i to the sum of powers of 2 \n        if n % i == 0: \n            sum_powers_of_two += i \n    # If the number is not divisible by any number from 2 to sqrt(n), then it cannot be represented as sum of powers of 2 \n    if sum_powers_of_two == 0: \n        return False \n    # If the number is divisible by all the numbers from 2 to sqrt(n) except 2 and sqrt(n), then it can be represented as sum of powers of 2 \n    if sum_powers_of_two == n - 2 and sum_powers_of_two == n - int(n ** 0.5): \n        return True \n    # If none of the above conditions are met, then the given number cannot be represented as sum of powers of 2 \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is a power of 2\n    if n == 1:\n        return True\n    \n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 4 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 8 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 16 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 32 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 64 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 128 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 256 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 512 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 1024 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 2048 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 4096 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 8192 == 0:\n        return False\n    \n    # check if n is a sum of powers of 2\n    if n % 16384 == 0:\n        return False\n    \n    # if n is not a sum of powers of 2, it must be 2^x\n    x = 0\n    while n > 1:\n        n = n // 2\n        x += 1\n    \n    # check if x is a power of 2\n    if x == 0:\n        return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is already a power of 2\n    if n & (n - 1) == 0:\n        return True\n    # Check if the number can be represented as sum of powers of 2\n    for i in range(1, 32):\n        if n & (1 << i) > 0:\n            if (n // (1 << i)) % 2 == 0:\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_2(num):\n        '''\n        Check whether the given number is a power of 2 or not.\n        '''\n        return num == 1 or (num & (num - 1)) == 0\n    \n    def count_power_of_2(num):\n        '''\n        Count the number of non-zero powers of 2 in the given number.\n        '''\n        count = 0\n        while num > 0:\n            if num & 1 == 1:\n                count += 1\n            num >>= 1\n        return count\n    \n    total_count = count_power_of_2(n)\n    \n    if total_count % 2 == 0:\n        return False\n    else:\n        return is_power_of_2(total_count)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # create a list of the binary representations of n\n    binary_list = bin(n)[2:]\n    \n    # iterate over the binary list and check if the sum of the powers of 2 is equal to n\n    for i in range(len(binary_list)):\n        if i == 0:\n            power = 1\n        else:\n            power *= 2\n        current_sum = sum(int(x) ** power for x in binary_list[:i+1])\n        if current_sum == n:\n            return True\n    \n    # if no pair of powers of 2 is found, then return False\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # formula to find the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize a set to store the numbers from each sublist\n    flat_set = set()\n    for sublist in test_list:\n        # Add each number from the sublist to the flat_set\n        for num in sublist:\n            flat_set.add(num)\n    # Return the flat_set as a list\n    return list(flat_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list += sub_list\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = [item for sublist in test_list for item in sublist]\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, list):\n                flat_list.extend(item)\n            else:\n                flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list += item\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Loop through each item in the list\n    for item in test_list:\n        # If the item is a list, flatten it recursively\n        if type(item) == list:\n            # Recursively flatten the list\n            extract_singly(item)\n        # If the item is a number, add it to a set\n        elif type(item) == int:\n            singly_set.add(item)\n    # Convert the set to a list and return it\n    return list(singly_set)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the largest element with the element at the end of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # reverse the unsorted part of the list\n        for j in range(i+1, n):\n            nums[j], nums[n-j] = nums[n-j], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the maximum element in the first i elements of the array\n        max_idx = 0\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the last element of the array\n        nums[i - 1], nums[max_idx] = nums[max_idx], nums[i - 1]\n\n        # Reverse the first i - 1 elements of the array\n        reverse_start = 0\n        reverse_end = i - 2\n        while reverse_start < reverse_end:\n            nums[reverse_start], nums[reverse_end] = nums[reverse_end], nums[reverse_start]\n            reverse_start += 1\n            reverse_end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def _pancake_sort(nums, start, end):\n        if start >= end:\n            return\n        nums[start], nums[end] = nums[end], nums[start]\n        _pancake_sort(nums, start + 1, end - 1)\n\n    _pancake_sort(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a copy of the original list\n    nums_copy = nums[:]\n    # loop through the list backwards\n    for i in range(len(nums)-1, 0, -1):\n        # find the index of the largest element in the current sublist\n        max_index = i\n        for j in range(i):\n            if nums_copy[j] > nums_copy[max_index]:\n                max_index = j\n        # swap the elements at the maximum index and the end of the current sublist\n        nums_copy[i-1], nums_copy[max_index] = nums_copy[max_index], nums_copy[i-1]\n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n        \n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the first i elements\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the first i elements with the largest element\n        swap(nums, 0, max_index)\n        # Reverse the first i elements\n        for j in range(1, i):\n            swap(nums, j, i-j)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the last element in the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the array from i to n-1\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def sort(arr):\n        n = len(arr)\n        for i in range(n):\n            heapify(arr, n, i)\n\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n    sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    for i in range(len(nums)):\n        # Find the largest element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the largest element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the subarray from the current index to the end\n        for j in range(i, len(nums)-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n    \n    Args:\n    nums (list): A list of elements to be sorted.\n    \n    Returns:\n    sorted_nums (list): The sorted list of elements.\n    '''\n    def pancake_sort_helper(nums, start, end):\n        '''\n        Recursive function that sorts the given sublist using the pancake sort algorithm.\n        \n        Args:\n        nums (list): The list of elements to be sorted.\n        start (int): The index of the first element of the sublist to be sorted.\n        end (int): The index of the last element of the sublist to be sorted.\n        '''\n        if start >= end:\n            return\n        \n        # Find the maximum element in the sublist and its index\n        max_index = start\n        for i in range(start + 1, end + 1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        \n        # Swap the maximum element with the first element\n        nums[max_index], nums[start] = nums[start], nums[max_index]\n        \n        # Recursively sort the sublist excluding the maximum element\n        pancake_sort_helper(nums, start + 1, end)\n        \n        # Recursively sort the sublist including the maximum element\n        pancake_sort_helper(nums, start, end - 1)\n    \n    # Call the recursive function to sort the list\n    pancake_sort_helper(nums, 0, len(nums) - 1)\n    \n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # find the length of the list\n    n = len(nums)\n\n    # create a list of numbers from 1 to n\n    # each number is the index of the list\n    index_list = list(range(n))\n\n    # repeat the following while loop until the list is sorted\n    while True:\n        # initialize the swapped flag to False\n        swapped = False\n\n        # repeat the following for loop n-1 times\n        for i in range(n-1):\n            # if the current number is greater than the next number, swap them\n            if nums[index_list[i]] > nums[index_list[i+1]]:\n                # swap the numbers\n                nums[index_list[i]], nums[index_list[i+1]] = nums[index_list[i+1]], nums[index_list[i]]\n                # set the swapped flag to True\n                swapped = True\n\n        # if no swaps were made in the previous iteration, the list is already sorted\n        if not swapped:\n            break\n\n        # create a new index_list by shifting each element in the original one to the right\n        index_list = [index_list[i+1] for i in range(n-1)]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n\n    :param list1: List of integers.\n    :param list2: List of integers.\n    :param list3: List of integers.\n    :return: The count of identical items.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list2[j] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements.\"\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Find the maximum value in the array\n    max_val = max(arr)\n\n    # Initialize variables for the minimum and maximum difference\n    min_diff = max_diff = 0\n\n    # Loop through the array and calculate the difference between each element\n    for i in range(len(arr)):\n        diff = abs(arr[i] - max_val)\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference between any two elements\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize variables for maximum absolute difference and its index\n    max_diff = 0\n    max_index = 0\n\n    # Loop through the array and compare the absolute difference between each pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                max_index = i\n\n    # Return the maximum absolute difference and its index\n    return max_diff, max_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        return \"Array must have at least 2 elements\"\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n    \n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Define variables for quadratic equation\n    D = b**2 - 4*a*n\n    if D < 0:\n        return None\n    elif D == 0:\n        x = -b / (2*a)\n        return (x, x)\n    else:\n        x1 = (-b + (b**2 - 4*a*n)**0.5) / (2*a)\n        x2 = (-b - (b**2 - 4*a*n)**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # find the discriminant\n    d = b**2 - 4*a*n\n    \n    # check if there is a solution\n    if d < 0:\n        return None\n    \n    # find the two solutions\n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    x1 = n / b\n    x2 = (-n) / b\n    if a * x1 + b * x2 == n:\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # check if the discriminant is negative or zero\n    if discriminant < 0:\n        return None\n    \n    # calculate the roots and check if they are integers\n    root1 = (-b + discriminant**0.5) // (2*a)\n    root2 = (-b - discriminant**0.5) // (2*a)\n    \n    # check if both roots are integers\n    if root1 % 1 == 0 and root2 % 1 == 0:\n        return (root1, root2)\n    \n    # if one of the roots is an integer and the other is not, swap them and try again\n    if root1 % 1 == 0:\n        return (root2, root1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if there are any solutions\n    if a == 0:\n        if n % b == 0:\n            return (n // b, 0)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (0, n // a)\n        else:\n            return None\n    \n    # Find the discriminant\n    d = b**2 - 4*a*n\n    \n    # If there are no real solutions, return None\n    if d < 0:\n        return None\n    \n    # Otherwise, find the real solutions\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        # if b is 0, x can be any integer\n        x = -n // a\n        return (x, x)\n    elif a == 0:\n        # if a is 0, y can be any integer\n        y = -n // b\n        return (y, y)\n    else:\n        # if a and b are not both 0, we can use the quadratic formula\n        discriminant = b ** 2 - 4 * a * n\n        if discriminant < 0:\n            return None\n        else:\n            root1 = (-b + discriminant ** 0.5) / (2 * a)\n            root2 = (-b - discriminant ** 0.5) / (2 * a)\n            return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if the given equation is valid\n    if a == 0:\n        return None\n    \n    # Calculate the values of x and y that satisfy the equation\n    x = int(-b/a)\n    y = n/a\n    \n    # Check if the given equation is satisfied by the given values of x and y\n    if a*x + b*y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the condition ax + by = n is satisfied\n    if a * n + b * n == 0:\n        # Check if the solutions are integers\n        if a.is_integer() and b.is_integer():\n            # Find x and y such that x * a + y * b = n\n            x = (-b) // a\n            y = (-b) // a\n            # Return the solution as a tuple\n            return (x, y)\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Using the quadratic formula\n    x1 = (-b + (b*b - 4*a*n) ** 0.5) / (2*a)\n    x2 = (-b - (b*b - 4*a*n) ** 0.5) / (2*a)\n\n    # Checking if both x1 and x2 are integers\n    if int(x1) == x1 and int(x2) == x2:\n        return (int(x1), int(x2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    \n    x1 = -b/a\n    x2 = n/a\n    \n    if x1 == x2:\n        return None\n    \n    return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set from the second list\n    set2 = set(list2)\n    # Use a loop to iterate through the first list and remove the elements present in set2\n    for i in range(len(list1)):\n        if list1[i] in set2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Initialize a new list to store the result\n    result = []\n    # Loop through the first list\n    for item in list1:\n        # If the item is not present in the second list, add it to the result\n        if item not in list2:\n            result.append(item)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:  # only odd numbers allowed\n        return 0\n    else:\n        total = 0\n        for i in range(n // 2):\n            total += n - 2*i\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        i = 0\n    else:\n        i = 1\n    sum = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 2\n    else:\n        series = []\n        for i in range(n//2):\n            series.append(n - 2*i)\n        return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    else:\n        total = 0\n        for i in range(n // 2):\n            total += n - 2 * i\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize variables\n    sum_list = [0]\n    i = 0\n    \n    # Loop through the series\n    while n-2*i >= 0:\n        # Add the value to the sum list and increment i\n        sum_list.append(n - 2*i)\n        i += 1\n    \n    # Return the sum list\n    return sum_list"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2*pi/l * i)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the side length of the polygon\n    side_length = s / l\n\n    # Calculate the area of the polygon using the formula A = (s * (s - 1) * (s - 2) *... * 2) / 6\n    area = 0\n    for i in range(l):\n        area += (side_length * (side_length - 1) * (side_length - 2) *... * 2) / 6\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * tan(pi / l)\n    return area / (s * (s - l) * (s - l - 1))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    perimeter = 2 * s * l\n    # Calculate the area of the polygon using the formula A = pi * r^2\n    area = pi * (s ** 2) / 4\n    # Return the area of the polygon\n    return area, perimeter"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * pi / l * i\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2) * l * (tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s / math.sin(2 * i * math.pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        area += s * math.sin(math.radians(angle*i))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * (s - l) * (s - l + 1)) / 2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Function to calculate the sum of the divisors of a number\n    def sum_divisors(num):\n        return sum(set(math.factorize(num)))\n    \n    # Find the sum of the divisors of both numbers\n    sum_a = sum_divisors(n)\n    sum_b = sum_divisors(m)\n    \n    # Check if the sum of the divisors are the same\n    if sum_a == sum_b:\n        print(\"The sum of the divisors of\", n, \"and\", m, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", m, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n using a loop\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n//i!= i:\n                div_sum += n//i\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # initialize variables to store the sum of the divisors and a boolean flag to indicate if the sum is equal to n \n    div_sum = 0 \n    same_sum = False \n    \n    # loop through the range of numbers from 1 to n-1 \n    for i in range(1, n+1): \n        # check if the number has a divisor of i \n        if n % i == 0: \n            # add the divisor to the div_sum \n            div_sum += i \n            # check if the sum is equal to n \n            if div_sum == n: \n                # set the same_sum flag to True and break out of the loop \n                same_sum = True \n                break \n    \n    # return the same_sum flag value \n    return same_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            if n//i == i:\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n/i == int(n/i):\n                return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n    divs.append(n)\n    div_sum = sum(divs)\n    # Check if the sum of the divisors of n is the same as the sum of the divisors of (n-1)\n    if div_sum == sum(range(1, n+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n    \n    return sum_of_divisors == math.sqrt(n)\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n\n    div_sum = sum(range(1, int(math.sqrt(n))+1))\n\n    # check if the sum of divisors of n is equal to n\n    if div_sum == n:\n        print(n, \"is a perfect number.\")\n    else:\n        print(n, \"is not a perfect number.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_lst = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_lst.append(i)\n    return sum(div_lst) == math.factorial(n)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is in the dictionary, and if it is, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it and set its count to 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the English alphabet and count the number of occurrences of each character\n    for i in range(ord('a'), ord('z')+1):\n        char = chr(i)\n        if char in char_count:\n            char_count[char] += 1\n    \n    # print the final count of each character in the English alphabet\n    for char, count in char_count.items():\n        print(f\"{char}: {count}\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n\n    for i in range(len(alphabet)):\n        count_dict[alphabet[i]] = 0\n\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            count_dict[alphabet[index]] += 1\n\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    # Convert all characters to lowercase\n    str1 = str1.lower()\n    \n    # Iterate through the string and count the number of characters that occur at the same position in the alphabet\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            index = alphabet.index(str1[i])\n            count += alphabet.count(str1[i])\n            if index < len(alphabet) - 1:\n                count += alphabet.count(alphabet[index + 1])\n                \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the position of each character\n    char_pos = {}\n    \n    # iterate through the string\n    for i in range(len(str1)):\n        # get the current character\n        char = str1[i]\n        \n        # check if the character is already in the dictionary\n        if char in char_pos:\n            # increment the count of the character at the current position\n            char_pos[char] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            char_pos[char] = 1\n    \n    # initialize the count of characters at each position\n    counts = [0] * 26\n    \n    # iterate through the characters in the dictionary\n    for char, pos in char_pos.items():\n        # get the position of the character in the English alphabet (0-25)\n        pos = ord(char) - ord('a')\n        \n        # increment the count of characters at the current position\n        counts[pos] += 1\n    \n    # return the count of characters at each position\n    return counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # convert the input string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is a letter in the English alphabet\n        if char.isalpha():\n            # get the index of the character in the English alphabet (0-25)\n            index = ord(char) - 97\n            # check if the index is already in the dictionary\n            if index in char_count:\n                # increment the count of the character at the current position in the dictionary\n                char_count[index] += 1\n            else:\n                # add the character and its count to the dictionary\n                char_count[index] = 1\n\n    # return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabets = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabets:\n            count += str1.count(str1[i].lower(), i)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Converting the string to lowercase\n    str1 = str1.lower()\n\n    # Creating a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Counting the number of occurrences of each character in the string\n    count = 0\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        count += char_freq.get(char, 0)\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1.lower():\n        if char in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert all characters to lowercase\n    str1 = str1.lower()\n    # create a dictionary to store the count of each character in str1\n    char_count = {}\n    # loop through each character in str1\n    for char in str1:\n        # if the character is in the English alphabet (case insensitive)\n        if char.isalpha():\n            # if the character exists in the dictionary, increment its count by 1\n            if char in char_count:\n                char_count[char] += 1\n            # if the character does not exist in the dictionary, add it with a count of 1\n            else:\n                char_count[char] = 1\n    # print the count of each character in str1\n    for char in char_count:\n        print(f\"{char}: {char_count[char]}\")"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_numbers = [x for x in A if x % 2 == 0]  # creates a list of even numbers in A\n    count = 0\n    \n    for i in range(len(even_numbers)):\n        for j in range(i+1, len(even_numbers)):\n            xor = even_numbers[i] ^ even_numbers[j]  # xor the even numbers in the pair\n            if xor % 2 == 0:  # if the result is even, count it\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        i = 1\n        while i < n:\n            i <<= 1\n        return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the power of 2\n    power_of_2 = 1\n    \n    # While n is greater than the power of 2\n    while n > power_of_2:\n        # Increase the power of 2 by 1\n        power_of_2 *= 2\n    \n    # Return the power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Handle special cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n\n    # Find the next power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: \n        n /= 2\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Using binary search to find the smallest power of 2 greater than or equal to n\n    low = 0\n    high = 1073741824  # 2^30\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if mid >= n:\n            high = mid\n        else:\n            low = mid + 1\n\n    return low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the smallest power of 2 greater than or equal to 1\n    result = 1\n\n    # Loop through all numbers between 1 and n, checking if each number is a power of 2\n    while result < n:\n        result *= 2\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # check if the number is already a power of 2\n    if n & (n - 1) == 0: \n        return n\n    \n    # set the bit that needs to be flipped to make it a power of 2\n    bit_to_flip = 1 << 31\n    \n    # loop until the bit to flip is no longer set\n    while bit_to_flip & n: \n        bit_to_flip = bit_to_flip >> 1\n    \n    # return the power of 2 that is greater than or equal to n\n    return n | bit_to_flip"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result variable to be the same as the input number\n    result = n\n    \n    # Loop until the result is a power of 2\n    while result & (result - 1)!= 0:\n        result += 1\n        \n    # Return the result as the next power of 2\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # loop until n is less than 2^0\n    while n < 2:\n        n *= 2\n    \n    # loop until n is equal to 2^i\n    for i in range(1, 32):\n        if n == 2**i:\n            return 2**i\n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m >= n:\n        return \"Invalid input. The lower index must be less than or equal to the higher index.\"\n\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_list = []\n    for i in range(m, n+1):\n        sum_list.append(list1[i-m])\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid input\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Checking if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid indices\")\n\n    # Initializing the sum variable\n    total = 0\n\n    # Looping through the range of indices\n    for i in range(m, n+1):\n        # Adding the element at the current index to the sum variable\n        total += list1[i]\n\n    # Returning the sum\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the side of the pentagon\n    side = 2*a\n    # calculate the area of the pentagon\n    area = math.sqrt(5)*a**2\n    # calculate the perimeter of the pentagon\n    perimeter = 5*side + 5*area\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi / 5)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    perimeter = 5 * a\n    return perimeter, circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the pentagon\n    s = (5 * a) / 4\n    \n    # Calculate the area of the pentagon\n    area = (5 * a * s) / (4 * math.tan(math.pi/5))\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a * s\n    \n    return perimeter, area"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    while std in s:\n        count += 1\n        s = s.replace(std, '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std ':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 2:\n        return \"Error: Tuple should contain at least 2 elements.\"\n    \n    # check all elements in tuple have same data type\n    type_set = set()\n    for elem in test_tuple:\n        if type(elem) not in type_set:\n            type_set.add(type(elem))\n        else:\n            return \"Error: All elements in the tuple should have same data type.\"\n    \n    return \"All elements in the tuple have same data type.\""
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and checks if all the elements have same data type or not.\n    If all the elements have same data type, then it returns True. Otherwise, it returns False.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Get the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    # Iterate over the rest of the tuple and check if their data types match\n    for element in test_tuple[1:]:\n        if type(element)!= data_type:\n            return False\n    # If the previous loop finished without returning False, then all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for item in test_tuple:\n        data_types.append(type(item))\n    unique_types = set(data_types)\n    if len(unique_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set() # set to store data types of elements\n    for element in test_tuple:\n        data_types.add(type(element)) # add the data type of each element to the set\n\n    return len(data_types) == 1 # check if all elements have same data type or not"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:\n        return True\n    first_element = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count of x to 0\n    count = 0\n    \n    # Traverse through the array and count the occurrences of x\n    for i in arr:\n        if i == x:\n            count += 1\n    \n    # If the count is greater than n/2, return True, else return False\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # initialize count of x to 0\n    count = 0\n    \n    # loop through array and count occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    # if count is greater than n/2, return True, else return False\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n//2:\n                return True\n\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through the array\n    for i in arr:\n        # If the current element is equal to the target element, increment the counter\n        if i == x:\n            count += 1\n\n    # If the counter is greater than n/2, return True\n    if count > n/2:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize count to 0 and count_x to 0\n    count = 0\n    count_x = 0\n    \n    # Iterate through the array and count the occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count_x += 1\n            \n    # If count_x is greater than n/2, return True\n    if count_x > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= n-1 # clears the rightmost bit that is set (i.e., the least significant 1)\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        count += n & 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1 # count the number of set bits by finding the number of set bits in n using bitwise AND with 1\n        n = n >> 1 # shift n to the right by 1 bit\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as an input and returns the same string with odd index characters removed.\n    \"\"\"\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create an empty string to store the odd index values of the input string\n    odd_index_str = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # If the index of the character is odd, append it to the odd_index_str variable\n        if str.index(char) % 2!= 0:\n            odd_index_str += char\n    # Return the odd_index_str variable which contains the odd index values of the input string\n    return odd_index_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with odd index values removed.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str)\n\n    # Iterate over the list of characters\n    for i in range(len(char_list)):\n        # If the index is odd, remove the character\n        if i % 2 == 1:\n            char_list.pop(i)\n\n    # Convert the list of characters back to a string\n    new_str = ''.join(char_list)\n\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    return ''.join(chr(ord(c) % 26 + ord('a')) if ord(c) % 2 == 1 else c for c in str)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # convert the string into a list of characters\n    char_list = list(str)\n    \n    # iterate over the characters in the list\n    for i in range(len(char_list)):\n        # if the index of the character is odd, remove it from the list\n        if i % 2 == 1:\n            del char_list[i]\n    \n    # convert the list of characters back into a string\n    result_str = ''.join(char_list)\n    \n    return result_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # loop through each character of the given string\n    for char in str:\n        # if the index of the character is odd, add it to the new string\n        if ord(char) % 2 == 1:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as an input and returns a new string with all the characters which have odd index values.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integer parameters - n, l and r.\n    n is the integer to be checked.\n    l is the least significant bit index of the range.\n    r is the most significant bit index of the range.\n    \"\"\"\n\n    # To check if all the bits are set in the given range or not, we need to check all the bits of n from l to r.\n    for i in range(l, r + 1):\n        # If the bit is set, then n should not be set.\n        if n & (1 << i):\n            return False\n\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the decimal number to binary\n    binary_n = bin(n)[2:]\n    # Convert the lower limit and upper limit to binary\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    # Check if the length of the binary numbers are equal\n    if len(binary_n)!= len(binary_l) or len(binary_n)!= len(binary_r):\n        return \"The given range is not valid.\"\n    # Compare each bit of the binary numbers to see if they are equal\n    for i in range(len(binary_n)):\n        if binary_n[i]!= binary_l[i] or binary_n[i]!= binary_r[i]:\n            return \"Some bits are set in the given range.\"\n    # If all the bits are equal, then all the bits are unset in the given range\n    return \"All the bits are unset in the given range.\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range into a set of bits\n    bits_in_range = set(bin(i)[2:].zfill(8) for i in range(l, r+1))\n\n    # Convert the given number into a set of bits\n    bits_in_num = set(bin(n)[2:].zfill(8))\n\n    # Calculate the common bits between the two sets\n    common_bits = bits_in_range.intersection(bits_in_num)\n\n    # Check whether all the common bits are set or not\n    if len(common_bits) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    while l < r:\n        if (n & 1) == 0:  # check if the leftmost bit is set or not\n            return False\n        n >>= 1  # shift the bits to the right\n        l += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Find the minimum and maximum values of n where all bits are set\n    min_val = (2**r) - 1\n    max_val = (2**l) - 1\n\n    # Check whether n is within the given range or not\n    if n < min_val or n > max_val:\n        return \"n is not within the given range\"\n\n    # Check whether all the bits are unset in n\n    unset_bits = min_val - n\n    if unset_bits!= 0:\n        return \"All the bits are unset in the given range\"\n    else:\n        return \"All the bits are set in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the numbers to binary strings\n    binary_str_n = bin(n)[2:]\n    binary_str_l = bin(l)[2:]\n    binary_str_r = bin(r)[2:]\n\n    # Find the number of set bits in each binary string\n    count_n = binary_str_n.count('1')\n    count_l = binary_str_l.count('1')\n    count_r = binary_str_r.count('1')\n\n    # Check if all bits are set\n    if count_n == binary_str_n.length and count_l == binary_str_l.length and count_r == binary_str_r.length:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Create a list of all the bits in the given range\n    all_bits = list(range(l, r + 1))\n\n    # Initialize a variable to keep track of the number of unset bits\n    unset_bits = 0\n\n    # Iterate over each bit in the list of all bits and check if it is set or not\n    for bit in all_bits:\n        # If the bit is set, increment the unset bits counter\n        if (n & bit) == bit:\n            unset_bits += 1\n        # If the bit is unset, decrement the unset bits counter by 1\n        else:\n            unset_bits -= 1\n\n    # Check if the unset bits counter is 0 or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a counter variable to keep track of the number of unset bits\n    unset_bits = 0\n    \n    # Loop through each bit in the given range\n    for i in range(l, r + 1):\n        # If the current bit is set, increment the counter\n        if n & (1 << i):\n            unset_bits += 1\n    \n    # If all the bits are set in the given range, the unset_bits should be zero\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three arguments n, l and r which are integers,\n    where n is the number of bits in the number, l is the starting bit position\n    and r is the ending bit position. The function returns a boolean value\n    indicating whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Calculate the total number of bits in the range\n    total_bits = r - l + 1\n    # Initialize the result variable to True\n    result = True\n    # Iterate through the bits in the range\n    for i in range(total_bits):\n        # If the i-th bit is set, the result will be False\n        if n & (1 << i):\n            result = False\n            break\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to keep track of the number of unset bits\n    unset_bits = 0\n    # iterate through all the bits in the given range\n    for i in range(l, r + 1):\n        # check if the current bit is set or not\n        if n & (1 << i) == 0:\n            unset_bits += 1\n        else:\n            # if any bit is not set, then the range contains unset bits\n            return False\n\n    # if all the bits are set, then the range does not contain unset bits\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # find the minimum value in the array\n    min_value = min(arr)\n    # create a list to store the positive elements\n    positive_elements = []\n    # create a list to store the negative elements\n    negative_elements = []\n    # iterate through the array and add the positive and negative elements to their respective lists\n    for value in arr:\n        if value == min_value:\n            positive_elements.append(value)\n        else:\n            negative_elements.append(value)\n    # combine the positive and negative lists into a single list\n    combined_elements = negative_elements + positive_elements\n    # shuffle the combined list using the Fisher-Yates shuffle algorithm\n    for i in range(len(combined_elements)):\n        j = i + randint(0, i)\n        combined_elements[i], combined_elements[j] = combined_elements[j], combined_elements[i]\n    # return the first n elements of the shuffled list\n    return combined_elements[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize variables to keep track of the indices of the negative and positive elements\n    negative_indices = []\n    positive_indices = []\n\n    # Loop through the array and add indices of negative and positive elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_indices.append(i)\n        else:\n            positive_indices.append(i)\n\n    # Sort the negative and positive indices based on their values\n    negative_indices = sorted(negative_indices, reverse=True)\n    positive_indices = sorted(positive_indices)\n\n    # Create a new array that contains the re-arranged elements\n    new_arr = []\n\n    # Loop through the arrays and add the elements to the new array in the desired order\n    for i in range(n):\n        if i < len(negative_indices):\n            new_arr.append(arr[negative_indices[i]])\n        else:\n            new_arr.append(arr[positive_indices[i-len(negative_indices)]])\n\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two empty lists to store positive and negative elements\n    pos_arr = []\n    neg_arr = []\n\n    # Iterate through the array and add positive and negative elements to their respective lists\n    for num in arr:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    # Sort the positive and negative lists in descending order\n    pos_arr = sorted(pos_arr, reverse=True)\n    neg_arr = sorted(neg_arr, reverse=True)\n\n    # Combine the positive and negative lists into a single list\n    combined_arr = pos_arr + neg_arr\n\n    # Re-arrange the combined list such that all negative elements appear before positive ones\n    for i in range(n):\n        if i < len(neg_arr):\n            combined_arr[i], combined_arr[-1-i] = combined_arr[-1-i], combined_arr[i]\n\n    # Return the re-arranged array\n    return combined_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers, one at the start and one at the end of the array\n    start, end = 0, n-1\n\n    # Traverse the array from both ends\n    while start < end:\n        # If the element at start is negative, increment the start pointer\n        if arr[start] < 0:\n            start += 1\n        # If the element at end is positive, decrement the end pointer\n        elif arr[end] > 0:\n            end -= 1\n        # If the element at start and end are positive or negative, swap them\n        else:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    # Return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Convert array to a list to use its methods\n    lst = list(arr)\n    \n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize three pointers: one for each sub-array\n    left = 0\n    right = n - 1\n    mid = n - 1\n    \n    # Traverse through the sorted list\n    for i in range(n):\n        # If the element is negative, swap it with the element at the left pointer\n        if lst[i] < 0:\n            arr[i], arr[left] = arr[left], arr[i]\n            left += 1\n        # If the element is positive, swap it with the element at the right pointer\n        elif lst[i] > 0:\n            arr[i], arr[right] = arr[right], arr[i]\n            right -= 1\n        # If the element is zero, do nothing\n        else:\n            pass\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers, i and j, to the start and end of the array respectively\n    i = 0\n    j = len(arr) - 1\n\n    # while there are still elements to sort\n    while i < j:\n\n        # if the current element is negative, swap it with the next positive element\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n        # if the current element is positive or zero, move the pointer to the next element\n        else:\n            i += 1\n\n        # if the current element is negative, swap it with the previous positive element\n        if arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n        # if the current element is positive or zero, move the pointer to the previous element\n        else:\n            j -= 1\n\n    # return the sorted array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, one for positive and one for negative elements\n    pos = 0\n    neg = 0\n    \n    # Iterate through the array until both pointers have crossed the midpoint\n    while pos < n and neg < len(arr)-n:\n        \n        # If the element at the current position is negative, swap it with the element at the negative pointer\n        if arr[pos] < 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg += 1\n        \n        # If the element at the current position is positive, increment the positive pointer\n        else:\n            pos += 1\n            \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # create a new list to store the re-arranged array\n    re_arr = []\n\n    # loop over the first n elements of the original array\n    for i in range(n):\n        # add the element to the new list\n        re_arr.append(arr[i])\n\n        # add the element of the original array to the front of the new list\n        re_arr.append(arr[n+i])\n\n    # loop over the remaining elements of the original array and add them to the new list\n    for i in range(n, len(arr)):\n        re_arr.append(arr[i])\n\n    # sort the new list in ascending order\n    re_arr.sort()\n\n    # return the re-arranged array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two new empty lists to store the negative and positive elements\n    negative = []\n    positive = []\n    \n    # Iterate over the input array and add elements to the appropriate lists based on their sign\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    # Merge the negative and positive lists into a single list with the negative elements first\n    result = negative + positive\n    \n    # Shuffle the resulting list using the Fisher-Yates shuffle algorithm\n    for i in range(len(result) - 1, 0, -1):\n        j = random.randint(0, i)\n        result[i], result[j] = result[j], result[i]\n    \n    # Return the resulting list\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # count the negative and positive elements\n    neg_count = sum(1 for x in arr[:n] if x < 0)\n    pos_count = sum(1 for x in arr[:n] if x >= 0)\n    \n    # sort the array in ascending order\n    arr.sort()\n    \n    # move negative elements to the beginning of the array\n    neg_index = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_index] = arr[neg_index], arr[i]\n            neg_index += 1\n    \n    # move positive elements to the end of the array\n    pos_index = n - 1\n    for i in range(n - 1, -1, -1):\n        if arr[i] >= 0:\n            arr[i], arr[pos_index] = arr[pos_index], arr[i]\n            pos_index -= 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \",\"\")\n    return str2"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -list1[i])\n    # Add the remaining items to the heap\n    for i in range(n, len(list1)):\n        if -list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -list1[i])\n    # Return the heap as a list\n    return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    # Create a min heap to store the largest n elements\n    max_heap = []\n    \n    # Iterate over the list and add the largest n elements to the min heap\n    for i in range(n):\n        heapq.heappush(max_heap, list1.pop())\n        \n    # Add the remaining elements to the min heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        \n    # Return the list containing the n largest elements\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap)<n:\n            heapq.heappush(heap,item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,item)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to find the n largest items in the list\n    heap = list(heapq.nlargest(n, list1))\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    # Add remaining elements to max heap\n    for i in range(n, len(list1)):\n        if -list1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -list1[i])\n    # Extract and return n largest elements from max heap\n    return [-i for i in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a heap data structure using heapify function\n    heap = list1\n    heapq.heapify(heap)\n\n    # Extract the n largest elements from the heap and append them to a new list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # First, sort the list in descending order using heapq library\n    heapq.heapify(list1)\n    for i in range(n-1,0,-1):\n        # Move the largest item from the list to the last position\n        heapq.heappop(list1)\n\n    # Convert the list to a regular list\n    larg_num = []\n    for i in range(n):\n        larg_num.append(heapq.heappop(list1))\n\n    return larg_num"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * (r**2)\n    lateral_area = area * math.sin(math.pi/2)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14*r*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_area = 2 * r * h\n    \n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Args:\n        r (float): radius of the cylinder\n        h (float): height of the cylinder\n        \n    Returns:\n        float: lateral surface area of the cylinder\n    \"\"\"\n    return 2 * pi * r**2 + 2 * pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*r + 2*3.14159*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r ** 2 + 2 * h ** 2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder\n    lateral_sa = 2 * math.pi * r * h\n\n    # return the lateral surface area\n    return lateral_sa"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # This is the formula for the volume of a cube"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        even_bits = even_bits | (n & 1)\n        n = n >> 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    for i in range(32):\n        if (n & (1 << i))!= 0:\n            even_bits |= 1 << i\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result \n    result = 0\n\n    # loop through all bits in the number \n    for bit in bin(n)[2:]: \n        # if the current bit is even, set it to 1 \n        if int(bit) % 2 == 0: \n            result += int(bit)\n\n    # return the result \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Loop through each bit of the binary representation of n\n    for i in range(32):\n        # Get the value of the i-th bit\n        bit = n & (1 << i)\n        # Set the i-th bit to 1 if it's even, 0 otherwise\n        n |= (1 << i) if bit % 2 == 0 else (0 << i)\n\n    # Return the updated value of n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to keep track of the even bits\n    even_bits = 0\n    \n    # loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # check if the bit is even\n        if int(bit) % 2 == 0:\n            # if it is, set it in the even_bits variable\n            even_bits = even_bits | int(bit)\n    \n    # return the resultant number with even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    while n!= 0:\n        if n % 2 == 0:\n            even_bits |= n\n        n >>= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize variable to store the result\n    result = 0\n    # loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # if the current bit is an even number, set it to 1, else set it to 0\n        if int(bit) % 2 == 0:\n            result += 1 << int(bit)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        if n & 1 == 0:\n            n = n | 1\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert n to binary representation\n    binary_representation = bin(n)[2:]\n    \n    # Iterate over the bits of the binary representation\n    for i in range(0, len(binary_representation), 2): \n        # If the current bit is even, set it to 1\n        if binary_representation[i] == '1': \n            binary_representation = binary_representation[:i] + '1' + binary_representation[i+1:]\n    \n    # Convert the binary representation back to decimal\n    result = int(binary_representation, 2)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result variable to zero\n    result = 0\n    # loop through each bit in the binary representation of n\n    for i in range(32):\n        # if the current bit is even (i.e., has a 0 in its position), set its corresponding bit in the result variable to 1\n        if n & (1 << i):\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples into a set to remove duplicates\n    unique_tuples = set(test_list)\n    # create a dictionary with the unique tuples as keys and their count as values\n    counter = Counter(unique_tuples)\n    # return the dictionary as the output\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the count of occurrences\n    count_dict = {}\n    \n    # loop through the list of tuples and update the count of occurrences in the dictionary\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    test_set = set(test_list)\n    # Count the number of occurrences of each tuple in the set\n    count_dict = Counter(test_set)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Use the Counter class from the collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a Counter object from the list of tuples\n    count_dict = Counter(test_list)\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the number of occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Create an empty dictionary to store the result\n    result_dict = {}\n    # Loop through the Counter object and add each tuple and its count to the result dictionary\n    for item in counter.items():\n        result_dict[item[0]] = item[1]\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple already exists in the dictionary\n        if tup in counts:\n            # Increment the count for the tuple\n            counts[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Check if the current character is a space\n        if str[i] =='':\n\n            # Check if the next character is a space, if not, increment count by 1\n            if i < len(str)-1 and str[i+1] =='':\n                count += 1\n\n            # Check if the next character is not a space, if not, increment count by 1\n            else:\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            substring = str[i:j+1]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n\n        # Initialize the substring variable to the current character\n        substring = str[i]\n\n        # Loop through each character in the string starting from the current character\n        for j in range(i+1, len(str)+1):\n\n            # Check if the substring is not empty and if it is not a space character\n            if j-i > 1 and str[j-1]!='' and str[j-1].isalnum():\n\n                # Concatenate the characters in the substring and append it to the count\n                substring += str[j-1]\n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Loop through each character of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # If the substring is non-empty, increment the count\n            if str[i:j]!= '':\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings.\n    \"\"\"\n    # Initialize count to 0\n    count = 0\n    # Initialize a list to store all the substrings of the string\n    substrings = []\n    # Iterate over each character of the string\n    for i in range(len(string)):\n        # Get the substring of the string starting from the current index\n        substring = string[i:]\n        # Check if the substring is not empty\n        if substring!= \"\":\n            # If the substring is not empty, append it to the list of substrings\n            substrings.append(substring)\n    # Count the number of non-empty substrings and return it\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(seq):\n        if len(seq)!= n:\n            return False\n        for i in range(1, n):\n            if seq[i] < seq[i-1] or seq[i] > m:\n                return False\n        return True\n\n    def get_combinations(seq):\n        if len(seq) == 0:\n            return [[]]\n        return [seq[:i] + seq[i+1:] for i in range(len(seq))]\n\n    total_sequences = 0\n    for i in range(1, m+1):\n        if is_valid_sequence([2*i]*n):\n            total_sequences += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    sequence = [2]\n    for i in range(2, n):\n        current = max(sequence[-1] + 2, 2)\n        while current <= m:\n            sequence.append(current)\n            current += 1\n        total_sequences += len(sequence) - 1\n        sequence = [2]\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(2, n+1):\n            if i >= 2*j <= m:\n                dp[i][j] = dp[i-1][j-1] + dp[i-2][j]\n    return dp[m][n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, s):\n        if i == n:\n            return 1\n        total = 0\n        for j in range(i, n):\n            if s[j] - s[i] >= 2*s[j-1] and s[j] <= m:\n                total += helper(j+1, s)\n        return total\n\n    return helper(0, [2*i for i in range(m, 0, -2)])"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop from 1 to m-n+1\n    for i in range(1, m - n + 1):\n        # Loop from 1 to n-1 and check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        for j in range(1, n):\n            if i + j * 2 <= m and i + j * 2 > i + (j - 1) * 2:\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    :param m: positive integer\n    :param n: positive integer\n    :return: total number of possible sequences of length n such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m\n    \"\"\"\n    if m < 2 * n:\n        raise ValueError(\"m must be at least 2*n\")\n    if n <= 0 or n > m:\n        raise ValueError(\"n must be between 1 and m\")\n    total_sequences = 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if 2 * j <= m and j <= m:\n                total_sequences *= (m - j) // (j - 2 * i + 1)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    # base case: n == 0, return 1\n    if n == 0:\n        return 1\n    # base case: m == 1, return 1\n    if m == 1:\n        return 1\n    # base case: m == 2, return 1\n    if m == 2:\n        return 1\n    # base case: m < 2, return 0\n    if m < 2:\n        return 0\n\n    # initialize list of sequences\n    sequences = []\n\n    # initialize previous sequence to be [1]\n    prev_sequence = [1]\n\n    # loop through all possible sequences of length n-1\n    for i in range(1, m-1):\n        # initialize new sequence to be all previous elements plus next element\n        new_sequence = prev_sequence + [i+2]\n        # check if new sequence is valid\n        if new_sequence[-1] > 2*new_sequence[-2] < m:\n            # if valid, add to list of sequences\n            sequences.append(new_sequence)\n        # update previous sequence\n        prev_sequence = new_sequence\n\n    # return total number of sequences\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    prev_element = 1\n    for i in range(n):\n        current_element = prev_element + 1\n        while current_element <= m and current_element <= 2 * prev_element:\n            prev_element = current_element\n            current_element += 1\n        if current_element > m:\n            break\n        total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m):\n        if i >= 2 * (i - 1) < m:\n            total_sequences += 1\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    total = 0\n    for i in range(1, m):\n        if i % 2 == 0:\n            total += (m - i) // 2\n        else:\n            total += (i - 1) // 2\n    return total"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list2) > len(list1):\n        return \"The second list cannot be longer than the first list.\"\n    else:\n        list1[-1] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of the first list is less than or equal to 1\n    if len(list1) <= 1:\n        return list1\n    else:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0:\n        list1[-1] = list2[-1]\n        replace_list(list1[:-1], list2[:-1])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    n = len(list1)\n    \n    # Get the length of the second list\n    m = len(list2)\n    \n    # Check if the second list has enough elements to replace all the elements in the first list\n    if m > n:\n        print(\"The second list is too small to replace all the elements in the first list\")\n        return\n    \n    # Replace the last element of the first list with the elements of the second list\n    for i in range(n-m):\n        list1[i] = list2[i]\n        \n    # Print the modified first list\n    print(\"Modified first list:\", list1)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # add the last element of list1 to the first element of list2\n    list1[-1] += list2[0]\n    # remove the first element of list2\n    del list2[0]\n    # append the remaining elements of list2 to the first element of list1\n    list1[0] += list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[i]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Access the last element of the first list\n    last_element = list1[-1]\n    # Append the elements of the second list to the last element\n    list1[-1] = list1[-1] + list2\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == len(list2):\n        list1[-1] = list2\n    else:\n        print(\"The two lists must have the same length.\")"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # If the given number is already a perfect square, return the next one\n    if math.isqrt(N) ** 2 == N:\n        return next_Perfect_Square(math.sqrt(N) + 1)\n\n    # Find the next perfect square greater than the given number\n    i = int(math.sqrt(N)) + 1\n    while i * i <= N:\n        i += 1\n\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    if N == 0:\n        return 1\n    else:\n        for i in range(int(math.sqrt(N)), 0, -1):\n            if N > i**2:\n                return i**2\n        return 0"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while True:\n            num += 1\n            if is_prime(num):\n                return num\n\n    def next_square(num):\n        square = int(num ** 0.5) + 1\n        while square * square <= num:\n            square += 1\n        return square\n\n    # Find the square of the next prime number\n    next_prime_square = next_square(next_prime(N))\n\n    # If the next perfect square is less than N, return N\n    if next_prime_square < N:\n        return N\n\n    # If the next perfect square is greater than N, return the next perfect square\n    return next_prime_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Calculate the integer part of the root\n    root_int = math.floor(root)\n    # Calculate the square of the integer part\n    square_int = root_int*root_int\n\n    # Calculate the difference between N and square_int\n    diff = N - square_int\n\n    # If the difference is negative, the next perfect square is a square of the integer part\n    if diff < 0:\n        return root_int*root_int\n    # If the difference is positive, the next perfect square is a perfect square\n    else:\n        # Find the integer part of the difference\n        diff_int = math.floor(diff)\n        # Calculate the square of the difference\n        square_diff = diff_int*diff_int\n\n        # Calculate the next perfect square\n        next_perfect_square = square_diff + square_int\n\n        # Return the next perfect square\n        return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Keep track of the number of digits in the input number\n    num_digits = len(str(N))\n\n    # Initialize a variable to store the next perfect square\n    next_square = 0\n\n    # Iterate through the digits of the input number\n    for i in range(num_digits - 1, -1, -1):\n        # Add the current digit to the next perfect square\n        next_square += int(str(N)[i])\n\n        # If the sum of the current digit and the next perfect square is greater than the original number,\n        # then the current digit is the last digit in the input number\n        if next_square > N:\n            return next_square\n\n        # If the sum of the current digit and the next perfect square is less than or equal to the original number,\n        # then the current digit is the first digit in the input number\n        else:\n            next_square *= 10\n\n    # If we reach here, there is no next perfect square greater than the input number\n    return 0"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square number greater than N.\n    '''\n    # Calculate the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # Check if the square root is even\n    if sqrt_N % 2 == 0:\n        # Find the next odd number greater than the square root\n        return int(sqrt_N ** 2 + 1)\n    else:\n        # Find the next even number greater than the square root\n        return int(sqrt_N ** 2) + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Take the square root of the given number\n    sqrtN = math.sqrt(N)\n\n    # Check if the square root is an integer or not\n    if sqrtN.is_integer():\n        # If it is an integer, round it up to the next integer\n        sqrtN = math.ceil(sqrtN)\n    else:\n        # If it is a float, round it to the nearest integer\n        sqrtN = math.floor(sqrtN)\n\n    # Check if the next perfect square is less than the given number\n    if sqrtN * sqrtN > N:\n        return sqrtN * sqrtN\n    else:\n        return next_Perfect_Square(sqrtN)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square greater than the given number.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    square = int(math.sqrt(sqrtN ** 2 + 4 * sqrtN))\n    result = int((sqrtN ** 2 + square) / 2)\n    return result"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        N = N+1\n        if math.isqrt(N) == math.floor(math.sqrt(N)):\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N): \n    # Check if the given number is a perfect square \n    sqrt_N = math.sqrt(N)\n    if sqrt_N == int(sqrt_N): \n        return sqrt_N*sqrt_N+1\n    else:\n        # If the given number is not a perfect square, find the next larger perfect square\n        sqrt_N = int(sqrt_N)\n        while True:\n            sqrt_N += 1\n            if int(sqrt_N*sqrt_N) == N:\n                return sqrt_N*sqrt_N\n            if int(sqrt_N*sqrt_N) > N:\n                return int(sqrt_N*sqrt_N)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n    \n    bitonic_sum = max(arr[0], arr[1])\n    prev_bitonic = arr[0]\n    \n    for i in range(2, n):\n        if arr[i] < prev_bitonic:\n            bitonic_sum = max(bitonic_sum + arr[i], arr[i])\n        else:\n            bitonic_sum = max(bitonic_sum, arr[i])\n            \n        prev_bitonic = arr[i]\n    \n    return bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    # Initialize variables to store the maximum sum seen so far for increasing subsequence and the maximum sum seen so far for decreasing subsequence\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n\n    # Initialize variables to store the maximum sum seen so far for the complete array\n    max_sum_complete = float('-inf')\n\n    # Traverse through the array and update the maximum sum seen so far for increasing and decreasing subsequences and for the complete array\n    for i in range(n):\n        if arr[i] > arr[i + 1]:\n            max_sum_increasing = max(max_sum_increasing + arr[i], max_sum_increasing + arr[i + 1])\n            max_sum_decreasing = max(max_sum_decreasing, max_sum_increasing)\n            max_sum_complete = max(max_sum_complete, max_sum_increasing + max_sum_decreasing)\n        else:\n            max_sum_increasing = max(max_sum_increasing, max_sum_decreasing)\n            max_sum_decreasing = max(max_sum_decreasing, max_sum_increasing + arr[i])\n            max_sum_complete = max(max_sum_complete, max_sum_increasing + max_sum_decreasing)\n\n    # Return the maximum sum seen so far for the complete array\n    return max_sum_complete"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Bitonic subsequence (increasing and then decreasing)\n    increasing = arr[0]\n    decreasing = arr[-1]\n    for i in range(1, n-1):\n        if arr[i] < increasing:\n            increasing = arr[i]\n        elif arr[i] > decreasing:\n            decreasing = arr[i]\n\n    # Find maximum sum of a bitonic subsequence\n    if increasing < decreasing:\n        max_sum = increasing + decreasing\n    else:\n        max_sum = decreasing + increasing\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Helper function to check if a subsequence is bitonic\n    def is_bitonic(subseq):\n        return subseq[0] < subseq[-1]\n\n    # Helper function to find the maximum sum of a subsequence\n    def max_subsequence_sum(arr, start, end):\n        if start == end:\n            return 0\n        if start > end:\n            return max_subsequence_sum(arr, end, start)\n\n        # Calculate the maximum sum of the two subsequences\n        subseq_sum_1 = arr[start]\n        subseq_sum_2 = arr[end]\n        if is_bitonic(arr[start:end+1]):\n            subseq_sum_1 = max(subseq_sum_1, subseq_sum_1 + max_subsequence_sum(arr, start+1, end))\n            subseq_sum_2 = max(subseq_sum_2, subseq_sum_2 + max_subsequence_sum(arr, start, end-1))\n        else:\n            subseq_sum_1 = max(subseq_sum_1, subseq_sum_1 + max_subsequence_sum(arr, start+1, end))\n            subseq_sum_2 = max(subseq_sum_2, subseq_sum_2 + max_subsequence_sum(arr, start, end-1))\n\n        # Return the maximum sum of the two subsequences\n        return max(subseq_sum_1, subseq_sum_2)\n\n    # Calculate the maximum sum of the whole array\n    return max_subsequence_sum(arr, 0, len(arr)-1)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return 0\n    \n    max_left = max_right = arr[0]\n    max_sum = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            # increase, update max_left and max_sum\n            max_left = max(max_left, arr[i])\n            max_sum = max(max_sum, max_left + arr[i])\n        elif arr[i] > arr[i-1]:\n            # decrease, update max_right and max_sum\n            max_right = max(max_right, arr[i])\n            max_sum = max(max_sum, max_right + arr[i])\n        else:\n            # equal, don't update anything\n            pass\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Create a copy of the array to avoid modifying the original array\n    arr_copy = arr.copy()\n    \n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = max_sum_subseq(arr_copy, 0, n-1, True)\n    \n    # Find the maximum sum of an increasing subsequence\n    max_sum_increasing = max_sum_subseq(arr_copy, 0, n-1, False)\n    \n    # Return the maximum of the two sums\n    return max(max_sum_increasing, max_sum_decreasing)\n\ndef max_sum_subseq(arr, left, right, is_decreasing):\n    '''\n    Helper function to find the maximum sum of a subsequence of the given array.\n    '''\n    if left == right:\n        return arr[left]\n    \n    # Find the midpoint of the subsequence\n    mid = (left + right) // 2\n    \n    # Find the maximum sum of a decreasing subsequence\n    if is_decreasing:\n        max_sum_decreasing_left = max_sum_subseq(arr, left, mid, True)\n        max_sum_decreasing_right = max_sum_subseq(arr, mid+1, right, True)\n        max_sum_decreasing_center = max(arr[mid] + max_sum_subseq(arr, left, mid-1, True), arr[mid] + max_sum_subseq(arr, mid+1, right, True))\n        return max(max_sum_decreasing_left, max_sum_decreasing_right, max_sum_decreasing_center)\n    # Find the maximum sum of an increasing subsequence\n    else:\n        max_sum_increasing_left = max_sum_subseq(arr, left, mid, False)\n        max_sum_increasing_right = max_sum_subseq(arr, mid+1, right, False)\n        max_sum_increasing_center = max(arr[mid] + max_sum_subseq(arr, left, mid-1, False), arr[mid] + max_sum_subseq(arr, mid+1, right, False))\n        return max(max_sum_increasing_left, max_sum_increasing_right, max_sum_increasing_center)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = dp[i-1]\n\n    max_sum = max(dp)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = float('-inf')\n    prev_val = arr[0]\n    curr_sum = 0\n\n    for i in range(1, len(arr)):\n        curr_val = arr[i]\n        if curr_val < prev_val:\n            curr_sum += curr_val - prev_val\n        else:\n            curr_sum = 0\n            prev_val = curr_val\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # calculate the first and second differences\n    diffs = [arr[i+1] - arr[i] for i in range(len(arr)-1)]\n    # find the maximum sum of a decreasing subsequence\n    decreasing_sum = max(diffs)\n    # calculate the maximum sum of a subsequence that starts and ends at a peak\n    peak_sum = 0\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            peak_sum += arr[i+1]\n        else:\n            peak_sum += arr[i]\n    # find the maximum of the maximum sum of a decreasing subsequence and the maximum sum of a subsequence that starts and ends at a peak\n    return max(decreasing_sum, peak_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    if n == 1:\n        return arr[0]\n\n    left = [float('-inf')] * n\n    right = [float('-inf')] * n\n    prev = [0] * n\n\n    # Calculate left and right subsequences\n    for i in range(n):\n        if i < n - 1:\n            left[i] = max(left[i], prev[i + 1] + arr[i])\n        if i > 0:\n            right[i] = max(right[i], prev[i - 1] - arr[i])\n\n        prev[i] = max(left[i], right[i])\n\n    # Calculate maximum sum of a bitonic subsequence\n    max_sum = max(prev[0], prev[n - 1])\n    for i in range(1, n - 1):\n        if prev[i] > max_sum:\n            max_sum = prev[i]\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # calculate the initial guess for the square root\n    guess = number / 2.0\n    \n    # calculate the number of iterations required to get to a certain accuracy\n    accuracy = 0.00001\n    \n    # initialize the number of iterations\n    count = 0\n    \n    # loop until the difference between the current guess and the square root is less than the specified accuracy\n    while abs(guess*guess - number) > accuracy:\n        # update the guess\n        guess = (guess + number / guess) / 2.0\n        count += 1\n    \n    # print the result\n    print(\"The square root of\", number, \"is approximately\", guess)\n    print(\"It took\", count, \"iterations to find the square root\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Set initial guess for square root\n    guess = number / 2\n\n    # Loop until difference between guess and square root is less than 0.0001\n    while abs(guess**2 - number) >= 0.0001:\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 0.5\n    x1 = number / x0\n    x2 = x1 * x1 - number\n    while abs(x2 - x1) > 10e-10:\n        x0 = x1\n        x1 = x2\n        x2 = x1 * x1 - number\n    return x2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"The input number must be non-negative.\")\n    elif number == 0:\n        return 0\n    else:\n        x = number / 2\n        y = (x + number / x) / 2\n        while abs(x - y) > 0.000001:\n            x = y\n            y = (x + number / x) / 2\n        return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2  # initial guess is half the number\n    while True:\n        guess_square = guess ** 2\n        if guess_square == number:\n            return guess\n        elif guess_square < number:\n            guess = (guess + number / guess) / 2\n        else:\n            guess = (guess + number / guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = 1000\n    \n    while abs(guess**2 - number) > 0.0001 and guess!= previous_guess:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n    \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    iteration = 0\n    while abs(guess*guess - number) > 0.000001:\n        iteration += 1\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize variables to store the approximation and the number of iterations\n    x = number / 2\n    i = 0\n\n    # Loop until the difference between x and x^2 is less than or equal to a tolerance\n    while abs(x**2 - number) > 0.000001:\n        i += 1\n        x = (x + (number / x)) / 2\n\n    # Print the result and the number of iterations\n    print(f\"The square root of {number} is approximately {x}, with {i} iterations.\")"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n\n    # create two variables to store the length of the longest palindrome\n    # without considering the first and last characters\n    palindrome1 = 0\n    palindrome2 = 0\n\n    # iterate through the string and check if each character is a palindrome\n    for i in range(len(str)):\n        if str[i] == str[len(str) - 1 - i]:\n            # if the character is a palindrome, check if its length is greater\n            # than the current longest palindrome\n            if i + 1 > palindrome1:\n                palindrome2 = palindrome1\n                palindrome1 = i + 1\n\n    return max(palindrome1, palindrome2)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store the length of longest palindromic subsequence for all prefixes of the given string\n    table = [[0] * len(str) for _ in range(len(str)+1)]\n\n    # Initialize the first row and column of the table with 1\n    for i in range(1, len(str)+1):\n        table[i][0] = 1\n\n    # Fill the rest of the table using dynamic programming\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence in the given string\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of longest palindromic subsequence for all substrings\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the rest of the table using dynamic programming\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start + 1][end - 1] + 2\n            else:\n                table[start][end] = max(table[start + 1][end], table[start][end - 1])\n\n    return table[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 0\n    start = 0\n\n    for i in range(len(str)):\n        # Check for odd length palindrome\n        left = i\n        right = i\n        while left >= 0 and right < len(str) and str[left] == str[right]:\n            if right - left + 1 > max_length:\n                max_length = right - left + 1\n                start = left\n            left -= 1\n            right += 1\n\n        # Check for even length palindrome\n        left = i\n        right = i + 1\n        while left >= 0 and right < len(str) and str[left] == str[right]:\n            if right - left + 1 > max_length:\n                max_length = right - left + 1\n                start = left\n            left -= 1\n            right += 1\n\n    return str[start:start + max_length]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    n = len(str)\n    dp = [0] * n\n\n    # Base case\n    for i in range(n):\n        dp[i] = 1\n\n    # Calculate the longest palindromic subsequence\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n\n    return dp[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1] + 2\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2])\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n\n    for i in range(n):\n        dp[i][i] = 1\n        if i > 0 and str[i] == str[i - 1]:\n            dp[i][i - 1] = 2\n            max_len = 2\n\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 2, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence in the string.\n    \"\"\"\n    # Create a dictionary to store the length of the longest palindromic subsequence ending at each index\n    dp = {}\n    # Initialize the length of the longest palindromic subsequence ending at index 0 to 0\n    dp[0] = 0\n\n    # Iterate through the string and for each character, find the longest palindromic subsequence ending at that index\n    for i in range(1, len(string)):\n        # If the current character is the same as the previous character, extend the longest palindromic subsequence\n        if string[i] == string[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            # If the current character is different, reset the longest palindromic subsequence to 0\n            dp[i] = 0\n\n        # Keep track of the length of the longest palindromic subsequence ending at each index\n        while dp[i] > dp[i-dp[i]]:\n            # If the current longest palindromic subsequence ending at the index i is longer than the current longest palindromic subsequence ending at the index i-dp[i], update the length to dp[i]\n            dp[i-dp[i]] = dp[i]\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return dp[len(string)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Create a 2D table to store lengths of longest palindromic subsequences ending at each position\n    table = [[0]*n for _ in range(n)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[-1][-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1/i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1/n) + (1/n**2) + (1/n**3) +... + (1/(n*(n-1)))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1 + n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/(n-1) * sum(range(1, n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # calculate harmonic sum of n-1\n    harmonic_sum = 1 / (1 / n + (n - 1) / n)\n\n    # return harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums1 to eliminate duplicates\n    set_nums1 = set(array_nums1)\n    # Create an empty set to store the intersection\n    intersection_set = set()\n    # Loop through each number in array_nums2\n    for num in array_nums2:\n        # If the number is in the set from array_nums1, add it to the intersection set\n        if num in set_nums1:\n            intersection_set.add(num)\n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2 and num1 not in intersection:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the arrays\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create an empty set to store the intersection\n    intersection_set = set()\n\n    # Loop through the second array and check if each element is present in the dictionary\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            intersection_set.add(num)\n            count_dict[num] -= 1\n\n    # Convert the set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    i = j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common = []\n    # check if both arrays have the same length\n    if len(array_nums1) == len(array_nums2):\n        # loop through each element in the arrays\n        for num in array_nums1:\n            # check if the element is in the second array\n            if num in array_nums2:\n                # add the element to the common array\n                common.append(num)\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the unique elements of array_nums1\n    set_nums1 = set(array_nums1)\n    # Create an empty list to store the intersection elements\n    intersection_list = []\n    # Loop through each element in array_nums2\n    for num in array_nums2:\n        # If the element is in set_nums1, append it to intersection_list\n        if num in set_nums1:\n            intersection_list.append(num)\n    # Return the intersection_list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Use set to remove duplicates from array_nums1\n    unique_nums1 = set(array_nums1)\n    # Use set intersection to find the intersection of unique_nums1 and array_nums2\n    intersection_set = set(unique_nums1) & set(array_nums2)\n    # Convert the intersection_set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(0, list[i])\n    new_list.insert(0, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.insert(0, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.insert(0, item)\n    result.insert(0, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    for i in range(len(lst)):\n        lst.insert(i, element)\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new list to hold the modified elements\n    new_list = []\n    # loop through each element in the original list\n    for i in range(len(list)):\n        # insert the element before the current element in the new list\n        new_list.insert(0, element)\n        # add the current element to the new list\n        new_list.append(list[i])\n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(item)\n        new_list.append(element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    # Return the modified list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.rect(number)\n        polar_coordinates.append((cmath.sqrt(real**2 + imag**2), cmath.degrees(cmath.phase(number))))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        try:\n            complex_number = complex(number)\n            real_part = complex_number.real\n            imaginary_part = complex_number.imag\n            angle = cmath.phase(complex_number)\n            polar_number = (real_part**2 + imaginary_part**2)**0.5, angle\n        except ValueError:\n            polar_number = None\n        finally:\n            print(polar_number)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        x = num.real\n        y = num.imag\n        modulus = cmath.sqrt(x**2 + y**2)\n        phase = cmath.phase(num)\n        result.append((modulus, phase))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        print(\"r =\", r, \"theta =\", theta)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert each number in the input list to a complex number\n    complex_numbers = [complex(num) for num in numbers]\n    \n    # Convert each complex number to polar coordinates and store the result in a new list\n    polar_coordinates = []\n    for num in complex_numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # extract real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        # calculate the angle of the complex number\n        angle = cmath.phase(num)\n        # print the polar coordinates of the complex number\n        print(f\"{magnitude} ({angle}\u00b0)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        # Convert to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n\n        # Print the result\n        print(f\"({r}, {theta})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # split the input number into real and imaginary parts\n        real, imag = cmath.rect(number)\n        \n        # calculate the magnitude and angle of the complex number\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        \n        # create a tuple to store the polar coordinates\n        polar_coord = (magnitude, angle)\n        \n        # append the polar coordinates to the result list\n        result.append(polar_coord)\n        \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n\n        # Add the polar coordinates to a list\n        polar_coordinates.append((angle, magnitude))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n\n        # Add the polar coordinates to the list\n        polar_coordinates.append([r, theta])\n\n    # Return the list of polar coordinates\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l, i+1):\n            result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create an iterator for combinations with replacement\n    combinations = combinations_with_replacement(l, n)\n    # convert the iterator to a list of tuples\n    combinations_list = list(combinations)\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green']\n    for i in range(len(l)-n+1):\n        yield tuple(l[i:i+n])"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        isPrime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count\n\nprint(count_Primes_nums(100)) # Output: 41"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a prime number and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative integer n as input and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different numbers of elements.\")\n        return\n    \n    # Initialize variables for the maximum values and their indices\n    max_val1 = test_tup1[0]\n    max_val2 = test_tup2[0]\n    max_idx1 = 0\n    max_idx2 = 0\n    \n    # Iterate through the two tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val1:\n            max_val1 = test_tup1[i]\n            max_idx1 = i\n        elif test_tup1[i] == max_val1:\n            max_idx1 = i\n            \n        if test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n            max_idx2 = i\n        elif test_tup2[i] == max_val2:\n            max_idx2 = i\n            \n    # Return the maximum values\n    return (max_val1, max_val2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = 0\n    max_tuple = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if test_tup1[i] > max_value:\n                max_value = test_tup1[i]\n                max_tuple = test_tup1\n            else:\n                max_value = test_tup2[i]\n                max_tuple = test_tup2\n    \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the maximum element from each tuple.\n    \"\"\"\n    return (max(test_tup1), max(test_tup2))"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize variables to store the maximum value and the indices of the maximum values\n    max1 = max2 = -float('inf')\n    index1, index2 = None, None\n\n    # Loop through the tuples and compare their elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n            index1 = i\n        if test_tup2[i] > max2:\n            max2 = test_tup2[i]\n            index2 = i\n\n    # If one of the tuples has a maximum value, return that value and its index\n    if max1 > max2:\n        return max1, index1\n    else:\n        return max2, index2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    prime = 0\n    i = 1\n\n    # Loop until nth prime is found\n    while i <= n: \n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1): \n            if i % j == 0: \n                is_prime = False\n                break\n\n        # If i is prime and is greater than current prime, update prime\n        if is_prime and i > prime: \n            prime = i\n\n        i += 1\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n    Returns the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 2\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_prime(n):\n        '''\n        Helper function to find the nth newman-shanks-williams prime number.\n        '''\n        count = 0\n        for i in range(n + 1):\n            count += sum(is_prime(i) for j in range(i))\n        return count\n\n    return newman_shanks_williams_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables \n    p = 2\n    count = 0\n    \n    # Iterate until n newman-shanks-williams primes are found \n    while count < n: \n        is_prime = True\n        \n        # Check if p is a newman-shanks-williams prime \n        for i in range(2, int(p**0.5)+1): \n            if p % i == 0: \n                is_prime = False\n                break\n        \n        # If p is a newman-shanks-williams prime, increment count and move on to the next prime \n        if is_prime: \n            count += 1\n            p += 1\n    \n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize count and current prime number\n    count = 0\n    current_prime = 2\n\n    # loop until count reaches n\n    while count < n:\n        # check if current_prime is prime\n        is_prime = True\n        for i in range(2, int(current_prime ** 0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # increment count\n            count += 1\n            # update current_prime to next prime\n            current_prime += 1\n\n    return current_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    prime_list = [2]\n    current_prime = 3\n\n    while len(prime_list) < n:\n        is_prime = True\n        for i in range(2, int(current_prime**0.5) + 1):\n            if current_prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_list.append(current_prime)\n        current_prime += 2\n\n    return prime_list[-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    p = 2\n    count = 0\n    new_prime = True\n\n    # loop until the nth newman\u2013shanks\u2013williams prime number is found\n    while count < n:\n\n        # check if the current prime number is a newman\u2013shanks\u2013williams prime number\n        if is_newman_shanks_williams_prime(p):\n            new_prime = True\n            for j in range(2, int(p**0.5)+1):\n                if p % j == 0:\n                    new_prime = False\n                    break\n            if new_prime:\n                count += 1\n\n        # update p and count\n        p += 1\n\n    # return the nth newman\u2013shanks\u2013williams prime number\n    return p\n\ndef is_newman_shanks_williams_prime(p):\n    '''\n    Determine if a given number is a newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # check if the number is prime\n    if p <= 1:\n        return False\n    for i in range(2, int(p**0.5)+1):\n        if p % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to find the nth newman\u2013shanks\u2013williams prime number\n    def nth_prime(n):\n        count = 1\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num\n\n    # Call the nth_prime function to find the nth newman-shanks-williams prime number\n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    i = 2\n    while i < n:\n        if is_prime(i):\n            return i\n        elif i % 2 == 0:\n            i += 1\n        else:\n            i += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    count = 0\n    while i < n:\n        i += 1\n        count = 0\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n                break\n        if count == 0:\n            print(i)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += ((test_tup1[i] / test_tup2[i],),)\n        except ZeroDivisionError:\n            result_tup += ((0,),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            if type(test_tup1[i]) == int:\n                result_tup += (test_tup1[i] // test_tup2[i],)\n            elif type(test_tup1[i]) == float:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n            elif type(test_tup1[i]) == complex:\n                result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            raise ValueError('The types of the elements in the tuples should be same.')\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            raise ValueError('Cannot divide by zero.')\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i],),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1) == len(test_tup2):\n        # Perform element-wise division\n        result_tup = tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n        return result_tup\n    else:\n        return \"Tuple lengths are not equal.\""
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Get the length of the two tuples\n    length = len(test_tup1)\n    \n    # Perform element-wise division of the tuples\n    result_tup = []\n    for i in range(length):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Get the length of the first tuple\n    tup1_len = len(test_tup1)\n    # Create a new tuple to store the result of the division operation\n    result_tup = []\n    # Loop through the elements of both tuples and perform the division operation element-wise\n    for i in range(tup1_len):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the input tuples must be the same.\")\n        return\n\n    # perform element-wise division operation on the tuples\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Cannot divide by zero.\")\n            return\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n\n    # print the resultant tuples\n    print(\"Resultant tuples:\", test_tup1)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            raise ValueError(\"The first tuple cannot contain zero values.\")\n        if test_tup2[i] == 0:\n            raise ValueError(\"The second tuple cannot contain zero values.\")\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Split the list into two parts using slicing\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Split the list into two parts\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the two parts as a tuple\n        return (part1, part2)\n    else:\n        # If the length of the list is less than or equal to L, return the original list as a tuple\n        return (list1,)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0:\n        return \"Invalid input\"\n    elif L > len(list1):\n        return \"Invalid input\"\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the number of elements in the first part\n    num_elements_first_part = L\n    \n    # Calculate the number of elements in the second part\n    num_elements_second_part = len(lst) - num_elements_first_part\n    \n    # Split the list into two parts\n    first_part = lst[:num_elements_first_part]\n    second_part = lst[num_elements_first_part:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer.\")\n    \n    # Check if the length of list1 is greater than or equal to L\n    if len(list1) < L:\n        raise ValueError(\"The length of list1 must be greater than or equal to L.\")\n    \n    # Split the list into two parts where the length of the first part is L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of the list is greater than L\n    if len(list1) > L:\n        # Split the list into two parts where the length of the first part is L\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # Return the resulting lists in a tuple\n        return (first_part, second_part)\n    else:\n        # If the length of the list is less than or equal to L, return the original list\n        return (list1, [])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    mid = len(lst) // 2\n    first_part = lst[:mid]\n    second_part = lst[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n <= L:\n        return (list1, [])\n    else:\n        return ([list1[i] for i in range(L)], [list1[i] for i in range(L, n)])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L should be a positive integer\")\n\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 1:\n        return \"Invalid input. Age should be greater than or equal to 1.\"\n    elif h_age == 1:\n        return \"You are a dog! You have 1 dog year.\"\n    else:\n        return \"You are a domestic shorthair! You have {0} dog years.\".format(h_age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age / 72\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = (h_age / 7) * 2\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(height_in_inches):\n    \"\"\"\n    Calculate a dog's age in dog's years based on their height in inches.\n\n    :param height_in_inches: The height in inches of the dog.\n    :return: The dog's age in dog's years.\n    \"\"\"\n    # Convert the height to centimeters\n    height_in_centimeters = height_in_inches * 2.54\n    # Calculate the dog's age in years\n    age_in_years = height_in_centimeters / 1000\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 + h_age / 365\n    return years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Slice the input list starting from the current index and step size\n        slice_list = S[i:i+step]\n        # Append the slice to the result list\n        result.append(slice_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    # initialize the result list\n    result = []\n\n    # loop over the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # create a new list containing the current n-th element\n        current_list = [S[i]]\n        # loop over the remaining elements and add them to the current list\n        for j in range(i+1, min(i+step, len(S))):\n            current_list.append(S[j])\n        # add the current list to the result list\n        result.append(current_list)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    length = len(S)\n    for i in range(0, length, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return [S]\n    elif step > 0:\n        S_split = [S[i:i+step] for i in range(0, len(S), step)]\n        S_split = [S for S in S_split if S]\n        return S_split\n    else:\n        S_split = [S[i:i+abs(step)] for i in range(0, len(S), abs(step))]\n        S_split = [S for S in S_split if S]\n        return S_split"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area of the cube using Heron's formula\n    area = (1/3) * (l**2)\n    # Return the lateral surface area of the cube\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l + 6 * l * l + 6 * l * l + 6 * l * l + 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Formula to calculate lateral surface area of a cube\n    lateral_surface = 6 * l**2\n    \n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of the cube using Heron's formula\n    surface_area = 6 * l * l\n    \n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i**2  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total += i**2\n        i += 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i**2\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # initialize the sum to 0\n    sum_of_squares = 0\n\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current number to the sum\n        sum_of_squares += i*i\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = 1\n        while num <= 50:\n            sum += num ** 2\n            num += 2\n        count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = count + 1\n        if num % 2 == 1:\n            sum += num**2\n            count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n + 1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    count = 1\n    star_num = 1\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # If i is a multiple of 3, add the current count to the star number\n        if i % 3 == 0:\n            star_num += count\n        # Increment the count by 1\n        count += 1\n    # Return the final value of star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        print(\"Please enter a positive integer\")\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        print(result)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number\n    star_num = 1\n    \n    # loop through the first n-1 numbers\n    for i in range(1, n):\n        # multiply the previous number by 2\n        star_num *= 2\n    \n    # return then'th star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number to 1\n    star_num = 1\n    # loop n-1 times to get the nth star number\n    for i in range(n-1):\n        # add the number of stars to the star number\n        star_num += 4 * (n-1 - i)\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # We need to use a loop to iterate from 1 to n\n    for i in range(1, n+1):\n        # Print n spaces followed by n stars\n        print(\" \"*(n-i) + \"*\"*(i))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # calculate the value of n\n    n = n * 2 - 1\n    # initialize the result\n    result = ''\n    # loop n times and append '*' to the result\n    for i in range(n):\n        result += '*'\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first star number\n    star_num = 1\n    # Iterate n-1 times and multiply each number by 2\n    for i in range(n-1):\n        star_num *= 2\n    # Return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the base string for the first n stars\n    base_string = \"*\"\n    # Use a loop to build the string\n    for i in range(n-1):\n        base_string += \"*\"\n    # Print the final string\n    print(base_string)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # initialize the result\n    result = \"\"\n\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # if i is even, add a * to the result\n        if i % 2 == 0:\n            result += \"*\"\n        # otherwise, add a space to the result\n        else:\n            result += \" \"\n\n    # return the result\n    return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    elif not isinstance(k, int):\n        raise TypeError(\"Input should be a character or an integer.\")\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n            if i % 2 == 0:\n                total += arr[i]\n    return total"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    total = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                count += 1\n                total += arr[i]\n    return total if count > 0 else -1"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0  \n    for i in range(len(arr)):  \n        if arr[i] % 2 == 0 and i % 2 == 0:  \n            sum += arr[i]  \n    return sum  \n  \n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if even_index % 2 == 0:\n                even_index += 1\n    \n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_at_even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n\n    return sum_even_at_even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(2, n+1):\n        even_power_sum += i ** 5\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [x for x in range(2, n+1, 2)]  # Create a list of even numbers up to n\n    power_sum = sum([x**5 for x in even_numbers])  # Calculate the sum of the first n even numbers raised to the fifth power\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    even_sum = 0\n    num = 2  # starting number\n    \n    # loop through first n even numbers\n    for i in range(n): \n        even_sum += num**5  # raising num to the fifth power\n        num += 2  # incrementing the number\n    \n    return even_sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear_element for tuple_ in test_list for rear_element in tuple_]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to hold the rear elements\n    rear_elements = []\n    \n    # loop through each tuple in the list of tuples\n    for tup in test_list:\n        # extract the last element of the tuple and append it to the rear_elements list\n        rear_elements.append(tup[-1])\n        \n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [rear for tup in test_list for rear in tup]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to hold the rear elements\n    rear_list = []\n    \n    # Loop through the tuples in the list\n    for tup in test_list:\n        # Append the rear element of the tuple to the rear_list\n        rear_list.append(tup[1])\n    \n    # Return the rear_list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [rear_element for tuple_ in test_list for rear_element in tuple_]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n    else:\n        sub_tup = tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n        return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Iterate over the elements of the first tuple\n    for index, element in enumerate(test_tup1):\n        # Check if the element exists in the second tuple\n        if element in test_tup2:\n            # Subtract the element from the second tuple at the same index\n            result_tup += (element - test_tup2[test_tup2.index(element)]),\n        else:\n            # If the element doesn't exist in the second tuple, add it to the result tuple\n            result_tup += (element,)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    else:\n        result_tup = tuple(i - j for i, j in zip(test_tup1, test_tup2))\n        return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup = sub_tup + (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # iterate through the first tuple and subtract the elements with the same index from the second tuple\n    for index, element1 in enumerate(test_tup1):\n        for other_index, element2 in enumerate(test_tup2):\n            if index == other_index:\n                test_tup1[index] = element1 - element2\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # compare the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n    \n    # create an empty list to store the result\n    result_list = []\n    \n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the corresponding elements in the second tuple from the first tuple\n        result_list.append(test_tup1[i] - test_tup2[i])\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    \n    result = 0\n    k = 0\n    \n    while k <= n:\n        result += math.comb(n, 2*k)\n        k += 1\n    \n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize a list to store the even index binomial coefficients\n    even_index_binomial_coeffs = []\n\n    # Initialize a variable to store the sum of even index binomial coefficients\n    even_sum = 0\n\n    # Loop through each value of n\n    for i in range(n+1):\n        # Calculate the even index binomial coefficient and append it to the list\n        even_index_binomial_coeffs.append(math.comb(n, i))\n\n        # If the even index binomial coefficient is even, add it to the sum\n        if i % 2 == 0:\n            even_sum += even_index_binomial_coeffs[-1]\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize sum of even index binomial coefficients to 0\n    sum_even_index_coeffs = 0\n\n    # Initialize even index binomial coefficients to 1\n    even_index_coeffs = [1] * (n + 1)\n\n    # Loop through even index coefficients\n    for i in range(2, n + 1, 2):\n        # Calculate even index binomial coefficient using formula (nCr) = n! / (r! * (n - r)!)\n        even_index_coeffs[i] = int(even_index_coeffs[i] * (2 * n - i) / (i * (i - 1)))\n\n    # Loop through even index coefficients again and add them to sum_even_index_coeffs\n    for i in range(2, n + 1, 2):\n        sum_even_index_coeffs += even_index_coeffs[i]\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    sum_even_coeffs = 0\n    i = 0\n    j = 0\n\n    # Calculate the sum of even index binomial coefficients\n    while i <= n:\n        if i % 2 == 0:\n            sum_even_coeffs += math.comb(n, i)\n            j = 1\n        else:\n            sum_even_coeffs += 0\n            j += 1\n        i += 1\n\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, n+1):\n        even_sum += math.comb(n, i)*math.comb(n-i, 2*i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Define the function to calculate the binomial coefficient\n    def binomial(n, k):\n        if k > n:\n            return 0\n        elif k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    # Initialize the sum of even index binomial coefficients to 0\n    even_binomial_sum = 0\n\n    # Loop through the even index coefficients\n    for i in range(2, n+1, 2):\n        # Calculate the even index binomial coefficient\n        even_binomial_sum += binomial(n, i-1)\n\n    # Return the sum of even index binomial coefficients\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum of even binomial coefficients to 0\n    even_binomial_sum = 0\n    \n    # loop through all possible values of k\n    for k in range(1, n+1):\n        # calculate the even index binomial coefficient\n        even_binomial = math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n        # add the even index binomial coefficient to the sum if it's even\n        if k % 2 == 0:\n            even_binomial_sum += even_binomial\n            \n    # return the sum of even index binomial coefficients\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Calculate the number of terms in the binomial coefficient expansion for n\n    num_terms = math.factorial(n) // math.factorial(n-2)\n\n    # Calculate the sum of even index binomial coefficients\n    sum_coeffs = 0\n    for i in range(2, n+1, 2):\n        sum_coeffs += math.comb(n, i-2)\n\n    return sum_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (1/3) * 3.14159 * (r ** 2) * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (1/3) * 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_before = 0\n    for i, elem in enumerate(test_tup):\n        if elem!= test_tup[i-1]:\n            num_before += 1\n    return num_before"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] > test_tup[i]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n            i += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup:\n        if element == test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            count += 1\n            if test_tup[i]!= test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number and False otherwise.\n    A decagonal number is a positive integer whose sum of its factors is equal to the number itself.\n    For example: 15 is a decagonal number because the sum of its factors (2 + 3 + 5 + 15) is 15.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # Calculate the sum of its factors\n    sum_of_factors = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_of_factors += i + n // i\n    \n    # Check if the sum of its factors is equal to the number itself\n    if sum_of_factors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        for i in range(1, n+1):\n            if i*i + 5*i + 12 == n:\n                return True\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2) + n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Function to find the nth term of the decagonal sequence\n    def nth_term(n):\n        return n * (2 * n - 1)\n    \n    # Find the n-th term of the decagonal sequence\n    decagonal_seq = [i for i in range(1, n + 1)]\n    n_th_term = nth_term(n)\n    \n    # Check if the nth term is a decagonal number\n    if n_th_term in decagonal_seq:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first two decagonal numbers\n    d1 = 1\n    d2 = 10\n    # Find the nth decagonal number\n    for i in range(n):\n        d = d1 + d2\n        d1 = d2\n        d2 = d\n    return d"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables for the first two decagonal numbers\n    first_decagonal = 1\n    second_decagonal = 5\n\n    # Calculate the nth decagonal number by adding the sum of the previous two decagonal numbers\n    nth_decagonal = first_decagonal + second_decagonal\n\n    # Check if the nth decagonal number is equal to the input n\n    if nth_decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    def decagonal(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return decagonal(n - 1) + decagonal(n - 2)\n\n    return decagonal(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    num = 1\n    for i in range(n):\n        num += (10 ** i)\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError('Input must be an integer.')\n    # Check if the input is positive\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    \n    # Calculate the value of the nth decagonal number\n    decagonal_value = n * (2 * n - 1)\n    \n    # Check if the value is a decagonal number\n    if decagonal_value % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    first_term = 1\n    second_term = 1\n    sum_of_terms = first_term + second_term\n\n    # Check if the number of terms is less than n\n    if n < 2:\n        return False\n\n    # Calculate the nth term\n    for i in range(2, n+1):\n        sum_of_terms = (2*i-1)*(4*i-3)\n        first_term = second_term\n        second_term = sum_of_terms\n\n    return first_term"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    found = False\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            found = True\n            break\n            \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as an argument and returns True if all the elements of the list are unique,\n    and False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements of the list are unique or not.\n    Returns True if all the elements of the list are unique, False otherwise.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements are unique and False otherwise.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    This function checks if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have the same length.')\n    return [a-b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the element-wise subtraction of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n        return\n    \n    # initialize a new list to store the result\n    result = []\n    \n    # iterate over the elements of the lists\n    for i in range(len(nums1)):\n        # subtract the elements element-wise\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # array to store the frequency of each digit in the integer\n\n    # calculate the frequency of each digit in the integer\n    for i in str(n):\n        freq[int(i)] += 1\n\n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > n//10:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    for i in freq:\n        if freq[i] > int(i):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Create a list of digits in the given integer\n    digits = [int(digit) for digit in str(n)]\n\n    # Iterate through each digit in the list\n    for digit in digits:\n        # Calculate the frequency of the digit\n        freq = digits.count(digit)\n\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if freq > digit:\n            return False\n\n    # If all digits pass the validation check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    \n    # Counting frequency of each digit in n\n    for digit in str(n):\n        freq[int(digit)] += 1\n    \n    # Checking frequency of each digit in n\n    for i in range(len(freq)):\n        if freq[i] > n:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Loop through each digit in the dictionary and check whether its frequency is greater than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] >= int(digit):\n            print(digit, freq[digit])\n        else:\n            print(digit, freq[digit], \"is not less than or equal to itself\")"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    # Initialize a dictionary to store the frequency of digits in the integer\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already present in the dictionary\n        if digit in freq:\n            # If it is, increment the count for that digit in the dictionary\n            freq[digit] += 1\n        else:\n            # If it's not, add it with a count of 1\n            freq[digit] = 1\n\n    # Loop through each digit in the dictionary\n    for digit in freq:\n        # Check if the digit has a frequency greater than or equal to the digit itself\n        if freq[digit] >= int(digit):\n            # If it does, return False, as the frequency of each digit in the integer is greater than or equal to itself\n            return False\n\n    # If the loop completes without returning False, return True, as the frequency of each digit in the integer is less than or equal to itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # check if n is a positive integer\n    if n < 1:\n        return False\n    \n    # initialize frequency dictionary\n    freq_dict = {}\n    \n    # loop through the digits in n\n    for digit in str(n):\n        # check if digit already exists in dictionary\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    \n    # loop through the frequency dictionary and check if frequency is greater than or equal to digit itself\n    for digit in freq_dict:\n        if freq_dict[digit] >= int(digit):\n            return False\n    \n    # if no errors found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10  # initialize frequency list to 0\n    \n    # count frequency of each digit in the input integer\n    for i in str(n):\n        freq[int(i)] += 1\n    \n    # check frequency of each digit in the input integer\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n//10:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n        \n    for digit, count in freq.items():\n        if count > digit:\n            return False\n        \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(list[i] == element for i in range(len(list)))"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1 and all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Parameters:\n    -----------\n    lst: list\n        The list to check for equality with the given element.\n    elem: any\n        The element to compare against in the list.\n\n    Returns:\n    --------\n    bool\n        True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n\n    # Check if all elements in the list are equal to the given element\n    if all(lst[i] == elem for i in range(len(lst))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    elif lst[0] == elem:\n        return check_element(lst[1:], elem)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0 and list[0] == element:\n        for item in list:\n            if item!= element:\n                return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    all_elements_equal = True\n    for item in list:\n        if item!= element:\n            all_elements_equal = False\n            break\n    return all_elements_equal"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a(b){2,3}\"\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'\\ba{2,3}b\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b.{2,3}')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    pattern = r'a(?=[b]{2,3})'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    matches = re.findall(pattern, text)\n    return any(match.startswith('b') for match in matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[b]{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=\\b)(b){2,3}a\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a[b]{2,3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the array\n    sum_arr = sum(a)\n    # Calculate the sum of the modified array by repeating the array k times\n    sum_mod_arr = k*sum_arr\n    # Initialize the maximum sum and the current sum\n    max_sum = 0\n    cur_sum = 0\n    # Loop through the array and calculate the current sum\n    for i in range(n):\n        cur_sum = a[i] + k*cur_sum\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    # Return the maximum sum of the array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    def repeated_array(arr, k):\n        return k * arr\n    \n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    \n    # Calculate the sum of the repeated array\n    repeated_sum = sum(repeated_array(a, k))\n    \n    # Calculate the difference between the original and repeated sum\n    difference = original_sum - repeated_sum\n    \n    # Return the largest subarray sum\n    return max(repeated_array(a, k))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n\n    # Iterate through the array\n    for i in range(n): \n        current_sum += a[i]\n\n        # Check if the current sum is greater than the max sum\n        if current_sum > max_sum: \n            max_sum = current_sum\n\n        # If the current sum is greater than the sum of the first k elements, then we have found a repeated sum\n        if current_sum > k * a[0]: \n            repeated_sum = current_sum\n\n    # Return the repeated sum\n    return repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_sum_index = 0\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n\n    max_sum = max_sum - current_sum\n    return max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a copy of the given array to modify it\n    modified_array = a.copy()\n    \n    # Repeat the modified array k times\n    for i in range(k):\n        modified_array = modified_array * 2\n        \n    # Initialize variables to store the maximum sum and its index\n    max_sum = 0\n    max_sum_index = 0\n    \n    # Iterate through the modified array to find the maximum sum\n    for i in range(n):\n        for j in range(i, n):\n            current_sum = modified_array[j] - modified_array[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = i\n    \n    return max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and its index\n    max_sum = float('-inf')\n    index = 0\n\n    # Loop through the array\n    for i in range(n):\n        # Initialize the current subarray sum\n        subarray_sum = a[i]\n\n        # Loop through the array again and add the elements to the subarray\n        for j in range(i+1, min(i+k+1, n)):\n            subarray_sum += a[j]\n\n        # If the current subarray sum is greater than the maximum sum, update the maximum sum and its index\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            index = i\n\n    return max_sum, index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    -----------\n    a: list of integers\n        A list of integers representing the original array.\n    n: integer\n        The size of the original array.\n    k: integer\n        The number of times the array should be repeated.\n\n    Returns:\n    --------\n    int\n        The maximum sum of a contiguous array in the modified array formed by repeating the given array k times.\n    \"\"\"\n\n    # Create a new list by repeating the original array k times\n    modified_array = [i * k for i in a]\n\n    # Find the maximum subarray sum\n    max_sum = max(modified_array)\n\n    # Find the maximum subarray sum in the original array\n    original_sum = sum(a)\n\n    # Find the sum of the modified array\n    modified_sum = sum(modified_array)\n\n    # Find the maximum difference between the original and modified array\n    diff = max(abs(original_sum - modified_sum), abs(original_sum - max_sum))\n\n    # Return the maximum difference as the result\n    return diff"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initializing variables\n    max_sum = float('-inf')\n    current_sum = 0\n    temp_sum = 0\n\n    # Repeating the given array k times\n    for i in range(n):\n        temp_sum += a[i]\n        if i < k - 1:\n            temp_sum += a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            current_sum = temp_sum\n\n    # Returning the maximum sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        for j in range(n):\n            a[j] *= k\n\n    for i in range(n):\n        max_sum = max(max_sum, a[i])\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "Let's implement this algorithm in the `max_sub_array_sum_repeated` function."
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 0\n    \n    while i < n:\n        sum_of_squares += i*i\n        i += 2\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        square = count * count\n        sum_of_squares += square\n\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    # initialize sum and counter variables\n    sum = 0\n    count = 0\n\n    # loop through the even natural numbers up to n\n    while count < n:\n        # add the square of the even natural number to the sum\n        sum += (2*count+1)**2\n        # increment the counter\n        count += 1\n\n    # return the sum of squares of the even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(i) for i in lst]\n        if len(lengths) > len(max_lengths):\n            max_lengths = lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        lengths = [len(sublist) for sublist in list1[i]]\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_list = []\n    \n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Find the length of the sublist\n        sublist_length = len(sublist)\n        # If the length of the sublist is greater than the length of the current maximum, update the maximum list\n        if sublist_length > len(max_list):\n            max_list = [sublist_length]\n        # If the length of the sublist is less than or equal to the length of the current maximum, append the length to the maximum list\n        else:\n            max_list.append(sublist_length)\n            \n    # Return the maximum list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # loop through each list in the input list of lists\n    for sublist in list1:\n        # loop through each element in the current sublist\n        for element in sublist:\n            # if the current element is longer than any previous maximum length, add it to the list\n            if len(element) > max(max_lengths):\n                max_lengths.append(len(element))\n    # return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize a dictionary to store the length of each sublist\n    lengths = {}\n    # loop through each sublist in the first list\n    for sublist in list1:\n        # loop through each element in the sublist and update the lengths dictionary\n        for element in sublist:\n            if element in lengths:\n                lengths[element] += 1\n            else:\n                lengths[element] = 1\n    # initialize a list to store the maximum lengths\n    max_lengths = []\n    # loop through each element in the lengths dictionary and append the maximum length to the max_lengths list\n    for length in lengths:\n        if length not in max_lengths or lengths[length] > lengths[max_lengths[-1]]:\n            max_lengths.append(length)\n    # return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize variables\n    max_len = 0\n    max_list = []\n    \n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # Check if the length of the sublist is greater than the current maximum length\n        if len(sublist) > max_len:\n            # Update the maximum length and list\n            max_len = len(sublist)\n            max_list = sublist\n    \n    # Return the maximum length list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return [lst for lst in list1 if len(lst) == max_length]\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    # Function to check if two adjacent posts have the same color\n    def same_color(post_1, post_2):\n        return post_1[2] == post_2[2]\n\n    # Function to count the number of ways of painting the fence with given constraints\n    def count_ways(left, right, color):\n        if left > right:\n            return 0\n\n        if left == right and same_color(left, right):\n            return 1\n\n        left_color = left[2]\n        right_color = right[2]\n\n        if left_color == color:\n            return count_ways(left[0] + 1, right, color) + count_ways(left[0] + 1, right - 1, color)\n        elif right_color == color:\n            return count_ways(left, right - 1, color) + count_ways(left + 1, right - 1, color)\n        else:\n            return count_ways(left + 1, right, color) + count_ways(left, right - 1, color) + count_ways(left, right, color)\n\n    # Base case: when the number of posts is 0, there is only 1 way to paint the fence\n    if n == 0:\n        return 1\n\n    # Initialize variables for storing the result and current color\n    result = 0\n    current_color = -1\n\n    # Loop through all possible colors and count the number of ways to paint the fence\n    for color in range(k):\n        result += count_ways(0, n - 1, color)\n\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    no_of_ways = 0\n    for i in range(1, n+1):\n        no_of_ways += (n-i)*k\n    return no_of_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= 0 or k <= 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    elif n == 3: \n        return 5\n    elif n == 4: \n        return 14\n    elif n == 5: \n        return 42\n    elif n == 6: \n        return 132\n    elif n == 7: \n        return 392\n    elif n == 8: \n        return 1028\n    else: \n        return binomial(n,2) * (count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1))\n\ndef binomial(n, k): \n    '''\n    Helper function to calculate binomial coefficients.\n    '''\n    if k > n//2: \n        k = n-k \n    if n < 0: \n        return 0\n    if k < 0: \n        return 0\n    if n < k: \n        return 0\n    ans = 1\n    for i in range(k): \n        ans = (ans*n)//(i+1) \n        n -= 1\n    return ans"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list of lists, where each inner list contains the number of ways of painting a fence of length i with k colors\n    ways = [[0] * k for i in range(n+1)]\n    \n    # Initialize the first row of the list with 1 for each color\n    for i in range(k):\n        ways[0][i] = 1\n    \n    # Fill in the rest of the list with the number of ways of painting a fence of length i with k colors\n    for i in range(1, n+1):\n        for j in range(k):\n            # If the previous post had the same color as the current post, add 1 to the number of ways of painting the fence of length i-1 with k-1 colors\n            if j == 0 or ways[i-1][j-1] > 0:\n                ways[i][j] = ways[i-1][j]\n            # Otherwise, add the number of ways of painting the fence of length i-1 with k colors and the number of ways of painting the fence of length i-1 with k-1 colors\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n    \n    # Return the number of ways of painting the fence with n posts and k colors\n    return ways[n][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[1 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if k == 1:\n        return n\n    count = 0\n    for i in range(n):\n        count += count_no_of_ways(n - 1, k - 1)\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0] * k\n    fence[0] = 1\n    fence[1] = n\n    for i in range(2, k):\n        fence[i] = 0\n        for j in range(2, i):\n            if fence[j-1] > fence[j]:\n                fence[i] += fence[j-1]\n    return fence[k-2]\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\nprint(\"The number of ways of painting the fence is:\", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a 2D list to store the number of ways of painting the fence\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Initialize the first row and column of the 2D list to 1 (one way of painting the fence)\n    ways[0][0] = 1\n    ways[0][1] = 1\n    \n    # Fill the rest of the 2D list using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # Return the number of ways of painting the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a 2D array to store the number of ways of painting the fence.\n    dp = [[0] * (k+1) for i in range(n+1)]\n    # Base cases:\n    dp[1][0] = 1\n    dp[1][1] = 1\n    # Fill in the rest of the array:\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if j == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % 1000000007\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the count of ways of painting the fence\n    count = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and column of the 2D array\n    count[1][1] = 1\n\n    # Iterate over the remaining rows and columns of the 2D array\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            # If the current post has the same color as the previous post, update the count\n            if i > 2 and j > 2 and count[i - 1][j] > 0 and count[i - 2][j - 1] == count[i - 2][j]:\n                count[i][j] = count[i - 1][j] + count[i - 2][j]\n            # If the current post has a different color than the previous post, update the count\n            elif i > 2 and j > 2 and count[i - 1][j] > 0 and count[i - 2][j] > 0:\n                count[i][j] = count[i - 1][j] + count[i - 2][j]\n\n    # Return the count of ways of painting the fence\n    return count[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    # calculate the quotient and remainder\n    quotient = n // m\n    remainder = n % m\n\n    # check if the remainder is greater than or equal to m/2\n    if remainder >= m / 2:\n        # if it is, add 1 to the quotient and subtract m from the remainder\n        quotient += 1\n        remainder -= m\n\n    # return the quotient and remainder as a tuple\n    return quotient, remainder"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: The first number\n    :param m: The second number\n    :return: The quotient of the two numbers\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    quotient = n // m\n    if quotient * m == n:\n        return quotient - 1\n    else:\n        return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return int(quotient)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    # calculate the quotient using the floor division operator\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n == 0:\n        return 0\n    elif m == 0:\n        return float('inf')\n    else:\n        return find(n-m, m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function finds the third side of a right angled triangle given the length of one side (w) and the length of the other side (h).\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    third_side = math.sqrt(s**2 - h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the semi-perimeter\n    s = (w + h) / 2\n    # use the Pythagorean theorem to calculate the square root of the sum of the squares of the lengths of the two sides\n    third_side = math.sqrt(s**2 - (w/2)**2 - (h/2)**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function calculates the third side of a right angled triangle\n    based on the given width and height of the triangle.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Using the Pythagorean theorem to find the length of the third side\n    c = math.sqrt(w**2 + h**2)\n\n    # Returning the value of c\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the length of the two sides of a right angled triangle and returns the length of the third side.\n    '''\n    s = (math.sqrt(w ** 2 + h ** 2)) / 2 # calculate the semi-perimeter\n    third_side = math.sqrt(s ** 2 + w ** 2 + h ** 2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Convert the list to a set to remove duplicates\n    setval = set(listval)\n    # Initialize the maximum value to the smallest possible integer\n    maxval = sys.maxsize\n    # Loop through the set and update the maximum value if necessary\n    for val in setval:\n        if val > maxval:\n            maxval = val\n    # Return the maximum value\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # initialize max_val with the first value of the list\n    for i in range(1, len(listval)): # iterate over the remaining values in the list\n        if listval[i] > max_val: # if the current value is greater than the max_val, update max_val\n            max_val = listval[i]\n    return max_val # return the max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        return max(listval, key=listval.count)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        elif item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if max_val < listval[i]:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize a variable to hold the maximum value\n    max_val = None\n    \n    # iterate over each element in the list\n    for val in listval:\n        # if the current element is greater than the current maximum value, update max_val\n        if val > max_val:\n            max_val = val\n    \n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for value in listval:\n        if value > max_val:\n            max_val = value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maxval as the first element of the list\n    maxval = listval[0]\n    # iterate over the rest of the list and compare each element to maxval\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    # return the maximum value found\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # start with the first element as maximum\n    for val in listval:\n        if val > max_val: # if the current element is greater than the current maximum\n            max_val = val # update the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # initialize maximum value variable\n    max_val = None\n\n    # loop through list values\n    for i in listval:\n        # check if current value is greater than maximum value\n        if max_val is None or i > max_val:\n            max_val = i\n\n    # return maximum value\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    sum_divisors = 0\n    divisor = 1\n\n    while divisor <= number:\n        if number % divisor == 0:\n            sum_divisors += divisor\n        divisor += 1\n\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    divisor_sum = 0\n    i = 1\n\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            divisor_sum += i\n            number //= i\n            i += 1\n\n    if number > 1:\n        divisor_sum += number\n\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            sum_div += i\n        i += 1\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    sum_div = 0\n    \n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the input number is divisible by the current number\n        if number % i == 0:\n            # If it is, add it to the sum of divisors\n            sum_div += i\n            \n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor*divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inversions += i - j\n                break\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables to count inversions\n    inv_count = 0\n    i = 1\n    j = len(arr) - 2\n\n    # Iterate through the array and count inversions\n    while i <= j:\n        if arr[i] > arr[j]:\n            inv_count += (j - i + 1)\n            i += 1\n        else:\n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(sorted_arr)):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n    left = arr[:len(arr) // 2]\n    right = arr[len(arr) // 2:]\n\n    inv_count += get_Inv_Count(left)\n    inv_count += get_Inv_Count(right)\n\n    merged = merge_sort(arr)\n    inv_count += get_Inv_Count(merged)\n\n    return inv_count\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 7, 1, 3, 6]\n    print(\"Original Array:\", arr)\n    print(\"Inversion Count:\", get_Inv_Count(arr))"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Counting inversions using merge sort\n    merge_sort(arr, 0, n - 1)\n    return count_inversions(arr)\n\n\ndef merge_sort(arr, start, end):\n    if start < end:\n        mid = (start + end) // 2\n        merge_sort(arr, start, mid)\n        merge_sort(arr, mid + 1, end)\n        merge(arr, start, mid, end)\n\n\ndef merge(arr, start, mid, end):\n    i = start\n    j = mid + 1\n    k = start\n    inv_count = 0\n    # Merging two sorted arrays\n    while i <= mid and j <= end:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            k += 1\n            inv_count += mid - i + 1\n            j += 1\n    # Copying remaining elements of the first array\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    # Copying remaining elements of the second array\n    while j <= end:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n    # Updating inversion count\n    global inv_count\n    inv_count += mid - start + 1\n    return\n\n\ndef count_inversions(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            count += (right - left + 1)\n            left += 1\n            right -= 1\n        else:\n            left += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    # Count the number of inversions in the array.\n    inversions = 0\n\n    # Sort the array in ascending order.\n    arr.sort()\n\n    # Iterate through the array.\n    for i in range(len(arr)):\n        # Check for inversions.\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Sort the array\n    for i in range(n):\n        for j in range(0, i):\n            if arr[j] > arr[i]:\n                arr[j], arr[i] = arr[i], arr[j]\n                count += i - j\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order \n    arr.sort() \n\n    # Initialize two variables to keep track of the count of inversions and the current index of the sorted array \n    count = 0 \n    i = 0 \n\n    # Traverse the array from the second element to the last element and count the number of inversions \n    for j in range(1, len(arr)): \n        # Check if the current element is greater than the next element \n        if arr[j] < arr[i]: \n            # Increment the count of inversions \n            count += (len(arr) - j) \n            # Move the current index to the next element \n            i = j \n\n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Calculate the length of the array\n    n = len(arr)\n    # Initialize two variables to store the left and right pointers\n    left, right = 0, n-1\n    # Initialize an empty list to store the inversions\n    inv_count = []\n    # Initialize a variable to store the current inversion count\n    curr_inv_count = 0\n    # Loop through the array from the left to the right\n    while left < right:\n        # Check if the left element is greater than the right element\n        if arr[left] > arr[right]:\n            # Increment the inversion count by the difference between the left and right pointers\n            curr_inv_count += right - left\n            # Swap the left and right elements\n            arr[left], arr[right] = arr[right], arr[left]\n            # Move the left pointer one step to the right\n            left += 1\n            # Move the right pointer one step to the left\n            right -= 1\n        else:\n            # Move the left pointer one step to the right\n            left += 1\n    # Append the final inversion count to the list\n    inv_count.append(curr_inv_count)\n    # Return the list of inversions\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from a list of tuples.\n    '''\n    # Create an empty dictionary to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n\n    # Loop through the list of tuples and update the max_aggs dictionary\n    for customer, amount in stdata:\n        max_aggs[customer] = max(max_aggs[customer], amount)\n\n    # Return the maximum aggregate for each customer\n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = 0\n    stocks = defaultdict(int)\n    for stock, price in stdata:\n        stocks[stock] += price\n        max_aggr = max(max_aggr, sum(stocks.values()))\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples and returns the maximum aggregate of all the transactions.\n    '''\n\n    # Create a defaultdict to store the aggregate count for each transaction\n    agg_count = defaultdict(int)\n\n    # Iterate through the list of tuples and update the aggregate count for each transaction\n    for item in stdata:\n        agg_count[item[0]] += item[1]\n\n    # Find the maximum aggregate count for all transactions\n    max_agg = max(agg_count.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int) # create a defaultdict to store maximum aggregate value for each item\n    max_sum = 0 # initialize maximum aggregate sum\n    for item, price in stdata:\n        max_dict[item] += price # update maximum aggregate value for each item\n        if max_dict[item] > max_sum: # if maximum aggregate value for item is greater than maximum aggregate sum, update maximum aggregate sum\n            max_sum = max_dict[item]\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the counts of each item\n    item_count = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item, quantity in stdata:\n        # increase the count of the current item by the quantity\n        item_count[item] += quantity\n\n    # find the maximum count for each item\n    max_count = {item: max(count for count in item_count.values()) for item in item_count}\n\n    # create a dictionary to store the maximum aggregate for each item\n    max_aggregate = {}\n\n    # iterate through the item_count dictionary\n    for item, count in item_count.items():\n        # calculate the maximum aggregate for the current item and count\n        max_aggregate[item] = count * max_count[item]\n\n    # return the maximum aggregate dictionary\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the maximum value for each month\n    max_values = defaultdict(int)\n    # Loop over the tuples and update the max_values defaultdict accordingly\n    for month, value in stdata:\n        max_values[month] = max(max_values[month], value)\n    # Return the maximum value across all months\n    return max(max_values.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples of the form (item_name, price) and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the price of each item\n    prices = defaultdict(int)\n    for item, price in stdata:\n        prices[item] = price\n\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for price in prices.values():\n        if price > max_agg:\n            max_agg = price\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the aggregate and frequency of each item\n    freq = defaultdict(int)\n\n    # iterate through the list of tuples and update the frequency of each item\n    for item, freq in stdata:\n        freq += 1\n        freq = freq if freq > 1 else 1\n        freq = freq if freq <= 2 else 2\n\n    # iterate through the dictionary to find the maximum aggregate\n    max_agg = 0\n    for _, freq in freq.items():\n        max_agg = max(max_agg, freq)\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the max aggregate for each day\n    max_aggr = defaultdict(int)\n    # loop through the list of tuples\n    for day, val in stdata:\n        # add the value to the max aggregate for that day\n        max_aggr[day] += val\n    # find the maximum aggregate for each day\n    max_agg = {day: max(val) for day, val in max_aggr.items()}\n    # return the maximum aggregate for each day\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    \n    for transaction in stdata:\n        # Update the max_sum if the transaction is greater than the current max_sum\n        max_sum = max(max_sum, transaction[1])\n        \n        # Update the max_dict with the aggregate and the transaction id as the key\n        max_dict[transaction[1]] = transaction[0]\n    \n    # Return the maximum aggregate as the final result\n    return max_sum"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # calculate sum of first n bits\n    sum_first = sum(range(2**n))\n    # calculate sum of last n bits\n    sum_last = sum(range(2**n, 2**(2*n)))\n    # count of sequences that sum of first n bits is same as sum of last n bits\n    count = sum_first == sum_last\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:].zfill(n)\n        if sum(int(x) for x in temp) % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if i & (i-1) == 0: # check if i is binary sequence\n            if bin(i)[2:].zfill(n) == bin(i)[-n:].zfill(n): # check if sum of first n bits is same as sum of last n bits\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_sum = sum([int(j) for j in bin(i)[2:].zfill(n)])\n        last_sum = sum([int(j) for j in bin(i)[-n:].zfill(n)])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize the count variable and two lists to store the binary sequences\n    count = 0\n    first_bit = 0\n    second_bit = 0\n    binary_seq = []\n    \n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n):\n        binary_seq.append(bin(i)[2:].zfill(n))\n    \n    # Calculate the sum of the first n bits of each binary sequence and store them in a list\n    first_bit_sum = [int(binary_seq[i][0:n], 2) for i in range(len(binary_seq))]\n    \n    # Calculate the sum of the last n bits of each binary sequence and store them in a list\n    last_bit_sum = [int(binary_seq[i][-n:], 2) for i in range(len(binary_seq))]\n    \n    # Compare the sum of first n bits of each sequence with the sum of last n bits of each sequence\n    for i in range(len(first_bit_sum)):\n        if first_bit_sum[i] == last_bit_sum[i]:\n            count += 1\n    \n    # Return the count of binary sequences meeting the criteria\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        first_sum = sum([int(digit) for digit in bin(i)[2:]])\n        second_sum = sum([int(digit) for digit in bin(i-2**(n-1)-1)[2:]])\n        if first_sum == second_sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    # Initialize count to zero\n    count = 0\n\n    # Create list of all binary strings of length 2n\n    binary_strings = [format(i, '02d') for i in range(2**n)]\n\n    # Loop through each binary string\n    for binary_string in binary_strings:\n        # Find the sum of first n bits\n        first_n_bits_sum = int(binary_string[:n])\n\n        # Find the sum of last n bits\n        last_n_bits_sum = int(binary_string[-n:])\n\n        # Compare the two sums\n        if first_n_bits_sum == last_n_bits_sum:\n            # If they are equal, increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(n+1)):\n        sum_i = sum([int(digit) for digit in bin(i)[2:]])\n        if sum_i == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**(2*n), 2**(2*n+1)):\n        first_sum = 0\n        last_sum = 0\n        for j in range(n):\n            if i & (1 << (2*j+1)):\n                first_sum += 1\n            else:\n                first_sum += 0\n            if i & (1 << (2*j)):\n                last_sum += 1\n            else:\n                last_sum += 0\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        current_seq = bin(i)[2:].zfill(n)\n        if sum(int(digit) for digit in current_seq[:n]) == sum(int(digit) for digit in current_seq[-n:]):\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth counter to 0\n    depth = 0\n    # Iterate through the dictionary recursively\n    for key in d:\n        # If the value is a dictionary, increment depth counter\n        if isinstance(d[key], dict):\n            depth += 1\n            # Recursively call function to find the depth of the nested dictionary\n            depth += dict_depth(d[key])\n    # Return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 1 + max([dict_depth(v) for v in d.values()])\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key])+1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = 1 + dict_depth(value)\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        depth = max(dict_depth(v) for v in d)\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n\n    max_depth = 0\n    current_depth = 0\n    parent = None\n\n    def traverse(item):\n        global max_depth, current_depth, parent\n\n        if isinstance(item, dict):\n            current_depth += 1\n            for k, v in item.items():\n                traverse(k)\n                traverse(v)\n            current_depth -= 1\n        elif isinstance(item, list):\n            current_depth += 1\n            for i in item:\n                traverse(i)\n            current_depth -= 1\n        else:\n            if parent is None:\n                max_depth = current_depth\n            elif current_depth > parent:\n                max_depth = current_depth\n\n    traverse(d)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d, level=0):\n    if isinstance(d, dict):\n        max_depth = 0\n        for v in d.values():\n            if isinstance(v, dict):\n                depth = 1 + dict_depth(v, level+1)\n                if depth > max_depth:\n                    max_depth = depth\n            elif isinstance(v, (list, tuple)):\n                for item in v:\n                    if isinstance(item, dict):\n                        depth = 1 + dict_depth(item, level+1)\n                        if depth > max_depth:\n                            max_depth = depth\n        return max_depth + level\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments: arr, ranges, and rotations.\n    \n    arr: the array of integers to be rotated.\n    ranges: a list of two integers, representing the minimum and maximum values of the range.\n    rotations: the number of rotations to be performed.\n    index: the index at which the element needs to be found.\n    \n    Returns the element at the given index after rotations.\n    \"\"\"\n    \n    # Initialize the minimum and maximum values in the range\n    min_val = ranges[0]\n    max_val = ranges[1]\n    \n    # Perform rotations on the array\n    for i in range(rotations):\n        min_val = arr[0]\n        max_val = arr[-1]\n        for j in range(len(arr)):\n            if arr[j] < min_val:\n                arr[j] = min_val\n            elif arr[j] > max_val:\n                arr[j] = max_val\n    \n    # Return the element at the given index after rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # calculate the number of elements to shift in each direction\n    left_shift = index % len(arr)\n    right_shift = len(arr) - (index % len(arr))\n\n    # calculate the element to be shifted and its rotation distance\n    element_to_shift = arr[index]\n    rotation_distance = rotations % len(ranges)\n\n    # shift the element to the left and right\n    if rotation_distance < left_shift:\n        # shift left\n        for i in range(left_shift - rotation_distance):\n            if i < element_to_shift:\n                arr.append(arr.pop(0))\n            else:\n                arr.append(arr.pop(-1))\n    else:\n        # shift right\n        for i in range(rotation_distance - left_shift):\n            if i < element_to_shift:\n                arr.append(arr.pop(-1))\n            else:\n                arr.append(arr.pop(0))\n\n    # find the element at the final index after rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array 'arr', the list of ranges 'ranges', the number of rotations 'rotations', and the index 'index'.\n    It returns the element at the given index after rotations.\n    '''\n    # Initialize the index of the element to be rotated\n    for i in range(rotations):\n        # Calculate the new index after rotation\n        new_index = (index + ranges[i]) % len(arr)\n        # Swap the element at old index with the element at new index\n        arr[index], arr[new_index] = arr[new_index], arr[index]\n        index = new_index\n    # Return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotated_arr = arr.copy()\n    for i in range(rotations):\n        start, end = ranges[i]\n        for j in range(start, end):\n            temp = rotated_arr[j]\n            rotated_arr[j] = rotated_arr[end - 1]\n            rotated_arr[end - 1] = temp\n        end -= 1\n\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): The list of numbers to be rotated.\n    ranges (list): The list of ranges for each rotation.\n    rotations (int): The number of rotations to be applied.\n    index (int): The index of the element to be found.\n\n    Returns:\n    int: The element at the given index after the specified number of rotations.\n    \"\"\"\n    # Initialize variables for the index and the number of elements found\n    current_index = index\n    count = 0\n\n    # Iterate through the rotations and their ranges\n    for i in range(rotations):\n        # Calculate the next index after the rotation\n        next_index = current_index + ranges[i]\n\n        # Check if the next index is out of bounds\n        if next_index >= len(arr):\n            # Reset the current index to the first element after the rotation\n            current_index = 0\n        else:\n            # Update the current index to the next element after the rotation\n            current_index = next_index\n\n        # Check if the element at the current index matches the index we are searching for\n        if count == index:\n            return arr[current_index]\n        # Increment the count if the element at the current index is found\n        count += 1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, and a list of rotations, and returns the element at the given index after rotations.\n\n    :param arr: The array to be rotated.\n    :type arr: list\n    :param ranges: A list of tuples containing the range of the values to be rotated.\n    :type ranges: list\n    :param rotations: A list of numbers indicating the number of rotations to be applied to the array.\n    :type rotations: list\n    :param index: The index for which the element is to be found.\n    :type index: int\n    :return: The element at the given index after rotations.\n    :rtype: Any\n    '''\n\n    # Convert the rotations list to a dictionary to easily access the rotations for each range.\n    rotations_dict = dict(zip(ranges, rotations))\n\n    # Initialize a variable to store the result.\n    result = None\n\n    # Loop through each range in the ranges list.\n    for range_start, range_end in ranges:\n        # Calculate the start and end indices for the current range.\n        start_index = (index - range_start) % (range_end - range_start) + range_start\n        end_index = start_index + range_end\n\n        # Rotate the array between the start and end indices.\n        rotated_arr = arr[start_index:end_index]\n        for i in range(rotations_dict[range_start]):\n            rotated_arr = rotated_arr[1:] + [rotated_arr[0]]\n\n        # If the rotated array has more elements than the index, the element is at the end of the rotated array.\n        if len(rotated_arr) > index:\n            result = rotated_arr[index]\n            break\n\n        # If the rotated array has fewer elements than the index, check if it falls within the range.\n        elif len(rotated_arr) < index:\n            if index - len(rotated_arr) < range_start:\n                result = None\n            elif index - len(rotated_arr) >= range_start and index - len(rotated_arr) < range_end:\n                result = arr[index - len(rotated_arr)]\n                break\n\n    # If the result is still None, the element is not in the array.\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # number of elements in the array\n    n = len(arr)\n    # array to store rotated elements\n    rotated_arr = [0] * n\n\n    # loop for rotations\n    for i in range(rotations):\n        # calculate the last element of the current rotation\n        last_elem = (i * n + index) % n\n\n        # find the minimum and maximum of the current range\n        min_range = max(0, last_elem - ranges[i])\n        max_range = min(last_elem + ranges[i], n - 1)\n\n        # loop for finding the rotated elements in the current range\n        for j in range(min_range, max_range + 1):\n            # calculate the new index for the current element\n            new_index = (j - min_range + i) % n\n\n            # check if the element is already in the rotated_arr\n            if rotated_arr[new_index] == arr[j]:\n                # element is already in the rotated_arr, continue to the next element\n                continue\n\n            # rotate the element to the new position in the rotated_arr\n            rotated_arr[new_index] = arr[j]\n\n        # swap the original array with the rotated_arr\n        arr = rotated_arr\n\n    # find the final element at the given index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, ranges, rotations, and an index to find the element\n    after rotations. It returns the element at the given index.\n\n    Args:\n        arr (list): The original array to find the element in.\n        ranges (list): A list containing the minimum and maximum values for each range.\n        rotations (list): A list containing the rotations needed to find the element.\n        index (int): The index of the element to find.\n\n    Returns:\n        int: The element at the given index after the number of rotations.\n    \"\"\"\n\n    # Initialize a variable to keep track of the current range\n    current_range = 0\n\n    # Initialize a variable to keep track of the current rotation\n    current_rotation = 0\n\n    # Iterate over each rotation and update the current range and rotation\n    for rotation in rotations:\n        if rotation == 0:\n            continue\n        current_range += rotation\n        current_rotation += 1\n\n    # If the index is greater than the number of elements in the array, return -1\n    if index >= len(arr):\n        return -1\n\n    # Initialize the variable to keep track of the index in the current range\n    current_index = 0\n\n    # Initialize a variable to keep track of the sum of the element values in the current range\n    current_sum = 0\n\n    # Iterate over each element in the array\n    for element in arr:\n        # If the current index is equal to the index we're looking for, return the element\n        if current_index == index:\n            return element\n\n        # If the current range has been reached, update the current range and rotation\n        if current_index >= current_range:\n            current_range = ranges[current_rotation]\n            current_rotation += 1\n\n        # Increment the current index and add the element value to the sum\n        current_index += 1\n        current_sum += element\n\n    # If we make it through the entire loop without returning the element at the index, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # check if the index is valid\n    if index < 0 or index >= len(arr):\n        return None\n\n    # find the first rotation that satisfies the conditions\n    for r in rotations:\n        if index % r == 0:\n            break\n\n    # calculate the new index after the rotation\n    new_index = (index - r + len(arr)) % len(arr)\n\n    # check if the new index is within the valid range\n    if new_index < 0:\n        new_index += len(arr)\n\n    # if the new index is within the valid range, find the element\n    if new_index >= len(arr):\n        new_index -= len(arr)\n        element = find_Element(arr, ranges, rotations, new_index)\n    else:\n        element = arr[new_index]\n\n    # check if the element satisfies the conditions\n    if element is not None and (element >= ranges[0] or element < ranges[1]):\n        return element\n\n    # if the element does not satisfy the conditions, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges and rotations, and an index as input and returns the element at the given index after number of rotations.\n\n    The input array is given as arr, the list of ranges is given as ranges, and the number of rotations is given as rotations. The index of the element to be found is given as index.\n\n    The function first calculates the total number of rotations needed to reach the index. Then, it uses the given list of ranges to calculate the range of rotations that the element should be found in. Finally, it uses the given index and the total number of rotations to calculate the index of the element after the rotations.\n\n    The function returns the element at the calculated index.\n    '''\n\n    total_rotations = sum(rotations)\n    start = 0\n    end = total_rotations - 1\n\n    for i in range(len(ranges)):\n        if index >= ranges[i][0]:\n            start = ranges[i][1]\n        if index <= ranges[i][1]:\n            end = ranges[i][0] - 1\n            break\n\n    if start > end:\n        return None\n\n    result = arr[start]\n    for i in range(rotations[start]):\n        result = arr[end]\n        end -= 1\n\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'p', word, re.IGNORECASE):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return \"No words starting with 'p' found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    if len(result) == 0:\n        return None\n    return result[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the pattern to match the starting letter 'p'\n    pattern = re.compile(r'^p')\n    # Initialize the two variables to None\n    p1 = None\n    p2 = None\n    # Iterate over the words in the list and check if the first letter matches 'p'\n    for word in words:\n        if pattern.match(word[0]):\n            if p1 is None:\n                p1 = word\n            elif p2 is None:\n                p2 = word\n    # Return the two words\n    return p1, p2"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define regular expression pattern to match words starting with letter 'p'\n    pattern = r'p[a-z]+'\n    \n    # loop through the words in the list and check if they match the pattern\n    for word in words:\n        if re.match(pattern, word):\n            # return the two words that match the pattern\n            return word, words[words.index(word) + 1]\n    \n    # if no matching words are found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    if index == n:\n        return 0\n    \n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = a[i-1]\n            elif i == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n    \n    return dp[n][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k > index:\n        return float('-inf')\n\n    if index == 0:\n        return a[0]\n\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n\n    for i in range(1, n + 1):\n        if i == index:\n            dp[i] = a[i] + max_sum_increasing_subseq(a, n, index - 1, k)\n        else:\n            if k > i:\n                dp[i] = a[i] + max_sum_increasing_subseq(a, n, index - 1, k)\n            else:\n                dp[i] = max_sum_increasing_subseq(a, n, index - 1, k)\n\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables for storing maximum sum and its ending index\n    max_sum = float('-inf')\n    max_end_index = -1\n    # Initialize variables for storing increasing subsequence\n    increasing_subseq = []\n    # Traverse through the array and check if current index is smaller than k\n    while index < k:\n        # If current index is not in increasing subsequence, add it to increasing subsequence and update max sum and max ending index\n        if index not in increasing_subseq:\n            increasing_subseq.append(index)\n            if a[increasing_subseq[-1]] > a[increasing_subseq[-2]]:\n                max_sum = max(max_sum, a[increasing_subseq[-1]] + increasing_subseq[-1])\n            else:\n                max_sum = max(max_sum, a[increasing_subseq[-1]] + increasing_subseq[-2])\n            max_end_index = increasing_subseq[-1]\n        # Move to the next index\n        index += 1\n    # If k is not in increasing subsequence, add it to increasing subsequence and update max sum and max ending index\n    if k not in increasing_subseq:\n        increasing_subseq.append(k)\n        if a[increasing_subseq[-1]] > a[increasing_subseq[-2]]:\n            max_sum = max(max_sum, a[increasing_subseq[-1]] + increasing_subseq[-1])\n        else:\n            max_sum = max(max_sum, a[increasing_subseq[-1]] + increasing_subseq[-2])\n        max_end_index = increasing_subseq[-1]\n    # Traverse through the array and check if current index is smaller than index\n    while index < n:\n        # If current index is not in increasing subsequence, add it to increasing subsequence and update max sum and max ending index\n        if index not in increasing_subseq:\n            increasing_subseq.append(index)\n            if a[increasing_subseq[-1]] > a[increasing_subseq[-2]]:\n                max_sum = max(max_sum, a[increasing_subseq[-1]] + increasing_subseq[-1])\n            else:\n                max_sum = max(max_sum, a[increasing_subseq[-1]] + increasing_subseq[-2])\n            max_end_index = increasing_subseq[-1]\n        # Move to the next index\n        index += 1\n    # Return maximum sum and its ending index\n    return max_sum, max_end_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n\n    # initialize an array to store the maximum sum of increasing subsequence for each index\n    max_sum_arr = [0] * n\n\n    # initialize a variable to store the maximum sum of increasing subsequence from prefix until index\n    max_sum_prefix_to_index = 0\n\n    # initialize a variable to store the maximum sum of increasing subsequence including kth element\n    max_sum_including_k = 0\n\n    # loop through the array from index to k-1\n    for i in range(index, k):\n        # if the current element is greater than the previous maximum sum of increasing subsequence from prefix until index, update the maximum sum of increasing subsequence from prefix until index and the maximum sum of increasing subsequence including kth element\n        if a[i] > max_sum_prefix_to_index + a[i-index]:\n            max_sum_prefix_to_index = max_sum_arr[i] + a[i-index]\n            max_sum_including_k = max_sum_prefix_to_index + a[i]\n\n        # if the current element is greater than the previous maximum sum of increasing subsequence including kth element, update the maximum sum of increasing subsequence including kth element\n        if a[i] > max_sum_including_k:\n            max_sum_including_k = a[i]\n\n    # return the maximum sum of increasing subsequence including kth element\n    return max_sum_including_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # initialize dp table to store maximum sum of increasing subsequence for each prefix up to the ith index\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    # initialize maximum sum of increasing subsequence from prefix up to the ith index to 0\n    for i in range(n+1):\n        dp[i][0] = 0\n\n    # initialize maximum sum of increasing subsequence from prefix up to the ith index and the given kth element to negative infinity\n    for i in range(k+1):\n        dp[0][i] = -float('inf')\n\n    # fill dp table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i-1] <= a[i-1] <= a[i-1] + j:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + a[i-1])\n\n    # find maximum sum of increasing subsequence from prefix up to the ith index and the given kth element\n    max_sum = dp[n][k]\n\n    # find maximum sum of increasing subsequence from prefix up to the ith index\n    max_sum_from_prefix = dp[n][k-1]\n\n    # return maximum sum of increasing subsequence from prefix up to the ith index and the given kth element\n    return max_sum_from_prefix, max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n-1:\n        return a[index]\n    if index > n-1:\n        return 0\n    if k > index:\n        return 0\n    if index == k:\n        return max(a[index], a[index+1]) + max_sum_increasing_subseq(a, n, index+2, k)\n    return max(a[index], max_sum_increasing_subseq(a, n, index+1, k)) + a[index] + max_sum_increasing_subseq(a, n, index+2, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if index > k:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k) + a[index] - a[k])\n    else:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] - a[index-1])\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    max_sum = 0\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if a[i-1] > a[i-1-j]:\n                dp[i][j] = dp[i-1][j-1] + a[i-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    for i in range(index, n+1):\n        for j in range(k+1):\n            if a[i-1] > a[i-1-j] and j <= k:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + a[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    for j in range(k+1):\n        max_sum = max(max_sum, dp[n][j])\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    max_sum = float('-inf') # initialize max sum to negative infinity\n    dp = [float('-inf')] * n # initialize dp array with negative infinity\n    \n    for i in range(index, n):\n        if k > i: # if kth element is after i\n            dp[i] = max(dp[i], dp[i-1] + a[i]) # update dp[i] with max of dp[i-1] and a[i]\n        else: # if kth element is not after i\n            dp[i] = max(dp[i-1] + a[i], dp[i]) # update dp[i] with max of dp[i-1] and a[i]\n            \n        if dp[i] > max_sum: # update max_sum if current dp[i] is greater\n            max_sum = dp[i]\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    temp_sum = 0\n    for i in range(index, n):\n        current_sum = max(a[i], current_sum + a[i])\n        if i == k:\n            temp_sum = max(temp_sum, current_sum)\n        if current_sum > max_sum:\n            max_sum = current_sum\n    if max_sum < 0:\n        return 0\n    return temp_sum + max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # copy the tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n    \n    # calculate the length of the colon\n    colon_length = (m + n - 2) // 2\n    \n    # generate the colon by slicing the tuple\n    colon = tuplex_copy[:colon_length]\n    \n    # add a tuple with a single element for the missing elements\n    if (m + n - 2) % 2 == 1:\n        # get the index of the middle element\n        middle_index = (m + n - 2) // 2\n        \n        # generate a tuple with a single element\n        single_element_colon = (tuplex_copy[middle_index],)\n        \n        # concatenate the colon with the single element colon\n        colon += single_element_colon\n    \n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # copy the tuple to avoid modifying the original\n    colon = deepcopy(tuplex)\n    \n    # iterate over the first m elements of the tuple\n    for i in range(m):\n        colon[i] = colon[i].upper()\n    \n    # iterate over the last n elements of the tuple\n    for j in range(n-m,n):\n        colon[j] = colon[j].lower()\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the original tuple\n    length = len(new_tuplex)\n    # Get the index of the last element in the colon\n    colon_index = length - m - 1\n    # Generate a colon by adding n copies of the last element to the end of the original tuple\n    new_tuplex[-m:] = new_tuplex[-m:] + new_tuplex[-m:][:n]\n    # Return the new tuple\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize the colon with empty lists\n    colon = [[], [], [], [], [], [], [], [], []]\n    # Loop through the tuple and insert elements into the colon\n    for i in range(m):\n        for j in range(n):\n            colon[i].append(tuplex[i][j])\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex = new_tuplex[:j] + (new_tuplex[j],) + new_tuplex[j+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # first check if the tuple is already a colon\n    if n == 1:\n        return (tuplex[0],)\n    # if not, create a new tuple to store the new colon\n    new_colon = ()\n    # iterate over the tuple elements and add each element to the new colon\n    for i in range(m):\n        new_colon += (tuplex[i],)\n    # check if the number of elements in the new colon is equal to n\n    if len(new_colon) == n:\n        return new_colon\n    # if not, return the new colon\n    else:\n        return new_colon[:n]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex: tuple - A tuple.\n    m: int - Number of elements in the colon.\n    n: int - Number of rows in the colon.\n\n    Returns:\n    colon: tuple - A tuple with m elements, where each element is a row of the original tuple.\n    \"\"\"\n\n    colon = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(tuplex[i * m + j])\n        colon.append(tuple(row))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(new_tuplex)\n    # Check if the length of the colon is equal to m\n    if length == m:\n        # Get the indices of the colon\n        indices = get_indices(new_tuplex, m)\n        # Get the colon\n        colon = [new_tuplex[i] for i in indices]\n        return colon\n    # If the length is less than m, get the colon of length m\n    else:\n        # Get the indices of the colon\n        indices = get_indices(new_tuplex, m)\n        # Get the colon\n        colon = [new_tuplex[i] for i in indices]\n        # Get the remaining length of the tuple\n        rem_length = length - m\n        # Check if the remaining length is less than m\n        if rem_length < m:\n            # Get the indices of the remaining colon\n            indices = get_indices(new_tuplex, rem_length)\n            # Get the remaining colon\n            rem_colon = [new_tuplex[i] for i in indices]\n            # Concatenate the colon and remaining colon\n            colon = colon + rem_colon\n        return colon\n\n\ndef get_indices(tuplex, m):\n    \"\"\"\n    Get the indices of a colon of length m from a tuple.\n    \"\"\"\n    # Initialize the indices list\n    indices = []\n    # Initialize the index\n    index = 0\n    # Loop until the length of the tuple is equal to m\n    while index < len(tuplex):\n        # Append the index to the list\n        indices.append(index)\n        # Increment the index\n        index += 1\n    # Return the indices\n    return indices"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple(deepcopy(tuplex[i:i+m]) for i in range(0, len(tuplex), m))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the given tuple is empty\n    if len(tuplex) == 0:\n        return []\n    \n    # Initialize the result list\n    result = []\n    \n    # Traverse through the tuple to get the desired colon\n    for i in range(m):\n        row = []\n        for j in range(n):\n            if len(tuplex) > i*n + j:\n                row.append(tuplex[i*n + j])\n            else:\n                row.append(\"\")\n        result.append(row)\n        \n    # Return the colon as a tuple of lists\n    return tuple(result)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if len(nums1)!= len(nums2) or N > len(nums1):\n        return \"Invalid input.\"\n    \n    max_product = float('-inf')\n    products = []\n    \n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n        \n        if product1 > max_product:\n            max_product = product1\n            products = [product1]\n        elif product1 == max_product:\n            products.append(product1)\n            \n        if product2 > max_product:\n            max_product = product2\n            products = [product2]\n        elif product2 == max_product:\n            products.append(product2)\n            \n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Both lists must be of the same length.\"\n    max_product = float('-inf')\n    largest_product = [0] * N\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            product = 1\n            for k in range(N):\n                product *= max(nums1[i], nums2[k])\n            if product > max_product:\n                max_product = product\n                for k in range(N):\n                    largest_product[k] = max(nums1[i], nums2[k])\n    return max_product, largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the variables for the largest products and the indices of the largest products\n    max_product = float('-inf')\n    max_product_index = 0\n    max_product2 = float('-inf')\n    max_product2_index = 0\n\n    # Loop through the sorted lists and find the largest products\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        if product1 > max_product:\n            max_product = product1\n            max_product_index = i\n        if product1 > max_product2:\n            max_product2 = product1\n            max_product2_index = i\n\n    # Return the largest products\n    return max_product, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create a dictionary to store the products\n    product_dict = {}\n    \n    # Loop through each combination of nums1 and nums2, selecting one factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Combine the factors into a list\n            factors = [nums1[i], nums2[j]]\n            \n            # Calculate the product of the factors\n            product = 1\n            for factor in factors:\n                product *= factor\n            \n            # Add the product to the dictionary\n            if product in product_dict:\n                product_dict[product].append([i, j])\n            else:\n                product_dict[product] = [[i, j]]\n    \n    # Sort the products by value in descending order\n    sorted_products = sorted(product_dict.items(), key=lambda x: x[0], reverse=True)\n    \n    # Return the N largest products\n    return [product for product, factors in sorted_products[:N] for factor in factors]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists by the largest to smallest\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # initialize the largest products list\n    largest_products = []\n    # loop over the requested products\n    for i in range(N):\n        # compute the product of the two selected factors\n        product = nums1[i] * nums2[i]\n        # add the product to the list of largest products\n        largest_products.append(product)\n    # return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in each list\n    max_num1 = max(nums1)\n    max_num2 = max(nums2)\n\n    # Initialize the maximum product variables\n    max_product1 = max_num1 * max_num2\n    max_product2 = max_num2 * max_num1\n\n    # Initialize the list of factors to select\n    factors = [max_num1, max_num2]\n\n    # Iterate through the remaining numbers\n    for i in range(3, N+1):\n        # Calculate the current product\n        product = max(nums1[i-1]*factors[0], nums2[i-1]*factors[1])\n\n        # Update the maximum product variables\n        max_product1 = max(max_product1, max_product2 * product)\n        max_product2 = max_product1 / product\n\n        # Add the current factor to the list of factors\n        factors.append(product)\n\n    # Return the list of factors\n    return factors"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables\n    largest = [0] * N\n    largest_product = 0\n\n    # iterate over all possible combinations of factors\n    for i in range(N):\n        for j in range(i+1, N):\n            # calculate the product of the two factors\n            product = nums1[i] * nums1[j] * nums2[i] * nums2[j]\n            # update the largest product and its index if necessary\n            if product > largest_product:\n                largest_product = product\n                for k in range(N):\n                    largest[k] = i if k == i else j\n\n    # return the largest products\n    return largest[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i < j:\n                product = 1\n                for k in range(min(i, j), N+1):\n                    product *= nums1[i-k] * nums2[j-k]\n                if product > max_product:\n                    max_product = product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    result = []\n    for i in range(N):\n        product1 = nums1[i]\n        product2 = nums2[i]\n        for j in range(i+1, N):\n            product1 *= nums1[j]\n            product2 *= nums2[j]\n        result.append(product1)\n        result.append(product2)\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def max_product(nums):\n        return max(nums) * min(nums)\n\n    product1 = max_product(nums1)\n    product2 = max_product(nums2)\n\n    result = []\n\n    for i in range(N):\n        if i < len(nums1):\n            result.append(product1)\n        elif i < len(nums1) + len(nums2):\n            result.append(product2)\n        else:\n            result.append(0)\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their maximum value.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns their maximum value.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # initialize an empty tuple\n    result = ()\n    # iterate through each character in the string\n    for char in str1:\n        # append the character to the tuple\n        result = result + (char,)\n    # return the tuple of characters\n    return result"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    str_list = list(str1)\n    \n    # create a tuple of characters from the list of characters\n    str_tuple = tuple(str_list)\n    \n    # return the tuple of characters\n    return str_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n\n    Args:\n    str1 (str): A string to be converted to a tuple of characters.\n\n    Returns:\n    tuple: A tuple containing the characters of the input string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 31\n    while i >= 0:\n        if (n & (1 << i)) == 0:\n            n |= (1 << i)\n            break\n        i -= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Convert the integer to binary representation \n    binary = bin(n)[2:]\n\n    # Iterate through each bit in the binary representation\n    for i in range(len(binary)):\n        # If the bit is 1, unset the bit and return the modified binary\n        if binary[i] == '1':\n            binary = binary[:i] + '0' + binary[i+1:]\n            return int(binary, 2)\n\n    # If no unset bits are found, return the original number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n    \"\"\"\n    while n & 1 == 0: # if the least significant bit is 0, move to the next bit position\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer.\n    \"\"\"\n    n = bin(n)[2:] # convert decimal to binary string\n    i = 0\n    while i < len(n) and n[i] == '0':\n        i += 1\n    if i == len(n):\n        return n\n    else:\n        return '1' + n[i:]"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the leftmost unset bit using bitwise operations \n    unset_bit = (n & -n) \n\n    # Set the leftmost unset bit to 1 \n    n |= unset_bit \n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the leftmost set bit\n    left_most_set_bit = 0\n    while n & (1 << left_most_set_bit) == 0:\n        left_most_set_bit += 1\n\n    # set the leftmost set bit\n    n |= 1 << left_most_set_bit\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Check if the number is 0\n    if n == 0:\n        return 1\n    \n    # Find the index of the leftmost unset bit\n    index = 0\n    while (n & (1 << index)) == 0:\n        index += 1\n    \n    # Set the leftmost unset bit\n    n |= (1 << index)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Use bitwise operations to find the left most unset bit\n    bit = 1\n    while (n & bit) == 0:\n        bit <<= 1\n    # Set the leftmost unset bit to 1\n    return n | bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost unset bit in the binary representation of n\n    bit_count = 0\n    while (n & 1) == 0:\n        n = n >> 1\n        bit_count += 1\n\n    # Set the leftmost unset bit to 1\n    n |= 1 << bit_count\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and sets the leftmost unset bit of the number to 1.\n    \"\"\"\n    # Convert the integer to binary\n    binary_n = bin(n)[2:]\n    # Initialize an empty list to store unset bits\n    unset_bits = []\n    # Loop through each bit in the binary representation\n    for bit in binary_n:\n        if bit == '0':\n            unset_bits.append(1)\n        else:\n            unset_bits.append(0)\n    # Calculate the index of the first unset bit\n    first_unset_bit = binary_n.index('0')\n    # Calculate the number of bits to shift to the right\n    shift_bits = first_unset_bit\n    # Calculate the value to shift the bits by\n    shift_value = 1 << shift_bits\n    # Shift the bits to the right by the number of unset bits\n    n = n >> shift_bits\n    # Set the leftmost unset bit to 1\n    n |= shift_value\n    # Convert the resulting number back to decimal\n    result = int(n, 2)\n    # Return the result\n    return result"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, representing the radius and height of the cone, respectively.\n    It returns the volume of the cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*(r**2)*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r * r * r\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculate the area of the cone\n    area = math.pi * r**2\n    \n    # Calculate the volume of the cone\n    volume = area * h\n    \n    # Return the volume of the cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # calculate the volume of the cone using the formula V = \u03c0r^2h\n    volume = math.pi * r**2 * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variable to store highest power of 2\n    highest = 1\n    # Loop through all integers from 2 to n\n    for i in range(2, n+1):\n        # If i is a power of 2, set highest to i\n        if i == 2**highest:\n            highest = i\n        # Otherwise, loop through all previous powers of 2 until we find one that is greater than i\n        elif i % 2**highest!= 0:\n            highest += 1\n            while i % 2**highest!= 0:\n                highest += 1\n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** (n.bit_length() - 1) if n.bit_length() > 1 else 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == 1:\n            return i\n        elif i == 2:\n            return i\n        else:\n            i *= 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n, 0, -1): \n        if i & (i-1) == 0: \n            return i "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    # Convert n to integer to make it easier to work with\n    n = int(n)\n    \n    # Initialize the highest power of 2 that is less than or equal to n\n    highest = 1\n    \n    # Loop through the bits of n\n    for i in range(32):\n        # Check if the ith bit of n is 1\n        if n & (1 << i):\n            # If it is, set highest to the current value of highest\n            highest = i\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    # Initialize the result variable to 0\n    result = 0\n\n    # Loop while n is greater than the result\n    while n > result:\n        # Increment the result by 1\n        result += 1\n\n        # Check if the result is a power of 2\n        if result == 2**result:\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Create a variable to keep track of the highest power of 2 found so far. \n    highest_power = 1\n\n    # Loop through all possible powers of 2 from 1 to n (inclusive). \n    for power in range(2, n+1): \n\n        # If the power is less than or equal to the highest power of 2 found so far, update the highest power of 2 found so far. \n        if power <= highest_power: \n            highest_power = power\n\n    return highest_power "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # check if n is a power of 2\n    if n > 0 and (n & (n - 1)) == 0:\n        # find the highest power of 2 less than or equal to n\n        highest_power_of_2 = 1\n        while highest_power_of_2 * highest_power_of_2 <= n:\n            highest_power_of_2 *= 2\n        return highest_power_of_2\n    else:\n        return None"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n >> 1 \n    return n "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    \n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    \n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base case: if n=0, return 2\n    if n == 0:\n        return 2\n    # Base case: if n=1, return 1\n    elif n == 1:\n        return 1\n    # Recursive case: find the (n-1)'th and (n-2)'th lucas numbers\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]\n    for i in range(1, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    This function finds then'th Lucas number.\n    '''\n    # Base cases for the recursion\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # Calculate the Lucas number using the formula:\n        # L(n) = L(n-1) + L(n-2)\n        # Initialize the first two Lucas numbers\n        lucas1 = 2\n        lucas2 = 1\n        # Use a loop to calculate L(n) recursively\n        for i in range(2, n+1):\n            lucas_new = lucas1 + lucas2\n            lucas1 = lucas2\n            lucas2 = lucas_new\n        return lucas2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # initialize the variables\n    a = 0\n    b = 2\n    c = 1\n    # find the nth lucas number\n    for i in range(1, n):\n        a, b = b, a + b\n        c = (a + b) % 2\n        # print the nth lucas number\n        if i == n-1:\n            print(c)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the format string to the element and add it to the new list\n        new_list.append(string.format(list_[i]))\n    # Return the new list\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        if i % 3 == 0:\n            result[l1[i]] = {}\n            for j in range(len(l2[i])):\n                result[l1[i]][l2[i][j]] = l3[i][j]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # Convert first list to dictionary\n    dict1 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    \n    # Convert second list to dictionary\n    dict2 = {}\n    for i in range(len(l1)):\n        dict2[l1[i]] = l3[i]\n    \n    # Convert both dictionaries into one\n    result_dict = dict1.copy()\n    result_dict.update(dict2)\n    \n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes multiple lists as input and converts them to nested dictionaries.\n\n    Args:\n        *args: A variable number of lists, each containing elements to be converted to a dictionary.\n\n    Returns:\n        A list of dictionaries, where each dictionary contains elements from the input lists.\n    \"\"\"\n    result = []\n    for lst in args:\n        if isinstance(lst, list):\n            new_dict = {}\n            for item in lst:\n                if isinstance(item, list):\n                    for subitem in item:\n                        if isinstance(subitem, tuple):\n                            new_dict[subitem[0]] = subitem[1]\n                elif isinstance(item, tuple):\n                    new_dict[item[0]] = item[1]\n            result.append(new_dict)\n        else:\n            raise TypeError(\"All input lists must be of type 'list'.\")\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i][j]\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create an empty dictionary to hold the nested dictionary\n    nested_dict = {}\n\n    # Loop through the first list and create a nested dictionary\n    for i in l1:\n        nested_dict[i] = {}\n\n    # Loop through the second list and create a nested dictionary\n    for i in l2:\n        nested_dict[i] = {}\n\n    # Loop through the third list and create a nested dictionary\n    for i in l3:\n        nested_dict[i] = {}\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # initialize an empty dictionary\n    result = {}\n    \n    # loop through the lists and add the elements to the dictionary\n    for list in lists:\n        for item in list:\n            # if the item is a dictionary, add the nested dictionary\n            if isinstance(item, dict):\n                result.update(item)\n            # if the item is a list, add the nested list\n            elif isinstance(item, list):\n                for subitem in item:\n                    if isinstance(subitem, dict):\n                        result.update(subitem)\n                    elif isinstance(subitem, list):\n                        result.update(convert_list_dictionary(subitem))\n                    else:\n                        result[item] = subitem\n            # if the item is not a dictionary, list or tuple, add it to the dictionary\n            else:\n                result[list] = item\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): list of first level keys\n    l2 (list): list of second level keys\n    l3 (list): list of third level keys\n\n    Returns:\n    dict: nested dictionary of l1, l2 and l3\n\n    Example usage:\n    l1 = ['a', 'b', 'c']\n    l2 = ['d', 'e']\n    l3 = ['f', 'g', 'h']\n    d = convert_list_dictionary(l1, l2, l3)\n    print(d)\n    '''\n    d = {}\n    for i in range(len(l1)):\n        k1 = l1[i]\n        if k1 not in d:\n            d[k1] = {}\n        for j in range(len(l2)):\n            k2 = l2[j]\n            if k2 not in d[k1]:\n                d[k1][k2] = {}\n            for k in range(len(l3)):\n                k3 = l3[k]\n                d[k1][k2][k3] = i*j*k\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initializing the empty dictionary\n    nested_dict = {}\n    \n    # iterating through the first list\n    for item in l1:\n        # checking if the item is a list\n        if isinstance(item, list):\n            # if yes, converting it to dictionary recursively and updating the nested dictionary\n            nested_dict[item[0]] = convert_list_dictionary(item[1:])\n        # if item is not a list, adding it to the nested dictionary as a value\n        else:\n            nested_dict[item] = None\n    \n    # iterating through the second list\n    for item in l2:\n        # checking if the item is a list\n        if isinstance(item, list):\n            # if yes, converting it to dictionary recursively and updating the nested dictionary\n            nested_dict[item[0]] = convert_list_dictionary(item[1:])\n        # if item is not a list, adding it to the nested dictionary as a value\n        else:\n            nested_dict[item] = None\n    \n    # iterating through the third list\n    for item in l3:\n        # checking if the item is a list\n        if isinstance(item, list):\n            # if yes, converting it to dictionary recursively and updating the nested dictionary\n            nested_dict[item[0]] = convert_list_dictionary(item[1:])\n        # if item is not a list, adding it to the nested dictionary as a value\n        else:\n            nested_dict[item] = None\n    \n    # returning the final nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): List 1 to be converted to nested dictionary.\n    l2 (list): List 2 to be converted to nested dictionary.\n    l3 (list): List 3 to be converted to nested dictionary.\n\n    Returns:\n    A nested dictionary where each key is a list from the input lists and each value is a list converted from each list.\n\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        nested_dict[l3[i]] = l1[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    nested_dict = {}\n\n    # iterate over each list and append the elements to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]]['sub_list'] = [l3[j] for j in range(len(l3)) if l3[j] in l2[i]]\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 22\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 36\n    elif n == 10:\n        return 44\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-5) + get_max_sum(n-10) + get_max_sum(n-20)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def helper(n):\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        return max(helper(n//2)+helper(n//3)+helper(n//4)+helper(n//5), n)\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    def recursive_sum(n):\n        if n == 1:\n            return n\n        else:\n            return recursive_sum(n/2) + recursive_sum(n/3) + recursive_sum(n/4) + recursive_sum(n/5) + n\n\n    return max(recursive_sum(n/2), recursive_sum(n/3), recursive_sum(n/4), recursive_sum(n/5)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # Base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return n\n    \n    # Recursive case: max sum = maximum of 2, 3, 4, 5, n\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        max_sum = get_max_sum(n//2) + n + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        return max(max_sum, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    \n    elif n == 2:\n        return n\n    \n    else:\n        # Calculate the maximum sum using the given equation\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        \n        # Return the maximum sum\n        return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # loop through each element of the input_list\n    for element in input_list:\n        # check if the length of the current element is greater than the current max length\n        if len(element) > max_length:\n            # update the max_length and max_list variables\n            max_length = len(element)\n            max_list = [element]\n        # if the length of the current element is equal to the max length, append the element to the max_list\n        elif len(element) == max_length:\n            max_list.append(element)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initializing variables\n    max_length = 0\n    max_list = []\n\n    # iterating over the list\n    for item in input_list:\n        # finding the length of the item\n        length = len(str(item))\n\n        # checking if the length is greater than the current max length\n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            # if the length is the same, then add the item to the list\n            max_list.append(item)\n\n    # returning the max list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_length:\n            max_list.append(input_list[i])\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements of the tuple\n    unique_elements = set(test_tup)\n    \n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_elements) == len(test_tup):\n        # If true, return True\n        return True\n    else:\n        # If false, return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    This function takes a tuple as input and returns True if the tuple contains no duplicates, False otherwise.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Convert the tuple to a set to remove any duplicates\n    test_set = set(test_tup)\n\n    # Check if the set is empty (i.e., all elements are distinct)\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    first_char = None\n    for char in char_count:\n        if char_count[char] == 1:\n            first_char = char\n            break\n    \n    return first_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with a count of 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through the string again and find the first non-repeating character\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    return \"All characters are unique\""
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string and returns the first non-repeating character.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(string):\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # convert the string to a set to remove duplicate characters\n    str1 = set(str1)\n\n    # iterate over the set and return the first character that appears only once\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character.\n    If all characters in the string are repeated, the function will return None.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = [a, b, c]\n    num_list.sort()\n\n    # Find the length of the list\n    length = len(num_list)\n\n    # Calculate the median\n    if length % 2 == 0:\n        # If the length of the list is even, the median is the average of the middle two numbers\n        median = (num_list[length//2-1] + num_list[length//2]) / 2\n    else:\n        # If the length of the list is odd, the median is the middle number\n        median = num_list[length//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the midpoint index and calculate the midpoint value\n    midpoint_index = len(sorted_numbers) // 2\n    midpoint_value = sorted_numbers[midpoint_index]\n\n    # if the length of the sorted list is odd, the median is the midpoint value\n    if len(sorted_numbers) % 2 == 1:\n        return midpoint_value\n    # if the length of the sorted list is even, the median is the average of the two midpoints\n    else:\n        lower_midpoint_index = midpoint_index - 1\n        lower_midpoint_value = sorted_numbers[lower_midpoint_index]\n        upper_midpoint_index = midpoint_index + 1\n        upper_midpoint_value = sorted_numbers[upper_midpoint_index]\n        return (lower_midpoint_value + upper_midpoint_value) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Find the middle two numbers\n    middle_numbers = sorted_list[1:-1]\n\n    # Calculate the median\n    if len(middle_numbers) % 2 == 0:\n        median = (middle_numbers[len(middle_numbers) // 2 - 1] + middle_numbers[len(middle_numbers) // 2]) / 2\n    else:\n        median = middle_numbers[len(middle_numbers) // 2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of the three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Get the length of the sorted list\n    length = len(sorted_numbers)\n\n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        return sorted_numbers[length//2]\n\n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[length//2-1] + sorted_numbers[length//2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    a_sorted = sorted([a, b, c])\n    # Find the middle index\n    mid_index = len(a_sorted) // 2\n    # Return the middle number\n    if len(a_sorted) % 2 == 0:\n        return (a_sorted[mid_index - 1] + a_sorted[mid_index]) / 2\n    else:\n        return a_sorted[mid_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sort the three numbers in ascending order\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n\n    # find the length of the list\n    length = len(sorted_list)\n\n    # find the middle index\n    middle_index = length // 2\n\n    # calculate the median based on the index\n    if length % 2 == 0:\n        # if the length of the list is even, find the average of the two middle numbers\n        median = (sorted_list[middle_index - 1] + sorted_list[middle_index]) / 2\n    else:\n        # if the length of the list is odd, find the middle number\n        median = sorted_list[middle_index]\n\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the median index based on the length of the sorted list\n    mid = len(nums) // 2\n\n    # Return the median number(s)\n    if mid == 0:\n        return nums[mid]\n    elif mid == 1:\n        return (nums[mid - 1] + nums[mid]) / 2\n    else:\n        return nums[mid - 1]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # check if the length of the sorted list is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # find the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers)//2-1] + sorted_numbers[len(sorted_numbers)//2]) / 2\n    else:\n        # find the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle index\n    mid = len(sorted_numbers) // 2\n\n    # If the length of the list is odd, return the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return sorted_numbers[mid]\n\n    # If the length of the list is even, return the average of the middle two numbers\n    else:\n        return (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the three numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted numbers\n    length = len(sorted_numbers)\n\n    # If the length of the sorted numbers is odd,\n    # the median is the middle number\n    if length % 2!= 0:\n        median = sorted_numbers[length // 2]\n    # If the length of the sorted numbers is even,\n    # the median is the average of the two middle numbers\n    else:\n        middle_numbers = sorted_numbers[length // 2 - 1 : length // 2 + 1]\n        median = sum(middle_numbers) / 2\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        # convert number to string and split into digits\n        digits = [int(digit) for digit in str(num)]\n        # sum up the digits\n        sum += sum(digits)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            total += int(digit)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digits_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            num_str = str(num)\n            digits_sum += sum(int(digit) for digit in num_str)\n    return digits_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_digits = sum(str(num))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Loop through each number in the list and compute the sum of its digits\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        # Loop through each digit in the number and add it to the sum\n        for digit in str(num):\n            digit_sum += int(digit)\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert each number to a string and split it into a list of digits\n        digits = list(str(num))\n        \n        # loop through each digit in the list\n        for digit in digits:\n            # convert each digit to an integer and add it to the sum variable\n            sum += int(digit)\n    \n    # return the final sum of digits\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Iterate through each number in the list\n    total_sum = 0\n    for num in nums:\n        # Convert the number to a string and iterate through its digits\n        for digit in str(num):\n            total_sum += int(digit)\n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must be of equal length.\")\n        return\n\n    # Initialize variables for the resulting tuple\n    result_tup = ()\n\n    # Perform the bitwise xor operation on the corresponding elements of the two input tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Loop through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Loop through the list and count the frequency of each tuple\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n\n    # Return the total number of unique tuples\n    return sum(freq_dict.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list of tuples as input and returns the number of unique tuples.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Add each tuple to the set\n        unique_tuples.add(tup)\n\n    # Return the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        for j in i:\n            if (j, ) not in freq:\n                freq[(j,)] = 1\n            else:\n                freq[(j,)] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new empty list to store the result\n    result = []\n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # loop through the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the elements at the same index and append the result to the result list\n            result.append(test_tup1[i] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have same length.\")\n        return\n\n    # Initialize a list to store the resultant tuple\n    result_tup = []\n\n    # Iterate through both tuples and add the elements at each index\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a result tuple with the same size as the input tuples\n    result = tuple([0] * len(test_tup1))\n\n    # loop through the elements of the input tuples and add their corresponding elements\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result[i] += test_tup1[i][j] + test_tup2[i][j]\n\n    # return the final result tuple\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup1)):\n        new_tuple.append(test_tup1[i] + test_tup2[i])\n    return tuple(new_tuple)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Loop through both tuples and add the elements at the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples have different number of elements.\")\n        return\n\n    # initialize the result tuple with zeros\n    result_tup = (0,) * len(test_tup1)\n\n    # perform index wise addition of the two input tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Check if the element is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # If it is a tuple, recursively call the function to perform the addition\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If it is a non-tuple element, perform the addition directly\n            result.append(test_tup1[i] + test_tup2[i])\n    \n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate over each tuple in the two input tuples\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        # initialize an empty list to store the new tuple\n        new_tup = []\n\n        # iterate over each element in the two tuples\n        for i in range(len(tup1)):\n            # add the corresponding elements of the two tuples\n            new_tup.append(tup1[i] + tup2[i])\n\n        # add the new tuple to the result list\n        result.append(new_tup)\n\n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a variable to store the resultant tuple\n    resultant_tuple = ()\n    \n    # Iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Append the sum of the corresponding elements of the first and second tuples\n        resultant_tuple += (test_tup1[i] + test_tup2[i],)\n    \n    # Return the resultant tuple\n    return resultant_tuple"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            print(element, \"exists in the tuple\")\n        else:\n            print(element, \"does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two arguments:\n    - tuplex: the tuple containing the element to check\n    - tuple1: the tuple containing the element to search for\n    \n    The function returns a boolean indicating whether the element exists within the tuple.\n    \"\"\"\n    # check if the element exists in the tuple\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    # Check if the tuple contains the element\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"The element exists in the tuple.\") \n    else: \n        print(\"The element does not exist in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1: \n        if item in tuplex: \n            print(item, \"is present in tuple1\") \n        else: \n            print(item, \"is not present in tuple1\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n\n    # Check if x is even or odd\n    if x % 2 == 0:\n        parity = \"Even\"\n    else:\n        parity = \"Odd\"\n\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # check if the number is even or odd\n    if x%2 == 0:\n        print(\"The parity of the number is even.\")\n    else:\n        print(\"The parity of the number is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n\n    if x % 2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd, else False.\n    \"\"\"\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"The parity of {} is even.\".format(x)\n    else:\n        return \"The parity of {} is odd.\".format(x)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2==0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Create a list of digits from the string\n    digits = [int(d) for d in num_str]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Calculate the sum of the digits\n    total_sum = sum(digits)\n\n    # Calculate the next bigger number by adding 9 to the total sum\n    next_bigger = total_sum + 9\n\n    # Convert the next bigger number to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n    # Get the length of the number\n    length = len(num_str)\n    # Initialize the new number to be empty\n    new_num = \"\"\n    # Iterate through each digit of the given number and add the next bigger digit to the new number\n    for i in range(length):\n        # Get the current digit of the given number\n        digit = int(num_str[i])\n        # Get the next digit that is the next bigger digit\n        next_bigger_digit = digit + 1\n        # Check if the next digit is greater than 9\n        if next_bigger_digit > 9:\n            next_bigger_digit = 0\n        # Add the next bigger digit to the new number\n        new_num += str(next_bigger_digit)\n    # Convert the new number to an integer and return it\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Combine the digits to form a new number\n    new_number = ''.join(str(digit) for digit in digits)\n    # Return the new number\n    return int(new_number)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # remove the last digit of the number\n    n = int(str(n)[:-1])\n    # find the largest digit in the number\n    max_digit = 0\n    while n:\n        max_digit = max(max_digit, n % 10)\n        n //= 10\n    # add one to the maximum digit and return the new number\n    return n * 10 + max_digit + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize a variable to store the reversed digits of the input number\n    reversed_digits = [n // 10**(i+1) % 10 for i in range(len(str(n)))]\n    \n    # Initialize a variable to store the position of each digit in the reversed number\n    position = []\n    for i in range(len(reversed_digits)):\n        position.append(i)\n    \n    # Sort the digits in increasing order\n    sorted_digits = sorted(reversed_digits, reverse=True)\n    \n    # Create the next bigger number by rearranging the digits\n    next_bigger = int(''.join([sorted_digits[position.index(j)] for j in range(len(sorted_digits))]))\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string and store it in a list\n    num_list = list(str(n))\n\n    # Iterate through the list of digits and swap the digits with their next bigger digits\n    for i in range(len(num_list)):\n        for j in range(i+1, len(num_list)):\n            if int(num_list[i]) < int(num_list[j]):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                break\n\n    # Convert the list back to a string and return the result\n    return int(\"\".join(num_list))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(n)\n    # split the string into a list of digits\n    num_list = list(num_str)\n    # reverse the list of digits\n    num_list.reverse()\n    # create a new string with the reversed digits\n    new_num_str = ''.join(num_list)\n    # convert the new string back to an integer\n    new_num = int(new_num_str)\n    # check if the new number is greater than the given number\n    if new_num > n:\n        return new_num\n    # otherwise, return the original number\n    else:\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num_str = str(n)\n    digits = sorted(num_str)\n    new_num = int(''.join(digits))\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # convert the given number to a string\n    num_str = str(n)\n\n    # loop through the digits of the number and reverse them\n    reverse_num_str = num_str[::-1]\n\n    # reverse the string again to get the original number\n    num = int(reverse_num_str)\n\n    # if the original number is 9, return 100\n    if n == 9:\n        return 100\n\n    # if the original number is 99, return 1000\n    elif n == 99:\n        return 1000\n\n    # if the original number is 999, return 10000\n    elif n == 999:\n        return 10000\n\n    # if the original number is 9999, return 100000\n    elif n == 9999:\n        return 100000\n\n    # if the original number is 99999, return 1000000\n    elif n == 99999:\n        return 1000000\n\n    # if the original number is 999999, return 10000000\n    elif n == 999999:\n        return 10000000\n\n    # if the original number is 9999999, return 100000000\n    elif n == 9999999:\n        return 100000000\n\n    # if the original number is 99999999, return 1000000000\n    elif n == 99999999:\n        return 1000000000\n\n    # if the original number is 999999999, return 10000000000\n    elif n == 999999999:\n        return 10000000000\n\n    # if the original number is 9999999999, return 100000000000\n    elif n == 9999999999:\n        return 100000000000\n\n    # if the original number is 99999999999, return 1000000000000\n    elif n == 99999999999:\n        return 1000000000000\n\n    # if the original number is 999999999999, return 10000000000000\n    elif n == 999999999999:\n        return 10000000000000\n\n    # if the original number is 9999999999999, return 100000000000000\n    elif n == 9999999999999:\n        return 100000000000000\n\n    # if the original number is 99999999999999, return 1000000000000000\n    elif n == 99999999999999:\n        return 10000000000000000\n\n    # if the original number is 999999999999999, return 100000000000000000\n    elif n == 9999999999999999:\n        return 1000000000000000000\n\n    # if the original number is 99999999999999999, return 10000000000000000000\n    elif n == 9999999999"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a list of digits in the given number\n    digits = [int(digit) for digit in str(n)]\n    \n    # Loop through the digits and check if there is a pair of digits that can be swapped\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] > digits[j]:\n                # Swap the digits if a bigger pair is found\n                digits[i], digits[j] = digits[j], digits[i]\n                # Convert the list of digits back to a number and return it\n                return int(''.join(str(digit) for digit in digits))\n    \n    # If no bigger pair of digits is found, return the original number\n    return n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert lists to sets to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # create a min heap of tuples (nums1[i], nums2[j], i, j)\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(heap, (nums1[i], nums2[j], i, j))\n\n    # find the k smallest pairs and return them as a list of tuples\n    pairs = []\n    while k > 0:\n        pair = heapq.heappop(heap)\n        pairs.append((pair[0], pair[1], pair[2], pair[3]))\n        k -= 1\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap to store the pairs\n    min_heap = []\n\n    # iterate through the first array and second array\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n\n            # check if the sum of the current pair is less than k\n            if nums1[i] + nums2[j] < k:\n                continue\n\n            # add the pair to the min heap if the size of the heap is less than k\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n\n            # if the size of the heap is greater than or equal to k, check if the smallest pair in the heap is the current pair\n            elif nums1[i] + nums2[j] < min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n\n    # extract the k smallest pairs from the heap and return them\n    return heapq.nsmallest(k, min_heap)[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Use a min heap to keep track of the smallest k elements\n    min_heap = []\n    # Iterate through the first array\n    for num1 in nums1:\n        # Add each number to the heap as a pair\n        heapq.heappush(min_heap, (num1, float('inf')))\n        # If the heap has k elements, remove the smallest element and add the next smallest element\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    # Initialize a list to store the pairs\n    result = []\n    # Iterate through the second array and add each pair to the result list\n    for num2 in nums2:\n        # If the heap has at least one pair with this second element, pop the pair and add it to the result list\n        while len(min_heap) > 0 and min_heap[0][0] < num2:\n            result.append((min_heap[0][0], num2))\n            heapq.heappop(min_heap)\n        # Add the pair to the heap\n        heapq.heappush(min_heap, (num2, float('inf')))\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the indices of the smallest elements\n    min_heap = []\n    \n    # loop through the first array\n    for i in range(len(nums1)):\n        # loop through the second array\n        for j in range(len(nums2)):\n            # add the indices to the min heap\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            \n            # if the size of the min heap is greater than k, pop the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n                \n    # create a list to store the pairs\n    pairs = []\n    \n    # loop through the min heap and add the indices to the pairs list\n    while min_heap:\n        pair = heapq.heappop(min_heap)\n        pairs.append(pair[1])\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Given two lists of numbers and an integer k, return the k smallest\n    pairs of numbers that sum to a larger number.\n\n    nums1 and nums2 are the two arrays of numbers.\n    k is the number of pairs to find.\n    \"\"\"\n\n    # Build a heap of the smaller elements from both arrays\n    heap = [(min(nums1[i], nums2[j]), i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    heapq.heapify(heap)\n\n    # Initialize the result list to store the pairs\n    result = []\n\n    # Find the k smallest pairs and add them to the result list\n    for _ in range(k):\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num1 in nums1:\n        heapq.heappush(heap, -num1)\n        if len(heap) > k:\n            heapq.heappop(heap)\n        while heap and -heap[0] > num1:\n            heapq.heappop(heap)\n        if len(heap) == k:\n            result.append((-heap[0], num1))\n    for num2 in nums2:\n        heapq.heappush(heap, -num2)\n        if len(heap) > k:\n            heapq.heappop(heap)\n        while heap and -heap[0] > num2:\n            heapq.heappop(heap)\n        if len(heap) == k:\n            result.append((-heap[0], num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Initialize a variable to store the result\n    result = []\n\n    # Iterate over the two arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the current pair to the min heap\n            heapq.heappush(min_heap, (abs(num1) + abs(num2), (num1, num2)))\n\n            # If the size of the min heap is greater than k, remove the smallest pair from the heap\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n            # If the size of the min heap is equal to k, add the pair to the result\n            if len(min_heap) == k:\n                pair = heapq.heappop(min_heap)\n                result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Using heapq to find the k smallest elements from both arrays.\n    heap1, heap2 = [], []\n    for num in nums1:\n        heapq.heappush(heap1, (-num, len(heap1)))\n    for num in nums2:\n        heapq.heappush(heap2, (-num, len(heap2)))\n\n    # Finding the k smallest pairs from the arrays.\n    pairs = []\n    while k > 0 and heap1 and heap2:\n        # Finding the smallest element from heap1 and removing it from heap1.\n        current_heap1 = heapq.heappop(heap1)\n        current_heap2 = heapq.heappop(heap2)\n\n        # Finding the smallest element from heap2 and removing it from heap2.\n        if current_heap1[1] == 0:\n            if k > 0:\n                heapq.heappush(heap1, (-current_heap1[0], len(heap1)))\n                heapq.heappush(heap2, (-current_heap2[0], len(heap2)))\n                pairs.append((current_heap1[0], current_heap2[0]))\n                k -= 1\n        elif current_heap2[1] == 0:\n            if k > 0:\n                heapq.heappush(heap1, (-current_heap1[0], len(heap1)))\n                heapq.heappush(heap2, (-current_heap2[0], len(heap2)))\n                pairs.append((current_heap1[0], current_heap2[0]))\n                k -= 1\n        else:\n            if k > 0:\n                heapq.heappush(heap1, (-current_heap1[0], len(heap1)))\n                heapq.heappush(heap2, (-current_heap2[0], len(heap2)))\n                pairs.append((current_heap1[0], current_heap2[0]))\n                k -= 1\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs (nums1[i], nums2[j])\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Add the pair (nums1[i], nums2[j]) to the heap\n            heapq.heappush(heap, (nums1[i]+nums2[j], (i,j)))\n            # If the heap size exceeds k, remove the smallest pair\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Extract the k smallest pairs from the heap and return them as a list of tuples\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append(pair[1])\n        if len(heap) < k:\n            continue\n        pair = heapq.heappop(heap)\n        result.append(pair[1])\n        if len(heap) < k:\n            continue\n        pair = heapq.heappop(heap)\n        result.append(pair[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    min_heap = []\n    \n    # create a min heap of size k\n    for i in range(k):\n        heapq.heappush(min_heap, (float('inf'), None))\n        \n    for num1 in nums1:\n        for num2 in nums2:\n            # add a new pair to the heap\n            current_pair = (num1 + num2, (num1, num2))\n            heapq.heappush(min_heap, current_pair)\n            \n            # if the heap size is greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            \n            # add the pair to the list of pairs\n            pairs.append(current_pair)\n            \n    # sort the pairs by the first element of each pair\n    pairs.sort(key=lambda x: x[0])\n    \n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of any two pairs of tuples in the list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(lst):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    lst.sort(key=lambda x: sum(x))\n    n = len(lst)\n    min_product = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()  # sort the list in ascending order\n    \n    n = len(list1)\n    min_product = float('inf')  # initialize the minimum product\n    \n    # loop through the list of tuples\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # check if the product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    min_product = float('inf')\n    current_product = 1\n\n    # Iterate through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            current_product = list1[i][0] * list1[j][1]\n\n            # Check if the current product is smaller than the minimum product\n            if current_product < min_product:\n                min_product = current_product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples by the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize the minimum product and the index of the minimum product\n    min_product = float('inf')\n    index = 0\n\n    # Loop through the sorted list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the minimum product found so far\n        product = list1[i][1] * list1[index][1]\n\n        # Update the minimum product and the index of the minimum product if the current tuple's product is smaller\n        if product < min_product:\n            min_product = product\n            index = i\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and compare it to the current minimum product\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n    # loop through the list and update the minimum value as needed\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of values and returns the minimum value in the list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the input list is empty\n    if not listval:\n        return None\n    \n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Loop over the rest of the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace underscores with spaces and split the word\n    words = re.findall(r'(?<!^)(?=[A-Z])', word)\n\n    # Join the words with a capital letter\n    camel_case_word = ''.join(word.title() for word in words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(?<!^)(?=[A-Z])', r'_', word)  # convert all uppercase letters to lowercase and underscore\n    word = word.title()  # capitalize the first letter\n    word = word.lstrip('_')  # remove leading underscores\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all words except the first letter to lowercase\n    words = word.split('_')\n    result = [words[0]]\n    for i in range(1, len(words)):\n        # Capitalize the first letter of each subsequent word\n        result.append(words[i].capitalize())\n    # Convert the list of words to a camel case string\n    return ''.join(result)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Convert the first word to upper case\n    first_word = word_list[0].upper()\n    # Remove the first underscore from the list of words\n    word_list.pop(0)\n    # Convert the rest of the words to camel case\n    camel_case_word = ''.join(word.capitalize() for word in word_list)\n    # Combine the first word with the camel case rest of the words\n    return first_word + camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<!^)(?=[A-Z])'\n    return ''.join(match.capitalize() for match in re.findall(pattern, word))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return \"\".join(x.capitalize() if x.isupper() else x for x in word.split(\"_\"))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = re.findall(r'_(.)', word)\n    # Convert the words to camel case\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.upper())\n    # Join the words with camel case\n    camel_case = '_'.join(camel_case_words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake_case to camelCase\n    camel_word = re.sub('_(.)', lambda m: m.group(1).upper(), word)\n    return camel_word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel = ''\n    capitalize = True\n    for i, letter in enumerate(word):\n        if letter.isupper():\n            if capitalize:\n                camel += letter.lower()\n            else:\n                camel += letter.upper()\n            capitalize = False\n        elif i > 0 and word[i-1].isupper():\n            camel += letter.lower()\n        else:\n            camel += letter\n    return camel"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # create an empty list to store even numbers\n    result = []\n    \n    # iterate over each element of the input list\n    for num in l:\n        # if the number is odd, append it to the result list\n        if num % 2!= 0:\n            result.append(num)\n            \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple):\n        if isinstance(n, int) and n > 0 and n <= len(list1):\n            return list1[n-1]\n        else:\n            return \"Invalid input\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1:\n        return None\n    elif n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input, and returns the nth element of the list.\n    '''\n    if n > len(list1):\n        raise ValueError(\"The index n is greater than the length of the list.\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return lst[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise TypeError('Input must be a list of tuples.')\n    \n    # Check if the index is a valid integer\n    if not isinstance(n, int):\n        raise TypeError('Index must be an integer.')\n    \n    # Check if the index is within the range of the list\n    if n < 0 or n >= len(list1):\n        raise ValueError('Index out of range.')\n    \n    # Return the nth element from the list of tuples\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize the variable to store the nth element\n    nth_element = None\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # if the current index is equal to n, update the variable to the corresponding element\n        if i == n-1:\n            nth_element = list1[i]\n            break\n    return nth_element"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    for item in list1:\n        if item in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any value from the first list exists in the second list, False otherwise.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # First, check if any value in list1 exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # If no overlapping values found, check if any value in list2 exists in list1\n    for item in list2:\n        if item in list1:\n            return True\n    # If no overlapping values found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two list as input and returns True if there is any value in the first list that exists in the second list, else it returns False.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair of integers with highest product.\n    '''\n    if len(arr) == 2:\n        return arr\n\n    max_product = float('-inf')\n    pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # create a dictionary to store the product of all possible pairs\n    products = {}\n    # loop through all possible pairs of integers\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # calculate the product of the pair\n            product = arr[i] * arr[j]\n            # add the product to the dictionary\n            if product in products:\n                products[product] += 1\n            else:\n                products[product] = 1\n    # find the pair with the highest product\n    highest_product = 0\n    for product, count in products.items():\n        if count > highest_product:\n            highest_product = count\n    # return the pair\n    return (max(arr), max(arr))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Initialize variables to store the maximum product and the current maximum product\n    max_prod = float('-inf')\n    curr_max_prod = 1\n    \n    # Loop through the array and find the maximum product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            curr_prod = arr[i] * arr[j]\n            \n            # Update the maximum product if the current product is greater than the previous maximum product\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n                curr_max_prod = 1\n            \n            # Update the current maximum product if the current product is equal to the previous maximum product\n            elif curr_prod == max_prod:\n                curr_max_prod += 1\n                \n    # Return the pair with the maximum product\n    return (arr[arr.index(max_prod)], curr_max_prod)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    return (max1 * max2, min1 * min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr = sorted(arr)\n    max_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        current_product = arr[i] * arr[i - 1]\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns the pair with highest product.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max(max1 * max2, max2 * max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    min_num = arr[0]\n    max_product = arr[0] * arr[1]\n\n    for i in range(len(arr)-1):\n        temp = max(max_num*arr[i+1], min_num*arr[i+1])\n        max_num = max(max_num*arr[i], temp)\n        min_num = min(min_num*arr[i], temp)\n\n        if temp > max_product:\n            max_product = temp\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set to store common elements\n    common = set()\n    # loop through the input list of tuples\n    for i in Input:\n        # get the first element of the tuple\n        elem = i[0]\n        # check if it's already in the set of common elements\n        if elem in common:\n            # if it is, add it to the set of unique elements\n            common.add(elem)\n        else:\n            # otherwise, add the tuple to the set of common elements\n            common.add(elem)\n    # return the set of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Element = ''\n    for t in Input:\n        if t[0] == Common_Element:\n            Common_Element = ''\n            break\n        elif len(Common_Element) == 0:\n            Common_Element = t[0]\n        else:\n            Common_Element = ''\n    return Common_Element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    first_elements = []\n    common_elements = []\n\n    for i in Input:\n        first_elements.append(i[0])\n\n    for i in range(len(first_elements)):\n        for j in range(i+1, len(first_elements)):\n            if first_elements[i] in Input[j] and first_elements[j] in Input[i]:\n                common_elements.append((first_elements[i], first_elements[j]))\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing the common first element of the input tuples.\n    '''\n\n    # initialize an empty list to store the common first element tuples\n    common_tuples = []\n\n    # loop through the input list of tuples\n    for tup in Input:\n\n        # get the first element of the tuple\n        first_elem = tup[0]\n\n        # loop through the remaining tuples and check if the first element of each tuple matches the current tuple's first element\n        for other_tup in Input:\n\n            # if the first element of the other tuple matches the current tuple's first element, add the current tuple to the common_tuples list\n            if first_elem == other_tup[0]:\n                common_tuples.append(tup)\n\n    # return the list of common first element tuples\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in Input):\n        return \"Invalid input\"\n\n    # Find the common first element in each tuple\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n\n    # Return the common first elements\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i])\n                break\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if len(set([x[0] for x in Input[i]])) == 1:\n            common_element = Input[i][0]\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a dictionary to store the count of each element in the tuple\n    count_dict = {}\n    \n    # iterate through each tuple in the input list\n    for tup in Input:\n        # get the first element of the tuple\n        element = tup[0]\n        # if the element is not in the dictionary, add it with a count of 1\n        if element not in count_dict:\n            count_dict[element] = 1\n        # otherwise, increment the count of the element in the dictionary\n        else:\n            count_dict[element] += 1\n    \n    # create a new list to store the unique common elements\n    common_elements = []\n    \n    # iterate through the keys in the count dictionary and add them to the common_elements list if their count is 1\n    for key in count_dict:\n        if count_dict[key] == 1:\n            common_elements.append(key)\n    \n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0]:\n                    common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # iterate through the list of tuples\n    for tup in Input:\n        # if the tuple has a common first element, increment its count in the count_dict\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        # otherwise, add the tuple to the list of tuples with a count of 1\n        else:\n            count_dict[tup[0]] = 1\n    \n    # find the tuple with the highest count in the count_dict\n    max_count = max(count_dict.values())\n    result = [(tup, count_dict[tup[0]]) for tup in Input if count_dict[tup[0]] == max_count]\n    \n    return result"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for i in lst:\n        length = len(i)\n        if length > max_length:\n            max_length = length\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_val = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_val = i\n    return max_val"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = \"\"\n\n    # iterate through the list and update max_length and max_element variables\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n\n    # return the max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(\"Rounded and summed values:\", list1)\n    print(\"Total sum multiplied by length of list:\", total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total *= len(list1)\n    print(total)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(x) for x in list1])\n    total_length = len(list1)\n    print(total_sum * total_length)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    total_sum = sum(round(num) for num in lst)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(lst):\n    total = sum(round(num) for num in lst)\n    total *= len(lst)\n    print(total)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # initialize sum to 0\n    cube_sum = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of i\n        cube_i = i ** 3\n        \n        # add cube_i to cube_sum\n        cube_sum += cube_i\n    \n    # return cube_sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i ** 3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n\nprint(cube_Sum(10)) # Output: 5000"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize sum and count to 0\n    sum = 0\n    count = 0\n    \n    # Loop through even numbers from 2 to n\n    for i in range(2, n+1, 2):\n        # Calculate the cube of i\n        cube = i**3\n        \n        # Add the cube to the sum\n        sum += cube\n        \n        # Increment the count by 1\n        count += 1\n    \n    # Return the sum and count\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    sum_cubes = 0\n    num = 1\n    \n    while count < n:\n        if num % 2 == 0 and num % 3 == 0:\n            sum_cubes += num ** 3\n            count += 1\n        num += 1\n    \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    This function takes a tuple and concatenates each element by the specified delimiter.\n\n    Args:\n        test_tup (tuple): A tuple to concatenate.\n        delimiter (str): A delimiter to separate each element of the tuple.\n\n    Returns:\n        str: The concatenated string of the elements of the tuple.\n    '''\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Concatenate each element of a tuple by a given delimiter.\n    '''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # define the delimiter as a string\n    delimiter =''\n    # initialize an empty string to hold the concatenated string\n    concatenated_string = ''\n    # loop through each element of the tuple\n    for element in test_tup:\n        # concatenate the element to the concatenated string\n        concatenated_string += str(element) + delimiter\n    # remove the last delimiter from the concatenated string\n    concatenated_string = concatenated_string[:-1]\n    # return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(element) for element in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Concatenate each element of tuple by delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item)\n    return result"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average_of_cubes))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\nprint(find_Average_Of_Cube(5)) # Output: 72.0"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    average_of_cubes = sum_of_cubes / count\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n    average_of_cubes = sum_cubes/count\n    print(\"The average of cubes of first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n\n    average_cube = cube_sum/n\n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(n):\n        total_sum += i**3\n    \n    average = total_sum / n\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i**3\n    return total_sum/n**2"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    def average_of_cubes(n):\n        if n == 1:\n            return 1\n        else:\n            return (1/n) + average_of_cubes(n-1)\n    \n    return average_of_cubes(n)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n        count += 1\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i*i*i\n    average = total/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        result.append(element[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], str):\n            rear_indices.append(len(test_tuple[i])-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [x[-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for string in test_tuple:\n        rear_indices.append(string[::-1].find(string[-1]))\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        if isinstance(i, str):\n            rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for elem in test_tuple:\n        rear_list.append(elem[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create a new list to store odd numbers\n    result = []\n    # Iterate over the given list of numbers\n    for num in nums:\n        # Check if the number is odd or not\n        if num % 2 == 1:\n            # If it is odd, add it to the new list\n            result.append(num)\n    # Return the new list of odd numbers\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern to match the input date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Search for the first match of the pattern in the input string\n    match = re.search(pattern, dt)\n    \n    # Check if a match was found\n    if match:\n        # Extract the year, month, and day from the matched string\n        year, month, day = match.groups()\n        \n        # Format the date string with the desired format\n        new_date = f'{day}-{month}-{year}'\n        \n        # Return the new date string\n        return new_date\n    \n    # If no match was found, return the original input string\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove hyphens from the date format string\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\1-\\2-\\3', dt)\n    \n    # Reverse the order of the day, month, and year components\n    dt = dt[6:] + dt[4:6] + dt[0:4]\n    \n    # Return the formatted date string\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the date string\n    match = re.match(pattern, dt)\n    \n    # check if the match is found\n    if match:\n        # extract the date components\n        year, month, day = match.groups()\n        \n        # convert the date components to dd-mm-yyyy format\n        new_date = '-'.join([day, month, year])\n        \n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    date_format = \"{2}-{1}-{0}\"\n    return re.sub(pattern, date_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    if yyyy_mm_dd_pattern.match(dt):\n        return dt.replace('-', '/')\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the date format as a regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # use re.search to match the pattern in the input date string\n    match = re.search(pattern, dt)\n    \n    # if the match is found, convert the date to the desired format and return it\n    if match:\n        # extract the matched groups from the match object\n        year, month, day = match.groups()\n        # format the date as dd-mm-yyyy and return it\n        return f'{day}-{month}-{year}'\n    # if the match is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    groups = re.match(pattern, dt).groups()\n    return '-'.join(groups[::-1])"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define regular expression pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use re.search() function to search for a match in the input date string\n    match = re.search(pattern, dt)\n    # if match is found, convert the matched values to yyyy-mm-dd format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # concatenate the day, month, and year values to get the new date string\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    # if no match is found, return the original date string as is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_format = r'\\d{4}'\n    mm_format = r'\\d{2}'\n    dd_format = r'\\d{2}'\n    # define regex patterns\n    yyyy_pattern = re.compile(yyyy_format)\n    mm_pattern = re.compile(mm_format)\n    dd_pattern = re.compile(dd_format)\n    # define replacement strings\n    yyyy_replacement = r'\\d{2}'\n    mm_replacement = r'\\d{2}'\n    dd_replacement = r'\\d{2}'\n    # replace patterns with replacement strings\n    dt = yyyy_pattern.sub(yyyy_replacement, dt)\n    dt = mm_pattern.sub(mm_replacement, dt)\n    dt = dd_pattern.sub(dd_replacement, dt)\n    # reverse order of replacements to get dd-mm-yyyy format\n    dt = dt.replace(yyyy_replacement, yyyy_format)\n    dt = dt.replace(mm_replacement, mm_format)\n    dt = dt.replace(dd_replacement, dd_format)\n    return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest element in the array\n    largest = my_list[-1]\n    for i in range(len(my_list)-2, -1, -1):\n        # Swap the current element with its correct position in the array\n        j = i\n        while j >= 0 and my_list[j] > largest:\n            my_list[j+1] = my_list[j]\n            j -= 1\n        my_list[j+1] = largest\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and key < my_list[j-h]:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = key\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    gap = n // 2\n\n    while gap > 0:\n\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Divide array into n/2 sub-arrays\n    for gap in range(n//2):\n        # Move sub-array to proper position in each iteration\n        for i in range(gap, n):\n            # Swap adjacent elements if they are in wrong order\n            while i >= gap and my_list[i] < my_list[i-gap]:\n                my_list[i], my_list[i-gap] = my_list[i-gap], my_list[i]\n            # Stop swapping when no more swaps are needed\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new list to store the and tuples\n    and_tup_list = []\n    \n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if both elements are True\n        if (test_tup1[i] and test_tup2[i]):\n            # If both are True, add the element to the and_tup_list\n            and_tup_list.append(test_tup1[i] and test_tup2[i])\n    \n    # Return the and_tup_list\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # get the length of the tuples\n    len_1 = len(test_tup1)\n    len_2 = len(test_tup2)\n    # check if the length of the tuples is equal\n    if len_1!= len_2:\n        print(\"The two tuples should have the same length.\")\n    else:\n        # initialize the result tuple\n        result_tup = ()\n        # iterate over the elements of the tuples\n        for i in range(len_1):\n            # extract the elements and and the result tuple\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        # return the result tuple\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (True,)\n        else:\n            and_tup += (False,)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Create a new tuple that contains the elementwise and of the two input tuples\n    and_tup = tuple(a and b for a, b in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = tuple(bool(x & y) for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        \n        # Calculate the root of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Sort the roots in non-decreasing order\n        if root1 < root2:\n            root1, root2 = root2, root1\n            \n        # Return the root of the discriminant\n        return root1\n        \n    # If the discriminant is negative, the directrix does not exist\n    elif discriminant < 0:\n        return None\n        \n    # If the discriminant is zero, the directrix exists at a single point\n    else:\n        return (-b)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is greater than zero, there are real roots\n    if disc > 0:\n        # Calculate the roots\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        \n        # Sort the roots in ascending order\n        if x1 > x2:\n            x1, x2 = x2, x1\n        \n        # Return the directrix\n        return x1\n    \n    # If the discriminant is zero, the directrix is unique\n    elif disc == 0:\n        return -b/(2*a)\n    \n    # If the discriminant is negative, the parabola is concave\n    else:\n        return \"The parabola is concave\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b ** 2 - 4 * a * c\n    if disc < 0: \n        return \"The equation of the parabola has no real roots.\"\n    elif disc == 0: \n        return \"The directrix is x = \" + str((-b) / (2 * a))\n    else: \n        root1 = (-b + disc) / (2 * a)\n        root2 = (-b - disc) / (2 * a)\n        return \"The directrix is between x = \" + str(root1) + \" and x = \" + str(root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the quadratic term\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative or zero\n    if discriminant > 0:\n        # Find the root of the quadratic equation\n        root = (-b + discriminant**0.5) / (2*a)\n        \n        # Return the directrix\n        return root\n        \n    elif discriminant == 0:\n        # The directrix is the root of the quadratic equation\n        return (-b) / (2*a)\n        \n    else:\n        # The directrix is on the line passing through the origin and passing through the point with coordinates (a, c)\n        return \"The directrix is on the line passing through the origin and passing through the point with coordinates (a, c).\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import sqrt\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    y1 = (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n    y2 = (-b - sqrt(b**2 - 4*a*c)) / (2*a)\n    return (y1, y2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is less than zero\n    if discriminant < 0:\n        print(\"The parabola does not have a unique directrix.\")\n    else:\n        # Calculate the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n\n        # Sort the roots in non-increasing order\n        if root1 > root2:\n            root1, root2 = root2, root1\n\n        # Print the directrix\n        print(\"The directrix of the parabola is:\", root1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is between the roots of the form:\", x1, \"and\", x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        print(\"The directrix of the parabola is at the root of the form:\", x)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        # Vertical line\n        return \"Vertical line\"\n    elif b**2 - 4*a*c < 0:\n        # No real roots\n        return \"No real roots\"\n    else:\n        # One real root\n        root1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        root2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        return (root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola has no real solutions\"\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return f\"The directrix of the parabola is {x}\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix of the parabola is {x1} and {x2}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    \n    # Find the discriminant\n    disc = b**2 - 4*a*c\n    \n    # If the discriminant is positive, then there is one real root\n    if disc > 0:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        print(\"The directrix of the parabola is: {:.2f}\".format(root1))\n        print(\"The directrix of the parabola is: {:.2f}\".format(root2))\n    \n    # If the discriminant is zero, then there is only one real root\n    elif disc == 0:\n        root = -b/(2*a)\n        print(\"The directrix of the parabola is: {:.2f}\".format(root))\n    \n    # If the discriminant is negative, then there are two real roots\n    else:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        print(\"The directrix of the parabola is: {:.2f}\".format(root1))\n        print(\"The directrix of the parabola is: {:.2f}\".format(root2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set of elements in both lists\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # check if the two sets have at least one common element\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = list1 + list2\n\n    # Use a set to remove duplicates and convert the list to a set\n    unique_list = set(combined_list)\n\n    # Check if there are any common elements in the unique list\n    if len(unique_list) == len(list1) and len(unique_list) == len(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set to store the common elements of both lists\n    common_set = set(list1) & set(list2)\n    # check if there are any common elements in the set\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    # create a dictionary to store the count of each element in the two lists\n    count_dict = {}\n    for num in list1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # iterate through the second list and check if each element is in the count_dict\n    for num in list2:\n        if num in count_dict and count_dict[num] > 0:\n            # found a common element, decrement the count and break the loop\n            count_dict[num] -= 1\n            if count_dict[num] == 0:\n                del count_dict[num]\n            break\n    \n    # check if there are any remaining elements in the count_dict, if so, there are no common elements\n    if count_dict:\n        return False\n    else:\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # calculate the lengths of the base and the height of the trapezium\n    base = 0.5 * (base1 + base2)\n    height = height\n    \n    # calculate the base and height of the top part of the trapezium\n    top_base = 0.5 * (base1 + base2)\n    top_height = 0.5 * (height + base)\n    \n    # calculate the base and height of the bottom part of the trapezium\n    bottom_base = 0.5 * (base1 + base2)\n    bottom_height = 0.5 * (height - base)\n    \n    # calculate the area of the top part of the trapezium\n    top_area = 0.5 * (top_base + top_base) * top_height\n    \n    # calculate the area of the bottom part of the trapezium\n    bottom_area = 0.5 * (bottom_base + bottom_base) * bottom_height\n    \n    # calculate the length of the top half of the trapezium\n    top_half = 0.5 * (base1 + base2 + top_base + top_base + top_height)\n    \n    # calculate the length of the bottom half of the trapezium\n    bottom_half = 0.5 * (base1 + base2 + bottom_base + bottom_base + bottom_height)\n    \n    # calculate the length of the trapezium\n    trapezium = 0.5 * (top_half + bottom_half)\n    \n    # calculate the median length of the trapezium\n    median = (trapezium + bottom_half) / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Formula to find the area of a trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Formula to find the length of the midpoints of the trapezium\n    midpoint1 = base1 / 2.0\n    midpoint2 = (base1 + base2) / 2.0\n\n    # Formula to find the height of the trapezium\n    trapezium_height = height\n\n    # Formula to find the length of the longest side\n    longest_side = max(base1, base2)\n\n    # Formula to find the length of the shortest side\n    shortest_side = min(base1, base2)\n\n    # Calculate the area of the trapezium\n    area_trapezium = area\n\n    # Calculate the midpoint of the trapezium\n    midpoint_trapezium = (area_trapezium / longest_side) ** 0.5\n\n    # Calculate the height of the trapezium\n    height_trapezium = trapezium_height / 2.0\n\n    # Calculate the area of the three triangles\n    area_triangle1 = 0.5 * (midpoint1 * height_trapezium + midpoint2 * height_trapezium)\n    area_triangle2 = 0.5 * (midpoint1 * height_trapezium + midpoint_trapezium * trapezium_height)\n    area_triangle3 = 0.5 * (midpoint2 * height_trapezium + midpoint_trapezium * trapezium_height)\n\n    # Calculate the length of the midpoint of the longest side\n    midpoint_longest_side = longest_side / 2.0\n\n    # Calculate the area of the longest side\n    area_longest_side = area_trapezium * longest_side\n\n    # Calculate the area of the shortest side\n    area_shortest_side = area_trapezium * shortest_side\n\n    # Calculate the angle of the triangle with the longest side\n    angle_longest_side = (area_longest_side / longest_side) ** 0.5\n\n    # Calculate the angle of the triangle with the shortest side\n    angle_shortest_side = (area_shortest_side / shortest_side) ** 0.5\n\n    # Calculate the area of the triangle with the longest side\n    area_longest_side_triangle = (longest_side * longest_side) * angle_longest_side * angle_longest_side\n\n    # Calculate the area of the triangle with the shortest side\n    area_shortest_side_triangle = (shortest_side * shortest_side) * angle_shortest_side * angle_shortest_side\n\n    # Calculate the total area of the trapezium\n    area_total = area_longest_side_triangle + area_shortest_side_triangle\n\n    # Calculate the area of the trapezium divided by the total area\n    ratio_area = area_trapezium / area_total\n\n    # Calculate the length of the trapezium\n    length_trapezium = (area_longest_side_triangle + area_shortest_side_triangle) ** 0.5\n\n    # Calculate the area of the trapezium\n    area_trapezium = area_longest_side_triangle + area_shortest_side_triangle\n\n    # Calculate the area of the trapezium divided by the total area\n    ratio_area = area_trapezium / area_total\n\n    # Calculate the length of the trapezium\n    length_trapezium = (area_longest_side_triangle + area_shortest_side_triangle) ** 0.5\n\n    # Calculate the length of the midpoint of the trapezium\n    midpoint_trapezium = (length_trapezium / longest_side) ** 0.5\n\n    # Calculate the length of the shortest side\n    length_shortest_side = shortest_side / 2.0\n\n    # Calculate the length of the longest side\n    length_longest_side = longest_side / 2.0\n\n    # Calculate the midpoint of the longest side\n    midpoint_longest_side = (length_longest_side / longest_side) ** 0.5\n\n    # Calculate the length of the midpoint of the shortest side\n    midpoint_shortest_side = (length_shortest_side / shortest_side) ** 0.5"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium based on its\n    three base lengths and its height.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    \"\"\"\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 + 0.5 * base2 * height\n\n    # Calculate the length of the base of the trapezium that extends from the\n    # top to the base of the second trapezium\n    top_base_length = 0.5 * height * base1 / area\n\n    # Calculate the length of the base of the trapezium that extends from the\n    # bottom to the base of the first trapezium\n    bottom_base_length = 0.5 * height * base2 / area\n\n    # Compare the lengths of the two base of the trapeziums and return the\n    # median based on the height of the trapezium\n    if (top_base_length + bottom_base_length) < height:\n        return top_base_length\n    else:\n        return bottom_base_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median = 0.5 * (area + (base1 + base2 + height))\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the area of the base\n    base_area = base1 * height + base2 * height\n\n    # Calculate the height of the trapezium\n    height_trapezium = (area + base_area) / 2\n\n    # Calculate the median length of the trapezium\n    median_length = 2 * height_trapezium\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium using the trapezoidal rule.\n    \n    Parameters:\n    - base1: the length of the first base of the trapezium\n    - base2: the length of the second base of the trapezium\n    - height: the height of the trapezium\n    \n    Returns:\n    - the median length of the trapezium\n    '''\n    # Calculate the lengths of the trapezium\n    left_length = base1 + base2\n    right_length = base1 + height\n    # Calculate the area of the trapezium\n    area = (left_length + right_length) / 2\n    # Calculate the length of the trapezium using the trapezoidal rule\n    trapezium_length = area / 2\n    # Calculate the median length of the trapezium\n    median_length = (left_length + right_length + trapezium_length) / 3\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    area_sum = area1 + area2\n    area_diff = area1 - area2\n\n    if area_sum > 0:\n        return (area_diff + half_height) / area_sum\n    else:\n        return None"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function calculates the median length of a trapezium using the given bases and height.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the sum of the areas of the two equal sides of the trapezium\n    half_base1 = base1 / 2\n    side1_area = area - 0.5 * half_base1 * half_base1\n    side2_area = half_base1 * half_base1\n    \n    # Find the median area of the trapezium\n    median_area = (side1_area + side2_area) / 2\n    \n    # Calculate the median length of the trapezium\n    median_length = 0.5 * median_area / (area - median_area)\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the two triangles\n    s1 = (base1 + base2) / 2\n    s2 = height / 2\n\n    # Calculate the areas of the two triangles\n    A1 = base1 * height / 2\n    A2 = base2 * height / 2\n\n    # Calculate the area of the trapezium\n    A = (A1 + A2) / 2\n\n    # Calculate the perimeter of the trapezium\n    P = (s1 + s2) * height / 2\n\n    # Calculate the lengths of the sides of the trapezium\n    L1 = (A * (s1 - s2)) ** 0.5\n    L2 = (A * (s1 + s2)) ** 0.5\n\n    # Return the median of the two sides of the trapezium\n    return max(L1, L2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the smaller base\n    if area < base1:\n        smaller_base = base1\n    else:\n        smaller_base = base2\n\n    # Calculate the length of the larger base\n    if area > base1:\n        larger_base = base1\n    else:\n        larger_base = base2\n\n    # Calculate the length of the larger base\n    if area > base1:\n        length_of_trapezium = (smaller_base + 2 * larger_base) / 2\n    else:\n        length_of_trapezium = (smaller_base + larger_base) / 2\n\n    return length_of_trapezium"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # initialize a variable to store the count of greater numbers\n    count = 0\n    # loop through the array and check if each element is greater than the given number\n    for element in arr:\n        if element > number:\n            count += 1\n    # return the count of greater numbers found\n    return count"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            print(\"The number entered is greater than the element(s) in the array.\")\n            return\n    print(\"The number entered is not greater than any element in the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(f\"The number {number} is greater than element {i} in the array\")\n            return True\n    print(f\"The number {number} is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = []\n    for num in arr:\n        if num > number:\n            greater_than.append(num)\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=b)b*')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\1*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'(?<=a)b+(?=a)')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r\"a.*b\")\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None\n\ntext = \"abcabcab\"\nresult = text_match_one(text)\nif result:\n    print(result)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer n as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return last_Digit(n//10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the integer.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list with only the negative numbers from the original list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as an argument and returns a new list that contains the negative numbers of the original list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_num = []\n    for num in list1:\n        if num < 0:\n            neg_num.append(num)\n    return neg_num"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char.isalnum():\n            if char.isalpha():\n                if ord(char) % 2 == 0:\n                    new_str += char\n            else:\n                if ord(char) % 2 == 1:\n                    new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the output string\n    output = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # check if the character is odd (i.e., an even number)\n        if char % 2 == 0:\n            # if it is odd, add it to the output string\n            output += char\n    # return the output string\n    return output"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is, append it to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            if not char.isdigit():\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char.isalpha() and char.isdigit():\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the even characters\n    even_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, append it to the even string\n        if char % 2!= 0:\n            even_str += char\n    # Return the even string\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_list = [i for i in str1 if i % 2!= 0]\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in string if char.isalnum())"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create a set to keep track of tuples that have been seen before\n    seen = set()\n    # initialize the count to zero\n    count = 0\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # check if the first tuple is already in the set of seen tuples\n        if tup in seen:\n            # if it is, check if the second tuple is also in the set of seen tuples\n            if tup[::-1] in seen:\n                # if it is, increment the count\n                count += 1\n        # add the first tuple and its reverse to the set of seen tuples\n        seen.add(tup)\n        seen.add(tup[::-1])\n    # return the count of bidirectional tuple pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Define a dictionary to store the count of bidirectional tuple pairs\n    count_dict = {}\n    \n    # Iterate through each tuple pair in the list\n    for pair in test_list:\n        # Check if the pair is a bidirectional tuple pair\n        if pair[::-1] in test_list:\n            # If it is, increment the count in the dictionary\n            count_dict[pair] = count_dict.get(pair, 0) + 1\n            \n    # Return the count of bidirectional tuple pairs\n    return count_dict"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Check if the list is empty or contains only one element\n    if len(L) == 0 or len(set(L)) == 1:\n        return L[0]\n    # Calculate the product of all elements in the list\n    product = 1\n    for num in L:\n        product *= num\n    # Divide the product by the sum of the elements (the minimum value)\n    total = sum(L)\n    return product // total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        if num > 1:\n            total *= num\n        else:\n            total = num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through the list of numbers\n    for num in L:\n        # Add the number to the sum\n        sum += num\n    \n    # Return the single integer sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate over the elements of the input list\n    for x in L:\n        # Check if x is a multiple of 10\n        if x % 10 == 0:\n            # If it is, add the last digit of x to the result variable\n            result += x % 10\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = r'\\b[a-z]+\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if matches:\n        # Find the first adverb in the matches list\n        first_adverb = matches[0]\n\n        # Find the position of the first adverb in the text\n        pos = text.lower().find(first_adverb)\n\n        # Return a tuple containing the first adverb and its position\n        return (first_adverb, pos)\n    else:\n        # If there are no matches, return None\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(not|very|rarely|often|also|also|also|even|most|least|seldom|frequently|much|little|quite|sufficiently|extremely)\\b'\n\n    # Use the re.search() method to search for the first adverb in the text\n    match = re.search(pattern, text)\n\n    # If no match is found, return None\n    if match is None:\n        return None\n\n    # Extract the text of the matched adverb\n    adverb = match.group()\n\n    # Define a regular expression pattern to match the position of the adverb\n    position_pattern = r'\\b' + re.escape(adverb) + r'\\b'\n\n    # Use the re.search() method again to search for the position of the adverb\n    match = re.search(position_pattern, text)\n\n    # Extract the position of the adverb and convert it to an integer\n    position = int(match.group())\n\n    # Return a tuple containing the adverb and its position\n    return (adverb, position)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.search(r'\\b(ever|always|often|always|most|sometimes|rarely|seldom|never|rarely|seldom)\\b', word, re.IGNORECASE):\n            # Add the adverb and its position to the list of adverbs\n            adverbs.append((word, i))\n    \n    # Sort the list of adverbs by their positions in the sentence\n    adverbs.sort(key=lambda x: x[1])\n    \n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[a-z]*(ing|ed|ing|ed|ing|ed)[a-z]*\\b', text)\n\n    # Print the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        print(f'{i+1}. {adverb}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the text\n    adverbs = re.findall(r'\\b\\w*[a-zA-Z]*\\b', text)\n    \n    # Initialize a list to store the adverb positions\n    adverb_positions = []\n    \n    # Loop through all the adverbs\n    for index, adverb in enumerate(adverbs):\n        # Check if the next word is an adverb\n        if re.match(r'\\b\\w*[a-zA-Z]*\\b', text[index+1]):\n            # If it is, add its position to the list\n            adverb_positions.append((index, index+1))\n    \n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs using regex\n    adverbs = re.findall(r'\\b\\w*[aeiou]\\w*\\b', text)\n\n    # Find the position of the first adverb\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append(text.find(adverb))\n\n    # Sort the positions in ascending order\n    adverb_positions.sort()\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b[A-Za-z]+\\b', text)\n\n    # Initialize a dictionary to store the adverb and its position in the sentence\n    positions = {}\n\n    # Iterate over the adverbs and their positions in the sentence and store them in the dictionary\n    for i, adverb in enumerate(adverbs):\n        positions[adverb] = i\n\n    # Return the dictionary of adverbs and their positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:to|of|in|at|by|on|during|before|after|over|under|against|in|through|throughout|between|among|as|to|with|above|below|beside|besides|beyond|compared|for|from|having|through|with|above|below|beside|besides|beyond|compared|for|from|having|through|with|above|below|beside|besides|beyond|compared|for|from|having|through|with|above|below|beside|besides|beyond|compared|for|from|having|through|with|above|below|beside|besides|beyond|compared|for|from|having|through|with|above|below|beside|besides|beyond|compared)\\b'\n    # regex pattern to match adverbs\n\n    matches = re.finditer(pattern, text)\n    # find all the matches\n\n    for match in matches:\n        # loop through the matches\n        adverb = match.group()\n        # get the adverb string\n        pos = match.start()\n        # get the starting position of the adverb\n        print(f'{adverb} found at position {pos}')\n    # print the adverb and their positions in the sentence"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize the position counter and the list of adverbs\n    position = 0\n    adverbs = []\n    \n    # Loop through each word in the sentence\n    for word in words:\n        \n        # Check if the word is an adverb\n        match = re.match(r'\\b\\w*ing\\b', word)\n        if match:\n            \n            # If it is, add the position to the list of adverbs\n            adverbs.append(position)\n            \n            # Increment the position counter\n            position += 1\n    \n    # Return the list of adverbs and their positions\n    return adverbs, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(very|great|good|greatly|well|well\\-)?(amazing|enormous|incredible|terrible|awful|horrible)\\b'\n\n    # Search for adverbs in the text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n\n    # Check if any adverbs were found\n    if matches:\n        # Print the adverbs and their positions in the sentence\n        for i, match in enumerate(matches):\n            print(f'{match[1]} {match[0]} found at position {i+1}.')\n    else:\n        print('No adverbs were found.')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l ** 2) + (12 * l) + 2 * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = l**2 * 6  # Calculating the surface area of the cube using the formula area = l^2 * 6\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l # formula for surface area of a cube\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create a new array to store only the positive numbers\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    # Find the ration of positive numbers\n    pos_count = len(positive_nums)\n    neg_count = len(nums) - pos_count\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / float(pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    '''\n    # Initialize an array to store the count of positive and negative numbers\n    positive = array('i')\n    negative = array('i')\n\n    # Iterate through the array of integers\n    for num in nums:\n        if num > 0:\n            # Append 1 to the count of positive numbers\n            positive.append(1)\n        elif num < 0:\n            # Append -1 to the count of negative numbers\n            negative.append(-1)\n        else:\n            # If the number is 0, append 0 to both arrays\n            positive.append(0)\n            negative.append(0)\n\n    # Calculate the sum of the counts\n    pos_sum = sum(positive)\n    neg_sum = sum(negative)\n\n    # Calculate the ration of positive numbers and return it\n    if pos_sum == 0:\n        # If there are no positive numbers, return 0\n        return 0\n    else:\n        return neg_sum / pos_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_type = array('i', nums)\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    \n    for num in num_type:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n            \n    print(\"Positive count:\", positive_count / (positive_count + negative_count + zero_count))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_array = array('i')\n    for num in nums:\n        if num > 0:\n            positive_array.append(num)\n    positive_count = len(positive_array) / len(nums)\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(nums)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n\n    # Initialize the sum of positive numbers to 0\n    positive_sum = 0\n\n    # Iterate through the list and count the number of positive numbers\n    for num in nums_list:\n        if num > 0:\n            positive_sum += 1\n\n    # Calculate the ration of positive numbers\n    ration = positive_sum / len(nums_list)\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of positive numbers in the array.\n    '''\n    positive_nums = 0\n    total_nums = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n    return positive_nums / total_nums"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(nums)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [0])\n    for num in nums:\n        if num > 0:\n            positives.itemset(0, positives[0] + 1)\n    return positives[0] / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function takes a list as input and finds the largest negative number in it.\n    \"\"\"\n    neg_list = [x for x in list1 if x < 0]  # create a new list containing only negative numbers\n    if neg_list:  # check if the list is not empty\n        return max(neg_list)  # return the largest negative number\n    else:\n        return None  # if the list is empty, return None"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_neg_num = -1\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = None\n    for num in list1:\n        if num < 0:\n            if neg_num is None or num > neg_num:\n                neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest to negative infinity\n    \n    # loop through list to find largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = float('-inf') #initialize largest variable to negative infinity\n    for num in list1:\n        if num < 0:\n            if num > largest: #check if the current number is greater than the current largest\n                largest = num #update largest variable if the current number is greater than the current largest\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = list1[0] # initialize the max_neg variable with the first element of the list\n    \n    for num in list1:\n        if num < 0 and num > max_neg: # if the number is negative and greater than the current max_neg\n            max_neg = num # update the max_neg variable\n    \n    return max_neg # return the max_neg variable"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[:K] + tup[K+1:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][j:j+K] for j in range(0, len(test_list[i]), K))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        new_tup = (tup[0], tup[1:])[:K]\n        test_list[test_list.index(tup)] = new_tup\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    # loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # trim the tuple by k\n        trimmed = tuple([x[i] for x in test_list[i]])\n        # add the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(trimmed)\n    # return the list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = (test_list[i][j][0], test_list[i][j][1]-K) if test_list[i][j][1]-K >= 0 else (test_list[i][j][0], 0)"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        else:\n            tup += (K-len(tup))*('None')\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for tup in test_list:\n        new_tup = tuple(tup)\n        result_list.append(new_tup[K:])\n    return result_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][0:K]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return tuple(result)\n    else:\n        print(\"Tuple lengths don't match\")"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    cnt = Counter(tup)\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] in cnt:\n            count += cnt[lst[i]]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        if element in tup:\n            count_dict[element] = count_dict.get(element, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in two arguments: a tuple and a list. The tuple represents the set of elements we want to count the occurrences of, and the list represents the set of elements we want to search for.\n    The function counts the occurrence of all elements in the list in the tuple and returns a dictionary containing the count of each element.\n    '''\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert list to set to remove duplicates and then back to list for counting \n    lst = list(set(lst))\n    count = Counter(tup)\n    count_dict = dict(count)\n    count_dict.pop(None, None)  # remove any None values from dictionary \n    count_dict = {k: count_dict[k] for k in lst if k in count_dict}  # count the occurence of each element in lst in tup\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = Counter(tup)\n    final_dict = {}\n    for key in count_dict:\n        final_dict[key] = count_dict[key] * count_tup[key]\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Create a Counter object to count the frequency of each element in the tuple.\n    count = Counter(tup)\n\n    # Iterate through the list and count the frequency of each element in the list.\n    for element in lst:\n        count[element] += 1\n\n    # Return the dictionary of the count of each element in the list.\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    set_lst = set(lst)\n    counter = Counter(set_lst)\n    count_lst = [(elem, count) for elem, count in counter.items()]\n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = tuple(count_dict.items())\n    return count_tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_tup = tuple(count_dict.values())\n    count_lst = list(count_dict.keys())\n    \n    return count_tup, count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the occurence of all elements in the tuple \n    count = Counter(tup) \n    \n    # Count the occurence of all elements in the list\n    lst_count = Counter(lst)\n    \n    # Find the intersection of the two counts \n    intersection = count.intersection(lst_count)\n    \n    # Count the length of the intersection\n    result = len(intersection)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # loop through each element in the list\n    for num in nums:\n        # multiply the element by 3 and add it to a list\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize a variable to store the sum of perrin numbers\n    sum_perrin = 0\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Check if the number is a perrin number\n        if i == sum_of_squares(i):\n            sum_perrin += i\n            \n    # Return the sum of perrin numbers\n    return sum_perrin\n\n\ndef sum_of_squares(n): \n    '''\n    Write a function to calculate the sum of the squares of the numbers from 1 to n.\n    '''\n    \n    # Initialize a variable to store the sum of squares\n    sum_squares = 0\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # Add the square of the number to the sum of squares\n        sum_squares += i*i\n        \n    # Return the sum of squares\n    return sum_squares"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        s += perrin(i)\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100]\n    sum_perrin = 0\n    for num in perrin_list:\n        sum_perrin += num\n        if sum_perrin > n:\n            break\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    sum_perrin_numbers = 0\n    for num in perrin_numbers:\n        sum_perrin_numbers += num\n    return sum_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [2, 4, 6, 8, 10]\n    return sum(perrin_numbers[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (1/i)**n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum_p = 0\n    \n    for i in range(1, n+1):\n        sum_p += p\n        p += p\n    \n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    sum = 0\n    \n    for i in range(n):\n        sum += p\n        p += 2\n    \n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store extracted strings\n    extracted = []\n    # Loop through each string in the input list\n    for s in str:\n        # If the length of the string is equal to the specified length, add it to the extracted list\n        if len(s) == l:\n            extracted.append(s)\n    # Return the extracted list\n    return extracted"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a desired size for each string.\n    It returns a list of string values with the specified size extracted from the input list.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        if len(i) == l:\n            result.append(i)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n    \n    :param str_list: list of string values\n    :param size: size of the string to be extracted\n    :return: list of strings of specified size extracted from the input list\n    \"\"\"\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input\n    and returns a list of strings of the specified size.\n    '''\n    result = []\n    for string in str_list:\n        result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        if len(i) >= l[0]:\n            result.append(i)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n        else:\n            extracted_strings.append(str_list[i])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # initialize an empty list to store extracted strings\n    extracted_strings = []\n\n    # loop through the list of strings and extract specified size strings\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            extracted_strings.append(l[i])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and a length as input.\n    It extracts the specified length of strings from the list and returns them as a new list.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function will remove all whitespaces from a given string.\n    '''\n    # use regex to remove all whitespaces and tabs from the string\n    text = re.sub(r'\\s+','', text)\n    # use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s', '', text)\n    # return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespace using regex\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespace characters (\\s) using regex\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Define a regular expression pattern for whitespace characters\n    pattern = re.compile(r'\\s+')\n    # Use the `sub` function to replace all whitespace characters with a single space\n    return pattern.sub(' ', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    # return the modified string\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount: \n        return 0 \n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_percentage = (actual_cost - sale_amount) / actual_cost\n        loss_amount = (sale_amount * loss_percentage)\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    # checking if actual_cost is less than or equal to 5000\n    if actual_cost <= 5000: \n        # calculating loss amount\n        loss = sale_amount - actual_cost\n        return loss\n    else: \n        # if actual_cost is greater than 5000, return 0\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return 0 \n    else: \n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even factors of n.\n    '''\n    # initialize a variable to store the sum of factors\n    sum = 0\n    \n    # loop through each integer from 2 to n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if i is evenly divisible by n\n        if n % i == 0:\n            # if i is evenly divisible by n, add it to the sum\n            if i % 2 == 0:\n                sum += i\n    \n    # return the sum of even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    \n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Check if the number is even or not\n    if n % 2 == 0:\n        return 0\n    # Initialize sum of even factors to 0\n    sum = 0\n    # Initialize a flag to True\n    flag = True\n    # Loop from 3 to the square root of the number\n    for i in range(3, int(math.sqrt(n))+1):\n        # Check if i is an even factor of n\n        if n % i == 0 and i % 2 == 0:\n            # If i is an even factor, add it to the sum\n            sum += i\n            # Reset the flag to True\n            flag = True\n    # Check if the number is even after factorization\n    if flag:\n        # If the number is even after factorization, add it to the sum\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize the sum of even factors to zero\n    sum = 0\n    # loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # check if i is even\n        if i % 2 == 0:\n            # add i to the sum\n            sum += i\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even factors of n.\n    The function uses the formula: sum of even factors of n = n/2 + 1\n    '''\n    sum = n/2 + 1\n    if n % 2 == 0:\n        return sum\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                sum -= n/i\n        return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z\\w+)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ][a-z]*\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b' # matches a word containing 'z'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function checks whether the given month number contains 31 days or not.\n    \"\"\"\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            days[1] = 29\n        else:\n            days[1] = 28\n    if monthnum in range(1, 13):\n        if days[monthnum-1] == 28 and monthnum == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return \"31\"\n    elif monthnum2 in [4,6,9,11]:\n        return \"30\"\n    else:\n        return \"No specific number of days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number!\")\n        return False\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum2 == 2 and daynum2 > 29:\n                print(\"Invalid day number!\")\n                return False\n        else:\n            if monthnum2 == 2 and daynum2 > 28:\n                print(\"Invalid day number!\")\n                return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            if daynum2 > 30:\n                print(\"Invalid day number!\")\n                return False\n    else:\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            if daynum2 > 31:\n                print(\"Invalid day number!\")\n                return False\n    return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in ['1', '3', '5', '7', '8', '10', '12']:\n        return True\n    elif monthnum2 in ['4', '6', '9', '11']:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # Convert month number to string\n    monthnum2_str = str(monthnum2)\n    \n    # Check if length of string is 2\n    if len(monthnum2_str)!= 2:\n        return \"Invalid input\"\n    \n    # Check if first digit is a 0 or not\n    if monthnum2_str[0] in [\"0\", \"1\", \"2\"]:\n        return \"Invalid input\"\n    \n    # Check if second digit is a 0 or not\n    if monthnum2_str[1] in [\"0\", \"1\", \"2\"]:\n        return \"Invalid input\"\n    \n    # Convert month number to integer\n    monthnum2_int = int(monthnum2_str)\n    \n    # Check if month number is valid\n    if monthnum2_int < 1 or monthnum2_int > 12:\n        return \"Invalid input\"\n    \n    # Check if month number contains 31 days\n    if monthnum2_int % 2 == 0:\n        return \"31 days\"\n    else:\n        return \"30 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in range(len(stringlist)):\n        reversed_list.append(stringlist[i][::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function finds the sublist with the minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as an input and returns the sublist with minimum length.\n    '''\n    # find the minimum length of the list\n    min_length = len(lst[0])\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    # create a new list with the minimum length sublist\n    min_sublist = []\n    for sublist in lst:\n        length = len(sublist)\n        if length == min_length:\n            min_sublist.append(sublist)\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_sublist = lst\n    min_length = len(lst[0])\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_sublist = sublist\n            min_length = length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)+1):\n            sublist.append(lst[i:j])\n            if min(len(sublist),len(max(sublist,key=len))) == len(sublist):\n                return sublist\n    return None"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initializing variables\n    min_length = 9999999\n    min_sublist = []\n\n    # iterating through the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # finding the length of the sublist\n            sublist_length = len(lst[j]) - len(lst[i]) + 1\n            \n            # checking if the length of the sublist is less than minimum length\n            if sublist_length < min_length:\n                # updating the minimum length and the sublist\n                min_length = sublist_length\n                min_sublist = lst[i:j+1]\n    \n    # returning the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') #initialize min_length to infinity\n    min_sublist = [] #initialize min_sublist to empty list\n    for sublist in lst: #iterate over all sublists in lst\n        if len(sublist) < min_length: #if length of sublist is less than min_length\n            min_length = len(sublist) #update min_length\n            min_sublist = sublist #update min_sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 9999999\n    min_lst = []\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = [lst[i]]\n        elif len(lst[i]) == min_len:\n            min_lst.append(lst[i])\n\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(length, width):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Remove all uppercase substrings from the input string using regular expression\n    string = re.sub(r'[A-Z]', '', string)\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    result = pattern.sub('', str1)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # iterating through each match of the pattern\n    for match in pattern.finditer(str1):\n        # extracting the matched substring\n        substring = match.group()\n        # removing the matched substring from the original string\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]'\n\n    # Use the re.sub() function to remove all uppercase substrings from the string\n    new_str = re.sub(pattern, '', str1)\n\n    # Return the new string without uppercase substrings\n    return new_str"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    # Replace the uppercase substrings with spaces\n    str1 = pattern.sub(' ', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Find all the substrings of the string that match the pattern\n    substrings = pattern.findall(str1)\n    # Loop through each substring and remove it from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase characters\n    pattern = r'\\p{Upper}'\n    \n    # Use the re.sub() function to replace all occurrences of uppercase characters with empty strings\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)\\b[A-Z][a-z]*\\b')\n\n    # find all substrings that match the pattern and remove them from the original string\n    str1 = pattern.sub('', str1)\n\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        yield i[0] "
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the count of upper case characters in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            res.append(lst[i:j])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n\n    Args:\n        list1 (list): The list from which the combinations are to be found.\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list.\n    \"\"\"\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Loop through all possible pairs of elements\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Add each combination to the list of combinations\n            combinations.append([list1[i], list1[j]])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize a list to store the combinations\n    result = []\n    # Iterate through each element of the list\n    for i in range(len(list1)):\n        # Initialize a list to store the current combination\n        current_combination = [list1[i]]\n        # Iterate through the remaining elements of the list\n        for j in range(i+1, len(list1)):\n            # Add the current element to the current combination and iterate\n            current_combination.append(list1[j])\n            # If the current combination is a valid combination, add it to the result list\n            if sorted(current_combination) == sorted(list1):\n                result.append(current_combination)\n    # Return the result list of valid combinations\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        combs = []\n        for i in range(len(list1)):\n            combs += combinations_list(list1[:i] + list1[i+1:])\n        return combs"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initializing the result list\n    result = []\n    # initializing the length of the list\n    n = len(list1)\n    # initializing the number of combinations\n    k = len(list1)\n    # initializing the index variable\n    i = 1\n    # iterating over all possible combinations of length k\n    while i <= n:\n        # creating a new list with elements from index i to n\n        combo = list1[i-1:n]\n        # appending the combination to the result list\n        result.append(combo)\n        # incrementing the index variable\n        i += 1\n    # returning the result list of all possible combinations\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combinations = []\n    # loop through each element in the list\n    for element in list1:\n        # loop through each remaining element in the list\n        for remaining in list1[list1.index(element)+1:]:\n            # create a new combination by appending the element and remaining element\n            new_combination = [element] + [remaining]\n            # add the new combination to the list of combinations\n            combinations.append(new_combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(list1[j:j+i])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n            start = i\n\n    return max_product, start"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    max_start = 0\n\n    for i in range(len(arr)):\n        curr_product *= arr[i]\n        if curr_product > max_product:\n            max_product = curr_product\n            max_start = i\n\n        if i > 0 and curr_product < 0:\n            curr_product = 1\n\n    return arr[max_start], max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    \n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n\n    Args:\n    arr (list): The given array.\n\n    Returns:\n    int: The maximum product subarray.\n    \"\"\"\n\n    # Initialize a variable to store the maximum product subarray\n    max_product = arr[0]\n\n    # Initialize two variables to store the current maximum and minimum values in the subarray\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    # Iterate through the array and update the max_so_far and min_so_far values\n    for i in range(1, len(arr)):\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            min_so_far = arr[i]\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n        else:\n            max_so_far = min_so_far = arr[i]\n\n        # Update the max_product variable if the current max_so_far and min_so_far values are greater\n        if max_so_far * min_so_far > max_product:\n            max_product = max_so_far * min_so_far\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Initialize the maximum subarray product and the current subarray product\n    max_product = arr[0]\n    current_product = 1\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Calculate the new current product and compare it with the maximum subarray product\n        current_product = max(arr[i], arr[i] * current_product)\n\n        # Update the maximum subarray product if necessary\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        else:\n            min_ending_here *= arr[i]\n            max_ending_here = 1\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        \n        if min_ending_here < 0:\n            min_ending_here = 1\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_so_far * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(len(dict)):\n        for j in range(len(dict)):\n            if i == j:\n                continue\n            if dict[i] == dict[j]:\n                count += 1\n                break\n        if count == n:\n            return True\n        count = 0\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 0:\n        value = dict.values()[0]\n        for i in range(1, len(dict)):\n            if value!= dict.values()[i]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create a list of values in the dictionary\n    values = list(dict.values())\n    # check if all values are same\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert the dictionary to a set to get unique values\n    unique_values = set(dict.values())\n    # Check if the length of the unique values is equal to n\n    return len(unique_values) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for value in values:\n        if value!= values[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    This function checks if all values are same in a dictionary.\n    '''\n    value_list = list(dict.values())\n    if len(value_list)!= len(set(value_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(1, n+1):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict[key] == dict[key+1] for key in dict if key+1 < n)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    This function will take a dictionary as input and return a new dictionary with all the empty items removed.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # loop through each item in the dictionary\n    for item in dict1:\n        # if the item is an empty string or list, drop it from the dictionary\n        if not dict1[item]:\n            del dict1[item]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through each item in the dictionary\n    for item in dict1.items():\n        # Check if the item value is empty\n        if item[1] == \"\":\n            # Remove the item from the dictionary\n            del dict1[item[0]]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables to keep track of the current maximum and minimum values\n    current_max = arr[0]\n    current_min = arr[0]\n    max_product = arr[0]\n\n    # Iterate over the array and update the current maximum and minimum values and the maximum product\n    for i in range(1, len(arr)):\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n        max_product = max(max_product, current_max)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        # Update the max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max_ending_here * arr[i]\n        \n        # Update the min_ending_here\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = min_ending_here * arr[i]\n        \n        # Update the max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    # find the length of the array\n    n = len(arr)\n    # create an empty list to store the product of subarrays\n    product_list = []\n    # create an empty list to store the left indices of subarrays\n    left_indices = []\n    # initialize the left index and left product to 0 and 1\n    left_index, left_product = 0, 1\n    # initialize the right index and right product to n-1 and 1\n    right_index, right_product = n-1, 1\n    # loop through the array\n    for i in range(n):\n        # if the current element is greater than the left element, update the left element and its left index\n        if arr[i] > arr[left_index]:\n            left_product *= arr[i]\n            left_index = i\n        # if the current element is less than the right element, update the right element and its right index\n        elif arr[i] < arr[right_index]:\n            right_product *= arr[i]\n            right_index = i\n    # if the left product is greater than the right product, add the left product to the product list\n    if left_product > right_product:\n        product_list.append(left_product)\n        left_indices.append(left_index)\n    # if the right product is greater than the left product, add the right product to the product list\n    else:\n        product_list.append(right_product)\n        left_indices.append(right_index)\n    # loop through the array again and multiply the product of the subarrays formed by pairs of increasing elements\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            product_list.append(product_list[-1] * arr[i+1])\n            left_indices.append(left_indices[-1])\n        else:\n            product_list.append(product_list[-1] * arr[i+1])\n            left_indices.append(left_indices[-1])\n    # find the maximum product\n    max_product = max(product_list)\n    # return the maximum product and the left indices of the subarrays\n    return max_product, left_indices"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables to keep track of the current maximum product and the maximum product of any subsequence\n    max_subsequence_product = float('-inf')\n    max_overall_product = float('-inf')\n    \n    # Initialize variables to keep track of the current maximum subsequence and the maximum subsequence product\n    current_max_subsequence = float('-inf')\n    current_max_subsequence_product = 1\n    \n    # Loop through the array and update the variables accordingly\n    for i in range(len(arr)):\n        # Update the current maximum subsequence product if the current element is greater than the current maximum subsequence product\n        current_max_subsequence_product = max(current_max_subsequence_product * arr[i], arr[i])\n        # Update the current maximum subsequence if the current element multiplied by the current maximum subsequence product is greater than the current maximum subsequence\n        current_max_subsequence = max(current_max_subsequence, current_max_subsequence_product)\n        # Update the maximum product of any subsequence if the current element multiplied by the current maximum subsequence product is greater than the maximum product of any subsequence\n        max_overall_product = max(max_overall_product, current_max_subsequence_product)\n        \n    # Return the maximum product of any subsequence\n    return max_overall_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    n = len(arr)\n\n    # Initialize variables to store the minimum and maximum values of the subsequence\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Initialize the result variable to store the maximum product formed by the subsequence\n    max_product = float('-inf')\n\n    # Iterate through the array from left to right\n    for i in range(n):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n        # If the current element is greater than the maximum value, update the maximum value\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n        # If the current element is between the minimum and maximum values, update the maximum product\n        else:\n            max_product = max(max_product, arr[i] * min_val)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # create a list to store the maximum product of subarrays\n    max_products = []\n\n    # iterate over the array\n    for i in range(1, len(arr)):\n        # initialize variables for current subarray\n        current_min = arr[i]\n        current_max = arr[i]\n        left_index = i - 1\n        right_index = i + 1\n\n        # iterate over the left half of the array\n        while left_index >= 0:\n            if current_min * arr[left_index] > current_max:\n                current_max = current_min * arr[left_index]\n            left_index -= 1\n\n        # iterate over the right half of the array\n        while right_index < len(arr):\n            if current_max * arr[right_index] > current_min:\n                current_min = current_max * arr[right_index]\n            right_index += 1\n\n        # add the maximum product of the current subarray to the list\n        max_products.append(current_max)\n\n    # return the maximum product of all subarrays\n    return max(max_products)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    # initialize variables to keep track of the current maximum product and the index of the current maximum product\n    max_product = arr[0]\n    max_index = 0\n    current_product = arr[0]\n\n    # iterate through the array and update the maximum product and index as needed\n    for i in range(1, len(arr)):\n        if arr[i] > current_product:\n            current_product = arr[i]\n            max_product = current_product\n            max_index = i\n        else:\n            current_product *= arr[i]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        max_ending_here = max(0, dp[i - 1] * arr[i - 1])\n        min_ending_here = min(0, dp[i - 1] * arr[i - 1])\n        dp[i] = max_ending_here + min_ending_here\n\n    return max(dp)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product_so_far = max_product_ending_at_i = arr[0]\n    min_product_ending_at_i = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product_ending_at_i = max(max_product_ending_at_i * arr[i], max_product_ending_at_i, arr[i])\n        min_product_ending_at_i = min(min_product_ending_at_i * arr[i], min_product_ending_at_i, arr[i])\n\n        if max_product_ending_at_i > max_product_so_far:\n            max_product_so_far = max_product_ending_at_i\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    def helper(arr, start, end):\n        if start == end:\n            return 0\n        if start == end-1:\n            return arr[start]\n        left = helper(arr, start+1, end)\n        right = helper(arr, start, end-1)\n        if arr[start] > arr[end]:\n            return max(arr[start]*right, arr[end]*left)\n        else:\n            return max(arr[start]*left, arr[end]*right)\n\n    return max(helper(arr, 0, len(arr)-1), helper(arr, 1, len(arr)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    \n    # loop through the tuple and calculate the pairwise sum\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    \n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[1:][i] + test_tup[i-1] for i in range(len(test_tup)))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return 0\n\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i + 1]\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[1] + test_tup[2] + test_tup[3] + test_tup[4] + test_tup[5]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        result = 0\n        for i in range(len(test_tup)-1):\n            result += test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Use a list comprehension to iterate through the tuple and create a new list with the adjacent pairs added\n    new_tup = [x + y for x, y in zip(test_tup, test_tup[1:])]\n\n    # Return the new tuple with the pairwise additions\n    return new_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to keep track of the sum of the first two elements\n    total = test_tup[0] + test_tup[1]\n    # Loop through the tuple and add the sum of each pair of elements to the total\n    for i in range(2, len(test_tup), 2):\n        total += test_tup[i] + test_tup[i+1]\n    # Return the total sum of the pairwise additions\n    return total\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_nums = []\n    for i in range(len(test_tup)-1):\n        neighboring_nums.append(test_tup[i]+test_tup[i+1])\n    return neighboring_nums"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return test_tup[0] + test_tup[1] + add_pairwise(test_tup[2:])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    # initialize the product to 1\n    product = 1\n    \n    # loop through the array and multiply each element by the product\n    for num in arr:\n        product = (product * num) % n\n    \n    # return the final product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function finds the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i % n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array and a number n as inputs and returns the remainder of the multiplication of the array modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for num in arr:\n        total = (total * num) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1 \n    for num in arr: \n        product = (product * num) % n \n    return product "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result variable\n    result = 1\n\n    # Iterate through the array and multiply each element with the result\n    for num in arr:\n        result = (result * num) % n\n\n    # Return the result modulo n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr: \n        product = (product * num) % n \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i] + 1 == l[i+1]: \n            print(\"The list contains consecutive numbers.\") \n            return True \n        else: \n            continue \n    print(\"The list does not contain consecutive numbers.\") \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    # Check if list is empty\n    if not l:\n        return \"The list is empty.\"\n    \n    # Initialize variables\n    prev = None\n    \n    # Iterate through the list\n    for num in l:\n        # Check if number is not consecutive with previous number\n        if prev!= None and prev + 1!= num:\n            return \"The list does not contain consecutive numbers.\"\n        \n        # Update previous number\n        prev = num\n    \n    # If all numbers are consecutive, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if all the numbers in the list are consecutive and False otherwise.\n    '''\n\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(1, len(l)):\n        if l[i] - l[i-1]!= 1:\n            return False\n        else:\n            count += 1\n    return count == len(l)"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 1\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            count += 1\n        else:\n            count = 1\n    if count == len(l):\n        print(\"The list contains consecutive numbers.\")\n    else:\n        print(\"The list does not contain consecutive numbers.\")"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False  # empty list or only one element\n    prev_num = l[0]\n    for num in l[1:]:\n        if num - prev_num!= 1:\n            return False\n        prev_num = num\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # convert the intersection back to a list\n    intersection_list = list(intersection)\n\n    # return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Using a set to remove duplicates in both lists\n    unique_list1 = set(test_list1)\n    unique_list2 = set(test_list2)\n\n    # Finding the intersection of unique elements in both lists\n    intersection = unique_list1.intersection(unique_list2)\n\n    # Converting the intersection set back to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of the elements in the first list\n    set1 = set(test_list1)\n    # create a set of the elements in the second list\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # Sort both lists to ensure they are sorted by tuple elements\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize empty intersection list\n    intersection = []\n\n    # Iterate over the sorted lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # If the elements at the current positions are equal, add them to the intersection list\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n        # If the element at the current position in test_list1 is smaller, move to the next element in test_list1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        # If the element at the current position in test_list2 is smaller, move to the next element in test_list2\n        else:\n            j += 1\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list of tuples to a set so that duplicates are removed\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets\n    common_tuples = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(common_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Convert the given list to a set so that we can remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the tuple lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection_set = set(test_list1) & set(test_list2)\n    return tuple(intersection_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns a new list of common elements irrespective of their order.\n    \"\"\"\n    # create an empty set to store the unique elements of the two lists\n    unique_elements = set()\n\n    # iterate through the first list and add each element to the set\n    for element in test_list1:\n        unique_elements.add(element)\n\n    # iterate through the second list and add each element to the set\n    for element in test_list2:\n        unique_elements.add(element)\n\n    # convert the set back to a list and return it as the intersection of the two lists\n    return list(unique_elements)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Convert the input string to a list of characters\n    lst = list(str1)\n    # Use a for loop to iterate through the list and replace characters\n    for i in range(len(lst)):\n        if lst[i] == ch:\n            lst[i] = newch\n    # Convert the modified list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str1)\n    # Loop through the list of characters and replace the character of interest\n    for i in range(len(char_list)):\n        if char_list[i] == ch:\n            char_list[i] = newch\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Initialize a new string variable to store the modified string\n    modified_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the current character is equal to the search character, replace it with the replacement character\n        if char == ch:\n            modified_str += newch\n        # Otherwise, add the current character to the modified string\n        else:\n            modified_str += char\n    \n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of the given character in a string with a new character.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace `ch`.\n\n    Returns:\n    str: The modified string with `ch` replaced with `newch`.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the current character is equal to the character to be replaced\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(str1)\n    \n    # Use a for loop to replace each occurrence of the character ch with the new character newch\n    for i in range(len(chars)):\n        if chars[i] == ch:\n            chars[i] = newch\n            \n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n\n    # sort the counter by values in descending order\n    sorted_counter = counter.most_common()\n\n    # create a new dictionary with sorted counter values\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # Sort the counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Convert the sorted counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).items())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest value\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest values in the array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        print(\"Array should have at least two elements to find the maximum and minimum values.\")\n        return\n\n    max_num = nums[0]\n    min_num = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n        elif nums[i] < min_num:\n            min_num = nums[i]\n\n    print(\"The sum of the largest and smallest value in the array is:\", max_num + min_num)\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # calculate the sum of the largest and smallest values\n    sum = largest + smallest\n    return sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Check if the input is empty\n    if not nums:\n        return None\n    \n    # Find the maximum and minimum values in the array\n    max_val = min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # get the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to check whether the given string is in lower case or not.\n    \"\"\"\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # define the pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # use the re.sub() method to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1).lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    matches = re.findall(pattern, str1)\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Remove all lowercase substrings from the given string\n    str2 = re.sub(r'(?<![\\p{L}])(?=[\\p{L}])', '', str1)\n\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(str1)\n    # Remove all lowercase substrings from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # define regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # replace all lowercase substrings with an empty string\n    str2 = pattern.sub('', str1)\n    # return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # Find all lowercase substrings in the given string\n    matches = pattern.findall(str1)\n\n    # Remove all lowercase substrings from the given string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to string\n    str_n = str(n)\n    \n    # Access the first digit of the string\n    first_digit = str_n[0]\n    \n    # Return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string and get the first character\n    first_char = str(n)[0]\n    # convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # check if the number is greater than 0\n    if n > 0:\n        # convert the number to a string\n        num_str = str(n)\n        # return the first digit of the number\n        return num_str[0]\n    # if the number is 0 or negative, return None\n    else:\n        return None"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n >= 10:\n        return n // 10\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Take the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the integer.\n    \"\"\"\n    # if the number is zero, return 0\n    if n == 0:\n        return 0\n    # if the number has more than one digit, return 0\n    elif len(str(n)) > 1:\n        return 0\n    # if the number has only one digit, return the digit\n    else:\n        return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to string format\n    num_str = str(n)\n    # convert the first character to integer format\n    first_digit = int(num_str[0])\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to string\n    num_str = str(n)\n    # Convert the first character of the string to integer\n    first_digit = int(num_str[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # find the first digit of the string using slicing\n    first_digit = num_str[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for number in list:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # create an empty list to store the odd numbers\n    odd_list = []\n    \n    # iterate through each number in the list\n    for num in list:\n        # if the number is odd, append it to the odd_list\n        if num % 2!= 0:\n            odd_list.append(num)\n            \n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd numbers in the list.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference\n\nprint(difference(10)) # Output: 208"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize the sum of cubes and the sum of natural numbers to 0\n    cubes = 0\n    natural_numbers = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        natural_numbers += i\n\n    # Return the difference between the two sums\n    return abs(cubes - natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(n+1):\n        sum_of_cubes += i**3\n        sum_of_nums += i\n    return sum_of_cubes - sum_of_nums"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(n):\n        sum_cubes += i*i*i\n    # Calculate the sum of the first n natural numbers\n    for i in range(n):\n        sum_natural += i+1\n    # Calculate the difference between the sum of cubes and sum of natural numbers\n    diff = abs(sum_cubes - sum_natural)\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of first n natural numbers\n    cubes_sum = 0\n    for i in range(1, n+1):\n        cubes_sum += i**3\n    \n    # Find the sum of first n natural numbers\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    # Return the difference between the two sums\n    return cubes_sum - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to keep track of the sum of cubes and sum of natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    \n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    # Calculate the difference between the sum of cubes and sum of natural numbers\n    difference = abs(sum_cubes - sum_natural)\n    \n    # Return the difference between the sum of cubes and sum of natural numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize sum of squares and sum of cubes to zero\n    sum_of_squares = 0\n    sum_of_cubes = 0\n\n    # compute the sum of squares of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n\n    # compute the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n\n    # compute the difference between the two sums\n    diff = sum_of_cubes - sum_of_squares\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    difference = sum_cubes - sum_numbers\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] % N == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i+1, N):\n            xor = xor ^ A[j]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in an array A of size N and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n\n    difference = 0\n\n    for i in range(len(n1_list)):\n        difference += abs(n1_list[i] - n2_list[i])\n\n    return difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert input numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # initialize variables to store sum of per-digit differences\n    diff_sum = 0\n\n    # loop through each digit of the two input numbers\n    for i in range(len(s1)):\n        # compute the per-digit difference between the corresponding digits of the two numbers\n        diff = abs(int(s1[i]) - int(s2[i]))\n\n        # add the per-digit difference to the sum of per-digit differences\n        diff_sum += diff\n\n    # return the sum of per-digit differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    digit_sum = 0\n    \n    while diff > 0:\n        digit_sum += diff % 10\n        diff //= 10\n        \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_difference = 0\n    \n    # Loop through each digit of the two numbers and calculate the per-digit difference\n    for i in range(len(str(n1))):\n        digit_difference += abs(int(str(n1)[i]) - int(str(n2)[i]))\n        \n    return digit_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to lists of digits\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    \n    # Initialize a list to store the differences between the corresponding digits\n    digit_diff_list = []\n    \n    # Loop through the digits of the first number\n    for i in range(len(n1_list)):\n        # Find the difference between the corresponding digits\n        digit_diff = int(n1_list[i]) - int(n2_list[i])\n        \n        # Add the difference to the list of differences\n        digit_diff_list.append(digit_diff)\n        \n    # Return the sum of the differences\n    return sum(digit_diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n    # create an empty list to store the per-digit differences\n    digit_diffs = []\n    # iterate through each digit in the two numbers\n    for i in range(len(num1)):\n        # compare the current digits and append the difference to the list\n        digit_diffs.append(int(num1[i]) - int(num2[i]))\n    # calculate the sum of the per-digit differences\n    sum_digit_diffs = sum(digit_diffs)\n    # return the sum of the per-digit differences\n    return sum_digit_diffs"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digit1 = [int(d) for d in str(n1)]\n    digit2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference between the two lists\n    diff_sum = sum(abs(d1-d2) for d1, d2 in zip(digit1, digit2))\n    \n    # Return the sum of the per-digit differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    # find the difference between the lists of digits\n    diff_digits = [abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)]\n    # convert the list of differences to a single number and return it\n    return sum(diff_digits)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n    sum_diff = 0\n\n    # Calculate the sum of the per-digit differences\n    for i in range(len(num1_digits)):\n        diff = abs(num1_digits[i] - num2_digits[i])\n        sum_diff += diff\n\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    digit_diff_sum = 0\n    while diff > 0:\n        digit_diff = diff % 10\n        digit_diff_sum += digit_diff ** 2\n        diff //= 10\n    return digit_diff_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n    current_end = 0\n\n    for i in range(len(a)):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = current_end = i\n\n        if current_sum < 0:\n            current_sum = 0\n            current_start = current_end = i\n\n    return max_sum, a[current_start:current_end+1]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n\n    while end < len(a):\n        end += 1\n        while end < len(a) and end - start + 1 > size:\n            start += 1\n            end = start + size\n        if end - start + 1 == size:\n            max_sum = max(max_sum, sum(a[start:end+1]))\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Find the maximum sum of a contiguous subarray of the given size.\n\n    Parameters:\n    a (list): a list of integers\n    size (int): the size of the contiguous subarray to find the maximum sum of\n\n    Returns:\n    int: the maximum sum of a contiguous subarray of size `size` in the given list `a`\n    '''\n\n    # Initialize the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate over the input list and update the maximum subarray sum and the current subarray sum\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if i >= size - 1:\n            # If we've reached the end of the subarray, check if it's the maximum sum so far\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            # If we're still in the subarray, update the current subarray sum\n            curr_sum -= a[i - size + 1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    :param a: list of integers\n    :param size: integer, the size of the sublist to consider\n    :return: integer, the sum of the largest contiguous sublist in the given list\n    \"\"\"\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    # Iterate over the list\n    for i in range(len(a)):\n        # Add the current element to the maximum ending here\n        max_ending_here += a[i]\n\n        # If the maximum ending here becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        # If the maximum so far is less than the current maximum ending here, update it\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    # Return the maximum sum\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    # Iterate through the list and find the max sum and its starting index\n    for i in range(size):\n        # Update the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the max sum, update the max sum and start index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n\n        # If the current sum becomes negative, reset the current sum\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the sum of the largest contiguous sublist\n    return max_sum, current_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"Size should be less than or equal to the length of the input list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n            \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum, current_start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i >= size - size // 2:\n            curr_sum -= a[i - size // 2]\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the set of unique elements from both tuples\n    unique_elements = set(test_tup1).union(set(test_tup2))\n    # Convert the set back to a list and sort it\n    sorted_elements = sorted(list(unique_elements))\n    # Return the sorted list of elements as the result\n    return sorted_elements"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = sorted(set(test_tup1).union(set(test_tup2)))\n    print(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set union\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n    # Return the sorted union list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Find the unique elements of the combined tuple\n    unique_tup = set(combined_tup)\n\n    # Convert the set back into a tuple and sort it\n    sorted_tup = sorted(unique_tup)\n\n    # Output the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create an empty set to store the union of the two tuples\n    union = set()\n    \n    # Add all elements from the first tuple to the set\n    for element in test_tup1:\n        union.add(element)\n        \n    # Add all elements from the second tuple to the set\n    for element in test_tup2:\n        union.add(element)\n        \n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union))\n    \n    # Print the union of the two tuples\n    print(\"Union of the two tuples:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            union.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            union.append(element)\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # convert both tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # concatenate the two sets to get the union\n    union = set1 | set2\n\n    # convert the union back to a tuple and sort it\n    sorted_union = tuple(sorted(union))\n\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = test_tup1 + test_tup2\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    all_elements = test_tup1 + test_tup2\n    # Find the set of unique elements in the concatenated tuple\n    unique_elements = set(all_elements)\n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(unique_elements))\n    # Output the sorted list of unique elements\n    print(sorted_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if j-i > max_length:\n                max_length = j-i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            temp = lst[i:j]\n            if len(temp) > longest:\n                longest = len(temp)\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through each element in the list\n    for i in range(len(lst)):\n        # Check if the current element is the start of a new sublist\n        if lst[i] == 1:\n            current_length = 1\n            # If the current element is the start of a new sublist, check if it is longer than the previous longest sublist\n            if current_length > max_length:\n                max_length = current_length\n        # If the current element is not the start of a new sublist, add 1 to the current sublist length\n        else:\n            current_length += 1\n        # If the current sublist length is longer than the previous longest sublist, update the max_length\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            max_length = max(max_length, len(lst[i:j]))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    longest_sublist = 0\n    for i in range(len(lst)):\n        if i == 0 or lst[i] >= lst[i-1]:\n            longest_sublist += 1\n        else:\n            longest_sublist = 0\n    return longest_sublist"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for num in lst:\n        curr_len += 1\n        if curr_len > max_len:\n            max_len = curr_len\n        if curr_len == 1:\n            max_len = 1\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    cur_len = 0\n    for i in range(len(lst)):\n        if i == 0:\n            cur_len = 1\n        elif i > 0 and lst[i]!= lst[i - 1]:\n            cur_len += 1\n        else:\n            cur_len = 1\n        max_len = max(max_len, cur_len)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n            \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    '''\n    max_length = 0  # initialize max length to 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if max_length < j-i+1:\n                max_length = j-i+1\n                \n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")([\\w\\s]+)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # Match double quotes and capture everything between them\n    values = re.findall(pattern, text)  # Find all matches and return them as a list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?<=\")(?:(?!\\2).)*(?=\\2)')\n    matches = pattern.findall(text)\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?P<value>[^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?P<value>\"[^\"]*\")'\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        value = match.group('value')\n        value = value.strip('\"')\n        values.append(value)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n    # Use the re.findall() method to extract all the matches in the text\n    matches = re.findall(pattern, text)\n    # Return a list of all the extracted values\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    -----------\n    arr (list): List of integers.\n    n (int): The length of the list.\n\n    Returns:\n    --------\n    int: The count of possible unordered pairs.\n    \"\"\"\n\n    # Initialize a count variable\n    count = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Iterate through the list again\n        for j in range(i+1, n):\n            # Check if the elements are equal\n            if arr[i] == arr[j]:\n                # If they are equal, increment the count\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    arr: A list of integers.\n\n    Returns:\n    count: The number of possible unordered pairs where both elements are unequal.\n\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters in that string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum\n    total = 0\n\n    # Loop through each digit in the number\n    while n > 0:\n        # Get the rightmost digit and add it to the total\n        total += n % 10\n\n        # Remove the rightmost digit from the number\n        n //= 10\n\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize variable to hold the sum of digits\n    total = 0\n    # iterate through each digit of the input integer\n    while n > 0:\n        # add the last digit to the sum\n        total += n % 10\n        # remove the last digit from the input integer\n        n //= 10\n    # return the sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to get its digits\n    digits = str(n)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop over each digit of the string\n    for digit in digits:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then to a list of digits\n    digits = list(str(n))\n    # Initialize the sum variable to 0\n    total = 0\n    # Loop through each digit in the list\n    for digit in digits:\n        # Convert each digit to an integer and add it to the total\n        total += int(digit)\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        return None\n    else:\n        # Convert the integer to a string\n        num_str = str(n)\n        # Convert the string to a list of digits\n        num_list = [int(d) for d in num_str]\n        # Calculate the sum of digits and return the result\n        return sum(num_list)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each digit in n (base 10)\n    while n > 0:\n        # get the last digit of n\n        digit = n % 10\n        # add it to the sum\n        sum += digit\n        # remove the last digit from n\n        n //= 10\n    # return the sum of the digits of n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to hold the sum\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the last digit of the number\n        digit = n % 10\n        \n        # Add it to the sum\n        sum += digit\n        \n        # Remove the last digit from the number\n        n = n // 10\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    # check if the list has only one element\n    if len(list1) == 1:\n        return True\n    # check if the list is sorted in ascending order\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(lst):\n    '''\n    This function checks whether a specified list is sorted or not.\n    Returns True if the list is sorted, False otherwise.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the length of the list is less than or equal to 1\n    if len(list1) <= 1:\n        return True\n\n    # Check if the first element is smaller than the last element\n    if list1[0] >= list1[-1]:\n        return False\n\n    # Check if the list is sorted after removing the first and last elements\n    return issort_list(list1[1:-1])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] < list1[1]:\n            return False\n        else:\n            return issort_list(list1[1:])"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in list1\n    for sublist in list1:\n        # Convert the sublist to a string and split it into a list of words\n        words = sublist.split()\n        # Sort the list of words\n        words.sort()\n        # Join the sorted words back into a string and append it to the sublist\n        sublist =''.join(words)\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of list1\n    for sublist in list1:\n        # Convert the sublist to a string and sort it\n        sublist = sorted(sublist)\n        # Replace the original sublist with the sorted one\n        list1[list1.index(sublist)] = sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Remove duplicates from each list using a set\n    unique_nums = [list(set(num)) for num in nums]\n    # Flatten the list of lists to a single list\n    flat_list = [num for sublist in unique_nums for num in sublist]\n    return flat_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list with all duplicate elements removed.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    # remove duplicate numbers from all lists in the given list\n    unique_nums = []\n    for num_list in nums:\n        unique_list = list(set(num_list))\n        unique_nums.append(unique_list)\n    # return the list of unique numbers from all lists\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of lists where each sublist contains the numbers to be removed.\n\n    Returns:\n        list: A new list containing the unique numbers from all input lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    \n    # Loop through each list in the input list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the number is not already in the set, add it\n            if num not in unique_nums:\n                unique_nums.add(num)\n    \n    # Convert the set back to a list\n    unique_nums_list = list(unique_nums)\n    \n    return unique_nums_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicates from a given list of numbers.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with duplicates removed.\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    unique_nums = list(set(nums))\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store the unique numbers\n    unique_nums = set()\n    # Loop through each number in the given lists\n    for num in nums:\n        # If the number is not already in the set, add it to the set\n        if num not in unique_nums:\n            unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n\n    Parameters:\n    list_data (list): A list of integers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n\n    Example:\n    unique_product([1, 2, 3, 2, 1, 4, 5, 6]) # Output: 360 (1 * 2 * 3 * 4 * 5 * 6)\n    unique_product([1, 2, 3, 4, 5]) # Output: 0 (There are no unique numbers in the list)\n    \"\"\"\n\n    # Initialize an empty set to store unique numbers\n    unique_nums = set()\n\n    # Loop through each number in the list\n    for num in list_data:\n\n        # If the number is not in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # If there are no unique numbers in the list, return 0\n    if len(unique_nums) == 0:\n        return 0\n\n    # Otherwise, calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of unique numbers in a given list.\n    \"\"\"\n    unique_list = set(list_data)\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # create a set of unique numbers from the input list\n    product = 1 # initialize the product to 1\n    \n    # iterate through the set of unique numbers and multiply them together\n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = sorted(list(set(list_data)))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)  # create a set of unique numbers from the list_data\n    product = 1  # initialize the product to 1\n    for num in unique_numbers:\n        product *= num  # multiply the product by each unique number in the set\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set to store the unique numbers\n    unique_set = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # convert the list to a set to get unique numbers\n    product = 1 # initialize the product variable to 1\n    for num in unique_numbers: # iterate over the unique numbers\n        product *= num # multiply the product by each unique number\n    return product # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    # Get a set of unique numbers from the input list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    # Return the product\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    This function takes the radius r and height h of a cylinder as input and returns the surface area of the cylinder.\n    \"\"\"\n    area = 2 * pi * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 # formula for surface area of a cylinder\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    # Calculate the surface area of a cylinder using the formula A = pi * r^2 * h\n    surface_area = 2 * 3.14 * r**2 * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2*3.14159*(r**2)+(2*3.14159*r*h)+(h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * (3.14 * r * r) + 2 * (3.14 * r * h) + 2 * (3.14 * h * h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A): \n        return False\n    for i in range(len(B)): \n        if A[i] not in B: \n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B as input and returns a boolean value indicating whether A is a sublist of B or not.\n    '''\n    \n    # Convert A into a set for faster searching\n    A_set = set(A)\n    \n    # Iterate over the sublist of B and check if each element is present in A\n    for i in B:\n        if i in A_set:\n            return True\n    \n    # If the function reaches here, then A is not a sublist of B\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if B == A[i:]:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while j<len(B):\n        if A[i] == B[j]:\n            i+=1\n        j+=1\n    if i==len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # checking whether B is sublist of A or not\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False \n    for i in range(len(B)): \n        if B[i] not in A: \n            return False \n        if i+len(B) > len(A): \n            return True \n        if A[i:i+len(B)]!= B: \n            return False \n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variable for the last digit in the factorial\n    last_digit = 0\n    \n    # loop through each digit in the factorial\n    for i in range(1, n+1):\n        # find the factorial of the current digit\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        \n        # find the last digit of the factorial\n        last_digit = factorial % 10\n    \n    # return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Get the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Convert the factorial to a string and split it into individual digits\n    factorial_str = str(factorial)\n    factorial_list = list(factorial_str)\n    \n    # Get the last digit of the factorial\n    last_digit = int(factorial_list[-1])\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert input to integer\n    n = int(n)\n    # Initialize variables\n    factorial = 1\n    temp = 1\n    last_digit = 0\n    # Loop through digits of input number\n    while n > 0:\n        # Add current digit to factorial\n        factorial *= n % 10\n        # Update last_digit\n        last_digit = n % 10\n        # Remove last digit from input number\n        n //= 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # take input from user\n    num = int(input(\"Enter a number: \"))\n    \n    # convert factorial to string\n    factorial = str(factorial(num))\n    \n    # find last digit of factorial\n    last_digit = factorial[-1]\n    \n    # print result\n    print(\"The last digit in factorial of\", num, \"is\", last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize factorial variable\n    factorial = 1\n\n    # loop through each digit in the number and multiply it with the factorial\n    while n > 0: \n        digit = n % 10\n        factorial *= digit\n        n //= 10\n\n    # find the last digit in the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize factorial to 1\n    factorial = 1\n    # loop through each digit of n\n    for digit in str(n):\n        # multiply the factorial by the corresponding digit\n        factorial *= int(digit)\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n\n    # Initialize a variable to store the last digit of factorial\n    last_digit = 0\n\n    # Iterate through the string and find the last digit\n    for digit in num:\n        last_digit = int(digit)\n        break\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0:\n        factorial *= temp\n        temp //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a number as input and returns the last digit in its factorial.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n    \n    # Check if the lists have the same length\n    if n1!= n2 or n1!= n3:\n        print(\"Lists must have the same length.\")\n        return\n    \n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Iterate over the lists and add each element to the interleaved list\n    for i in range(n1):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in 3 lists of the same length and returns a new list\n    containing all the elements of the first list followed by the elements of the\n    second list followed by the elements of the third list.\n    \"\"\"\n    # create a list to store the interleaved elements\n    interleaved_list = []\n    \n    # iterate through each element of the first list\n    for i in range(len(list1)):\n        # append the element to the interleaved list\n        interleaved_list.append(list1[i])\n        \n    # iterate through each element of the second list\n    for i in range(len(list2)):\n        # append the element to the interleaved list\n        interleaved_list.append(list2[i])\n        \n    # iterate through each element of the third list\n    for i in range(len(list3)):\n        # append the element to the interleaved list\n        interleaved_list.append(list3[i])\n        \n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each element in the lists\n    for i in range(len(list1)):\n        # Append the first element of list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element of list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element of list3 to the interleaved list\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Ensure that all lists are the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    # Loop through each element in each list\n    for i in range(len(list1)):\n        # Add the first element of list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Add the second element of list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Add the third element of list3 to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: Lists must have the same length.\"\n    \n    # Initialize an empty list to store the interleaved list\n    interleaved = []\n    \n    # Loop through each element in the lists\n    for i in range(len(list1)):\n        # Add the i-th element from each list to the interleaved list\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    # check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    # initialize an empty result list\n    result = []\n    # loop over the first list\n    for i in range(len(list1)):\n        # append the first element of each list to the result list\n        result.append(list1[i])\n        # append the second element of the second list to the result list\n        result.append(list2[i])\n        # append the third element of the third list to the result list\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the 3 lists\n    result = list1 + list2 + list3\n    # Return the result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set to store the common elements in both tuples\n    common_set = set(test_tup1).intersection(set(test_tup2))\n\n    # Create a set to store the elements in the first tuple that are not in the common set\n    first_set = set(test_tup1).difference(common_set)\n\n    # Create a set to store the elements in the second tuple that are not in the common set\n    second_set = set(test_tup2).difference(common_set)\n\n    # Find the dissimilar elements in both sets and return them as a list\n    return list(first_set.intersection(second_set))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a list of tuples containing all elements of both tuples\n    all_elements = list(test_tup1) + list(test_tup2)\n\n    # Create a set of all elements of both tuples\n    all_elements_set = set(all_elements)\n\n    # Create a list of tuples containing all elements that are only in one tuple\n    dissimilar_elements = []\n    for element in all_elements_set:\n        if element not in test_tup1 and element not in test_tup2:\n            dissimilar_elements.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of elements in the first tuple to compare to the elements in the second tuple\n    dissimilar_set = set(test_tup1).difference(set(test_tup2))\n    # convert the set to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    # Loop through the elements of the first tuple\n    for elem1 in test_tup1:\n        # Check if the element exists in the second tuple\n        if elem1 not in test_tup2:\n            # If it doesn't exist, add it to the dissimilar list\n            dissimilar_list.append(elem1)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # creating a set to store the common elements\n    common_set = set(test_tup1) & set(test_tup2)\n\n    # creating a set to store the elements in test_tup1 that are not in common_set\n    dissimilar_set1 = set(test_tup1) - common_set\n\n    # creating a set to store the elements in test_tup2 that are not in common_set\n    dissimilar_set2 = set(test_tup2) - common_set\n\n    # creating a set to store the intersection of dissimilar_set1 and dissimilar_set2\n    intersection_set = dissimilar_set1 & dissimilar_set2\n\n    return list(intersection_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return even_fnc(x)\n    \n    # iterate through the tuple and check if each element is even using the specified even function\n    for i in range(len(test_tuple)):\n        if not is_even(test_tuple[i]):\n            # if an uneven element is found, remove it from the tuple\n            del test_tuple[i]\n    \n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            result.extend(even_ele(element, even_fnc))\n        else:\n            result.append(even_fnc(element))\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if isinstance(element, list):\n            even_list.extend(even_fnc(element))\n        elif even_fnc(element):\n            even_list.append(element)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # remove non-even elements from the tuple\n    even_tuple = [even_fnc(item) for item in test_tuple if even_fnc(item)]\n    # return the even tuple\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    \n    even_list = [x for x in test_tuple if is_even(even_fnc(x))]\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    :param test_tuple: the nested mixed tuple of elements to be processed\n    :param even_fnc: the function to check if an element is even\n    :return: the tuple with uneven elements removed\n    \"\"\"\n    result_tuple = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            result_tuple.append(elem)\n    return result_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            new_tuple.extend(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_fnc(item))\n        elif isinstance(item, list):\n            new_tuple.append([even_fnc(x) for x in item])\n        else:\n            if even_fnc(item):\n                new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Compute the surface area of a square pyramid with a given base edge and height.\n    \n    Args:\n        b: float\n            The base edge of the square pyramid.\n        s: float\n            The height of the square pyramid.\n            \n    Returns:\n        float\n            The surface area of the square pyramid.\n    \"\"\"\n    area = (b * s) / 2.0 # the area of the pyramid's base\n    return area * 6  # multiply by the number of sides (6 in this case)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*(base_edge*height + base_edge*base_edge)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Find the surface area of a square\n    surface = (b*b)+(s*s)\n\n    # Find the perimeter of a square\n    perimeter = 4*b\n\n    # Calculate the surface area of a square pyramid\n    pyramid = 2*(surface+s*s)\n\n    # Return the surface area of the pyramid\n    return pyramid\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes in two arguments, b (base edge) and s (height), and calculates the surface area of a square pyramid.\n    '''\n    area = b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base and height of the pyramid\n    base_area = 0.5 * b * b\n    pyramid_height = 0.5 * s * s\n    \n    # Calculate the surface area of the pyramid by adding the base area and the surface area of each of its faces\n    surface_area = base_area + pyramid_height\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((2*b)+(2*s))*((b+s)*0.5)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    This function takes in the base edge and height of a square pyramid as inputs and returns the surface area of the pyramid.\n    '''\n\n    # Find the half of the base edge\n    h = b/2\n    \n    # Calculate the surface area using Heron's formula\n    surface_area = (b**2 + s**2 + h**2) * (2 * (b + s))\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Base edge\n    base = b\n    # Height of pyramid\n    height = s\n    # Calculate area of base\n    area = base * height\n    # Calculate surface area of pyramid\n    surface_area = 6 * area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_Area = (b*s) + (b*s) + (b*s) + (b*s) + (b*s)\n    return surface_Area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = (b**2)*(s**2) + (b**2)*(b*s) + (b*s**2)\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n - 1) * (2 * n - 1) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number, which is the sum of the binomial coefficients of all positive integers up to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n % 2 == 0:\n        return catalan_number(n//2) + catalan_number((n+1)//2)\n    else:\n        return catalan_number((n+1)//2) + catalan_number(n//2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n - 1) + catalan_number(2 * n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num+1):\n            result += i * catalan_number(i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Invalid input. Please provide a non-negative integer.\")\n    catalan = [1]\n    for i in range(1, num + 1):\n        catalan.append(4 * (i - 1) // (i + 1) * catalan[-1])\n    return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return (2*n-1)*catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number, also known as the binomial coefficient C(n,k).\n    \"\"\"\n    if n < 0 or n > 50:\n        raise ValueError(\"Catalan numbers are defined for n in the range [0, 50].\")\n\n    # Initialize the Catalan numbers\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 14\n    elif n == 5:\n        return 42\n    elif n == 6:\n        return 132\n    elif n == 7:\n        return 429\n    elif n == 8:\n        return 1430\n    elif n == 9:\n        return 4862\n    elif n == 10:\n        return 16796\n    elif n == 11:\n        return 65645\n    elif n == 12:\n        return 258096\n    elif n == 13:\n        return 1094670\n    elif n == 14:\n        return 4832045\n    elif n == 15:\n        return 19641880\n    elif n == 16:\n        return 82228355\n    elif n == 17:\n        return 355687420\n    elif n == 18:\n        return 1597393700\n    elif n == 19:\n        return 7349816700\n    elif n == 20:\n        return 31527340900\n    elif n == 21:\n        return 132072253000\n    elif n == 22:\n        return 598958401600\n    elif n == 23:\n        return 2580571902400\n    elif n == 24:\n        return 11363367270400\n    elif n == 25:\n        return 45673166481920\n    elif n == 26:\n        return 172271051792640\n    elif n == 27:\n        return 687615367080060\n    elif n == 28:\n        return 2946845308288000\n    elif n == 29:\n        return 13406177668211200\n    elif n == 30:\n        return 57126495942336000\n    elif n == 31:\n        return 254712658964736000\n    elif n == 32:\n        return 1046392048548544000\n    elif n == 33:\n        return 4093244402788390400\n    elif n == 34:\n        return 15143926432333014016\n    elif n == 35:\n        return 60954626345173296640\n    elif n == 36:\n        return 272135706202218488064\n    elif n == 37:\n        return 1152667404497004594944\n    elif n == 38:\n        return 4790016322617610364160\n    elif n == 39:\n        return 18508846427058686220800\n    elif n == 40:\n        return 77483813626345088896000\n    elif n == 41:\n        return 298599757759375508"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*catalan_number(num-1))/(num+1)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = text[start_pos:end_pos]\n        return adverb, start_pos, end_pos\n    else:\n        return None, None, None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\nif __name__ == \"__main__\":\n    text = \"This is a sentence with a lot of adverbs like dull, lazy, and lazyly.\"\n    matches = find_adverbs(text)\n    print(\"Adverbs ending with ly:\")\n    for match in matches:\n        print(match)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb and its positions in the string.\n    '''\n    # Compile a regular expression pattern to find adverbs ending with ly\n    pattern = re.compile(r'\\b\\w+\\s+ly\\b')\n    # Find all the matches in the string using the compiled pattern\n    matches = pattern.finditer(text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Iterate over all the matches and add the adverb and its positions to the list\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end].strip()\n        adverbs.append((adverb, (start, end)))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern for adverbs ending with ly\n    pattern = r'\\b[a-z]*ly\\b'\n    # find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # initialize an empty list to store the adverb positions and their lengths\n    positions = []\n    # iterate over all the matches of the pattern and extract the positions and lengths of the adverbs\n    for match in matches:\n        # extract the start and end positions of the adverb in the text\n        start = text.find(match)\n        end = start + len(match)\n        # calculate the length of the adverb\n        length = end - start\n        # add the adverb positions and lengths to the positions list\n        positions.append((start, length))\n    # return the positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern for matching adverbs\n    pattern = r'\\b(ly|ry|al|ful|ful|less|lesser|most|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|most"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\bly\\b'\n    \n    # find all the matches using the regular expression pattern\n    matches = re.finditer(pattern, text)\n    \n    # loop through the matches and store the positions and adverbs in a list\n    result = []\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        adverb = text[start:end].lower()\n        result.append((start, adverb))\n        \n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b([a-z]+)ly\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs, pattern"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b\\w*ly\\b'\n    \n    # use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # loop over the matches and print out the positions and the adverb ending with \"ly\"\n    for i, match in enumerate(matches):\n        print(f\"Adverb ending with 'ly' at position {i}: {match}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b[a-z]+ly\\b'\n    # Use re.findall() to find all non-overlapping matches of the pattern in the given text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # Loop through the matches and print the position and length of each match\n    for match in matches:\n        print(f\"{match} ({match.lower()}): {len(match)}\")\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the items in descending order (smallest first)\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    # Create a min heap to keep track of the n most expensive items\n    min_heap = []\n    \n    # Create a dictionary to store the price of each item\n    item_prices = {}\n    \n    # Iterate through the items and add them to the min heap and the item_prices dictionary\n    for item in items:\n        if item not in item_prices or item_prices[item] > item:\n            heapq.heappush(min_heap, item)\n            item_prices[item] = item\n            \n    # Return the n most expensive items from the min heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # convert the items to a min heap\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n\n    # pop the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items by price in descending order\n    items.sort(reverse=True)\n    # Return the top n items in the sorted list\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # create a min-heap of size n to store the n most expensive items\n    heap = []\n    # initialize a variable to store the cost of the current item being considered\n    current_cost = 0\n    # loop through the items in the dataset\n    for item in items:\n        # if the current item is not already in the heap, add it with its cost\n        if len(heap) < n:\n            heapq.heappush(heap, (item, current_cost))\n        # if the current item is already in the heap, update its cost if it's lower than the current cost\n        else:\n            if item[1] < heap[0][1]:\n                heapq.heappushpop(heap, (item, current_cost))\n        # update the current cost for the next iteration\n        current_cost += item[1]\n    # return the n most expensive items\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items from the heap\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[0] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the dataset in ascending order of their price\n    items.sort(key=lambda x: x[1])\n\n    # Create a max heap of size n and add the first n items to the heap\n    max_heap = []\n    for i in range(n):\n        max_heap.append(items[i])\n\n    # Fill the remaining heap with the remaining items in the dataset\n    for i in range(n, len(items)):\n        if items[i][1] > max_heap[0][1]:\n            heapq.heappushpop(max_heap, items[i])\n\n    # Return the items in the max heap\n    return [item[0] for item in max_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n or item < heap[0]:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            # replace the smallest item in the heap with the new item if it's expensive\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return []\n    if n == 1:\n        return [l]\n    if n == len(l):\n        return [l[0]]\n    return split_Arr(l[n:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if isinstance(l, list):\n        if len(l) > 0:\n            mid = len(l)//2\n            if n < mid:\n                first_part = l[:n]\n                last_part = l[n:]\n                l = last_part + first_part\n            else:\n                first_part = l[mid:]\n                last_part = l[:mid]\n                l = last_part + first_part + [l[mid]]\n        return l\n    else:\n        return \"Error: Input is not a list\""
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Get the length of the list\n    length = len(l)\n    # Check if the nth element is out of range\n    if n >= length:\n        raise ValueError(\"The nth element is out of range.\")\n    # Split the list at the nth element\n    new_list = l[:n] + [l[n]] + l[n+1:]\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is less than n\n    if len(l) < n:\n        return None\n    # Create an empty list to store the first part of the list\n    first_part = []\n    # Loop through the list from the nth element to the end\n    for i in range(n):\n        # Add the element to the first part of the list\n        first_part.append(l[i])\n    # Add the first part of the list to the end of the list\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return None\n    else:\n        new_list = l[:n]\n        new_list.extend(l[n:])\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # check if n is a valid index\n    if n < 0 or n >= len(l):\n        return None\n    \n    # find the first part of the list\n    first_part = l[:n]\n    \n    # find the last part of the list\n    last_part = l[n:]\n    \n    # add the first part to the end of the last part\n    l = first_part + last_part\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the nth element exists in the list\n    if n in range(len(l)):\n        # split the list at the nth element\n        l1, l2 = l[:n], l[n:]\n        # add the first part of the list to the end of the second part\n        return l1 + l2\n    else:\n        # if the nth element doesn't exist in the list, return the original list\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list\")\n        return None\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        result = first_part + second_part\n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than the nth element\n    if len(l) < n:\n        print(\"Error: The length of the list is less than the nth element.\")\n        return None\n    \n    # split the list at the nth element and add the first part to the end\n    first_part = l[:n]\n    second_part = l[n:]\n    new_list = second_part + first_part\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # find the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 1:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num\n    else:\n        print(\"List should have at least two elements to find the difference between largest and smallest.\")"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n\n    # Calculate the difference between the largest and smallest values\n    diff = nums[0] - nums[1]\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n            \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the maximum and minimum value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the maximum and minimum value\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list should have at least two elements to find the difference.\"\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        square = int(i*i)\n        if square == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num_str = str(i)\n        square_sum = sum([int(num_str[j]**2) for j in range(len(num_str))])\n        if square_sum == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            squares.add(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        print(i, i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize variables to keep track of the best perfect squares found\n    best_a = 0\n    best_b = 0\n\n    # loop through all possible perfect squares between a and b\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i**2 == j**2:\n                # if we find a perfect square, check if it's better than the current best\n                if j > best_b:\n                    best_a = i\n                    best_b = j\n\n    # return the best perfect squares found\n    return best_a, best_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i ** 2\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for num in range(a, b + 1):\n        square = num * num\n        if square == num:\n            squares.add(square)\n        else:\n            for i in range(int(num ** 0.5) + 1):\n                if square == num + i ** 2:\n                    squares.add(square)\n                if square == num - i ** 2:\n                    squares.add(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(i, b+1):\n            if i*i + j*j == b*b:\n                return (i, j)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if b == 0:\n        return [a]\n    if b < 0:\n        return perfect_squares(b, -a)\n    if a == 0:\n        return []\n    if a == b:\n        return [a]\n    if a > b:\n        return perfect_squares(a-1, b) + [a]\n    return perfect_squares(a, b-1) + [a]"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == b:\n            print(i)\n        elif i**2 > b:\n            break\n    else:\n        print(\"No perfect square found.\")"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the point.\n    theta (float): The angle of the point with respect to the positive x-axis (in radians).\n\n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): The radius of the point.\n    y (float): The angle of the point in radians.\n\n    Returns:\n    tuple: A tuple containing the x-coordinate and y-coordinate of the point.\n    \"\"\"\n    # Convert radians to degrees\n    angle = cmath.degrees(y)\n\n    # Calculate the x and y coordinates\n    rect_x = x * cmath.cos(angle)\n    rect_y = x * cmath.sin(angle)\n\n    # Convert the rectangular coordinates to a tuple\n    rect_coords = (rect_x.real, rect_y.real)\n\n    return rect_coords"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r * cmath.cos(theta), r * cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function takes the radius r and angle theta in radians and returns the x and y coordinates of the corresponding point in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag), (y.real, y.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    (float, float): x and y coordinates in rectangular coordinates\n    \"\"\"\n\n    # Convert angle to degrees\n    theta = theta * 180 / cmath.pi\n    \n    # Calculate x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    # Convert x and y coordinates to floats and return them\n    return float(x), float(y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list is empty\n    if not newList:\n        return newList\n    # check if the list has only one element\n    elif len(newList) == 1:\n        return [newList[0], newList[0]]\n    # interchange the first and last elements of the list\n    else:\n        return [newList[-1], newList[0]] + newList[:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0] \n    last = newList[-1] \n    newList[0] = last \n    newList[-1] = first "
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        # first and last elements of the list\n        first_element = newList[0]\n        last_element = newList[n-1]\n        # interchange the first and last elements of the list\n        newList[0] = last_element\n        newList[n-1] = first_element\n        # print the updated list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has more than one element\n    if len(newList) > 1:\n        # interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"The list must have at least two elements to swap.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) >= 2:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    # Get the length of the list\n    length = len(newList)\n    \n    # Swap the first and last elements\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n or k<0:\n        return None\n    if k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of product of consecutive binomial coefficients\n    sum_product = 0\n\n    # Initialize the product of the first k consecutive binomial coefficients\n    product = 1\n\n    # Iterate through all the possible values of n and k\n    for i in range(1, n+1):\n        # Check if the value of n is greater than or equal to the value of k\n        if i >= k:\n            # Calculate the value of the product of the i-th consecutive binomial coefficients\n            product *= (i-k+1)\n\n            # Add the value of the product to the sum of product of consecutive binomial coefficients\n            sum_product += product\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    def binomial_coeff_helper(n, k):\n        if k == 0 or k == n:\n            return 1\n        return binomial_coeff_helper(n - 1, k - 1) * (n - k + 1) // k\n\n    return binomial_coeff_helper(n, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum_prod_co = 0\n    for i in range(n, k-1, -1):\n        sum_prod_co += (i**k) // ((n-i) * factorial(k-1-i))\n\n    return sum_prod_co\n\n\ndef factorial(n):\n    '''\n    This function calculates the factorial of a number using recursion.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables\n    sum_product = 0\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(1, k+1):\n        sum_product += (n+1-i) * (k-i) * (i-1) / (i*(n-i+1))\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize variables for sum and product\n    sum = 0\n    product = 1\n    \n    # find the sum of the product of consecutive binomial co-efficients\n    for i in range(1,n+1):\n        if i<=k:\n            sum += product\n        product *= (n-i+1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    # calculate the sum of the first k binomial co-efficients\n    for i in range(k):\n        sum += binomial(n,i)\n    # return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    :param n: int, positive integer denoting the number of elements in the set\n    :param k: int, positive integer denoting the number of elements in the subset\n\n    :return: int, the sum of the product of consecutive binomial co-efficients\n    \"\"\"\n    if n < k or k < 0:\n        return \"Invalid input. Please provide a valid input for n and k.\"\n    else:\n        if n == k:\n            return 1\n        else:\n            return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to zero\n    sum_ = 0\n    # Initialize the product of consecutive binomial coefficients to 1\n    prod = 1\n    # Check if the values of n and k are valid\n    if n < 0 or k < 0 or k > n: \n        return \"Invalid input\"\n    # Calculate the value of the first binomial coefficient\n    if k == 0 or k == n: \n        sum_ = 1\n    else: \n        # Calculate the value of the first binomial coefficient\n        coeff = (n - k + 1) // k \n        # Multiply the product of consecutive binomial coefficients by the value of the first binomial coefficient\n        prod *= coeff\n        # Calculate the value of the second binomial coefficient\n        coeff = (n - k) // k\n        # Add the value of the second binomial coefficient to the sum of the product of consecutive binomial coefficients\n        sum_ += coeff * prod\n        # Calculate the value of the third to nth binomial coefficients\n        for i in range(2, k + 1): \n            # Calculate the value of the i-th binomial coefficient\n            coeff = (n - k + i - 1) // i \n            # Add the value of the i-th binomial coefficient to the sum of the product of consecutive binomial coefficients\n            sum_ += coeff * prod\n            # Multiply the product of consecutive binomial coefficients by the value of the i-th binomial coefficient\n            prod *= coeff\n    return sum_"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n    if re.match(pattern, ip):\n        ip = ip.lstrip('0')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0+)(\\d+)$', r'\\2', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)/', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # remove leading zeroes from each octet in the ip address\n    ip = re.sub(r'^0+', '', ip)\n\n    # check if there are any remaining leading zeroes in the ip address\n    if len(ip) > 0:\n        # if there are, remove the first zero\n        ip = ip.lstrip('0')\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return re.sub(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", \"\", ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    ip = re.sub(pattern, r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0*(\\d+)$', '\\\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        ip_list = [int(x) for x in ip_list]\n        for i in range(len(ip_list)):\n            if ip_list[i] == 0:\n                ip_list.pop(i)\n                break\n        ip = '.'.join([str(x) for x in ip_list])\n        return ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+(?!.\\d)', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return \"Error: list is empty.\"\n    \n    # Find the first even number\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_num = list1[i]\n            break\n    \n    # Find the first odd number\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_num = list1[i]\n            break\n    \n    # Calculate the difference of the even and odd numbers\n    diff = even_num - odd_num\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number\n    even_index = next((i for i, x in enumerate(list1) if x % 2 == 0), None)\n    # If there is no even number, return None\n    if even_index is None:\n        return None\n    # Find the first odd number\n    odd_index = next((i for i, x in enumerate(list1) if x % 2!= 0), None)\n    # If there is no odd number, return None\n    if odd_index is None:\n        return None\n    # Calculate the difference between the first even and first odd numbers\n    diff = list1[even_index] - list1[odd_index]\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # Loop through each element in the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If it is, set the even number to the current number\n            even_num = num\n        # Check if the number is odd\n        elif num % 2!= 0:\n            # If it is, set the odd number to the current number\n            odd_num = num\n    \n    # Find the difference between the even and odd numbers\n    diff = abs(even_num - odd_num)\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n\n    if even_num % 2 == 0:\n        if odd_num % 2 == 1:\n            return abs(even_num - odd_num)\n        else:\n            return abs(even_num + 2**32 - odd_num)\n    else:\n        if odd_num % 2 == 0:\n            return abs(odd_num - even_num)\n        else:\n            return abs(odd_num + 2**32 - even_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0 and list1[odd_index] % 2 == 1:\n            even_sum = list1[even_index] + list1[odd_index + 1]\n            odd_sum = list1[even_index + 1] + list1[odd_index]\n            return abs(even_sum - odd_sum)\n        elif list1[even_index] % 2 == 1 and list1[odd_index] % 2 == 0:\n            even_sum = list1[even_index] + list1[odd_index]\n            odd_sum = list1[even_index + 1] + list1[odd_index + 1]\n            return abs(even_sum - odd_sum)\n        elif list1[even_index] % 2 == 1 and list1[odd_index] % 2 == 1:\n            even_sum = list1[even_index] + list1[odd_index]\n            odd_sum = list1[even_index + 1] + list1[odd_index + 1]\n            return abs(even_sum - odd_sum)\n        elif list1[even_index] % 2 == 0 and list1[odd_index] % 2 == 0:\n            even_sum = list1[even_index] + list1[odd_index]\n            odd_sum = list1[even_index + 1] + list1[odd_index + 1]\n            return abs(even_sum - odd_sum)\n        else:\n            even_index += 1\n            odd_index += 1\n    return 'There are no even and odd numbers in the list.'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list is not empty\n    if len(list1) == 0:\n        return \"The list is empty.\"\n\n    # find the first even number and odd number in the list\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n\n    # calculate the difference between the first even and first odd numbers\n    diff = first_odd - first_even\n\n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0:\n        if odd_num % 2 == 0:\n            return even_num - odd_num\n        else:\n            return (even_num - odd_num) * 2\n    else:\n        if odd_num % 2 == 0:\n            return (odd_num - even_num) * 2\n        else:\n            return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and finds the difference between the first even and first odd numbers of the list.\n    \"\"\"\n    even_first_num = lst[0]\n    odd_first_num = lst[1]\n    even_diff = 0\n    odd_diff = 0\n    for num in lst[2:]:\n        if num % 2 == 0:\n            even_diff += num\n        else:\n            odd_diff += num\n    return abs(even_diff - odd_diff)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    \n    diff = even - odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = abs(even_num - num)\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = abs(odd_num - num)\n    return even_num if even_num is not None else odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    len1 = len(str1)\n    len2 = len(str2)\n    \n    # calculate the number of swaps required\n    if len1 > len2:\n        diff = len1 - len2\n        swaps = diff // 2 + (diff % 2)\n    else:\n        diff = len2 - len1\n        swaps = diff // 2 + (diff % 2)\n    \n    # swap characters in strings\n    for i in range(swaps):\n        if str1[i]!= str2[i]:\n            if str1[i] == '1':\n                str2 = str2[:i] + '0' + str2[i+1:]\n            else:\n                str1 = str1[:i] + '1' + str1[i+1:]\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    '''\n    # Convert the binary numbers to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize variables to store swaps and bits\n    swaps = 0\n    bits = 0\n\n    # Loop through each bit of the binary numbers\n    while bits < 32:\n        # If the bits are equal, add 0 swap, increment bits\n        if int1 & (1 << bits) == int2 & (1 << bits):\n            swaps += 0\n            bits += 1\n        # If the bits are not equal, add 1 swap, decrement bits\n        else:\n            swaps += 1\n            bits += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists\n    arr1 = list(str1)\n    arr2 = list(str2)\n    n = len(arr1)\n\n    # Initialize variables\n    min_swaps = 0\n    swapped = True\n\n    while swapped:\n        swapped = False\n\n        # Iterate over pairs of bits\n        for i in range(n):\n            if arr1[i]!= arr2[i]:\n                # Swap the bits\n                arr1[i], arr2[i] = arr2[i], arr1[i]\n                min_swaps += 1\n                swapped = True\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for number of swaps required\n    swap_count = 0\n    temp = num1\n\n    # Loop through each bit of the binary numbers\n    while temp!= 0:\n        if temp % 2 == 1:\n            # If a 1 is encountered, swap the corresponding bit of the other binary number\n            bit_index = temp.bit_length() - 1\n            num2 = num2 ^ (1 << bit_index)\n            swap_count += 1\n\n        temp //= 2\n\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of digits\n    num1 = [int(digit) for digit in str1]\n    num2 = [int(digit) for digit in str2]\n\n    # Sort the digits in each number\n    num1.sort()\n    num2.sort()\n\n    # Initialize the minimum number of swaps\n    min_swaps = 0\n\n    # Check if the two numbers are equal\n    if num1 == num2:\n        return min_swaps\n\n    # Initialize the lengths of the two numbers\n    len1 = len(num1)\n    len2 = len(num2)\n\n    # Iterate through the numbers from right to left\n    for i in range(len1 - 1, -1, -1):\n        # If the digits are different, decrement the swaps count and move on to the next digit\n        if num1[i]!= num2[i]:\n            min_swaps += 1\n            continue\n\n        # If the digits are equal, check if the next digit is greater or lesser\n        if i == 0 or num1[i] > num2[i-1]:\n            # If the next digit is greater, decrement the swaps count and move on to the next digit\n            if i < len2 - 1 and num1[i+1] > num2[i+1]:\n                min_swaps += 1\n            # If the next digit is lesser, move on to the next digit\n            else:\n                continue\n        # If the digits are equal and the current digit is the last digit, check if the next digit is greater\n        elif i == len2 - 1 and num1[i] < num2[i-1]:\n            # If the next digit is greater, decrement the swaps count and move on to the next digit\n            if i < len1 - 1 and num1[i+1] > num2[i+1]:\n                min_swaps += 1\n            # If the next digit is lesser, move on to the next digit\n            else:\n                continue\n        # If the digits are equal and the current digit is the second last digit, check if the next digit is greater\n        elif i == len2 - 2 and num1[i] < num2[i-1] and num1[i+1] < num2[i]:\n            # If the next digit is greater, decrement the swaps count and move on to the next digit\n            if i < len1 - 2 and num1[i+2] > num2[i+2]:\n                min_swaps += 1\n            # If the next digit is lesser, move on to the next digit\n            else:\n                continue\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    n = len(str1)\n    if n!= len(str2):\n        return -1\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            count += 1\n            if count >= 2:\n                return -1\n            if str1[i] == '1':\n                str1 = str1[:i] + '0' + str1[i+1:]\n                str2 = str2[:i] + '1' + str2[i+1:]\n            else:\n                str1 = str1[:i] + '1' + str1[i+1:]\n                str2 = str2[:i] + '0' + str2[i+1:]\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Convert the integers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n    \n    # Initialize a list to store the counts of each digit in the binary strings\n    digit_counts = [0] * 10\n    \n    # Count the occurrences of each digit in the binary strings\n    for digit in bin1:\n        digit_counts[int(digit)] += 1\n    \n    # Initialize a list to store the swaps required for each digit in the binary strings\n    digit_swaps = [0] * 10\n    \n    # Calculate the swaps required for each digit in the binary strings\n    for i in range(1, len(bin1)):\n        if bin1[i]!= bin1[i-1]:\n            digit_swaps[int(bin1[i-1])] += 1\n    \n    # Initialize the minimum number of swaps required to convert one binary number to another\n    min_swaps = float('inf')\n    \n    # Compare the swaps required for each digit in the binary strings\n    for i in range(len(bin1)):\n        # If the swaps required are less than the minimum, update the minimum\n        if digit_swaps[int(bin2[i])] < min_swaps:\n            min_swaps = digit_swaps[int(bin2[i])]\n    \n    # Return the minimum number of swaps required to convert one binary number to another\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(n):\n            if str1[i] == str2[j]:\n                dp[i + 1][j + 1] = dp[i][j]\n            elif str1[i] < str2[j]:\n                dp[i + 1][j + 1] = dp[i][j + 1] + 1\n            else:\n                dp[i + 1][j + 1] = dp[i + 1][j] + 1\n    return dp[n][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Get the length of both strings\n    n = len(str1)\n    m = len(str2)\n\n    # Create a table to store the number of swaps required for converting binary strings to each other\n    table = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill the table\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 and j == 0:\n                table[i][j] = 0\n            elif i == 0:\n                table[i][j] = j\n            elif j == 0:\n                table[i][j] = i\n            elif str1[i - 1] == '1' and str2[j - 1] == '0':\n                table[i][j] = table[i - 1][j] + 1\n            else:\n                table[i][j] = min(table[i - 1][j], table[i][j - 1])\n\n    # Return the minimum number of swaps required to convert the binary strings to each other\n    return table[n][m]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize variables to store the number of swaps and the maximum number of swaps\n    swapCount = 0\n    maxSwapCount = 0\n\n    # Loop through all possible pairs of bits in the integers\n    for i in range(32):\n        # Check if there is a swap required for the i-th bit in both integers\n        if int1 & (1 << i) and int2 & (1 << i):\n            # If there is a swap, increment the swap count and update the maximum number of swaps\n            swapCount += 1\n            maxSwapCount = swapCount\n\n        # Check if there is a swap required for the i-th bit in the first integer\n        elif int1 & (1 << i):\n            # If there is a swap, increment the swap count and update the maximum number of swaps\n            swapCount += 1\n            maxSwapCount = swapCount\n\n        # Check if there is a swap required for the i-th bit in the second integer\n        elif int2 & (1 << i):\n            # If there is a swap, increment the swap count and update the maximum number of swaps\n            swapCount += 1\n            maxSwapCount = swapCount\n\n    # Return the minimum number of swaps required to convert one binary number to another\n    return maxSwapCount"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # Initialize a variable to store the size of the tuple in bytes\n    size_in_bytes = 0\n    \n    # Loop through each tuple in the list\n    for tup in tuple_list:\n        # Calculate the size in bytes of each tuple\n        size_in_bytes += sys.getsizeof(tup)\n        \n    # Return the total size of the tuples in bytes\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Using sys.getsizeof() to get the size of the tuple in bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the total size of the tuple\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 0:\n        return 0\n    elif len(tuple_list) == 1:\n        return sys.getsizeof(tuple_list[0])\n    else:\n        size = sys.getsizeof(tuple_list[0])\n        for i in range(1, len(tuple_list)):\n            size += tuple_size(tuple_list[i])\n        return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert tuple to bytes\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # find the size of each tuple in the list\n    tuple_sizes = [sys.getsizeof(t) for t in tuple_list]\n    # calculate the total size of the tuples in bytes\n    total_size = sum(tuple_sizes)\n    # return the total size in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of each element of the tuple\n    total_size = sum(sys.getsizeof(x) for x in tuple_list)\n    # Add the size of the tuple itself to the total size\n    total_size += sys.getsizeof(tuple_list)\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes in two sorted arrays and a number k and returns the kth element from the array.\n    '''\n\n    # Initialize the current index of both arrays\n    i, j = 0, 0\n\n    # Initialize the count of elements in the array\n    count = 0\n\n    # Loop through the arrays until we find the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            elif count > k:\n                return find_kth(arr1[i+1:], arr2, k)\n            else:\n                return find_kth(arr1, arr2[j+1:], k)\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If we reach here, we have not found the kth element\n    return \"Element not found.\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    if k > len(arr1) + len(arr2):\n        raise ValueError(\"k is greater than total number of elements in the arrays\")\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    if i < len(arr1):\n        return find_kth(arr1[i:], arr2, k)\n    return find_kth(arr1, arr2[j:], k - len(arr1[i:]))\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if k <= len(arr1) - i:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - len(arr1) - i)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n                k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                j += 1\n                k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    # If we reach here, we didn't find kth element.\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    total = 0\n    power = 1\n\n    for i in range(num_len):\n        digit = int(num_str[i])\n        total += digit ** power\n        power += 1\n\n    return total == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize a variable to hold the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    # Loop through each digit in the number\n    for digit in str(number):\n        # Convert the digit to an integer and cube it\n        cube_of_digit = int(digit) ** 3\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube_of_digit\n    # Check if the sum of cubes equals the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    elif number == 10:\n        return True\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of the digits to 0\n    sum_of_digits = 0\n    # Loop through each digit in the number\n    for digit in num_str:\n        # Add the digit to the sum of digits\n        sum_of_digits += int(digit)\n    # Compare the sum of the digits to the original number\n    if number == sum_of_digits**len(num_str):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check if a number is an Armstrong number or not\n    \"\"\"\n    num_str = str(number)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # calculate the sum of the cube of each digit of the number\n    sum = 0\n    for digit in str(number):\n        sum += int(digit) ** 3\n    \n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Helper function to check whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    sum_of_powers = 0\n    power = len(num_str)\n    for digit in num_str:\n        sum_of_powers += int(digit) ** power\n    return num == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Remove all non-numeric characters from the number\n    number = ''.join(filter(str.isdigit, str(number)))\n\n    # Check if the number is greater than 9\n    if len(number) > 9:\n        return False\n\n    # Convert the number to a list of digits\n    digits = [int(digit) for digit in number]\n\n    # Calculate the sum of the squares of the digits\n    sum_of_squares = sum([digit ** 3 for digit in digits])\n\n    # Check if the sum of the squares is equal to the original number\n    if sum_of_squares == int(number):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Check if the number is a positive integer\n    if type(number)!= int or number < 0:\n        return \"The number should be a positive integer\"\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    for digit in number_str:\n        digit_cube = int(digit)**3\n        sum_of_cubes += digit_cube\n\n    # Compare the sum of the cubes with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Function to check whether a number is armstrong or not\n    def is_armstrong(num):\n        # Check if the number is less than 10\n        if num < 10:\n            return False\n        # Calculate the sum of the cube of each digit of the number\n        num_str = str(num)\n        sum_of_cubes = 0\n        for digit in num_str:\n            sum_of_cubes += int(digit)**3\n        # Compare the sum of cubes with the number itself\n        return sum_of_cubes == num\n\n    # Check whether the number is armstrong or not\n    if is_armstrong(number):\n        print(number, \"is an Armstrong number\")\n    else:\n        print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of first\", n, \"natural numbers:\", sum)\n    print(\"Average of first\", n, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    while count < number:\n        num = int(input(\"Enter a natural number: \"))\n        sum += num\n        count += 1\n    \n    average = sum / count\n    print(\"The sum is:\", sum)\n    print(\"The average is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    sum = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    total = 0\n    count = 0\n    # loop through the first n numbers and update sum and count\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    # calculate the average and return the results as a tuple\n    average = total/count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        total = 0\n        count = 0\n        for i in range(1, number+1):\n            total += i\n            count += 1\n        average = total/count\n        print(\"The sum of first\", number, \"natural numbers is:\", total)\n        print(\"The average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # iterate through first n numbers\n    for i in range(1, number+1):\n        # add the number to the sum\n        sum += i\n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum/count\n    \n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_list = []\n    for i in range(number):\n        sum_list.append(i)\n    average = sum(sum_list) / len(sum_list)\n    return sum_list, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even,\n    and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is Even\")\n    else:\n        print(n, \"is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n) :\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0 :\n        return True\n    else :\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is even, False otherwise.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the character with the highest frequency\n    max_freq = max(freq.values())\n    for char in freq:\n        if freq[char] == max_freq:\n            return char\n    \n    # If no character with the highest frequency is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n\n    Parameters:\n    str1 (str): A string to search for the first repeated character.\n\n    Returns:\n    char: The first repeated character in the string or None if no repeated character was found.\n\n    Example:\n    >>> first_repeated_char(\"hello\")\n    'l'\n    >>> first_repeated_char(\"banana\")\n    None\n    '''\n\n    # Convert the string to lowercase to ignore case differences\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the frequency of each character\n    freq_dict = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n\n    # Iterate through the dictionary to find the first repeated character\n    for char in freq_dict:\n        if freq_dict[char] > 1:\n            return char\n\n    # If no repeated character was found, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_dict = {}\n    \n    # Create a dictionary to store the count of each character\n    for char in char_list:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    # Find the first repeated character\n    for char in char_dict:\n        if char_dict[char] > 1:\n            return char\n    \n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initializing variables\n    char = ''\n    count = 0\n    \n    # iterating through the string\n    for i in str1:\n        # if the character is already in the dictionary\n        if i in char_dict:\n            # updating the count of the character\n            count = count + 1\n        # if the character is not in the dictionary\n        else:\n            # adding the character to the dictionary\n            char_dict[i] = 1\n    \n    # returning the character with the first count\n    for i in char_dict:\n        if char_dict[i] == 1:\n            return i"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n        if i > n:\n            break\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Helper function to check if a given number is lucid.\n    '''\n    # Check if n is a prime number\n    if is_prime(n):\n        return True\n    # Check if n is an even number\n    elif n % 2 == 0:\n        return False\n    # Check if n is the sum of two prime numbers\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n            if n % (i+2) == 0:\n                return False\n        return True\n\ndef is_prime(n):\n    '''\n    Helper function to check if a given number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    while True:\n        is_lucid = True\n        for i in range(2, n):\n            if n % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid.append(n)\n        if n == max(lucid):\n            break\n        n += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given number is a lucid number or not.\n    A number is a lucid number if its digits have the same parity as its last digit.\n    '''\n    last_digit = n % 10\n    if n < 10:\n        return False\n    else:\n        digit_parity = 0\n        while n > 0:\n            digit = n % 10\n            digit_parity += digit\n            n //= 10\n        return digit_parity % 2 == last_digit % 2"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        if i == 0 or i == 1:\n            ludic_numbers.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                ludic_numbers.append(i)\n    return ludic_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Create a list to store the lucid numbers\n    lucid_nums = []\n    \n    # Iterate through all numbers from 1 to n (inclusive)\n    for num in range(1, n+1):\n        # Check if the number is a lucid number\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        # If the number is a lucid number, add it to the list\n        if is_lucid:\n            lucid_nums.append(num)\n    \n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_list.append(i)\n    return lucid_list\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    if num == 2:\n        return True\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_list = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid_list.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_list.append(i)\n    return lucid_list\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        i += 2\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove any leading or trailing spaces from the string\n    s = s.strip()\n    # Split the string by spaces\n    words = s.split()\n    # Reverse the list of words\n    words = words[::-1]\n    # Join the words back together with spaces\n    s =''.join(words)\n    # Return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    result = \" \".join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    \n    reversed_s = \" \".join(reversed_words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Reverse each word in the list in reverse order\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # Join the reversed words back into a string\n    s =''.join(words)\n    \n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(n):\n    '''\n    This function checks if a given number is a prime number or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if a given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n    \n    # Initialize a variable to store the divisor\n    divisor = 2\n    \n    # Loop through all the numbers from 2 to the square root of the number\n    while divisor <= int(num**0.5):\n        # If the number is divisible by the divisor, then it's not a prime number\n        if num % divisor == 0:\n            return False\n        \n        # If the divisor is larger than the square root of the number, break the loop\n        divisor += 1\n    \n    # If the loop completes without finding any divisors, then the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # check if the number is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n\n    # check if the number is divisible by any number other than 2 and 3\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n\n    # if the loop completes without returning False, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    \"\"\"\n    Determine if a number is prime using trial division.\n\n    >>> is_prime(11)\n    True\n    >>> is_prime(7)\n    False\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Check if a given number is a prime number.\n\n    >>> prime_num(11)\n    True\n    >>> prime_num(7)\n    False\n    \"\"\"\n    if num < 2:\n        return False\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Returns True if the given integer is a prime number, else False.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi/180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def radian_degree(degree):\n    '''\n    This function converts a degree angle to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding value in radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n\n    start_index = text.find(matches[0])\n    end_index = start_index + len(matches[0])\n    return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use the re.search() method to search the text for the pattern\n    match = re.search(pattern, text)\n\n    # Check if the match object is not None\n    if match:\n        # Return the matching substring, a start index, and an end index\n        return match.group(), match.start(), match.end()\n    else:\n        # Return None if no match is found\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        start_index = text.index(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as inputs, and returns a tuple containing the matching subtring, start index, and end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        return (matches[0], matches[0].start(), matches[0].end())"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        start = matches[0].start()\n        end = matches[0].end()\n        return matches[0], start, end"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*(bell_Number(n-1)) + (n-1)*(bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative values are not allowed.\")\n    elif n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function finds the nth bell number using the Horner's Rule.\n\n    Args:\n        n (int): The index of the bell number.\n\n    Returns:\n        int: The nth bell number.\n    \"\"\"\n    # Initialize the bell numbers array\n    bell_numbers = [1, 1]\n\n    # Loop through the bell numbers array\n    for i in range(2, n+1):\n        # Calculate the next bell number\n        next_bell_number = bell_numbers[i-1] + bell_numbers[i-2]\n\n        # Add the next bell number to the array\n        bell_numbers.append(next_bell_number)\n\n    # Return the nth bell number\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(n):\n        bell *= i + 1\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize a list to store the bell numbers\n    bell_numbers = []\n\n    # Find the nth bell number\n    for i in range(1, n+1):\n        bell_numbers.append(bell(i))\n\n    # Return the nth bell number\n    return bell_numbers[n-1]\n\ndef bell(n):\n    '''\n    Write a python function to find the nth Bell number.\n    '''\n\n    # Initialize a list to store the powers of 2\n    powers = []\n\n    # Find the powers of 2\n    for i in range(n+1):\n        powers.append(2**i)\n\n    # Find the sum of the powers\n    bell_sum = sum(powers)\n\n    # Return the nth Bell number\n    return bell_sum"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    This function takes an integer n and returns the nth Bell number. The Bell numbers are the numbers that occur in the sequence of Bell numbers that starts with 1. The sequence is generated by the following recurrence relation:\n    \n    B(n+1) = (n+1/2)B(n) - (n/2)B(n-1)\n    B(0) = 1\n    B(1) = 1\n    \n    Example:\n    \n    bell_Number(3) will return 11 (3+1/2)10 (3/2)9 (1/2)8 (1)7 (1)6 (1)5 (1)4 (1)3 (1)2 (1)1 (1)\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n+1/2)*bell_Number(n-1) - (n/2)*bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return (bell_Number(n-1) + bell_Number(n-2)) % 1000000007"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and the index of the element to remove as input.\n    It returns a list with the same elements but the k'th element removed.\n    '''\n    # initialize a list to store the elements in the input list\n    result = []\n    # loop through the input list\n    for i in range(len(list1)):\n        # if the index is not equal to k, add the element to the result list\n        if i!= k:\n            result.append(list1[i])\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if the length of the list is greater than the value of L\n    if len(list1) > L:\n        # Create a new list with L-1 elements and copy the elements of the original list after the L-th element to the new list\n        new_list = list1[:L-1]\n        # Append the last element of the original list to the new list\n        new_list.append(list1[L-1])\n        return new_list\n    else:\n        print(\"Error: Length of the list should be greater than L\")"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and removes the k'th element from it.\n    '''\n    k = L - 1\n    n = len(list1)\n    if k >= n:\n        return list1\n    else:\n        new_list = []\n        for i in range(n):\n            if i!= k:\n                new_list.append(list1[i])\n        return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    for i in range(k, n):\n        list1[i] = list1[i + 1]\n    list1.pop()\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # create a list of tuples where each tuple contains a list and its length\n    lst_len_list = [(lst, len(lst)) for lst in list1]\n    # sort the list based on the length of the lists\n    lst_len_list.sort(key=lambda x: x[1])\n    # iterate over the sorted list and remove the k'th element from each list\n    for lst, length in lst_len_list:\n        if L < length:\n            lst.pop(L-1)\n            break\n    # return the modified list\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n        else:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a number L as inputs.\n    The function then removes the kth element from the list.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            max_num = test_list[i][N-1]\n        else:\n            if test_list[i][N-1] > max_num:\n                max_num = test_list[i][N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max_val to be the first element of the first row\n    max_val = test_list[0][0]\n\n    # iterate over the remaining rows\n    for row in test_list[1:]:\n        # compare the nth element of the current row with the max_val\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first row of the matrix\n    row_length = len(test_list[0])\n    # initialize a list to store the max values for each row\n    max_values = []\n    # loop through each row of the matrix\n    for row in test_list:\n        # get then'th column value of the row\n        nth_col = row[N-1]\n        # add the nth column value to the list of max values\n        max_values.append(nth_col)\n    # find the maximum value in the list of max values\n    max_value = max(max_values)\n    # return the maximum value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize a variable to store the max value\n    max_val = 0\n\n    # Loop through the rows of the matrix\n    for row in test_list:\n        # Get then'th column of the current row\n        nth_col = [row[i] for i in range(len(row)) if i % N == 0][0]\n        # Update the max value if the nth column value is greater than the current max value\n        if nth_col > max_val:\n            max_val = nth_col\n\n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max(row[N-1] for row in test_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the list\n    length = len(test_list)\n    # Initialize a variable to store the max value\n    max_value = 0\n    # Loop through each row in the matrix\n    for i in range(length):\n        # Get the value of the nth column for the current row\n        nth_column = [row[N] for row in test_list]\n        # Check if the value of the nth column is greater than the current max value\n        if max_value < max(nth_column):\n            max_value = max(nth_column)\n    # Return the max value of the nth column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"Input must be a list of lists\")\n    if not all(isinstance(row, list) for row in test_list):\n        raise TypeError(\"Input must be a list of lists\")\n    if len(test_list) == 0:\n        raise ValueError(\"Input must have at least one row\")\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer\")\n\n    # Find the length of the first row\n    first_row_length = len(test_list[0])\n\n    # Check if the Nth column exists in the first row\n    if N > first_row_length:\n        raise ValueError(\"N must be less than or equal to the number of columns in the first row\")\n\n    # Create a list to store the max of the Nth column for each row\n    max_list = []\n\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the length of the row is equal to the number of columns in the first row\n        if len(row)!= first_row_length:\n            raise ValueError(\"All rows must have the same number of columns\")\n\n        # Find the Nth column value\n        nth_col_value = row[N-1]\n\n        # Check if the Nth column value is already in the max_list\n        if nth_col_value in max_list:\n            raise ValueError(\"Nth column value must be unique\")\n\n        # Add the Nth column value to the max_list\n        max_list.append(nth_col_value)\n\n    # Find the maximum value in the max_list\n    max_value = max(max_list)\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the max value of then'th column\n    max_value = 0\n    \n    # Iterate through each row in the matrix\n    for row in test_list:\n        # Get then'th value of the row and compare it to the current max value\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n    \n    # Return the max value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is a list of lists\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError('Input is not a list of lists.')\n    \n    # Get the length of the first row\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    \n    # Check if N is valid\n    if N < 1 or N > num_cols:\n        raise ValueError('N is not a valid column index.')\n    \n    # Get the max of the Nth column\n    max_val = float('-inf')\n    for row in test_list:\n        val = row[N - 1]\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # calculate the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n\n    # check if the given N is valid or not\n    if N < 1 or N > num_cols:\n        return \"Invalid N value.\"\n\n    # initialize an empty list to store the max values of then'th column\n    max_col = []\n\n    # iterate through each row of the matrix\n    for i in range(num_rows):\n\n        # get the value of then'th column in the i-th row\n        val = test_list[i][N-1]\n\n        # check if the value is already present in the max_col list or not\n        if val not in max_col:\n\n            # if not, add the value to the list and check if it is greater than the current max value\n            if len(max_col) == 0 or val > max_col[-1]:\n                max_col.append(val)\n\n    # return the maximum value in the max_col list\n    return max(max_col)"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Create an empty list to store the merged lists\n    merged_lst = []\n\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # If the sublist has only two elements, add it to the merged list\n        if len(sublist) == 2:\n            merged_lst.append([sublist[0], sublist[1]])\n\n    # Return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in lst:\n        merged_lst.append([i[0], i[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Extract the values from the tuple\n        val1, val2 = tup\n\n        # Add the values to the cumulative sum\n        cum_sum += val1 + val2\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n    \n    # iterate through each tuple in the list\n    for tup in test_list:\n        # iterate through each value in the tuple and add it to the cumulative sum\n        for val in tup:\n            cumulative_sum += val\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # iterate over each tuple in the list\n    for tup in test_list:\n        # iterate over each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            total += sum(item)\n        else:\n            total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum with the first element of the list\n    cum_sum = test_list[0]\n    # Loop through the rest of the list\n    for i in range(1, len(test_list)):\n        # Add the current element to the cumulative sum\n        cum_sum += test_list[i]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i][0])\n        else:\n            result.append(result[i-1] + test_list[i][0])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable with the first element of the list\n    cumulative_sum = test_list[0][0]\n    # Iterate over the list and add the current element's value to the cumulative sum variable\n    for i in range(1, len(test_list)):\n        cumulative_sum += test_list[i][0]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if isinstance(test_list[i][0], int):\n            cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Use a list comprehension to calculate the average value for each tuple\n    averages = [sum(num) / len(num) for num in nums]\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for sub_tuple in nums:\n        sum_sub_tuple = sum(sub_tuple)\n        avg_sub_tuple = sum_sub_tuple / len(sub_tuple)\n        avg_list.append(avg_sub_tuple)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the averages\n    averages = []\n    # iterate through each tuple in the input list\n    for tup in nums:\n        # calculate the average value for each tuple\n        avg = sum(tup)/len(tup)\n        # add the average value to the list of averages\n        averages.append(avg)\n    # return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    num_of_tuples = len(nums)\n    for num_tuple in nums:\n        total_sum += sum(num_tuple)\n    avg = total_sum / num_of_tuples\n    return [avg]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values for each tuple\n    avg_list = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Loop through each element in the current tuple\n        for elem in tup:\n            # Add the current element to the running sum\n            sum += elem\n        # Divide the running sum by the length of the tuple to get the average value\n        avg = sum/len(tup)\n        # Append the average value to the avg_list\n        avg_list.append(avg)\n        # Reset the running sum to zero for the next tuple\n        sum = 0\n    \n    # Return the avg_list containing the average values for each tuple\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        average = total/count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    \n    # Iterate through the tuples in the input list\n    for tup in nums:\n        # Calculate the sum of the values in the tuple\n        total = sum(tup)\n        \n        # Divide the total sum by the number of values in the tuple to get the average value\n        avg = total / len(tup)\n        \n        # Append the average value to the avg_list\n        avg_list.append(avg)\n        \n    # Return the average values in a list\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must have the same length\")\n        return\n\n    # Perform element-wise modulo\n    modulo_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length to perform modulo operation.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return None\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] %= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < 0:\n            test_tup1[i] += 2**31\n        test_tup1[i] %= test_tup2[i]\n        if test_tup1[i] < 0:\n            test_tup1[i] += 2**31\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    n = len(steps)\n    if steps[0] == 0:\n        return -1\n    \n    count = 0\n    current_pos = 0\n    reach = 0\n    jumps = 0\n    \n    while current_pos < n and reach < d:\n        if steps[current_pos] == 0:\n            reach += 1\n        else:\n            if reach == 0:\n                count += 1\n                current_pos += 1\n                jumps += 1\n            else:\n                current_pos += steps[current_pos]\n                jumps += 1\n    \n    if reach == d:\n        return jumps + 1\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    count = 0\n    i = 0\n    while i <= steps:\n        if i + d <= steps:\n            i += d\n            count += 1\n        else:\n            i = steps + 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # Define the maximum number of steps that can be taken in a single jump\n    max_steps = 1000000000000000000000000000000000000000000000000000000000000000\n    \n    # Initialize the number of jumps required\n    jumps = 0\n    \n    # Initialize the current position\n    pos = 0\n    \n    # Initialize the number of steps taken so far\n    steps_taken = 0\n    \n    # Iterate until the maximum number of steps is reached\n    while steps_taken < max_steps:\n        # If the current position is d, increment the number of jumps and break\n        if pos == d:\n            jumps += 1\n            break\n        \n        # If the current position is 0, increment the number of steps taken and continue\n        if pos == 0:\n            steps_taken += 1\n            pos += 1\n            continue\n        \n        # If the current position is greater than 0, decrement the position and continue\n        pos -= 1\n        \n        # Increment the number of steps taken\n        steps_taken += 1\n        \n        # If the number of steps taken is equal to the maximum number of steps, increment the number of jumps\n        if steps_taken == max_steps:\n            jumps += 1\n        \n        # If the current position is less than 0, increment the number of jumps and break\n        if pos < 0:\n            jumps += 1\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    count = 0\n    end_index = -1\n    jump_length = 0\n    \n    # Iterate through the steps and check for the minimum number of jumps\n    for i in range(len(steps)):\n        # If we reach the point (d, 0), update the count and exit the loop\n        if steps[i] == d:\n            count = min(count, i)\n            end_index = i\n            break\n        \n        # If we need a smaller jump, update the count and continue the loop\n        if i < end_index:\n            count += 1\n            \n    # Return the minimum number of jumps required\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    rows, cols = d\n    # Define a 2d array to store the distances from the origin to each point\n    distances = [[0] * cols for _ in range(rows)]\n    # Initialize the starting point with distance 0\n    distances[0][0] = 0\n    # Initialize a boolean flag to keep track of the visited points\n    visited = [[False] * cols for _ in range(rows)]\n    # Initialize a variable to keep track of the minimum number of jumps required\n    min_jumps = float('inf')\n    # Initialize a variable to keep track of the current jump\n    current_jump = 0\n    # Initialize a variable to keep track of the current position\n    position = [0, 0]\n\n    for i in range(steps):\n        # Find the adjacent unvisited points with the minimum distance from the current position\n        unvisited_points = []\n        for j in range(rows):\n            for k in range(cols):\n                if not visited[j][k] and distances[j][k] == 0 and abs(k - position[1]) == abs(d[0]):\n                    unvisited_points.append((j, k))\n\n        # If no unvisited points are found, break out of the loop\n        if not unvisited_points:\n            break\n\n        # Choose the point with the minimum distance from the current position\n        min_dist = float('inf')\n        min_point = None\n        for point in unvisited_points:\n            if distances[point[0]][point[1]] < min_dist:\n                min_dist = distances[point[0]][point[1]]\n                min_point = point\n\n        # Update the distances and visited flags for the chosen point\n        distances[min_point[0]][min_point[1]] = current_jump + 1\n        visited[min_point[0]][min_point[1]] = True\n        position = min_point\n        current_jump += 1\n\n        # Update the minimum jumps if necessary\n        if min_jumps > current_jump:\n            min_jumps = current_jump\n\n    return min_jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    dp = [[0]*(steps+1) for i in range(d+1)]\n    dp[0][0] = 0\n    for i in range(1,d+1):\n        dp[i][0] = i\n    for i in range(1,d+1):\n        for j in range(1,steps+1):\n            if j <= dp[i-1][j-1]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1]\n    return dp[d][steps]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    if steps == 1: \n        return 0\n\n    jumps = 0\n    max_height = d\n    current_height = 0\n\n    for i in range(1, steps):\n        if current_height < max_height:\n            if current_height + d > max_height:\n                max_height = current_height + d\n                jumps += 1\n\n        current_height += d\n\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Check if the given input is valid\n    if steps < 1 or d < 1:\n        return -1\n    \n    # Initialize the variables\n    max_jumps = 0\n    current_jumps = 1\n    current_point = 1\n    next_point = 2\n    \n    # Iterate until the current point is at the origin\n    while current_point!= (d, 0):\n        # Check if the current point is at the destination\n        if current_point == (d, 0):\n            return max_jumps\n        \n        # Check if the next point is at the origin\n        if next_point == (d, 0):\n            next_point = (d, 0)\n        else:\n            # Update the current point and the next point\n            current_point = (current_point[0]-1, current_point[1])\n            next_point = (current_point[0]+1, current_point[1])\n        \n        # Update the max jumps\n        max_jumps = max(max_jumps, current_jumps)\n        \n        # Increment the current jumps\n        current_jumps += 1\n    \n    # Return -1 if the destination is not reached\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    steps_taken = 0\n    end_point = 0\n    max_jumps = 0\n\n    # Initialize a 2D list with all possible points\n    points = []\n    for i in range(steps):\n        for j in range(i+1):\n            if i!= j:\n                points.append((i, j))\n\n    # Sort the points based on the distance from origin\n    points.sort(key=lambda x: abs(x[0]*d - x[1]))\n\n    # Traverse through the points and check if the end point is found\n    for i in range(len(points)):\n        steps_taken += 1\n        if steps_taken == steps:\n            end_point = points[i]\n            break\n\n    # Check for the maximum number of jumps required\n    max_jumps = 0\n    for i in range(len(points)):\n        if abs(points[i][0]*d - points[i][1]) <= d:\n            max_jumps = max(max_jumps, abs(points[i][0]*d - points[i][1]))\n\n    # Return the minimum number of jumps required to reach the end point\n    return max_jumps if end_point!= 0 else -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d: # check if steps is less than d\n        return 0\n\n    if steps == d: # check if steps is equal to d\n        return 1\n\n    count = 0\n    curr_pos = d\n    num_jumps = 1\n\n    while curr_pos >= 0:\n        count += 1\n        curr_pos -= 1\n        num_jumps += 1\n\n    return num_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Division by zero\")\n            return None\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), 'Lists must have the same length'\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(\"Cannot divide by zero\")\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Both lists should have the same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    final_str = ''.join(num_list)\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all numbers in the string and store them in a list\n    num_list = re.findall(r'\\d+', test_str)\n\n    # If there are no numbers, return the original string\n    if len(num_list) == 0:\n        return test_str\n\n    # Find the index of the first number in the list\n    index = test_str.find(num_list[0])\n\n    # Reverse the string starting from the index and move all numbers to the end\n    new_str = test_str[index:][::-1]\n\n    # Reverse the new string again to get the final result\n    final_str = new_str[::-1]\n\n    # Return the final result\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_found = False\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_found = True\n            result += char\n        else:\n            if num_found:\n                result += char\n                num_found = False\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_found = False\n    result = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_found = True\n            result.append(char)\n        else:\n            if num_found:\n                result.append(char)\n                num_found = False\n\n    return ''.join(result)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to keep track of the start and end indices of numbers\n    start_index = 0\n    end_index = -1\n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the current character is a number, update the start index\n        if test_str[i].isdigit():\n            start_index = i\n        # if the current character is not a number and the previous character was a number, update the end index\n        elif test_str[i].isalpha() and test_str[i-1].isdigit():\n            end_index = i-1\n        # if the current character is not a number and the previous character was not a number, move the number to the end of the string\n        elif test_str[i].isalpha() and not test_str[i-1].isdigit():\n            test_str = test_str[:i] + test_str[i:]\n            break\n        # if the current character is not a number and the previous character was not a number, move the number to the end of the string\n        else:\n            test_str = test_str[:i-1] + test_str[i-1:]\n            break\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize two pointers to the beginning of the string\n    left_pointer = 0\n    right_pointer = 0\n    \n    # loop through the string from the right to the left\n    while right_pointer < len(test_str):\n        # if the current character is a number\n        if test_str[right_pointer].isdigit():\n            # move the number to the left until it is at the left end of the string\n            while left_pointer < right_pointer and test_str[left_pointer].isdigit():\n                left_pointer += 1\n            \n            # swap the current number with the number at the left pointer\n            test_str = test_str[:left_pointer] + test_str[right_pointer:left_pointer] + test_str[left_pointer:right_pointer] + test_str[right_pointer:right_pointer+1] + test_str[left_pointer:right_pointer+1]\n            \n            # update the pointers to reflect the swapped numbers\n            right_pointer -= 1\n            left_pointer -= 1\n            \n            # loop through the string from the right to the left again to find the next number to swap\n            while right_pointer < len(test_str):\n                if test_str[right_pointer].isdigit():\n                    # move the number to the left until it is at the left end of the string\n                    while left_pointer < right_pointer and test_str[left_pointer].isdigit():\n                        left_pointer += 1\n                    \n                    # swap the current number with the number at the left pointer\n                    test_str = test_str[:left_pointer] + test_str[right_pointer:left_pointer] + test_str[left_pointer:right_pointer] + test_str[right_pointer:right_pointer+1] + test_str[left_pointer:right_pointer+1]\n                    \n                    # update the pointers to reflect the swapped numbers\n                    right_pointer -= 1\n                    left_pointer -= 1\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    return ''.join(numbers) + test_str.replace(''.join(numbers), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_pattern = r'\\d+'\n    nums = re.findall(num_pattern, test_str)\n    if nums:\n        return re.sub(num_pattern, '', test_str) + ''.join(nums)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = re.findall(r'\\d+', test_str)\n    nums_str = ''.join(nums)\n    num_str = test_str.replace(nums_str, '')\n    return num_str + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    # split the string into list of characters\n    char_list = list(test_str)\n\n    # iterate over the list of characters\n    for char in char_list:\n        # if the character is a number, append it to the number list\n        if char.isdigit():\n            num_list.append(char)\n\n    # join the number list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j]%a[i] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = 0\n    count = 0\n    for i in range(len(a)):\n        if a[i] % a[i+1] == 0:\n            count += 1\n            size = max(size, count)\n        else:\n            count = 0\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the count of each number in the list\n    count_dict = {}\n    for num in a:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    # Initialize the maximum subset size to 0\n    max_size = 0\n    \n    # Loop through all possible subsets\n    for i in range(1, len(count_dict)+1):\n        # Check if the sum of the numbers in the subset is divisible by 2\n        if sum(count_dict.keys()) % i == 0:\n            # Check if the subset is larger than the current maximum size\n            if i > max_size:\n                max_size = i\n                \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    start = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                if dp[i] > max_size:\n                    max_size = dp[i]\n                    start = j\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pairs = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                pairs.append((a[i], a[j]))\n    return len(pairs)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    # sort the input list in ascending order\n    a.sort()\n    # initialize variables for the largest subset and the current subset\n    largest = 1\n    current = 1\n    # loop over the input list\n    for i in range(1, len(a)):\n        # check if the current number is divisible by the previous number\n        if a[i] % a[i-1] == 0:\n            # if it is, increase the current subset size\n            current += 1\n        else:\n            # if it's not, update the largest subset size and the current subset size\n            if current > largest:\n                largest = current\n            current = 1\n    # check if the current subset is larger than the largest\n    if current > largest:\n        largest = current\n    # return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Helper function to check if a number is divisible by k\n    def is_divisible(num, k):\n        return num % k == 0\n\n    # Sort the input list in non-decreasing order\n    a.sort()\n\n    # Initialize the maximum subset size and start index\n    max_size = 1\n    start = 0\n\n    # Iterate over the input list\n    for i in range(1, len(a)):\n\n        # Check if the current number is divisible by the next number\n        if is_divisible(a[i], a[i+1]):\n\n            # Update the maximum subset size if the current number is greater\n            if a[i] - a[start] > max_size:\n                max_size = a[i] - a[start]\n                start = i\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a list to store the sum of the elements of the current subset\n    current_sum = []\n    \n    # loop through the elements of the input list\n    for num in a:\n        # loop through the elements of the current_sum list\n        for i in range(len(current_sum)):\n            # add the current number to the current_sum list\n            current_sum.append(num + current_sum[i])\n            # check if the current_sum list contains all the elements of the input list\n            if all(num % i == 0 for num in current_sum):\n                # if it does, return the length of the current_sum list\n                return len(current_sum)\n    \n    # if the loop completes without finding a suitable subset, return 0\n    return 0"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    max_size = 0\n    current_size = 0\n    current_sum = 0\n\n    # loop through the list\n    for i in range(len(a)):\n        # check if the current element is divisible by the current sum\n        if a[i] % current_sum == 0:\n            # if it is, update the current size and move to the next element\n            current_size += 1\n        else:\n            # if not, update the maximum size if the current size is greater\n            if current_size > max_size:\n                max_size = current_size\n            # reset the current size to 1 and update the current sum to the current element\n            current_size = 1\n            current_sum = a[i]\n\n    # check if the last element is divisible by the current sum\n    if a[-1] % current_sum == 0:\n        # if it is, update the current size and move to the next element\n        current_size += 1\n    else:\n        # if not, update the maximum size if the current size is greater\n        if current_size > max_size:\n            max_size = current_size\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    arr = arr1 + arr2\n\n    # Sort the merged array\n    arr.sort()\n\n    # Find the median index\n    mid = n // 2\n    if n % 2 == 0:\n        median = (arr[mid - 1] + arr[mid]) / 2\n    else:\n        median = arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Check if the input arrays are of the same size\n    if len(arr1)!= len(arr2):\n        return \"Error: The input arrays must be of the same size.\"\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # Calculate the median using the two middle elements\n    if n % 2 == 0:\n        median = (arr1[median_index - 1] + arr1[median_index]) / 2\n    else:\n        median = arr1[median_index]\n\n    # Check if the median lies in the left or right half of the array\n    if median_index == 0:\n        median_index_left = 0\n    else:\n        median_index_left = median_index - 1\n\n    if median_index == len(arr1) - 1:\n        median_index_right = len(arr1) - 1\n    else:\n        median_index_right = median_index + 1\n\n    # Check if the median lies in the first or second half of the first array\n    if median_index_left < median_index_right:\n        if median_index_left % 2 == 0:\n            median_left = (arr1[median_index_left - 1] + arr1[median_index_left]) / 2\n        else:\n            median_left = arr1[median_index_left]\n        if median_left == median:\n            return median_left\n    else:\n        if median_index_left % 2 == 0:\n            median_left = (arr1[median_index_left - 1] + arr1[median_index_left]) / 2\n        else:\n            median_left = arr1[median_index_left]\n        if median_left == median:\n            return median_left\n\n    # Check if the median lies in the first or second half of the second array\n    if median_index_right < len(arr2) - 1:\n        if median_index_right % 2 == 0:\n            median_right = (arr2[median_index_right] + arr2[median_index_right + 1]) / 2\n        else:\n            median_right = arr2[median_index_right]\n        if median_right == median:\n            return median_right\n    else:\n        if median_index_right % 2 == 0:\n            median_right = (arr2[median_index_right] + arr2[median_index_right + 1]) / 2\n        else:\n            median_right = arr2[median_index_right]\n        if median_right == median:\n            return median_right\n\n    # If the median is not found, return None\n    return None"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes three parameters:\n    arr1 - the first sorted list\n    arr2 - the second sorted list\n    n - the length of both lists\n    \n    This function returns the median of the two sorted lists, if they are the same size.\n    If they are not the same size, the function returns None.\n    \n    The function first merges the two sorted lists into a single sorted list. \n    Then, it calculates the median based on the length of the list.\n    '''\n    \n    # check if the two lists are of the same size\n    if len(arr1)!= len(arr2):\n        return None\n    \n    # merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # calculate the median based on the length of the list\n    median = sorted(merged_list)[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Return the median\n    return arr[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists and their sizes and calculates the median.\n    \"\"\"\n    # Merge the two lists into one\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Find the median of the merged list\n    median = sorted_list[n // 2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two arrays and sort it\n    arr = arr1 + arr2\n    arr.sort()\n\n    # find the median\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2])/2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two sorted lists\n    arr = arr1 + arr2\n    # sort the concatenated list\n    arr.sort()\n    # calculate the median index\n    mid = n // 2\n    # if the length of the list is odd, the median index is (n // 2)\n    # if the length of the list is even, the median index is ((n // 2) + 1)\n    if n % 2 == 1:\n        median_index = mid\n    else:\n        median_index = mid - 1\n    # return the median element\n    return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into one\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Find the median\n    if n % 2 == 0:\n        # If the size of the list is even, return the average of the two middle elements\n        median = (sorted_list[n//2] + sorted_list[n//2-1]) / 2\n    else:\n        # If the size of the list is odd, return the middle element\n        median = sorted_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge two sorted arrays\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        median = merged_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of equal size and returns their median.\n    \"\"\"\n    # Get the length of the arrays\n    m = len(arr1)\n    # Check if the two arrays have the same length\n    if m!= len(arr2):\n        raise ValueError(\"The two arrays must have the same length.\")\n    # Merge the two arrays into one\n    merged = arr1 + arr2\n    # Sort the merged array in non-descending order\n    merged.sort()\n    # Calculate the middle index\n    mid = n // 2\n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return merged[mid]\n    # If the length of the array is even, return the average of the middle two elements\n    else:\n        return (merged[mid-1] + merged[mid]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Use a list comprehension to create a new list containing the n-th power of each number in the input list\n    result = [num ** n for num in nums]\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string is uppercase or not.\n    \"\"\"\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): a string to convert to uppercase.\n\n    Returns:\n    str: the input string in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # Convert the string to uppercase using the upper() method\n    upper_string = string.upper()\n    # Return the uppercase string\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert the string to uppercase\n    string = string.upper()\n    # check if the string is already in uppercase\n    if string == string.upper():\n        # return True\n        return True\n    else:\n        # return False\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list is empty or has only one element\n    if length == 0 or length == 1: \n        return newList\n    \n    # Swap the first and last elements\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) == 0:\n        print(\"The given list is empty\")\n        return\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    # check if the input is a list\n    if type(newList)!= list:\n        print(\"Input must be a list!\")\n        return\n    \n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List must have at least two elements!\")\n        return\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list needs to have at least two elements.\")\n        return\n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements\"\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Check if the length of the list is less than 2\n    if len(newList) < 2:\n        print(\"The list should have at least two elements.\")\n        return\n\n    # Interchange the first and last elements\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n\n    # Print the modified list\n    print(\"Modified List: \", newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # length of the list \n    n = len(newList) \n\n    # swapping the first and last elements \n    temp = newList[0] \n    newList[0] = newList[n-1] \n    newList[n-1] = temp\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list has less than two elements.\"\n    \n    # Swapping the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # get the length of the list\n    length = len(newList)\n\n    # check if the list has at least two elements\n    if length < 2:\n        return newList\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846\n    a = (r**2 * (pi/2))**0.5\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n\n    # Find the semi-circle center point and its radius\n    center = (0, 0)\n    radius = r\n\n    # Find the points of the triangle\n    a = (center[0], center[1] + radius)\n    b = (center[0] - radius, center[1])\n    c = (center[0] + radius, center[1])\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    # (a - b) x (c - a) = 0\n    # (c - b) x (a - c) = 0\n    # (a - c) x (b - a) = 0\n    # (c - b) x (c - a) = 0\n    # (a - b) x (a - c) = 0\n    # (b - c) x (b - a) = 0\n    # (c - a) x (c - b) = 0\n    # (b - c) x (a - b) = 0\n    # (a - b) x (a - c) = 0\n    # (b - c) x (a - b) = 0\n    # (a - b) x (a - c) = 0\n    # Therefore, the area of the largest triangle can be found as the length of the perpendicular from the center to the two largest sides\n    side_a = math.sqrt(radius**2 - (center[0] - b[0])**2)\n    side_b = math.sqrt(radius**2 - (center[1] - c[1])**2)\n    area = abs(side_a * side_b) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # approximate the area of a triangle using the formula (1/2) * base * height\n    area = (3/2) * (r**2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the smallest triangle inscribed in the semicircle\n    a = r * (2 * r - 1)\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    c = r * r\n    s = (2 * r * r * r) ** 0.5\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (a + c + s) / 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Using Heron's formula to find the area of a triangle\n    # with sides of length a, b and c\n    def heron_formula(a, b, c):\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Using the trapezoidal rule to approximate the area of the largest triangle inscribed in the semicircle\n    def trapezoidal_approximation(r):\n        return 4 * r * (r - 1)\n\n    # Finding the semi-perimeter of the semicircle\n    def semi_perimeter(r):\n        return 2 * r\n\n    # Finding the radius of the semicircle\n    def radius_of_semicircle(a, b):\n        return (a + b) / 2\n\n    # Finding the radius of the triangle inscribed in the semicircle\n    def radius_of_triangle(a, b):\n        return (a + b) / 2\n\n    # Function to find the area of the largest triangle inscribed in the semicircle\n    def area_of_largest_triangle(r):\n        a = radius_of_triangle(r, semi_perimeter(r) / 2)\n        b = semi_perimeter(r) / 2\n        c = radius_of_triangle(r, semi_perimeter(r) / 2)\n        return max(heron_formula(a, b, c), trapezoidal_approximation(r))\n\n    # Calling the area_of_largest_triangle function with the given radius\n    return area_of_largest_triangle(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter and area of a semicircle\n    perimeter = 2 * r\n    area = 3.14159 * r * r\n\n    # calculate the circumference and area of the largest triangle that can be inscribed in the semicircle\n    circumference = 2 * r\n    area1 = circumference * circumference * 0.5\n\n    # calculate the area of the smallest triangle that can be inscribed in the semicircle\n    area2 = circumference * circumference * 0.25\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area3 = area1 + area2\n\n    # calculate the area of the smallest triangle that can be inscribed in the largest triangle\n    area4 = area3 - area2\n\n    # calculate the area of the largest triangle that can be inscribed in the smallest triangle\n    area5 = area4 - area3\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area6 = area - area3\n\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return area6"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    a = r/math.sin(math.pi/3)\n    b = 2*r\n    c = 2*r\n    s = (a+b+c)/2\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate semi-perimeter of a semicircle\n    s = 2 * r\n    \n    # calculate area of a right angle triangle with semi-perimeter s and height h\n    h = r\n    A = (1/2)*h*s\n    \n    return A"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    sp = 2*r\n    \n    # Calculate the semi-circumference of the semicircle\n    sc = 2*3.14*r\n    \n    # Calculate the area of a triangle using Heron's formula\n    s = (sp*sp - sc*sc) ** 0.5\n    area = (s*(s-sp)*(s-sc))/2\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n\n    Parameters:\n    -----------\n    array: list\n        A sorted list of natural numbers.\n\n    start: int (optional, default=0)\n        The starting index of the array to be used in searching for the missing number.\n\n    end: int (optional, default=None)\n        The ending index of the array to be used in searching for the missing number.\n        If end is None, the function will use the length of the array.\n\n    Returns:\n    --------\n    int\n        The smallest missing number from the given sorted list.\n\n    \"\"\"\n    # Check if the array is sorted\n    if all(x <= y for x, y in zip(array, array[1:])):\n        # If the array is sorted, start from the start index and end at the end index\n        if end is None:\n            end = len(array)\n        missing = start\n        for i in range(start, end):\n            if array[i]!= missing:\n                return missing\n            missing += 1\n        return missing\n    else:\n        raise ValueError(\"The array is not sorted.\")"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n    array (list): A list of natural numbers that is sorted in ascending order.\n    start (int, optional): The start index of the array to search. Defaults to 0.\n    end (int, optional): The end index of the array to search. Defaults to None.\n\n    Returns:\n    int: The smallest missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    Parameters:\n    array (list): A list of natural numbers sorted in ascending order.\n    start (int): The starting index of the search range (optional, default 0).\n    end (int): The ending index of the search range (optional, default None).\n\n    Returns:\n    int: The smallest missing number from the input list.\n\n    \"\"\"\n\n    # Check if the input is a list of natural numbers\n    if not all(isinstance(num, int) and num > 0 for num in array):\n        raise ValueError(\"Input should be a list of natural numbers sorted in ascending order.\")\n\n    # Check if the input list is sorted in ascending order\n    if len(array) > 1 and array[0] >= array[-1]:\n        raise ValueError(\"Input list should be sorted in ascending order.\")\n\n    # Set the default end index to the last index of the input list\n    if end is None:\n        end = len(array) - 1\n\n    # Initialize variables to track the current index and the smallest missing number\n    current_index = start\n    missing_number = array[0]\n\n    # Loop through the input list until we find the first missing number\n    while current_index <= end and missing_number in array:\n        # Increment the current index\n        current_index += 1\n        # Set the missing number to the next available number in the list\n        missing_number = min(array[current_index:]) + current_index\n\n    # Return the smallest missing number\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the input list is empty, it returns None.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A list of natural numbers sorted in non-decreasing order.\n        start (int): The starting index of the array.\n        end (int): The ending index of the array.\n\n    Returns:\n        int: The smallest missing number.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= i:\n            return i\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the input list is empty, then the function returns None.\n    \"\"\"\n    if not array:\n        return None\n\n    if start == 0 and end == None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    if start < len(array):\n        return start\n    else:\n        return len(array)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the first missing number in a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A list of natural numbers.\n    start (int, optional): The starting index of the range. Defaults to 0.\n    end (int, optional): The ending index of the range. Defaults to the length of the array - 1.\n\n    Returns:\n    int: The smallest missing number in the array.\n\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers and returns a new list containing only the even numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers in the input list.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    # Initialize an empty list to store even numbers\n    even_list = []\n\n    # Loop through each number in the list\n    for num in list:\n\n        # If the number is even, add it to the even_list\n        if num % 2 == 0:\n            even_list.append(num)\n\n    # Return the even_list of even numbers\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!=0) or (j!=0):\n                nx = x+i\n                ny = y+j\n                if (nx, ny) not in sub:\n                    adj.append((nx, ny))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    adjacent = [(x, y) for x in (-1, 0, 1) for y in (-1, 0, 1) if x!= 0 or y!= 0]\n    for coord in adjacent:\n        sub.append((ele[0]+coord[0], ele[1]+coord[1]))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function extracts all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        x, y = ele\n        sub.append((x-1,y))\n        sub.append((x+1,y))\n        sub.append((x,y-1))\n        sub.append((x,y+1))\n    elif isinstance(ele, list):\n        for i in ele:\n            if isinstance(i, tuple):\n                adjac(i, sub)\n    else:\n        pass\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent_coords = []\n    \n    # Up left\n    if x-1 >= 0 and y-1 >= 0:\n        adjacent_coords.append((x-1, y-1))\n    # Up right\n    if x+1 < len(sub) and y-1 >= 0:\n        adjacent_coords.append((x+1, y-1))\n    # Left\n    if y-1 >= 0:\n        adjacent_coords.append((x, y-1))\n    # Right\n    if y+1 < len(sub[0]):\n        adjacent_coords.append((x, y+1))\n    # Down left\n    if x-1 >= 0 and y+1 < len(sub[0]):\n        adjacent_coords.append((x-1, y+1))\n    # Down right\n    if x+1 < len(sub) and y+1 < len(sub[0]):\n        adjacent_coords.append((x+1, y+1))\n    \n    return adjacent_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    if x > 0 and y > 0:\n        adj_list.append((x-1, y-1))\n    if x > 0:\n        adj_list.append((x-1, y))\n    if x > 0 and y < 9:\n        adj_list.append((x-1, y+1))\n    if x < 9 and y > 0:\n        adj_list.append((x+1, y-1))\n    if x < 9:\n        adj_list.append((x+1, y))\n    if x < 9 and y < 9:\n        adj_list.append((x+1, y+1))\n    if y > 0:\n        adj_list.append((x, y-1))\n    if y < 9:\n        adj_list.append((x, y+1))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Unpack the input tuple\n    x, y = ele\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n\n    # Check for adjacent tiles\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x > 0 and y < y_size-1:\n        adj.append((x-1, y+1))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < y_size-1:\n        adj.append((x, y+1))\n    if x < x_size-1 and y > 0:\n        adj.append((x+1, y-1))\n    if x < x_size-1:\n        adj.append((x+1, y))\n    if x < x_size-1 and y < y_size-1:\n        adj.append((x+1, y+1))\n\n    # Add the current element to the list of adjacent elements\n    adj.append(ele)\n\n    # Return the list of adjacent elements\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            result.append((x + i, y + j))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x, y))\n    if x > 0: \n        sub.append((x-1, y))\n    if y > 0: \n        sub.append((x, y-1))\n    if x < len(grid)-1: \n        sub.append((x+1, y))\n    if y < len(grid[0])-1: \n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Get the x and y coordinates of the given element\n    x, y = ele\n    # Define the adjacent coordinates\n    adjs = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    # Append the sub-coordinates to the list\n    sub.append(adjs)\n    # Recursively call the function for each adjacent coordinate\n    for adj in adjs:\n        if adj not in sub:\n            adjac(adj, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract x and y coordinates from the tuple\n    x, y = ele\n    \n    # Initialize the adjacent coordinates list\n    adj = []\n    \n    # Add the current coordinate to the list\n    adj.append(ele)\n    \n    # Loop through the adjacent coordinates using a nested for loop\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # Skip the current coordinate\n            if i == 0 and j == 0:\n                continue\n            # Add the adjacent coordinate to the list\n            adj.append((x + i, y + j))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the input string to lowercase\n    text = text.lower()\n    # Initialize an empty list to store the modified string\n    modified_text = []\n    # Loop through each character in the input string\n    for char in text:\n        # If the character is a whitespace, replace it with an underscore\n        if char.isspace():\n            modified_text.append('_')\n        # If the character is not a whitespace, append it to the modified string\n        else:\n            modified_text.append(char)\n    # Convert the modified string back to a string and return it\n    return ''.join(modified_text)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Split the text into a list of words\n    words = text.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word contains a whitespace, replace it with an underscore\n        if \" \" in words[i]:\n            words[i] = words[i].replace(\" \", \"_\")\n        # If the word contains an underscore, replace it with a whitespace\n        elif \"_\" in words[i]:\n            words[i] = words[i].replace(\"_\", \" \")\n    # Join the words back together into a string\n    replaced_text = \" \".join(words)\n    # Return the replaced text\n    return replaced_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # convert spaces to underscores\n    text = text.replace(\" \", \"_\")\n    # convert underscores to spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_regex = r'\\s'\n    underscore_regex = r'_'\n    text = text.replace(space_regex, underscore_regex)\n    text = text.replace(underscore_regex, space_regex)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = \" \"\n    underscore = \"_\"\n    text = text.replace(spaces, underscore)\n    text = text.replace(underscore, spaces)\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # use two pointers to traverse the list\n    # one pointer will keep track of the current non-zero value\n    # the other pointer will keep track of the current position\n    # of the non-zero value in the list\n    i = j = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            # if the current element is not zero, then swap it with the non-zero element at j\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # move the j pointer to the next position\n            j += 1\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        num_list.pop(zero_index)\n        num_list.append(0)\n        return move_zero(num_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            if zero_count > 0:\n                num_list[len(num_list) - zero_count], num_list[i] = num_list[i], num_list[len(num_list) - zero_count]\n            zero_count = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    \n    # Traverse through the list\n    for i in range(len(num_list)):\n        # Check if the current element is zero\n        if num_list[i] == 0:\n            # If it is, increment the count of zeroes\n            zero_count += 1\n            # Move the current element to the end of the list\n            num_list[i], num_list[-zero_count] = num_list[-zero_count], num_list[i]\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create an empty list to store non-zero numbers\n    non_zero_list = []\n    # iterate over the input list and append non-zero numbers to the non_zero_list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    # iterate over the non_zero_list and move all zeroes to the end of the list\n    for i in range(len(non_zero_list)):\n        if non_zero_list[i] == 0:\n            non_zero_list[i], non_zero_list[len(non_zero_list)-1] = non_zero_list[len(non_zero_list)-1], non_zero_list[i]\n    # return the non_zero_list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n\n    # Iterate through the list and move all zeroes to the end\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            i += 1\n        else:\n            i += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two variables to keep track of the current and previous indexes\n    curr = 0\n    prev = 0\n\n    # traverse through the list\n    for i in range(len(num_list)):\n        # check if the current element is zero\n        if num_list[i] == 0:\n            # if it is, move the zero to the end of the list\n            for j in range(curr, i):\n                num_list[j] = num_list[j+1]\n            # increment the current index\n            curr += 1\n        # move the non-zero element to the previous index\n        else:\n            # move the current element to the previous index\n            num_list[prev] = num_list[i]\n            # increment the previous index\n            prev += 1\n\n    # move all the remaining elements to the end of the list\n    while curr < len(num_list):\n        num_list[curr] = 0\n        curr += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(count, num_list.pop(i))\n            count += 1\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    \n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers arr of size n and returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum = arr[i] ^ arr[j]\n            total_sum += xor_sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n\n    # XOR of all pairs of numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # XOR of all elements in the list\n    xor_list = 0\n    for i in range(n):\n        xor_list ^= arr[i]\n\n    # Return the sum of xor of all pairs of numbers and xor of all elements in the list\n    return xor_sum + xor_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        xor = arr[i] ^ arr[i+1]\n        sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all elements of the list\n    xor_sum = sum(arr)\n    \n    # XOR of pairs of elements of the list\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum -= arr[i] ^ arr[j]\n    \n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    heap = hq.heapify(iterable)\n    \n    # Iterate over the sorted list\n    while heap:\n        # Remove the smallest element from the heap\n        smallest = hq.heappop(heap)\n        \n        # Append it to the end of the sorted list\n        yield smallest"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n\n    # Build max heap from the array\n    hq.heapify(arr)\n\n    # Extract maximum element from heap\n    max_element = hq.heappop(arr)\n\n    # Build heap of the remaining elements\n    for i in range(len(arr)-1, 0, -1):\n        hq.heappushpop(arr, max_element)\n\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max-heap from the list\n    max_heap = hq.heapify(iterable)\n\n    # extract elements from the heap in sorted order\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Sort the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Converting the given list into a heap\n    heap = hq.heapify(iterable)\n    \n    # Sorting the heap using heap sort algorithm\n    for i in range(len(heap)-1, 0, -1):\n        hq.heappushpop(heap, hq.heappop(heap))\n    \n    # Returning the sorted list\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a list\n    arr = list(iterable)\n\n    # Convert the list to a max heap\n    hq.heapify(arr)\n\n    # Extract elements from the heap and append them to the result list\n    result = []\n    while arr:\n        result.append(arr.pop())\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a min heap.\n    '''\n    # Build a max heap from the iterable\n    hq.heapify(iterable)\n\n    # Iterate over the sorted elements and append to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort algorithm.\n    '''\n    heap = []\n    # Convert the given list to a min heap\n    for num in iterable:\n        hq.heappush(heap, num)\n    # Pop the elements from the min heap and add them to the list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = sale_amount - actual_cost\n    if profit_loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\", profit_loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif actual_cost < sale_amount:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount: \n        print(\"No profit or loss\") \n        return True\n    else: \n        print(\"Profit or loss\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check if the sale amount is greater than or equal to the actual cost\n    if sale_amount >= actual_cost: \n        print(\"The sale amount is greater than or equal to the actual cost\")\n        return True\n    else: \n        print(\"The sale amount is less than the actual cost\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether there is any profit and no loss\n    if profit >= 0 and loss <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    # Check if profit and loss are both positive\n    if profit >= 0 and loss >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    if profit >= 0 and loss >= 0:\n        print(\"The amount has no profit and no loss\")\n    else:\n        print(\"The amount has profit or loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost: int, the actual cost of the sale\n        sale_amount: int, the amount that was sold\n    \n    Returns:\n        bool, True if the given amount has no profit and no loss, False otherwise\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        print(\"No profit or no loss\")\n        return True\n    # check if the actual cost is less than or equal to the sale amount\n    elif actual_cost <= sale_amount:\n        print(\"Profitable sale\")\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc = 23.45 - 0.0065 * t - 35.75 * math.log(v) + 0.16 * t * (t-273.15)\n    # Round to the nearest integer and return the result\n    return int(round(wc))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer\n    given the wind velocity and temperature in celsius.\n    \"\"\"\n    if v == 0:\n        return \"No wind speed data provided\"\n    elif v < 0:\n        return \"Negative wind speed not allowed\"\n    elif t < -40 or t > 120:\n        return \"Temperature must be between -40 and 120 degrees Celsius\"\n    else:\n        a = 10.0 / 5.0\n        b = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 2)\n        c = 0.4275 * t - 35.75\n        d = math.sqrt(math.pow(b, 2) - 4.0 * a * c)\n        return int((b - d) / (2.0 * a))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert Celsius to Fahrenheit\n    fahrenheit = (t * 9/5) + 32\n\n    # Calculate the wind chill using the formula:\n    # WC = 13.12 + 0.6215 * wind_speed + 11.37 * temperature_in_celsius - 0.3965 * wind_speed ** 2 + 0.5688 * temperature_in_celsius ** 2\n    wc = 13.12 + 0.6215 * v + 11.37 * fahrenheit - 0.3965 * v ** 2 + 0.5688 * fahrenheit ** 2\n\n    # Convert WC to integer\n    wc = int(wc)\n\n    # Return WC rounded to the next integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    tc = (t - 273.15) * 1.8 + 32\n    tch = tc - 0.0065 * (v ** 2) + 10.37 * math.log10(tc) - 0.0065 * (v ** 2)\n    return int(tch + 0.5)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill formula\n    wc = math.round(35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*math.log(v))\n\n    # Check if the wind chill index is below zero\n    if wc < 0:\n        return 0\n\n    # Check if the wind chill index is above 100\n    if wc > 100:\n        return 100\n\n    # Otherwise, return the wind chill index rounded to the nearest integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function takes the wind velocity in km/h and a temperature in celsius as inputs and returns the wind chill index rounded to the nearest integer.\n    \"\"\"\n    # convert celsius to fahrenheit\n    temp_f = (t * 9/5) + 32\n\n    # calculate the humidity index\n    humidity = 100 * (1 - (0.621971 * math.exp(-0.000075 * temp_f) + 0.396585 * math.exp(-0.000595 * temp_f) - 0.014333 * math.exp(-0.001745 * temp_f)))\n\n    # calculate the wind chill index\n    wc_index = round(v / (math.exp((temp_f - 32) * (17.625 / (temp_f - 24))) + (0.621971 * math.exp(-0.000075 * temp_f) + 0.396585 * math.exp(-0.000595 * temp_f) - 0.014333 * math.exp(-0.001745 * temp_f)) * humidity / 100))\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function takes in wind velocity (in km/h) and temperature (in celsius) as arguments and returns the wind chill index rounded to the next integer.\n\n    The formula for wind chill index is:\n\n    WCI = -459.67 + 35.75*t - 0.6215*t**2 + 10*math.log10(v)\n\n    where:\n        WCI = wind chill index\n        v = wind velocity in km/h\n        t = temperature in celsius\n\n    The function returns a float value of the wind chill index.\n\n    '''\n\n    c = 100.0\n    f = math.floor(c/2.0) + 32.0\n    celsius_to_fahrenheit = lambda temp: (temp * 9/5.0) + 32.0\n    fahrenheit_to_celsius = lambda temp: (temp - 32.0) * 5/9.0\n\n    v = v * 1.60934  # convert km/h to m/s\n    t = t - 273.15  # convert celsius to fahrenheit\n\n    wci = -459.67 + 35.75 * fahrenheit_to_celsius(t) - 0.6215 * fahrenheit_to_celsius(t)**2 + 10 * math.log10(v)\n\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    # Calculate the wind chill index\n    c = 0.0065 * v * (t_f - 32)\n    # Calculate the wind chill index rounded to the nearest integer\n    index = math.ceil(c)\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v) - 0.114 * math.log(v) ** 2 + 0.0019 * t * math.log(v) ** 2\n    return math.ceil(w)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Formula to calculate the wind chill index\n    w = v * (t - 32) / 9\n    # Calculate the nearest integer value to the wind chill index\n    i = round(w)\n    # Check if the calculated wind chill index is within the range of 0 to 20 degrees Fahrenheit\n    if i < 0 or i > 20:\n        return 'Invalid temperature value'\n    return i"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name.isupper()]\n    return sum([len(name) for name in names])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    valid_names = [name for name in sample_names if not name[0].islower()]\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Initialize the sum variable to zero\n    total_length = 0\n\n    # Loop through each name in the list\n    for name in sample_names:\n\n        # Remove any names that start with a lowercase letter\n        if not name[0].isupper():\n\n            # Add the length of the name to the total length\n            total_length += len(name)\n\n    # Return the total length of all the names that meet the criteria\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name[0].islower():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        count += len(name)\n    return count"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and returns a new string with the parenthesis removed.\n    '''\n    pattern = re.compile(r'\\(([^)]+)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function takes a string of text and removes the parenthesis and what is inbetween them.\n    \n    Args:\n        items (str): The string of text to be processed\n    \n    Returns:\n        str: The processed string with the parenthesis removed and what is inbetween them.\n    \"\"\"\n    # Remove all the parenthesis from the string using regex\n    items = re.sub('\\([^)]*\\)', '', items)\n    \n    # Return the processed string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*?\\)' # regex pattern for parenthesis\n    result = re.sub(pattern, '', items) # use the regex to remove parenthesis\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]+\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('(\\([^)]*\\))', '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return ((n * (n+1)) // 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the constant for the nonagonal number\n    a = 1\n    \n    # Loop through the range of numbers to find the nth nonagonal number\n    for i in range(2, n+1):\n        # Calculate the nth nonagonal number\n        b = a**2 - i**2\n        \n        # Check if the nth nonagonal number is a prime number\n        if is_prime(b):\n            return b\n        \n        # Update the constant for the next iteration\n        a = b\n    \n    # If no prime number is found, return None\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize a variable to count the number of nonagonal numbers\n    count = 0\n\n    # initialize two variables to keep track of the row and column of each nonagonal number\n    row = 0\n    col = 1\n\n    # loop through each row and column\n    while row <= n:\n        count += 1\n        # increment the row and column until we reach the nth nonagonal number\n        while col <= n:\n            count += 1\n            # increment the row and column until we reach the n-th nonagonal number\n            col += 1\n        row += 1\n        col = 1\n\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # function to find the sum of squares of even numbers\n    def sum_of_squares(n):\n        return n*(n+1)*(2*n+1)//6\n    \n    # function to find the sum of squares of odd numbers\n    def sum_of_squares_odd(n):\n        return n*(n+1)*(2*n+1)//4\n    \n    # function to find the sum of squares of even squares of odd numbers\n    def sum_of_squares_even_odd(n):\n        return (2*n+1)*sum_of_squares_odd(n)\n    \n    # find the nth nonagonal number\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 25\n    elif n == 3:\n        return 81\n    elif n == 4:\n        return 345\n    elif n == 5:\n        return 1225\n    elif n == 6:\n        return 5105\n    else:\n        return sum_of_squares(n-1) + sum_of_squares_even_odd(n-1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    nonagonal_numbers = []\n    num = 1\n    \n    for i in range(1, n+1):\n        nonagonal_numbers.append(num)\n        num += 2\n    \n    return nonagonal_numbers"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    for i in range(1, n + 1):\n        nonagonal_numbers.append(i * (i + 1))\n    return nonagonal_numbers[n - 1]\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    nonagonal_count = 1\n    previous_nonagonal = 1\n    \n    # loop through the first n-1 nonagonal numbers\n    for i in range(1, n-1):\n        # calculate the current nonagonal number\n        current_nonagonal = previous_nonagonal + i\n        \n        # check if the current nonagonal number is odd\n        if current_nonagonal % 2 == 1:\n            nonagonal_count += 1\n        \n        # update the previous nonagonal number\n        previous_nonagonal = current_nonagonal\n    \n    # return the nth nonagonal number\n    return nonagonal_count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return is_nonagonal(n - 1) + 2\n    else:\n        return is_nonagonal(n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the sum of the first n rows of Pascal's triangle\n    row = [1] * n\n    for i in range(n-1):\n        row[i+1] = (row[i] + row[i+1])\n    # Calculate the sum of the first n even numbers\n    even_sum = sum([x for x in range(2*n, 2*n+2, 2)])\n    # Return the sum of the two sums\n    return even_sum + row[0]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the sum of first n nonagonal numbers\n    sum_nonagonal = (n*(n-1))/2\n    return sum_nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[A-Za-z]+[zZ]+[A-Za-z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\b'\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    result = re.findall(pattern, text)\n    return bool(result)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # replace all non-alphanumeric characters with whitespace\n    text = re.sub(r'[^\\w\\s]','', text)\n    # split the string into words\n    words = text.split()\n    # iterate over the words\n    for i in range(len(words)):\n        # check if the current word ends in 'z'\n        if words[i].endswith('z'):\n            # check if the previous and next words also end in 'z'\n            if i > 0 and words[i-1].endswith('z') and i < len(words)-1 and words[i+1].endswith('z'):\n                # if all conditions are met, print the word\n                print(words[i])"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z', except at the start and end of the word.\n\n    :param text: A string to check for 'z' at the middle of words.\n    :type text: str\n    :return: True if 'z' is found in the middle of a word, False otherwise.\n    :rtype: bool\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define the regular expression pattern for matching 'z' except at the start and end of the word\n    pattern = r'[a-zA-Z]*[^z]*z[^a-zA-Z]*[a-zA-Z]*'\n\n    # Find all occurrences of 'z' in the text\n    matches = re.findall(pattern, text)\n\n    # Check if any occurrences were found and return True if so, False otherwise\n    return True if matches else False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Regular expression pattern to match 'z' except at the start and end of a word\n    pattern = r'\\b(z)\\b'\n    \n    # Return True if the text matches the pattern\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<![a-zA-Z])[z](?![a-zA-Z])\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)(\\w+)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the start to the k-1 index\n    input[0:k] = input[0:k][::-1]\n\n    # Reverse the array from k to the end\n    input[k:len(input)] = input[k:len(input)][::-1]\n\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    \n    # Reverse the array from the first element up to the given position k-1\n    input[:k-1] = reversed(input[:k-1])\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    start = 0\n    end = n - 1\n    while start < k - 1:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array\n    for i in range(len(input)//2):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n    \n    # reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[-(i+1)] = input[-(i+1)], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    temp = []\n\n    for i in range(k-1, length):\n        temp.append(input[i])\n\n    for i in range(length-1, k-1, -1):\n        temp.append(input[i])\n\n    for i in range(k-1, length):\n        input[i] = temp.pop()\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k % n\n    \n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    \n    # reverse the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n        \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a copy of the input array\n    arr = input.copy()\n    # reverse the array from position 0 to k-1\n    arr[:k] = arr[:k][::-1]\n    # reverse the array from k to the end\n    arr[k:] = arr[k:][::-1]\n    # return the reversed array\n    return arr"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[i-k] = input[i-k], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    \n    # reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function takes an array and a position k as inputs and reverses the array upto that position.\n    \"\"\"\n    # create a new empty array to store the reversed array\n    reversed_array = []\n    \n    # loop through the original array from index 0 to k-1\n    for i in range(k):\n        # add the element at index i to the new array\n        reversed_array.append(input[i])\n        \n    # loop through the original array from index k to the end\n    for i in range(k, len(input)):\n        # add the element at index i to the new array\n        reversed_array.append(input[i])\n        \n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + (test_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Extract the dictionary from the tuple\n    d = test_tup[1]\n    # Update the dictionary with the key-value pairs from the new dictionary\n    d.update(test_dict)\n    # Add the updated dictionary back to the tuple\n    test_tup = (test_tup[0], test_tup[1])\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new tuple containing the original tuple and the added dictionary\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Get the length of the tuple\n    tup_len = len(test_tup)\n    # Create a new tuple with length = tuple_length + 1\n    new_tup = test_tup + (None,) * (tup_len + 1)\n    # Add the dictionary to the new tuple\n    new_tup[tup_len] = test_dict\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = max(cost[i][j] + dp[i-1][j], cost[i][j] + dp[i][j-1])\n\n    return max(dp[N-1][N-1], dp[N-1][N-2])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Get dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables to keep track of the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = None\n\n    # Define helper function to compute the average of a path\n    def compute_avg(path):\n        total_cost = 0\n        for i in range(len(path) - 1):\n            total_cost += cost[path[i]][path[i + 1]]\n        return total_cost / len(path)\n\n    # Define recursive function to explore all possible paths\n    def explore_paths(i, j, path):\n        if i == N - 1 and j == N - 1:\n            # Base case: we have reached the bottom-right cell, so we compute the average of the path\n            avg = compute_avg(path)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path\n        else:\n            # Recursive case: we can move in either right or down\n            explore_paths(i, j + 1, path + [j])  # move down\n            explore_paths(i + 1, j, path + [i])  # move right\n\n    # Start exploring all paths from the top-left cell\n    explore_paths(0, 0, [])\n\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_avg = float('-inf')\n    max_path = []\n\n    def backtrack(i, j, path, current_avg):\n        visited[i][j] = True\n        path.append((i, j))\n        if i == N-1 and j == N-1:\n            nonlocal max_avg, max_path\n            if current_avg > max_avg:\n                max_avg = current_avg\n                max_path = path.copy()\n        else:\n            if not (i < N and visited[i+1][j] and not visited[i][j+1]):\n                backtrack(i+1, j, path, current_avg + cost[i][j])\n            if not (j < N and visited[i][j+1] and not visited[i+1][j]):\n                backtrack(i, j+1, path, current_avg + cost[i][j])\n        path.pop()\n        visited[i][j] = False\n\n    backtrack(0, 0, [(0, 0)], 0)\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    def dfs(x, y, visited, total_cost, current_path):\n        if x == N - 1 and y == N - 1:\n            nonlocal max_avg\n            if len(current_path) == N * N:\n                max_avg = max(max_avg, total_cost / len(current_path))\n            return\n\n        visited[x][y] = True\n        current_path.append((x, y))\n\n        if x < N - 1 and not visited[x + 1][y]:\n            dfs(x + 1, y, visited, total_cost + cost[x + 1][y], current_path)\n        if y < N - 1 and not visited[x][y + 1]:\n            dfs(x, y + 1, visited, total_cost + cost[x][y + 1], current_path)\n\n        current_path.pop()\n        visited[x][y] = False\n\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            visited = [[False] * N for _ in range(N)]\n            dfs(i, j, visited, cost[i][j], [(i, j)])\n\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    def max_average(row):\n        max_cost = float('-inf')\n        total_cost = 0\n        for cell in row:\n            total_cost += cell\n            if cell > max_cost:\n                max_cost = cell\n        return total_cost / len(row)\n    \n    N = len(cost)\n    max_avg = max(max_average(row) for row in cost)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    max_avg = 0\n    row, col = 0, 0\n    max_path_avg = 0\n    num_cells = 1\n    \n    # Traverse the matrix and calculate the maximum average path\n    while row < len(cost) and col < len(cost[0]):\n        # If the cell is not blocked and has a valid value, add it to the path and calculate its average\n        if cost[row][col]!= 0 and num_cells <= len(cost) * len(cost[0]):\n            max_path_avg += cost[row][col]\n            num_cells += 1\n        \n        # Check if the current path has a higher average than the current max path average\n        if num_cells > max_path_avg:\n            max_path_avg = num_cells\n        \n        # Move in the direction of the higher average path\n        if max_path_avg > max_avg:\n            if col == len(cost[0]) - 1:\n                row += 1\n                col = 0\n            elif row == len(cost) - 1:\n                col += 1\n                row = 0\n            else:\n                row += 1\n                col += 1\n        else:\n            if col == 0:\n                row -= 1\n                col = len(cost[0]) - 1\n            elif row == 0:\n                col -= 1\n                row = len(cost) - 1\n            else:\n                row -= 1\n                col -= 1\n        \n        # Update the maximum average path found so far\n        if num_cells > max_path_avg:\n            max_path_avg = num_cells\n    \n    # Calculate the maximum average of all paths\n    max_avg = max_path_avg / num_cells\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    current_avg = 0\n    current_sum = 0\n    current_size = 0\n\n    # Iterate through all possible paths\n    for i in range(n):\n        for j in range(n):\n            # Check if the current position is a valid starting point for a path\n            if i == 0 and j == 0:\n                continue\n            # Check if the current position is already visited or not a valid move\n            if cost[i][j] < cost[i-1][j] and cost[i][j] < cost[i][j-1]:\n                continue\n            # If the current position is valid, add the cost of the cell and increment the size\n            current_sum += cost[i][j]\n            current_size += 1\n            # If the current position is the bottom-right corner, compute the average and update the max_avg if necessary\n            if i == n-1 and j == n-1:\n                current_avg = current_sum / current_size\n                if current_avg > max_avg:\n                    max_avg = current_avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                max_avg = max(max_avg, cost[i][j])\n            elif i == N - 1 and j == N - 1:\n                max_avg = max(max_avg, cost[i][j])\n            else:\n                max_avg = max(max_avg, cost[i][j] + max(maxAverageOfPath(cost[:i] + [[0] * (N - i - 1)] + cost[i+1:]), maxAverageOfPath(cost[:j] + [[0] * (N - j - 1)] + cost[j+1:])))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] += dp[i-1][j]\n            elif j == 0:\n                dp[i][j] += dp[i][j-1]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] += dp[i-1][j]\n            elif j == 0:\n                dp[i][j] += dp[i][j-1]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            avg = dp[i][j] / (i+j+1)\n            max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    # Initialize variables to store the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = []\n    # Loop through each cell of the matrix\n    for i in range(n):\n        for j in range(n):\n            # Initialize variables to store the total cost and the count of cells visited\n            total_cost = 0\n            count = 0\n            # Initialize a stack to store the cells to be visited\n            stack = [(i, j)]\n            # Loop until the stack is empty\n            while stack:\n                # Pop the top element from the stack\n                current_row, current_col = stack.pop()\n                # Check if the current cell is the bottom right cell\n                if current_row == n-1 and current_col == n-1:\n                    # If it is, add the total cost of the path and increment the count of visited cells\n                    total_cost += cost[current_row][current_col]\n                    count += 1\n                # Check if the current cell is on the boundary\n                if current_row == 0 or current_col == 0 or current_row == n-1 or current_col == n-1:\n                    # If it is, move down or right depending on the current cell\n                    if current_row == 0 or current_col == 0:\n                        stack.append((current_row, current_col+1))\n                    if current_row == n-1 or current_col == n-1:\n                        stack.append((current_row+1, current_col))\n                # Check if the current cell is valid and not visited\n                if 0 <= current_row < n and 0 <= current_col < n and (current_row, current_col) not in stack:\n                    # If it is, push the neighbors of the current cell to the stack\n                    stack.append((current_row-1, current_col))\n                    stack.append((current_row, current_col+1))\n            # Compute the average of the total cost and the count of visited cells\n            avg_cost = total_cost / count\n            # Update the maximum average and the maximum path if the current average is greater than the current maximum\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = [(i, j)]\n            elif avg_cost == max_avg and (i, j) not in max_path:\n                max_path.append((i, j))\n    # Return the maximum path with the maximum average\n    return max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # create an empty list to store the filtered students\n    filtered_students = []\n\n    # loop through the students dictionary\n    for name, data in students.items():\n        # unpack the data tuple\n        height, weight = data\n\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # if both conditions are true, add the student to the filtered students list\n            filtered_students.append(name)\n\n    # return the filtered students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    # Filter the students based on height and weight\n    filtered_students = {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    same_pairs = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pairs.append(i)\n    return len(same_pairs)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # calculate the sum of all digits of the base\n    base_sum = 0\n    while base > 0:\n        base_sum += base % 10\n        base //= 10\n    \n    # calculate the sum of digits to the specified power\n    power_sum = 0\n    for _ in range(power):\n        power_sum += base_sum\n    \n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to zero\n    total_sum = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of all digits of the base to the specified power\n        total_sum += digit_int ** power\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    sum_digits = 0\n    for digit in base_str:\n        sum_digits += int(digit) ** power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n\n    # initialize the sum to 0\n    total = 0\n\n    # iterate over the digits of the base string and add them to the sum to the specified power\n    for digit in base_str:\n        total += int(digit) ** power\n\n    # return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string to extract digits\n    base_str = str(base)\n    # Initialize sum to 0\n    sum = 0\n    # Loop through each digit of the base\n    for digit in base_str:\n        # Convert digit to integer and add to sum\n        sum += int(digit)\n    # Calculate the sum of digits raised to the power\n    sum_to_power = sum ** power\n    # Return the sum\n    return sum_to_power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power, total=0):\n    '''\n    This function takes three arguments: base, power, and total.\n    base: an integer representing the base of the power.\n    power: an integer representing the power to which base will be raised.\n    total: an integer representing the current total of digits.\n    '''\n    # Base case: if power is zero, return the total.\n    if power == 0:\n        return total\n    \n    # Recursive case: add the last digit of base to the total and raise base to the power-1.\n    digit = base % 10\n    total += digit\n    return power_base_sum(base // 10, power - 1, total)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum variable\n    sum_digits = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum variable\n        sum_digits += int(digit)\n    # calculate the sum of the digits raised to the specified power\n    result = sum_digits ** power\n    # return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum of digits to 0\n    sum_digits = 0\n    # Iterate through each digit of the base and add it to the sum\n    for digit in base_str:\n        sum_digits += int(digit)\n    # Calculate the sum of digits raised to the power\n    result = sum_digits ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += base % 10\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Remove all non-alphanumeric characters and split the string based on quotation marks\n    values = re.findall(r'(?<=\")(.*)(?=\")', text)\n\n    # Return a list of extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all the occurrences of quotation marks in the string\n    matches = re.findall(r'(\"(?:[^\\\\\"]|\\\\.)*\")', text)\n    \n    # Initialize an empty list to store the values between quotation marks\n    values = []\n    \n    # Loop through all the matches and extract the values between the quotation marks\n    for match in matches:\n        # Remove the quotation marks from the match and add it to the values list\n        value = match.strip('\"')\n        values.append(value)\n    \n    # Return the values list\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"((?:\\\\.|[^\"])*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'(?<=\\S)\"(.*?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regex to find all matches between quotation marks and store them in a list\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    # return the first match found if any, else return an empty string\n    if matches:\n        return matches[0]\n    else:\n        return \"\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define the regular expression pattern for matching quotes\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    quotes = re.findall(pattern, text)\n    \n    # If no quotation marks are found, return an empty list\n    if not quotes:\n        return []\n    \n    # Extract the values between the quotation marks and return them as a list\n    values = [quote.strip('\"') for quote in quotes]\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks \" \"\n    pattern = r'\"(.+?)\"'\n    # Use re.findall() method to extract all the matched values from the string\n    matches = re.findall(pattern, text)\n    # Return a list of all the extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\".*?[^\\\\]\"' # match any double quoted string with any character except \"\\\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string using regular expressions.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = tuple(test_tup[i]*test_tup[i+N] for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N+1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result = tuple([t_i * t_i+1 for t_i in test_tup[:N]]) + tuple([t_i * t_i for t_i in test_tup[N:]])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    new_tup.append(test_tup[-1] * test_tup[0])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4], test_tup[4] * test_tup[5], test_tup[5] * test_tup[6], test_tup[6] * test_tup[7], test_tup[7] * test_tup[8], test_tup[8] * test_tup[9])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize an empty list to store the result\n    result = []\n    # iterate over both lists simultaneously\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_set = set(nums)\n    result = []\n    for k, g in groupby(sorted(nums_set)):\n        if len(list(g)) > 1:\n            result.extend(list(g))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    prev_num = None\n    for num in nums:\n        if num!= prev_num:\n            result.append(num)\n        prev_num = num\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by the same elements and count the number of occurrences\n    grouped = groupby(nums)\n    grouped = [(k, list(g)) for k, g in grouped if len(list(g)) > 1]\n    # Remove all pairs of consecutive duplicates\n    for i in range(len(grouped)):\n        if len(grouped[i][1]) == 1:\n            del grouped[i]\n    return [num for pair in grouped for num in pair[1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(enumerate(nums), lambda x: x[0] - x[1])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = {}\n    result = []\n    for i, num in enumerate(nums):\n        if num in seen:\n            if i - seen[num] > 1:\n                for j in range(seen[num] + 1, i):\n                    result.append(nums[j])\n            result.append(num)\n        else:\n            seen[num] = i\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key in [None, nums[0]]:\n            continue\n        else:\n            yield group"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    area = (1/3) * math.pi * r * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r**2 # surface area of the base\n    B = math.pi * r**2 # surface area of the top\n    C = math.pi * h**2 # surface area of the cone\n    lateral_area = (A + B + C) / 3 # calculate the lateral surface area\n    \n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone.\n    '''\n    return math.pi * r * (r + h) / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculate the area of the base\n    area_base = math.pi * r**2\n    \n    # Calculate the area of the top\n    area_top = math.pi * r * h\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = area_base + area_top\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi*(r**2)*h\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*(r**2)*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone\n    A = math.pi * r**2 * h\n    # Return the lateral surface area\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculating the lateral surface area\n    lateral_surface_area = (math.pi * r ** 2 * h) / 3\n    \n    # printing the result\n    print(\"The lateral surface area of a cone with radius\", r, \"and height\", h, \"is\", lateral_surface_area)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[,.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|,+|\\.+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define regular expression pattern\n    pattern = re.compile(r'[^a-zA-Z0-9]+')\n    # replace special characters with colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[\\s,.]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)\n\ntext = \"This,is,a,test,with,comma,and,space.in.it.\"\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = r'[,\\. ]'\n    text = re.sub(special_chars, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s+|,+|\\..+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,\\. ]')\n    return pattern.sub(':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for matching special characters\n    pattern = re.compile(r'[^\\w\\s]+')\n    # Replace all special characters with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # search for the index of the first occurrence of x in the sorted array A\n    first_occurrence = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence = i\n            break\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    for i in range(n):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the leftmost index where A[i] >= x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n\n    # If x is not found, return -1\n    if i == len(A):\n        return -1\n\n    # Search for the first occurrence of x in A[i:]\n    j = 0\n    while j < len(A[i:]) and A[i+j] == x:\n        j += 1\n\n    # Return the index of the first occurrence of x in A[i:]\n    return i + j"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    elif A[0] == x:\n        return 0\n    elif A[len(A)-1] == x:\n        return len(A)-1\n    else:\n        left = 0\n        right = len(A)-1\n        while left <= right:\n            mid = (left+right)//2\n            if A[mid] == x:\n                right = mid-1\n            elif A[mid] < x:\n                left = mid+1\n            else:\n                right = mid-1\n        return right"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index of the first occurrence of x\n    index = 0\n    # Initialize the current element being checked\n    current = A[index]\n    \n    # Loop through the array until the current element is equal to x\n    while current!= x:\n        # If the current element is greater than x, move to the left side of the array\n        if current > x:\n            # Move to the next index\n            index += 1\n            # Check if the index is out of bounds\n            if index >= len(A):\n                # If the index is out of bounds, return -1 to indicate that the number was not found\n                return -1\n            # Re-assign the current element\n            current = A[index]\n        # If the current element is less than or equal to x, move to the right side of the array\n        else:\n            # Move to the next index\n            index -= 1\n            # Check if the index is out of bounds\n            if index < 0:\n                # If the index is out of bounds, return -1 to indicate that the number was not found\n                return -1\n            # Re-assign the current element\n            current = A[index]\n    \n    # If the loop completes without finding the number, return -1 to indicate that the number was not found\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # check if the next element is also x\n            if mid == len(A) - 1 or A[mid+1]!= x:\n                return mid\n            else:\n                right = mid - 1 # continue searching left half of the array\n        elif A[mid] < x:\n            left = mid + 1 # continue searching right half of the array\n        else:\n            right = mid - 1 # continue searching left half of the array\n    return -1 # if x is not found in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the first index where A[i] is greater than or equal to x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    \n    # If there is no such index, return -1\n    if i == len(A):\n        return -1\n    \n    # Find the first index where A[j] is equal to x\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    \n    # Return the index of the first occurrence of x\n    return j"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            if j == 0:\n                prod = 1\n            else:\n                prod = arr[j-1]\n            for k in range(j, i):\n                prod *= arr[k]\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    suffix_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n        suffix_sum[i] = suffix_sum[i - 1] + arr[n - i]\n\n    subarray_prod = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            subarray_prod[j] = subarray_prod[j] + prefix_sum[j] * suffix_sum[i]\n\n    sum_of_subarray_prod = 0\n    for i in range(1, n + 1):\n        sum_of_subarray_prod += subarray_prod[i]\n\n    return sum_of_subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (2 * n)\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i, n):\n            dp[j + n] = dp[j + n] + arr[i] * arr[j]\n\n    result = 0\n    for i in range(n, 2 * n):\n        result += dp[i]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    subarray_sum = 0\n    subarray_prod = 1\n\n    for i in range(n):\n        subarray_sum += arr[i]\n        subarray_prod *= arr[i]\n\n    return subarray_sum * subarray_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Initialize sum of products and product of first element\n    sum_of_products = arr[0] * (arr[0] + 1) // 2\n    product_of_first = arr[0]\n\n    # Loop through all sublists of length 2 to n-1\n    for i in range(2, n):\n        # Calculate product of current sublist\n        product = arr[i] * (arr[i] + 1) // 2\n\n        # Update sum of products\n        sum_of_products += product\n\n        # Update product of first element\n        product_of_first *= arr[i]\n\n    # Return sum of products\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Calculate the cumulative sum of array elements\n    csum = [0] * (n + 1)\n    for i in range(n):\n        csum[i + 1] = csum[i] + arr[i]\n\n    # Initialize variables for sum and product of products\n    sum_of_products = 0\n    product_of_products = 1\n\n    # Iterate through all sublists of array\n    for i in range(n):\n        # Calculate the sum of products of current sublist\n        temp_sum = 1\n        for j in range(i, n):\n            temp_sum *= (csum[j + 1] - csum[i])\n        sum_of_products += temp_sum\n\n        # Calculate the product of products of current sublist\n        temp_prod = 1\n        for j in range(i, n):\n            temp_prod *= arr[j]\n        product_of_products *= temp_prod\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = arr[0]\n    \n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = dp[i-1][j] * arr[i]\n            dp[i][j] += dp[i-1][j+1] * arr[i]\n    \n    return dp[n-1][0]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            dp[i] += arr[j] * dp[j]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n < 1:\n        return 0\n\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n\n    prefix_sum[0] = arr[0]\n    suffix_sum[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i]\n        suffix_sum[n - 1 - i] = suffix_sum[n - 1 - i + 1] + arr[n - 1 - i]\n\n    def calculate_prod(arr, i, j):\n        if j - i + 1 < 2:\n            return 0\n\n        product = 1\n        for k in range(i, j):\n            product *= arr[k]\n\n        return product\n\n    subarray_prods = []\n\n    for i in range(n):\n        for j in range(i, n):\n            if i == 0 and j == n - 1:\n                continue\n\n            subarray_prod = calculate_prod(arr, i, j)\n            subarray_prods.append(subarray_prod)\n\n    return sum(subarray_prods)\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod_arr = [1] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prod_arr[i] = arr[i-1] * prod_arr[i-1]\n        \n    return sum(prod_arr)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the first and last bit of the number\n    bit_0 = n & 1  # get the least significant bit (LSB)\n    bit_7 = (n >> 7) & 1  # get the most significant bit (MSB)\n    \n    # toggle the bits of the number except the first and last bit\n    n ^= (bit_0 << 7) | (bit_7 << 0)\n    \n    # return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the binary number to a list of digits\n    binary_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Find the index of the first and last bits\n    first_index = binary_list.index(0)\n    last_index = binary_list.index(1)\n\n    # Toggle the bits of the middle bits\n    for i in range(first_index, last_index-1):\n        binary_list[i] = not binary_list[i]\n\n    # Convert the list of digits back to a binary number\n    binary_string = ''.join([str(bit) for bit in binary_list])\n\n    # Convert the binary number back to an integer\n    return int(binary_string, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Toggle bits of the number except the first and the last bit\n    n = n & ~(1 << 1) & ~(1 << (n.bit_length() - 1))\n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # This function takes a single integer as input and returns the same number with the middle bits toggled.\n    # First, we check if the length of the integer is odd or even. If it is odd, then we need to toggle the middle bit.\n    # If it is even, we need to toggle both the first and last bits.\n    if len(bin(n)) % 2 == 0:  # if length of binary is even\n        middle_bit = 0b10\n        first_last_bit = 0b11\n    else:  # if length of binary is odd\n        middle_bit = 0b01\n        first_last_bit = 0b10\n    # We then take the first and last bits of the integer and combine them with the middle bit.\n    first_last_bits = n & first_last_bit\n    middle_bits = n ^ middle_bit\n    # Finally, we combine the first and last bits and middle bits to get the updated number.\n    return (first_last_bits | middle_bits)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Initialize an empty list to store the middle bits\n    middle_bits = []\n    \n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle the middle bits\n    for i in range(12):\n        if i == 0 or i == 12:\n            continue\n        middle_bits.append((first_bit + last_bit) % 2)\n    \n    # Convert the middle bits back to an integer\n    middle_bits = int(''.join(str(bit) for bit in middle_bits), 2)\n    \n    # Return the modified number\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # convert integer to binary string\n    bin_str = bin(n)[2:]\n\n    # get number of bits in the binary string\n    num_bits = len(bin_str)\n\n    # find the first and last bits\n    first_bit = bin_str[0]\n    last_bit = bin_str[num_bits-1]\n\n    # initialize the middle bits to 0\n    middle_bits = '0' * (num_bits//2)\n\n    # toggle bits of middle_bits except first and last bits\n    middle_bits_list = [int(i) for i in middle_bits]\n    for i in range(num_bits//2):\n        middle_bits_list[i] = (middle_bits_list[i] ^ 1) ^ (first_bit == '1') ^ (last_bit == '1')\n\n    # convert list to binary string\n    middle_bits = ''.join([str(i) for i in middle_bits_list])\n\n    # convert binary string to decimal integer\n    middle_bits = int(middle_bits, 2)\n\n    # combine first and last bits of the binary string to get the original number\n    new_n = (int(last_bit + middle_bits) << (num_bits//2)) | (int(first_bit + middle_bits) >> (num_bits//2))\n\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract the first and last bits of the number\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n\n    # Toggle all the middle bits\n    middle_bits = (~first_bit) & (~last_bit)\n\n    # Combine the middle and first bits\n    result = (n & (~middle_bits)) | middle_bits\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If it is even, we toggle the middle two bits\n        return (n ^ 0b0111) << 1\n    else:\n        # If it is odd, we toggle the middle bit\n        return (n ^ 0b1110) << 1"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    # Remove first and last bits of the number\n    n &= 0b11111111111111111111111111110001\n    n |= 0b10000000000000000000000000000100\n    \n    # Toggle remaining bits\n    n = n ^ 0b1000000000000000000000000000000100\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    # Check if the number of bits is odd or even\n    if n.bit_length() % 2 == 0:\n        # If the number of bits is even, toggle the middle two bits\n        toggled_bits = n ^ ((1 << 1) | (1 << (n.bit_length() - 2)))\n    else:\n        # If the number of bits is odd, toggle the middle bit\n        toggled_bits = n ^ (1 << (n.bit_length() // 2))\n\n    return toggled_bits"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a):\n        return pos\n    elif a[pos] < x:\n        return pos\n    else:\n        # Move to the left until we find a value greater than x\n        while pos > 0 and a[pos - 1] == x:\n            pos -= 1\n        return pos"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return 0\n    elif i == len(a):\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if a[index] == x else index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx if idx!= len(a) and a[idx] == x else idx + 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    # Define regex pattern\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    # Match regex pattern in string\n    match = re.match(regex, string)\n    # Check if match was found\n    if match:\n        # If match was found, return True\n        return True\n    else:\n        # If match was not found, return False\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The geometric sum of\", n, \"-\", \"1 is:\", geometric_sum(n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n\n    # Initialize the largest index to -1\n    largest_index = -1\n\n    # Iterate over the digits of the number n\n    for digit in str(n):\n        # Convert the digit to an integer\n        digit = int(digit)\n\n        # Calculate the index of the smallest triangular number with n digits with this digit\n        index = int(math.log10(n) * (n - digit) + 1)\n\n        # Check if the index is larger than the current largest index\n        if index > largest_index:\n            largest_index = index\n\n    # Return the largest index\n    return largest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the variable to store the smallest triangular number with n digits\n    smallest_triangular_number = 10**n\n    # Initialize the variable to store the number of digits in the smallest triangular number\n    smallest_triangular_number_digits = math.log10(smallest_triangular_number) + 1\n    # Loop through all triangular numbers with n digits\n    for i in range(smallest_triangular_number, smallest_triangular_number+20):\n        # Calculate the number of digits in the current triangular number\n        current_triangular_number_digits = math.log10(i) + 1\n        # Check if the current triangular number has lesser number of digits than the smallest triangular number with n digits\n        if current_triangular_number_digits < smallest_triangular_number_digits:\n            smallest_triangular_number = i\n            smallest_triangular_number_digits = current_triangular_number_digits\n    # Return the index of the smallest triangular number with n digits\n    return math.floor(math.log10(smallest_triangular_number) + 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n):\n    # Define a list of primes up to n\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n\n    # Sieve of Eratosthenes\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i**2, n + 1, i):\n                primes[j] = False\n\n    # Initialize the smallest triangular number\n    min_tri = 2\n\n    # Find the index of the smallest triangular number with n digits\n    for i in range(2, n + 1):\n        if primes[i]:\n            min_tri = i\n            break\n\n    return min_tri"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    min_triangular = int(math.sqrt(5 * n + 1) + 1) # smallest triangular number with n digits\n    triangular_sum = 0\n    triangular_index = 1\n\n    while triangular_sum < min_triangular:\n        triangular_sum += triangular_index\n        triangular_index += 1\n\n    return triangular_index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize an empty list to store the smallest triangular numbers\n    smallest_triangular = []\n\n    # Loop through all values of n\n    for i in range(1, n+1):\n        # Calculate the smallest triangular number with n digits\n        smallest_triangular.append(math.factorial(n) // math.factorial(n-i))\n\n    # Find the index of the smallest triangular number\n    smallest_index = smallest_triangular.index(min(smallest_triangular))\n\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = [i for i in range(1, 10**n+1)]\n    smallest_number = triangular_numbers[0]\n    smallest_index = 0\n    for i in range(1, len(triangular_numbers)):\n        if triangular_numbers[i] < smallest_number:\n            smallest_number = triangular_numbers[i]\n            smallest_index = i\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 1\n    index = 1\n    while True:\n        triangular_number += 1\n        triangular_number_str = str(triangular_number)\n        if len(triangular_number_str) == n:\n            return index\n        index += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # calculate the maximum number of digits that can be in a triangular number\n    max_digits = int(math.log10(n*(n+1)//2))\n\n    # initialize variables\n    triangular_num = 1\n    smallest_index = max_digits\n\n    # iterate through all possible triangular numbers with n digits\n    while triangular_num <= n*(n+1)//2:\n\n        # calculate the index of the current triangular number\n        triangular_num_str = str(triangular_num)\n        triangular_num_length = len(triangular_num_str)\n        index = max_digits - triangular_num_length\n\n        # check if the current triangular number is the smallest\n        if index < smallest_index:\n            smallest_index = index\n\n        # increment the triangular number by 1\n        triangular_num += 1\n\n    # return the smallest index\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = 1\n    b = 1\n    count = 0\n    while a <= n: \n        if count == n: \n            return count \n        else: \n            c = a + b \n            if c <= n: \n                a = b \n                b = c \n            else: \n                count += 1 "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Index(n):\n    index = 0\n    for i in range(1, int(math.pow(10, n)) + 1):\n        if i * (i + 1) / 2 < int(math.pow(10, n)):\n            index += 1\n            if index == i:\n                return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_out = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_out[key] = value\n    return dict_out"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    # Iterate over the given tuple\n    for i in range(len(test_tup)):\n        # If the current index is not the last index, add the current element and the next element to the dictionary as a key-value pair\n        if i < len(test_tup)-1:\n            dict_obj[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary object\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate over the tuple and add the adjacent elements as key-value pairs to the dictionary\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The given tuple must have an even number of elements.\")\n    \n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n        \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    # create an empty dictionary\n    result_dict = {}\n\n    # loop through the tuple\n    for i in range(len(test_tup)):\n        # add the key-value pair to the dictionary\n        result_dict[i] = test_tup[i]\n\n    # return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    new_dict = {}\n    # Loop through the given tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the current element to the dictionary\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    i = 0\n    while i < len(test_tup)-1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n        i += 2\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # check if the length of the string is 0\n    if len(s) == 0:\n        return True\n\n    # get the first character\n    first_char = s[0]\n\n    # iterate over the string\n    for char in s:\n        # if the current character is not the first character\n        if char!= first_char:\n            # return False immediately\n            return False\n\n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(x == s[0] for x in s)"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1]"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    return (1/6) * s * (s + side)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function takes a side as input and returns the area of a tetrahedron.\n    \"\"\"\n    s = (side**2) / 12 #using formula for the square of the hypotenuse\n    return math.sqrt(s) #using square root of the sum of the squares of the other two sides to find the area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    semi_perimeter = 1.5 * side\n    \n    # calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter**2 + side**2)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3)*(side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)\n    area = (1/6)*s*(s+side)*(s+side+side+side)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Find the semi-perimeter of the tetrahedron\n    semi_perimeter = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (semi_perimeter ** 2 * (math.sin(math.pi / 3))) / 4\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Reverse the list\n    list = list[::-1]\n    # Reverse the first m items of the list\n    list[:m] = list[:m][::-1]\n    # Reverse the remaining n-m items of the list\n    list[m:] = list[m:][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(list) <= 1:\n        return list\n\n    # Calculate the number of rotations required\n    n = len(list)\n    rotations = m % n\n\n    # Check if the number of rotations is zero or less\n    if rotations == 0:\n        return list\n\n    # Reverse the list from starting position to the end\n    list = list[::-1]\n\n    # Reverse the list from end position to the starting position\n    list = list[rotations:] + list[:rotations]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Get the length of the list\n    n = len(list)\n\n    # If the number of items to rotate is greater than the length of the list, rotate the entire list\n    if m > n:\n        m = m % n\n\n    # Create a new list of length m\n    new_list = [0] * m\n\n    # Add the first m elements to the new list\n    for i in range(m):\n        new_list[i] = list[i]\n\n    # Add the remaining elements of the original list to the end of the new list\n    for i in range(m, n):\n        new_list[(i - m) % n] = list[i]\n\n    # Return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates the given list by the specified number of items to the right direction.\n    \"\"\"\n    # Find the length of the list\n    length = len(lst)\n    # Calculate the new index of the first item to be rotated\n    new_index = (length - n) % length\n    # Swap the first n items with the new_index-th item\n    lst[0:n], lst[new_index] = lst[new_index], lst[0:n]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the list by n elements to the right direction.\n    \"\"\"\n    lst.rotate(n)\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # Calculate the number of times to rotate the list\n    num_rotations = m % n\n    # If the number of rotations is 0, no rotation is required\n    if num_rotations == 0:\n        return list\n    # Create a new list to store the rotated items\n    rotated_list = []\n    # Traverse through the original list and add the rotated items to the new list\n    for i in range(n - num_rotations):\n        rotated_list.append(list[i])\n    # Traverse through the remaining items in the original list and add them to the new list\n    for i in range(num_rotations):\n        rotated_list.append(list[i + n - num_rotations])\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # If the number of items to be rotated is greater than the length of the list\n    if m > n:\n        return list\n    # Calculate the number of items to be rotated\n    k = m % n\n    # Move the first k items to the end of the list\n    list = list[-k:] + list[:-k]\n    # Reverse the entire list\n    list.reverse()\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[n-1], list[m-1], list[n-2], list[m-2], list[n-3], list[m-3], list[n-4], list[m-4] = list[m-1], list[n-1], list[m-2], list[n-2], list[m-3], list[n-3], list[m-4], list[n-4]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    if m >= n:\n        return lst\n    \n    # create a new empty list for rotated list\n    rotated_lst = []\n    \n    # traverse the original list and append items to the rotated list\n    for i in range(n - m):\n        rotated_lst.append(lst[i])\n        \n    # append the remaining items from the original list to the rotated list\n    for i in range(m, n):\n        rotated_lst.append(lst[i])\n    \n    return rotated_lst\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n - m:] + list[:n - m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n\n    none_value_exists = False\n\n    for value in test_tup:\n        if value is None:\n            none_value_exists = True\n            break\n\n    return none_value_exists"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(None in tup for tup in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(n):\n        digits = [int(digit) for digit in str(n)]\n        return all(digit in digits for digit in set(digits))\n    \n    return [x for x in range(startnum, endnum+1) if is_divisible(x)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Use lambda function to filter out numbers that don't have every digit divisible by 10\n    filtered_nums = filter(lambda x: all(d == 0 or x % d == 0 for d in map(int, str(x))), range(startnum, endnum + 1))\n    # Return a list of all the numbers that meet the criteria\n    return list(filtered_nums)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # define a function to check if a number is divisible by any digit\n    def check_divisible(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit!= 0 and num % digit!= 0:\n                return False\n        return True\n\n    # loop through numbers from startnum to endnum and check if they are divisible by every digit\n    for num in range(startnum, endnum+1):\n        if check_divisible(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n\n    # define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda num: all(num % i == 0 for i in range(1, 10))\n    \n    # iterate through the range of numbers and check if each number is divisible by every digit it contains\n    divisible_numbers = [num for num in range(startnum, endnum+1) if is_divisible_by_digit(num)]\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return sorted([n for n in range(startnum, endnum + 1) if all(digit % n == 0 for digit in str(n))])"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % 2!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    # define a function to check if a number is divisible by a digit\n    is_divisible = lambda x, y: x % y == 0\n\n    # define a function to check if a number contains every digit from 0 to 9\n    contains_digits = lambda x: all(digit in str(x) for digit in range(10))\n\n    # loop through the range of numbers from startnum to endnum\n    for num in range(startnum, endnum + 1):\n        # check if the number contains every digit from 0 to 9\n        if contains_digits(num):\n            # check if the number is divisible by every digit from 0 to 9\n            if all(is_divisible(num, digit) for digit in range(10)):\n                # if the number is divisible by every digit and contains every digit, print it\n                print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if angle is valid\n    if a > 360:\n        print(\"Error: Angle is larger than 360 degrees.\")\n        return None\n    \n    # calculate area of sector\n    area = math.pi * r**2 * a / 360\n    \n    # return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # calculate the area of the sector using the formula area = pi * r * a / 360\n    area = math.pi * r * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate area using cosine theorem\n    area = r * r * math.cos(math.radians(a/360))\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Check if angle is valid\n    if a > math.pi * 2:\n        return None\n    \n    # Calculate area of sector\n    area = math.pi * r ** 2 * a\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    def dynamic_programming(X, Y, Z): \n        m, n = len(X), len(Y) \n        lcs = [[0] * (n+1) for _ in range(m+1)] \n  \n        # Step 1 \n        for i in range(m+1): \n            lcs[i][0] = 0 \n  \n        for j in range(n+1): \n            lcs[0][j] = 0 \n  \n        # Step 2 \n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]: \n                    lcs[i][j] = lcs[i-1][j-1] + 1 \n                else: \n                    lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) \n  \n        return lcs \n  \n    # Step 3 \n    lcs = dynamic_programming(X, Y, Z) \n  \n    # Step 4 \n    LCS = \"\" \n    i, j = m, n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-1]: \n            LCS = X[i-1] + LCS \n            i -= 1 \n            j -= 1 \n        elif lcs[i-1][j] > lcs[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return LCS "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Build a 3D table to store the lengths of the longest common subsequences for the prefixes of X, Y, and Z\n    n, m, l = len(X), len(Y), len(Z)\n\n    # Create a 3D table to store the lengths of the longest common subsequences for the prefixes of X, Y, and Z\n    table = [[[0] * (l + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # Step 2: Fill the 3D table using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, l + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i - 1][j - 1][k])\n\n    # Step 3: Find the length of the longest common subsequence for the three given strings\n    max_len = table[n][m][l]\n\n    # Step 4: Return the longest common subsequence for the three given strings\n    lcs = []\n    i, j, k = n, m, l\n    while max_len > 0:\n        if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n            max_len -= 1\n        elif table[i - 1][j][k] == table[i][j - 1][k]:\n            i -= 1\n            max_len = table[i - 1][j][k]\n        else:\n            j -= 1\n            max_len = table[i][j - 1][k]\n\n    lcs.reverse()\n    return ''.join(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    # Function to find LCS of two strings\n    def lcs_of_two_strings(x, y):\n        m, n = len(x), len(y)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if x[i - 1] == y[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\n    # Find LCS of two strings X and Y\n    lcs_xy = lcs_of_two_strings(X, Y)\n\n    # Find LCS of X, Y, and Z\n    lcs_xyz = lcs_xy\n    for i in range(len(Z)):\n        if Z[i] == X[lcs_xy - 1]:\n            lcs_xyz = lcs_xy\n        elif Z[i] == Y[lcs_xy - 1]:\n            lcs_xyz = lcs_xy\n        else:\n            break\n    lcs_xyz += 1\n\n    # Print the result\n    print(\"The longest common subsequence of X, Y, and Z is:\", X[:lcs_xyz])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Step 2\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Step 3\n    i = m\n    j = p\n    lcs_seq = []\n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs_seq.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(lcs_seq[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function takes three string sequences X, Y, Z as input and returns the longest common subsequence (LCS) of the three sequences.\n    The LCS is the longest common subsequence between the three sequences such that the subsequence appears in both sequences and is also present in the third sequence.\n    The LCS is defined as the shortest string that contains all the characters that appear in all three sequences.\n    '''\n    # Create a matrix to store the lengths of LCS of substrings\n    L = [[0 for j in range(len(Z) + 1)] for i in range(len(X) + 1)]\n\n    # Fill the matrix in bottom up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Backtrack to find the LCS\n    i = len(X)\n    j = len(Z)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS and return it\n    lcs.reverse()\n    return ''.join(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize a 3x3 matrix to store lengths of LCS for all three sequences\n    lcs_matrix = [[0 for j in range(3)] for i in range(3)]\n\n    # Fill the matrix using dynamic programming approach\n    for i in range(3):\n        for j in range(3):\n            if i == 0 or j == 0:\n                lcs_matrix[i][j] = 0\n            elif X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]:\n                lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n            else:\n                lcs_matrix[i][j] = max(lcs_matrix[i-1][j], lcs_matrix[i][j-1])\n\n    # Traverse the matrix to find the length of LCS for each sequence\n    longest_lcs = 0\n    for i in range(3):\n        for j in range(3):\n            if lcs_matrix[i][j] > longest_lcs:\n                longest_lcs = lcs_matrix[i][j]\n\n    # Create a list to store the indices of characters in the LCS for each sequence\n    indices = []\n    i, j = 2, 2\n    while longest_lcs > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]:\n            indices.append((i-1, j-1))\n            longest_lcs -= 1\n            i -= 1\n            j -= 1\n        elif lcs_matrix[i-1][j] > lcs_matrix[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Convert the indices into a string and return it\n    return ''.join([X[index[0]] for index in indices])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n    \n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            for k in range(1,o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    return dp[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m+1) for i in range(n+1)] \n\n    for i in range(1, n+1): \n        for j in range(1, m+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n    L = p[n][m] \n    lcs = '' \n    i = n \n    j = m \n\n    while L > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            L -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n            L -= 1 \n        else: \n            j -= 1 \n            L -= 1 \n\n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Define a function to calculate the length of the longest common subsequence for two strings\n    def lcs_length(X, Y):\n        length = 0\n        i = j = 0\n        while i < len(X) and j < len(Y):\n            if X[i] == Y[j]:\n                length += 1\n                i += 1\n                j += 1\n            elif X[i] < Y[j]:\n                i += 1\n            else:\n                j += 1\n        return length\n\n    # Step 2: Find the lengths of the longest common subsequences for X and Y\n    m = lcs_length(X, Y)\n    n = lcs_length(Y, Z)\n\n    # Step 3: Find the lengths of the longest common subsequences for X, Y, and Z\n    length_of_lcs = lcs_length(X, Z)\n\n    # Step 4: Create a table to store the longest common subsequences for X, Y, and Z\n    table = [[0] * (n+1) for _ in range(m+1)]\n\n    # Step 5: Fill the table to find the longest common subsequences for X, Y, and Z\n    i = j = 0\n    while i < m and j < n:\n        if X[i] == Y[j]:\n            table[i+1][j+1] = table[i][j] + 1\n            i += 1\n            j += 1\n        elif X[i] < Y[j]:\n            table[i+1][j+1] = table[i][j+1]\n            i += 1\n        else:\n            table[i+1][j+1] = table[i+1][j]\n            j += 1\n\n    # Step 6: Print the longest common subsequences for X, Y, and Z\n    for i in range(length_of_lcs, 0, -1):\n        for j in range(n-1, -1, -1):\n            if table[i][j] == i:\n                print(X[j], end='')\n\n    print()"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    This function takes three string sequences and returns the longest common subsequence.\n    The function uses dynamic programming to solve the problem.\n    '''\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store the lengths of the longest common subsequences\n    table = [[[0] * (p+1) for j in range(m+1)] for i in range(n+1)]\n\n    # fill the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] == Z[i-1]:\n                table[i][j][0] = table[i-1][j-1][0] + 1\n            else:\n                table[i][j][0] = max(table[i-1][j][0], table[i][j-1][0])\n\n    # find the longest common subsequence starting from the end of the table\n    lcs = []\n    i = n\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] == Z[i-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j][0] > table[i][j-1][0]:\n            i -= 1\n        else:\n            j -= 1\n\n    # reverse the list to get the longest common subsequence in reverse order\n    lcs = lcs[::-1]\n\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1 \\2', str1)\n    str1 = re.sub('([a-z0-9])([A-Z])', r'\\1 \\2', str1)\n    str1 = re.sub('([A-Z])([A-Z][a-z]+)', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using a space as a separator\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expressions to find all capital letters followed by a non-letter character\n    pattern = r'\\b([A-Z][a-z]+[A-Z]+|[A-Z])(?=[^a-z])'\n    # Splitting the string into words\n    words = re.findall(pattern, str1)\n    # Looping through each word and adding a space if the word starts with a capital letter\n    for i, word in enumerate(words):\n        words[i] ='' + word\n    # Joining the words back into a string with spaces between them\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the first letter of the word is a capital letter\n        if words[i][0].isupper():\n            # If it is, add a space before it\n            words[i] ='' + words[i]\n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first word\n    words[0] = words[0].capitalize()\n\n    # Join the words back together with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with space\n    str1 = re.sub('[^a-zA-Z0-9]','', str1)\n    # split the string into words\n    words = str1.split()\n    # loop through each word and capitalize it if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    # join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, r' \\1', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<![A-Z])(?=[A-Z])|(?<=\\b)\\s*(?=[A-Z])')\n    return pattern.sub(' ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'(?<=[A-Z])[a-z]+(?=[A-Z]|\\W)'\n    words = re.findall(pattern, str1)\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically using Python's built-in sorting functions.\n    \"\"\"\n    # Convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    # Sort the list of numbers numerically using the built-in sort function\n    nums.sort()\n    # Convert back to strings and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Split the list of strings into a list of lists where each inner list contains one string of numbers\n    nums_list = [list(filter(str.isdigit, str_num)) for str_num in nums_str]\n    # Sort the list of lists numerically\n    nums_list.sort(key=lambda x: int(''.join(x)))\n    # Combine the sorted list of lists into a single list of strings of numbers\n    sorted_nums_str = [str(''.join(num_list)) for num_list in nums_list]\n    # Return the sorted list of strings of numbers\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Args:\n    nums_str (list[str]): List of strings of numbers\n\n    Returns:\n    list[str]: Sorted list of strings of numbers\n    \"\"\"\n\n    # Convert the list to a set to eliminate duplicates\n    nums_set = set(nums_str)\n\n    # Convert the set back to a list and sort it numerically\n    sorted_nums_str = sorted(nums_set)\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert the sorted list back to strings and join them into a single string\n    sorted_nums = [str(num) for num in nums]\n    return ''.join(sorted_nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Define a function to convert a string to a number\n    def str_to_num(s):\n        try:\n            num = float(s)\n            return num\n        except ValueError:\n            return None\n    \n    # Convert all strings to numbers\n    nums = [str_to_num(s) for s in nums_str if s.isdigit()]\n    \n    # Sort the numbers\n    nums.sort()\n    \n    # Convert the sorted numbers back to strings\n    sorted_nums = [str(n) for n in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [float(num_str) for num_str in nums_str]\n    sorted_nums = sorted(nums, key=lambda x: float(x))\n    return [str(num) for num in sorted_nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float and sort them\n    nums_float = sorted(list(map(float, nums_str)))\n    # Convert back to strings and return the sorted list\n    return sorted(nums_float)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers as input and returns a sorted list of strings of numbers\n    \"\"\"\n    # Convert the list of strings of numbers to a list of integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the list of integers numerically using the sorted() function\n    sorted_nums = sorted(nums_int)\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in sorted_nums]\n\n    # Return the sorted list of strings of numbers\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and returns the sorted list in ascending order.\n    '''\n    nums = []\n    for num in nums_str:\n        # Remove any non-numeric characters from the string\n        num = ''.join(filter(str.isdigit, num))\n        # Add the numeric value to a list\n        nums.append(int(num))\n    # Sort the list in ascending order\n    nums.sort()\n    # Return the sorted list as a string\n    return str(nums)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # check if the given tuple is valid\n    if not isinstance(test_tup, tuple):\n        return \"Invalid tuple.\"\n\n    # check if the given list is valid\n    if not isinstance(test_list, list):\n        return \"Invalid list.\"\n\n    # add the given tuple to the given list\n    test_list.append(test_tup)\n\n    # return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2-1):\n        if arr[i] > arr[2*i+1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    min_heap = True\n    for i in range(len(arr)//2):\n        if arr[i] > arr[2*i+1]:\n            min_heap = False\n            break\n    return min_heap"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case: if i is out of range or i is already at the root\n    if i < 0 or i >= len(arr):\n        return True\n    \n    # check if left child exists\n    left_child = 2*i + 1\n    \n    # check if right child exists\n    right_child = 2*i + 2\n    \n    # if both children do not exist, then we are at the root of the heap\n    if left_child >= len(arr):\n        return True\n    \n    # if left child exists, then we need to check if the left child is smaller than its parent\n    if arr[left_child] > arr[i]:\n        return False\n    \n    # if right child exists, then we need to check if the right child is smaller than its parent\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    \n    # if both children exist, then we need to check if the left child is smaller than its parent and the right child is smaller than its parent\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    left = 2 * i\n    right = 2 * i + 1\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return False\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr):\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, i + 1)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)\n\n\narr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(check_min_heap(arr))"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Last parent node\n    for i in range(n//2-1, -1, -1):\n        if arr[i] > arr[i*2+1]:\n            return False\n\n    # All nodes in the left subtree\n    for i in range(n//2):\n        if arr[i] > arr[i*2+1]:\n            return False\n        if arr[i*2+1] > arr[i*2+2]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base Case\n    if i >= len(arr) / 2:\n        return True\n\n    # Left and right child indices\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # Check if left child is smaller than root\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    # Check if right child is smaller than root\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    # If both children are smaller than root, then root is not min heap\n    return check_min_heap_helper(arr, i + 1)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Check if array is empty\n    if len(arr) == 0:\n        return True\n\n    # Helper function call to check if given array represents min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n        \n    for i in range(n-1, 0, -1):\n        if arr[0] > arr[i]:\n            return False\n        arr[0], arr[i] = arr[i], arr[0]\n        check_min_heap_helper(arr, 0)\n        \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: If i is greater than the length of the array, then the array is not a min heap.\n    if i > len(arr):\n        return False\n\n    # If the current element is greater than the next element, then the array is not a min heap.\n    if arr[i] > arr[i+1]:\n        return False\n\n    # Recursively check the left and right sub-arrays.\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i + 1)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2) + 1\n    else:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2) - 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    c = 1\n    d = 0\n    for i in range(n):\n        if i % 2 == 0:\n            c = (a + b) % 1000000007\n        else:\n            d = (a + b) % 1000000007\n        a = b\n        b = c\n        c = d\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    j_list = [j]\n    for i in range(n-1):\n        j = j + 2*j_list[i]\n        j_list.append(j)\n    return j_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_num(n-1) + 3*jacobsthal_num(n-1) + 2*jacobsthal_num(n-2) + 4*jacobsthal_num(n-2) - 3*jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the jacobsthal number to 0\n    j = 0\n\n    # Loop through the range of n and add the jacobsthal number to the sum\n    for i in range(1, n+1):\n        j += i\n\n    # Return the sum of the first n jacobsthal numbers\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n\n    # Initialize the first two Jacobsthal numbers\n    j1, j2 = 0, 1\n\n    # Initialize the nth Jacobsthal number\n    if n == 0:\n        j = 0\n    elif n == 1:\n        j = 1\n    else:\n        # Compute the nth Jacobsthal number recursively\n        j = (j1 * (2 * n - 1) - j2 * (2 * n - 3)) // (2 * n - 2)\n\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_number = 0\n    for i in range(1, n+1):\n        jacobsthal_number += i\n    return jacobsthal_number"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    min_k_list = []\n    min_count = 0\n    for i in range(len(test_list)):\n        count = 1\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n        if count == min_count:\n            min_k_list.append(test_list[i])\n        elif count < min_count:\n            min_k_list = [test_list[i]]\n            min_count = count\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if K > len(test_list):\n        return None\n    \n    sorted_list = sorted(test_list, key=lambda x: x[1]) # sort by second element of each tuple\n    \n    minimum_list = sorted_list[:K] # get first K elements of sorted list\n    \n    min_val = minimum_list[0][1] # get first value of first element of first element of sorted list\n    \n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list based on second element in each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Initializing minimum k records and count variable\n    min_records = []\n    count = 0\n    \n    # Traversing through the sorted list\n    for i in range(len(sorted_list)):\n        if count < K:\n            min_records.append(sorted_list[i])\n            count += 1\n        elif count == K:\n            min_records[count-1] = sorted_list[i]\n    \n    # Sorting the minimum k records based on first element in each tuple\n    min_records_sorted = sorted(min_records, key=lambda x: x[0])\n    \n    return min_records_sorted"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # Loop through the list and update the count of each element in the dictionary\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    # Sort the dictionary by the count in ascending order\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda item: item[1]))\n    # Initialize a list to store the result\n    result = []\n    # Loop through the sorted dictionary and add the first K keys to the result list\n    for i in range(K):\n        result.append(sorted_dict.keys()[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(float('inf'))\n\n    for item in test_list:\n        for i in range(K):\n            if item[i] < min_list[i]:\n                min_list[i] = item[i]\n\n    min_tuple = (min_list[0], min_list[1], min_list[2], min_list[3])\n    return min_tuple"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list as input and returns the minimum K records in the list.\n    If there are less than K records in the list, it returns all the records in the list.\n    '''\n    records = set()\n    for i in range(len(test_list)):\n        records.add(test_list[i])\n        if len(records) >= K:\n            break\n    return list(records)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # loop through the sorted list and keep track of the minimum K records\n    min_records = []\n    for i in range(len(test_list)):\n        if len(min_records) < K:\n            min_records.append(test_list[i])\n        else:\n            # if we have reached the minimum K records, check if this record is smaller than the smallest record we have so far\n            if test_list[i][1] < min_records[0][1]:\n                # if it is, remove the first record (which is the smallest) from the list and add this new record to the list\n                min_records.pop(0)\n                min_records.append(test_list[i])\n\n    # return the list of minimum K records\n    return min_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k_list = []\n    for i in range(K):\n        min_k_list.append(float('inf'))\n    min_k_dict = {}\n    for record in test_list:\n        min_k_index = min(range(len(min_k_list)), key=lambda x: record[x])\n        min_k_list[min_k_index] = min(min_k_list[min_k_index], record[min_k_index])\n        if min_k_list[min_k_index] in min_k_dict:\n            min_k_dict[min_k_list[min_k_index]].append(record)\n        else:\n            min_k_dict[min_k_list[min_k_index]] = [record]\n    result = []\n    for k in min_k_dict:\n        if len(min_k_dict[k]) == K:\n            result.extend(min_k_dict[k])\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function finds the minimum K records from a list of tuples, using a sliding window approach.\n    The sliding window approach is similar to the Kadane's algorithm, but instead of iterating over the entire list,\n    we iterate over a sliding window of size K and keep track of the minimum K values we encounter so far.\n    The function returns the list of minimum K values, along with the total number of minimum K values found.\n    '''\n\n    # Initialize variables\n    window = []\n    min_list = []\n    count = 0\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n\n        # If the window is not full yet, add the current tuple to it\n        if len(window) < K:\n            window.append(tup)\n\n        # If the window is full, calculate the minimum K value in the window\n        else:\n            min_val = min(window)\n            window.remove(min_val)\n            window.append(tup)\n\n            # If we have found a new minimum K value, add it to the min_list and increment the count\n            if tup[1] < min_val[1]:\n                min_list.append(tup)\n                count += 1\n\n    # Return the list of minimum K values and the total number of minimum K values found\n    return min_list, count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    min_dict = {}\n\n    for record in test_list:\n        key = record[0]\n        value = record[1]\n        if key in min_dict:\n            if value < min_dict[key]:\n                min_dict[key] = value\n        else:\n            min_dict[key] = value\n\n    min_list = sorted(min_dict.items(), key=lambda x: x[1])\n    min_records = []\n    for i in range(K):\n        min_key = min_list[i][0]\n        min_value = min_list[i][1]\n        min_records.append((min_key, min_value))\n\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            if l1[i] not in common_list:\n                common_list.append(l1[i])\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n    \n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # If the element at the current index is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If the element is already in the dictionary, increment its value by 1\n            if l1[i] in common_dict:\n                common_dict[l1[i]] += 1\n            # Otherwise, add the element to the dictionary with a value of 1\n            else:\n                common_dict[l1[i]] = 1\n                \n    # Return the list of common elements found in l1, l2, and l3\n    return common_dict.keys()"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # sort the list in ascending order\n    return numbers[-2]  # return the second smallest number"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = min(numbers)\n    second_smallest = smallest - 1\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"The list should have at least two elements.\")\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a[^b]*b\"\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"aaabb\"\nmatches = text_match_zero_one(text)\nprint(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b.*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w*b+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            reverse1 = test_list[i][::-1]\n            reverse2 = test_list[j][::-1]\n            if reverse1 == reverse2:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # Initialize a dictionary to store the frequency of each character in the given list\n    freq = {}\n    for word in test_list:\n        for char in word:\n            freq[char] = freq.get(char, 0) + 1\n\n    # Initialize a set to store the reverse of each word in the given list\n    rev_set = set()\n    for word in test_list:\n        rev_set.add(word[::-1])\n\n    # Initialize a variable to store the count of reverse pairs\n    count = 0\n\n    # Iterate through the frequency dictionary and check if the reverse of a word is in the set of reverse words\n    for char, freq_val in freq.items():\n        if char in rev_set:\n            for i in range(freq_val):\n                if char == rev_set.pop():\n                    count += 1\n                    break\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    # Using two pointers to traverse the list\n    i = 0\n    j = len(test_list) - 1\n\n    # Traverse the list\n    while i < j:\n        # If the characters at the pointers are not equal\n        if test_list[i]!= test_list[j]:\n            # Increment the pair count\n            pairs += (j - i)\n            # Move the pointers towards each other\n            i += 1\n            j -= 1\n        # If the characters at the pointers are equal\n        else:\n            # Move both pointers towards each other\n            i += 1\n            j -= 1\n\n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Sort the list in reverse order\n    test_list.sort(reverse=True)\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Traverse the list from the beginning and compare the pairs of elements\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            \n            # If the reversed string at index i is equal to the reversed string at index j, add 1 to the count\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    reverse_pairs = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                reverse_pairs += 1\n\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the count of each unique sublist\n    count_dict = {}\n    \n    # iterate over each element in the list\n    for item in list1:\n        # convert the item to a tuple and check if it already exists in the dictionary\n        if tuple(item) in count_dict:\n            # increment the count of the tuple\n            count_dict[tuple(item)] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple(item)] = 1\n    \n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 1\n        else:\n            sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist not in sublist_counts:\n            sublist_counts[sublist] = 1\n        else:\n            sublist_counts[sublist] += 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    counts = {}\n    \n    # Iterate through each list in the original list\n    for lst in list1:\n        # Convert the list to a tuple\n        tup = tuple(lst)\n        \n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in counts:\n            counts[tup] = 1\n        \n        # Otherwise, increment the count by 1\n        else:\n            counts[tup] += 1\n    \n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[tuple(item)] = 1\n        else:\n            count[tuple(item)] += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # create a dictionary to store the count of each unique tuple\n    unique_count = {}\n    \n    # loop through each list in the input list\n    for sublist in list1:\n        \n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # if the tuple is already in the dictionary, increment its count\n        if sublist_tuple in unique_count:\n            unique_count[sublist_tuple] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            unique_count[sublist_tuple] = 1\n            \n    # return the dictionary of unique tuples and their counts\n    return unique_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        for subitem in item:\n            tuple_subitem = tuple(subitem)\n            if tuple_subitem in counts:\n                counts[tuple_subitem] += 1\n            else:\n                counts[tuple_subitem] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list_tuple = tuple(list1[i:j+1])\n            if list_tuple in count_dict:\n                count_dict[list_tuple] += 1\n            else:\n                count_dict[list_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            unique_tuple = tuple(list1[i:j])\n            if unique_tuple in unique_list:\n                unique_list[unique_tuple] += 1\n            else:\n                unique_list[unique_tuple] = 1\n    return unique_list"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each unique tuple\n    sublist_count = {}\n    \n    # loop through each element of the list\n    for element in list1:\n        # convert the element to a tuple\n        tuple_element = tuple(element)\n        \n        # check if the tuple already exists in the dictionary\n        if tuple_element in sublist_count:\n            # increment the count of the tuple\n            sublist_count[tuple_element] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            sublist_count[tuple_element] = 1\n    \n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        # check if there is a decimal point in the string\n        decimal_point = num.index('.')\n        # check if there are only 2 digits after the decimal point\n        if num.count('.') == 1 and len(num.split('.')[1]) == 2:\n            # check if the integer part is greater than 0 and if the decimal part is less than 10\n            if int(num[:decimal_point]) > 0 and float(num[decimal_point+1:]) < 10:\n                return True\n            else:\n                return False\n        else:\n            # if there are more than 2 digits after the decimal point, return False\n            return False\n    else:\n        # if there is no decimal point in the string, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.split('.')[-1].count('.') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    \n    # Check if the number contains at least two digits\n    if len(num) < 2:\n        return False\n    \n    # Check if the number contains only one decimal point\n    if '.' not in num:\n        return False\n    \n    # Check if the number contains only one decimal point and two digits after it\n    if '.' in num and len(num.split('.')[1])!= 2:\n        return False\n    \n    # Convert the number to float and check if it has a precision of 2\n    try:\n        num = float(num)\n        if abs(num - round(num)) >= 0.01:\n            return False\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        num_list = num.split('.')\n        if len(num_list)!= 2:\n            return False\n        if len(num_list[0]) > 2 or len(num_list[1]) > 2:\n            return False\n        for char in num_list[0]:\n            if not char.isdigit():\n                return False\n        for char in num_list[1]:\n            if not char.isdigit():\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n        if '.' in num:\n            if len(num.split('.')[1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Check if the string is a number\n    try:\n        num = float(num)\n    except ValueError:\n        return False\n\n    # Check if the number has only 2 decimal places\n    if len(str(num).split('.')[1])!= 2:\n        return False\n\n    # If the number is decimal, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_places = 2\n    num_parts = num.split('.')\n    if len(num_parts) == 1:\n        if '.' in num:\n            return False\n        else:\n            return True\n    elif len(num_parts) == 2:\n        if '.' in num_parts[1]:\n            return num_parts[1].split('.')[1].isdigit()\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if num.count('.')!= 1 or num.count(',')!= 1:\n        return False\n    for i in num:\n        if i == '.' or i == ',':\n            continue\n        if not i.isdigit() or len(i) > 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # convert the given string to float\n    num = float(num)\n    # check if the float has a precision of 2 decimal places\n    if abs(num - int(num)) < 0.01:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    else:\n        unique = set(arr)\n        if len(unique) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    if arr[0] == arr[1]:\n        return False\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one unique element\")\n    else:\n        print(\"The list contains more than one unique element\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        distinct = True\n        for i in range(len(arr)):\n            if i == 0:\n                continue\n            elif arr[i] == arr[i-1]:\n                distinct = False\n                break\n        return distinct"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set of the elements in the array\n    unique_elements = set(arr)\n    # check if the length of the set is one or zero (i.e. only one distinct element)\n    return len(unique_elements) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a dictionary to keep track of the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # check whether the frequency of all the elements in the list is 1\n    for num in freq:\n        if freq[num]!= 1:\n            return False\n\n    # if all the elements have a frequency of 1, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_nums = set(arr) # convert the list to a set to remove duplicates\n    if len(unique_nums) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function checks whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # convert the list to set to remove duplicates\n    unique_set = set(arr)\n    # check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        # print true if the set has only one element\n        print(True)\n    else:\n        # print false if the set has more than one element\n        print(False)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    \n    if monthnum3 in days_in_months.keys():\n        if days_in_months[monthnum3] == 30:\n            print(\"The month number contains 30 days\")\n        else:\n            print(\"The month number does not contain 30 days\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum3 in range(1,13):\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            days_in_month[1] = 29\n        return days_in_month[monthnum3-1]\n    else:\n        print(\"Invalid month number\")\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError('Invalid month number')"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    \n    # check whether the month number has 30 days or not\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number.\")\n        return\n    \n    # Check if the month number has 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"Month has 30 days.\")\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        print(\"Month has 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): The list of integers to analyze.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    \"\"\"\n\n    min_diff = float('inf')  # set to infinity initially\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n\n    Args:\n        arr (list): The array containing the elements.\n        n (int): The length of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its size as input and returns\n    the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Step 1: Partition the array into two parts (left and right)\n    # which will have at most one element each.\n    left = [x for i, x in enumerate(arr) if i % 2 == 0]\n    right = [x for i, x in enumerate(arr) if i % 2 == 1]\n\n    # Step 2: Implement QuickSort algorithm on both the left and right parts.\n    left.sort()\n    right.sort()\n\n    # Step 3: Calculate the minimum difference between any two elements\n    # in both left and right parts.\n    min_diff = float('inf')\n    for i in range(len(left)):\n        min_diff = min(min_diff, left[i] - right[i])\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize minimum difference variable\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Find the difference between current element and next element\n        if diff < min_diff:\n            min_diff = diff  # Update minimum difference if the difference is smaller\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Given an array and its size, this function finds the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Traverse through the array from start to end\n    for i in range(n):\n        # Find the minimum difference between current element and the rest of the array\n        diff = arr[n-1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    min_diff = float('inf')\n    min_diff_index = -1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_diff_index = i, j\n\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return abs(arr[0] - arr[1])\n\n    # Initialize two variables to store the minimum difference and the minimum element in the array\n    min_diff = float('inf')\n    min_element = float('inf')\n\n    # Loop through the array and update the minimum difference and minimum element variables\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_element = arr[i]\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize a variable to store the value of nth polite number\n    polite_num = 0\n\n    # Loop until the value of nth polite number is greater than or equal to n\n    while polite_num < n:\n        # Increment polite_num by 2\n        polite_num += 2\n\n        # Check if the sum of the digits of polite_num is divisible by 10\n        if sum(int(digit) for digit in str(polite_num)) % 10 == 0:\n            # If it is, return polite_num\n            return polite_num\n\n        # If the sum is not divisible by 10, increment polite_num by 1\n        else:\n            polite_num += 1\n\n    # If the loop completes without finding a polite number, return None\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function returns the nth polite number.\n\n    Parameters:\n    n (int): the index of the polite number to find.\n\n    Returns:\n    int: the nth polite number.\n    \"\"\"\n    # Initialize the base and the multiplier variables.\n    base = 2\n    multiplier = 1\n\n    # Calculate the nth polite number using the formula.\n    polite_number = int((base ** n) * multiplier)\n\n    # Check if the polite number is a prime number.\n    for i in range(2, int(math.sqrt(polite_number))+1):\n        if polite_number % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_polite_helper(a):\n        polite_count = 0\n        num = a\n        while num > 0:\n            digit = num % 10\n            if digit == 5:\n                polite_count += 1\n            num //= 10\n        return polite_count\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    polite_count = 0\n    i = 2\n    while i <= n:\n        if is_polite_helper(i) == 1:\n            polite_count += 1\n        i += 1\n\n    return polite_count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    # initialize variables\n    count = 0\n    polite = 1\n    \n    # iterate until nth polite number is found\n    while count < n:\n        # increment polite number and increment count\n        polite += 1\n        count += 1\n        \n        # check if polite number is greater than sqrt(n)\n        if math.sqrt(n) <= polite:\n            # if yes, start counting from 2\n            count = 0\n            polite = 1\n            \n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(math.sqrt(num))+1): \n            if num % i == 0: \n                return False \n        return True \n\n    def is_prime_polite(num): \n        return is_prime(num) and is_polite(num) \n\n    i = 1 \n    polite_number = 1 \n\n    while polite_number < n: \n        i += 1 \n        if is_prime_polite(i): \n            polite_number = i\n\n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Checks if the given number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite(a, b, c):\n        \"\"\"\n        Finds the nth polite number using the given formula.\n        \"\"\"\n        def gcd(a, b):\n            \"\"\"\n            Greatest Common Divisor (GCD) of two numbers using Euclid's algorithm.\n            \"\"\"\n            while b:\n                a, b = b, a % b\n            return a\n\n        def lcm(a, b):\n            \"\"\"\n            Lowest Common Multiple (LCM) of two numbers.\n            \"\"\"\n            return a * b // gcd(a, b)\n\n        def lcm_of_prime(p1, p2):\n            \"\"\"\n            Lowest Common Multiple of two prime numbers.\n            \"\"\"\n            return lcm(p1, p2)\n\n        def gcd_of_prime(p1, p2):\n            \"\"\"\n            GCD of two prime numbers.\n            \"\"\"\n            return gcd(p1, p2)\n\n        def lcm_of_primes(p1, p2, p3):\n            \"\"\"\n            Lowest Common Multiple of three prime numbers.\n            \"\"\"\n            return lcm(lcm_of_prime(p1, p2), p3)\n\n        def gcd_of_primes(p1, p2, p3):\n            \"\"\"\n            GCD of three prime numbers.\n            \"\"\"\n            return gcd(gcd(p1, p2), p3)\n\n        def lcm_of_primes_and_n(p1, p2, p3, n):\n            \"\"\"\n            Lowest Common Multiple of four prime numbers and the given number n.\n            \"\"\"\n            return lcm(lcm_of_primes(p1, p2, p3), n)\n\n        def gcd_of_primes_and_n(p1, p2, p3, n):\n            \"\"\"\n            GCD of four prime numbers and the given number n.\n            \"\"\"\n            return gcd(gcd_of_primes(p1, p2, p3), n)\n\n        def lcm_of_primes_and_n_plus_1(p1, p2, p3, n):\n            \"\"\"\n            Lowest Common Multiple of four prime numbers and the given number n+1.\n            \"\"\"\n            return lcm(lcm_of_primes_and_n(p1, p2, p3, n+1), n+1)\n\n        def gcd_of_primes_and_n_plus_1(p1, p2, p3, n):\n            \"\"\"\n            GCD of four prime numbers and the given number n+1.\n            \"\"\"\n            return gcd(gcd_of_primes_and_n(p1, p2, p3, n+1), n+1)\n\n        def lcm_of_primes_and_n_minus_1(p1, p2, p3, n):\n            \"\"\"\n            Lowest Common Multiple of four prime numbers and the given number n-1.\n            \"\"\"\n            return lcm(lcm_of_primes_and_n(p1, p2, p3, n-1), n-1)\n\n        def gcd_of_primes_and_n_minus_1(p1, p2, p3, n):\n            \"\"\"\n            GCD of four prime numbers and the given number n-1.\n            \"\"\"\n            return gcd(gcd_of_primes_and_n(p1, p2, p3, n-1), n-1)\n\n        def lcm_of_primes_and_n_plus_2(p1, p2, p3, n):\n            \"\"\"\n            Lowest Common Multiple of four prime numbers and the given number n+2.\n            \"\"\"\n            return lcm(lcm_of_primes_and_n(p1, p2, p3, n+2), n+2)\n\n        def gcd_of_primes_and_n_plus_2(p1, p2, p3, n):\n            \"\"\"\n            GCD of four prime numbers and the given number n+2.\n            \"\"\"\n            return gcd(gcd_of_primes_and_n(p1, p2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 3\n    else: \n        return 3 * is_polite(n-1) + 1\n\ndef nth_polite(n): \n    '''\n    Write a function to find the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1: \n        return \"Please enter a positive integer.\"\n    elif n == 1: \n        return 3\n    else: \n        return is_polite(n-1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    a = 1\n    b = 0\n    c = 1\n    count = 1\n    while count < n:\n        a, b, c = b, a + b, c + b\n        count += 1\n    return c"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Return True if n is the nth polite number, else False.\n    \"\"\"\n    if n == 1:\n        return True\n\n    elif n % 2 == 0:\n        if n % 4 == 0:\n            return False\n        elif n % 100 == 0:\n            return n % 400 == 0\n        else:\n            return True\n\n    else:\n        if n % 4 == 0:\n            return True\n        elif n % 100 == 0:\n            return n % 400!= 0\n        else:\n            return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize a list to store the numbers of each digit in the range [1, n]\n    digit_count = [0] * 10\n\n    # Initialize a variable to store the nth polite number\n    nth_polite = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Find the sum of the digits in the current number\n        current_sum = sum([int(digit) for digit in str(i)])\n\n        # Increment the digit count for each digit in the current number\n        for digit in str(i):\n            digit_count[int(digit)] += 1\n\n        # Check if the current number is a polite number\n        is_polite = True\n        for count in digit_count:\n            if count >= 3:\n                is_polite = False\n                break\n\n        # If the current number is a polite number, add it to the nth_polite variable\n        if is_polite:\n            nth_polite += i\n\n    # Return the nth polite number\n    return nth_polite"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n < 2:\n        return []\n    pairs = []\n    for i in range(n - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [tuple(l1[i:i+2]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return list(zip(l1[:-1], l1[1:]))"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function counts the number of pairs whose sum is equal to'sum' from the list of numbers 'arr'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Initialize the result list with an empty string\n    result = []\n    # Loop through each element of the first list\n    for i in li1:\n        # Check if the element is not present in the second list\n        if i not in li2:\n            # If it is not present, add it to the result list\n            result.append(i)\n    # Return the result list\n    return result"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create an empty list to store the difference\n    diff_list = []\n\n    # iterate over each item in both lists\n    for item in li1:\n        # if the item is not in li2, append it to the diff_list\n        if item not in li2:\n            diff_list.append(item)\n\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Creating a set of elements from both lists to find the difference\n    set1 = set(li1)\n    set2 = set(li2)\n    diff_set = set1 - set2\n    \n    # Converting the set to a list and returning it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the list of elements that are present in list 1 but not in list 2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements that are in li1 but not in li2.\n    '''\n    diff = []\n    for element in li1:\n        if element not in li2:\n            diff.append(element)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(n):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 3 # first odd number is 3\n    while count < n:\n        if num % 2!= 0:\n            sum += num ** 4\n            count += 1\n        num += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    num = 3\n    for i in range(n):\n        sum_of_fourth_powers += num**4\n        num += 2  # move to the next odd number\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of i\n        fourth_power = i ** 4\n        \n        # add the fourth power to the sum variable\n        sum += fourth_power\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        sum_of_fourth_powers += i**4\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            popped = stack.pop()\n            if popped!= i-1:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening = ['(', '{', '[']\n    closing = [')', '}', ']']\n    for i in exp:\n        if i in opening:\n            stack.append(i)\n        elif i in closing:\n            if not stack or stack.pop()!= opening.index(i):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            stack.pop()\n        elif exp[i].isalnum():\n            continue\n        else:\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    open_parentheses = {'(', '[', '{'}\n    close_parentheses = {')', ']', '}'}\n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes in a string and an integer K and removes all the words with K length from the string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words with length less than or equal to K\n    result = []\n    # Loop through the words and add them to the result list if their length is greater than K\n    for word in words:\n        if len(word) <= K:\n            result.append(word)\n    # Join the words in the result list into a single string\n    test_str =''.join(result)\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Create a list to store the words with length less than K\n    k_words = []\n\n    # Iterate over the words in the list\n    for word in words:\n        # If the length of the word is less than K, add it to the list\n        if len(word) < K:\n            k_words.append(word)\n\n    # Join the k_words list into a string with spaces between them\n    result =''.join(k_words)\n\n    # Return the result\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            match_object = re.search(pattern, text)\n            print(f\"Match found at position {match_object.start()} and occurrence {match_object.span()[0]}: {match}\")\n        return None\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            #print(match.group())\n            return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string.\n    It returns None if there is no match.\n    \"\"\"\n    try:\n        # Search for the pattern in the text using regular expressions\n        match = re.search(pattern, text)\n\n        # Check if match was found\n        if match:\n            # Return the occurrence and position of the pattern\n            return (match.group(), match.start(), match.end())\n        else:\n            # Return None if no match was found\n            return None\n    except Exception as e:\n        # If an exception occurs, print it and return None\n        print(\"An error occurred:\", e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        return matches[0]\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # check if the list is empty, if it is then there is no match\n    if not matches:\n        return None\n    # loop through the matches and return the index and occurrence of each match\n    for i, match in enumerate(matches):\n        start, end = match.span()\n        # return the index and occurrence of the match\n        return (i, start, end)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2!= 0:\n                    count += 1\n                if count > 1:\n                    return False\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if not nums[i]:\n                return False\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not any(num % 2 == 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # loop through each number in the list\n    for num in nums:\n        # check if the number is odd\n        if num % 2 == 1:\n            # if the number is odd, check if it appears in an odd index\n            for index in range(len(nums)):\n                if index % 2 == 0 and nums[index] == num:\n                    return False\n            # if we haven't found a number in an odd index, return True\n            return True\n    # if we've gone through the entire list without finding a number with an odd index, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not any(x % 2 == 1 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and nums[i] % 2 == nums[i+1] % 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if sum(nums[i-1:i+2]) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    prev_char = None\n    for char in test_str:\n        if char.lower() in vowels:\n            if prev_char is None or prev_char.lower() not in vowels:\n                count += 1\n        prev_char = char\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'} # creating a set of vowels for easy membership testing\n    count = 0 # initializing the count variable\n    \n    for i in range(len(test_str)-1): # iterating over the string from first to last character\n        if test_str[i] in vowels and test_str[i+1] in vowels: # checking if the characters at i and i+1 are vowels\n            count += 1 # incrementing the count if they are\n    \n    return count # returning the final count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    unique_sum = 0\n    # Iterate through the unique set and add its values to the sum\n    for num in unique_set:\n        unique_sum += num\n    # Return the sum of unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    # Create a set of unique elements in the list\n    unique_elements = set(arr)\n    # Initialize the sum of unique elements to zero\n    sum_unique = 0\n    # Iterate over the unique elements and add them to the sum\n    for elem in unique_elements:\n        sum_unique += elem\n    # Return the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    # loop through the list and increment the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # loop through the dictionary and add up the values that have a frequency of 1\n    for num, count in freq.items():\n        if count == 1:\n            non_repeated_sum += num\n    # return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the indices of non-repeated elements\n    indices = {}\n    # initialize the sum to zero\n    sum = 0\n    \n    # loop through the list\n    for i in range(len(arr)):\n        # if the element is already in the dictionary, skip it\n        if i in indices:\n            continue\n        # if the element is not already in the dictionary, add it and its index to the dictionary\n        else:\n            indices[i] = i\n            sum += arr[i]\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # Traverse through the list and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n            \n    # Create an empty list to store the non-repeated elements\n    non_repeated_list = []\n    \n    # Traverse through the dictionary and add elements to the non-repeated list if their frequency is greater than 1\n    for key, value in freq_dict.items():\n        if value > 1:\n            non_repeated_list.append(key)\n            \n    # Calculate the sum of the non-repeated elements\n    total_sum = 0\n    for num in non_repeated_list:\n        total_sum += num\n        \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n    # Initialize the sum variable to zero\n    sum_of_non_repeated = 0\n    # Iterate through the unique elements and add them to the sum variable\n    for element in unique_elements:\n        sum_of_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the unique set and add its elements to the sum\n    for num in unique_set: \n        sum += num\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Create a set of unique elements in the list\n    unique_elements = set(arr)\n\n    # Initialize a variable to store the sum of unique elements\n    sum_of_unique = 0\n\n    # Loop through the unique elements and add them to the sum_of_unique\n    for element in unique_elements:\n        sum_of_unique += element\n\n    # Return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # find the sum of non-repeated elements\n    sum_arr = [num for num in freq if freq[num] == 1]\n    return sum(sum_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # initialize the sum to 0\n    total_sum = 0\n    \n    # iterate through the dictionary and calculate the sum of non-repeated elements\n    for num, count in freq.items():\n        if count == 1:\n            total_sum += num\n    \n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(x) for k, x in groupby(list1) if len(list(x)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a dictionary to store the last element encountered so far and its count\n    last_element = {}\n\n    # Iterate over the list, keeping track of the last element encountered\n    for element in list1:\n        if element in last_element:\n            # If the current element is the same as the last one, increment its count\n            last_element[element] += 1\n        else:\n            # If the current element is not the same as the last one, add it to the dictionary with count 1\n            last_element[element] = 1\n\n    # Create a list to store the packed sublists\n    packed_sublists = []\n\n    # Iterate over the dictionary, adding each element to the sublist with its count\n    for element, count in last_element.items():\n        if count == 1:\n            packed_sublists.append(element)\n        else:\n            # If the count is greater than 1, create a new sublist with the element and its count\n            packed_sublists.append([element] * count)\n\n    # Return the packed sublists\n    return packed_sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # define a function to group consecutive elements of a list into sublists\n    def group_consecutive(iterable):\n        return groupby(iterable)\n\n    # iterate over each group of consecutive elements\n    packed_list = []\n    for _, group in group_consecutive(list1):\n        # if the group has more than one element, pack it into a sublist\n        if len(list(group)) > 1:\n            packed_list.append(list(group))\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and returns a new list, where each sublist contains consecutive duplicates of the original list elements.\n    '''\n    return list(groupby(sorted(lst), lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Given a list of integers, pack consecutive duplicates of elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    grouped = groupby(list1)\n    return [[k] + list(g) for k, g in grouped if not g.startswith('0')]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == next(iter(group))]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the counts of each unique list\n    counts = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n\n    # Return the dictionary of unique lists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_tuples = tuple(list1)\n    unique_tuples = set(list_tuples)\n    result = {}\n    for tup in unique_tuples:\n        count = list_tuples.count(tup)\n        result[tup] = count\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a list.\n\n    >>> unique_sublists([1, 2, 3, [4, 5], 6, 7, [8, 9], [1, 2, 3]])\n    {\n        (1, 2, 3): 1,\n        (4, 5): 1,\n        (6, 7): 1,\n        (8, 9): 1,\n        (1, 2, 3): 1\n    }\n    \"\"\"\n    sublists = {}\n    for sublist in lst:\n        if isinstance(sublist, list):\n            sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the counts of lists\n    counts = {}\n\n    # Loop through each list in the list1\n    for sublist in list1:\n\n        # Convert the list to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in counts:\n\n            # Increment the count of the tuple by 1\n            counts[tuple(sublist)] += 1\n\n        # If the tuple is not in the dictionary yet, add it and set its count to 1\n        else:\n            counts[tuple(sublist)] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = set()\n    for sublist in list1:\n        sublists.add(tuple(sublist))\n    return {sublist:list1.count(sublist) for sublist in sublists}"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for item in list1:\n        if item not in list_count:\n            list_count[tuple(item)] = 1\n        else:\n            list_count[tuple(item)] += 1\n    return list_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = set()\n    for item in list1:\n        if isinstance(item, list):\n            sublists.add(tuple(item))\n    return dict(map(lambda x: (x, list1.count(x)), sublists))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for sublist in list1:\n        if sublist not in list2:\n            list2.append(tuple(sublist))\n    count = {}\n    for sublist in list2:\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Using a set to store unique tuples of lists\n    unique_tuples = set()\n\n    # Loop through each list in the original list\n    for item in list1:\n        # Convert the list to a tuple\n        tup = tuple(item)\n        # Add the tuple to the set\n        unique_tuples.add(tup)\n\n    # Create an empty dictionary\n    dict_count = {}\n\n    # Loop through the set of unique tuples\n    for tup in unique_tuples:\n        # Check if the tuple is already in the dictionary\n        if tup in dict_count:\n            # Increment the count of the tuple\n            dict_count[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            dict_count[tup] = 1\n\n    return dict_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through each list in the main list\n    for sublist in list1:\n        \n        # Turn the list into a tuple and check if it's already in the dictionary\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n            \n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list and returns all the combinations of sums with tuples in the list.\n    '''\n\n    # Sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Find the sum of the first element of the list\n    sum_first = sorted_list[0][0]\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Use itertools.combinations() to find all combinations of sums with tuples\n    for combo in combinations(sorted_list, len(sorted_list[0])):\n\n        # Check if the sum of the current combination is equal to the sum of the first element of the list\n        if sum(combo) == sum_first:\n\n            # Add the current combination to the list of combinations\n            combinations_list.append(combo)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # We need to sort the list of tuples by their first element so that we can use the combinations function effectively\n    test_list = sorted(test_list, key=lambda x: x[0])\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n    # Find all pairs of tuples that add up to the given sum\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the current pair of tuples is equal to the given sum\n            if test_list[i][0] + test_list[j][0] == target_sum:\n                # Append the pair of tuples to the list of combinations\n                combinations_list.append((test_list[i], test_list[j]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    for i in range(2, n+1):\n        for j in range(1, n-i+1):\n            for combo in combinations(test_list, j):\n                s = sum(combo)\n                if s == i:\n                    print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combo = tuple(sorted(test_list[i] + test_list[j]))\n            if combo not in combinations_list:\n                combinations_list.append(combo)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def find_combinations_helper(arr, target_sum, cur_sum, index):\n        if cur_sum == target_sum:\n            yield tuple(arr[index])\n        elif cur_sum < target_sum:\n            for i in range(index, len(arr)):\n                if i > index and arr[i] == arr[i - 1]:\n                    continue\n                cur_sum += arr[i]\n                yield from find_combinations_helper(arr, target_sum, cur_sum, i + 1)\n                cur_sum -= arr[i]\n\n    for combination in combinations(test_list, len(test_list)):\n        if len(combination) < 2:\n            continue\n        target_sum = sum(combination)\n        for combination in find_combinations_helper(combination, target_sum, 0, 0):\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combination_list = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            combination_list.append(tuple(combo))\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Function to find the combinations of sums with tuples in the given tuple list\n    def find_combinations_helper(test_list, target, temp_set):\n        # Base case: If target becomes zero, return the set of combinations\n        if target == 0:\n            return temp_set\n\n        # Recursive case: Iterate through all combinations of tuples in the list\n        for i in range(len(test_list)):\n            # If the current tuple has more elements than the target, skip it\n            if len(test_list[i]) > target:\n                continue\n\n            # Remove the current tuple from the list to avoid duplicates\n            new_list = test_list[:i] + test_list[i+1:]\n\n            # Recursively call the function with updated list and target\n            new_temp_set = temp_set.copy()\n            new_temp_set.add(tuple(test_list[i]))\n            find_combinations_helper(new_list, target-test_list[i][0], new_temp_set)\n\n    # Initialize the target and temporary set\n    target = sum(test_list) // 2\n    temp_set = set()\n\n    # Call the helper function to find the combinations of sums with tuples in the given tuple list\n    find_combinations_helper(test_list, target, temp_set)\n\n    # Convert the set of combinations to list of tuples\n    result = list(temp_set)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # function to calculate the sum of a tuple\n    def sum_tuple(t):\n        return sum(t)\n    \n    # function to find the sum of two tuples\n    def find_sum(t1, t2):\n        return sum_tuple(t1) + sum_tuple(t2)\n    \n    # function to check if two tuples are equal\n    def is_same_tuple(t1, t2):\n        return sum_tuple(t1) == sum_tuple(t2)\n    \n    # iterating through each tuple in the list\n    for t in test_list:\n        # iterating through all possible pairs of tuples in the list\n        for i in combinations(test_list, len(t)):\n            # checking if the sum of the tuples is equal to the target sum\n            if find_sum(t, tuple(i)) == target_sum:\n                # checking if the tuples are equal\n                if is_same_tuple(t, tuple(i)):\n                    # printing the combination\n                    print(tuple(i))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = [sum(x) for x in test_list]\n    combs = list(combinations(sums, len(sums)))\n    result = []\n    for comb in combs:\n        if all(x in test_list for x in comb):\n            result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Sorting the tuple list\n    test_list.sort()\n\n    # Finding the unique combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Finding the combination of sums with current two tuples\n            combination = tuple(sorted(test_list[i] + test_list[j]))\n            if combination not in test_list:\n                # Adding the combination to the result list\n                result.append(combination)\n\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even.\n    '''\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a given number n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n\n    def count_divisors_helper(num, count=0):\n        \"\"\"\n        Helper function to count the number of divisors of a given number.\n        \"\"\"\n        if num < 2:\n            return count\n        if num % 2 == 0:\n            return count_divisors_helper(num // 2, count + 1)\n        else:\n            return count_divisors_helper(num - 1, count + 1)\n\n    divisors_count = count_divisors_helper(n)\n    divisors_even_count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_even_count += 1\n\n    if divisors_count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n and returns True if it has even number of divisors, else False.\n    '''\n    \n    # Function to calculate the number of divisors of an integer n\n    def count_div(n): \n        count = 0 \n        for i in range(1, int(math.sqrt(n))+1): \n            if n % i == 0: \n                count += 1 \n                if n//i!= i: \n                    count += 1 \n        return count\n    \n    # Calculate the count of divisors of n\n    count = count_div(n)\n    \n    # Check if the count of divisors is even or odd\n    if count % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer 'n' as input and returns True if the count of divisors is even and False otherwise.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    def count_div(num):\n        '''\n        This function recursively counts the number of divisors of a given number.\n        '''\n        div_count = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_count += 1\n                if num // i!= i:\n                    div_count += 1\n        if num > 1:\n            div_count += 1\n        return div_count\n\n    div_count = count_div(n)\n    even_div_count = div_count % 2 == 0\n    if even_div_count:\n        print(f\"{n} has an even number of divisors\")\n    else:\n        print(f\"{n} has an odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize variables to keep track of sum and current sum\n    sum_odd = 0\n    current_sum = 0\n    # Iterate through the array and calculate sum of odd length subarrays\n    for i in range(n):\n        if i % 2!= 0:\n            current_sum += arr[i]\n        if i % 2!= 0 and i > 0 and arr[i] == arr[i-1]:\n            # If current element is the same as the previous element, update current_sum\n            current_sum += arr[i]\n        if i % 2!= 0 and i + 1 < n and arr[i] == arr[i+1]:\n            # If current element is the same as the next element, update current_sum\n            current_sum += arr[i]\n        if i % 2!= 0:\n            # If current element is odd length, add current_sum to sum_odd\n            sum_odd += current_sum\n            current_sum = 0\n    # Add remaining odd elements to sum_odd\n    for i in range(n):\n        if i % 2!= 0 and arr[i]!= arr[i-1] and arr[i]!= arr[i+1]:\n            sum_odd += arr[i]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_of_subarrays = 0\n    \n    for i in range(n):\n        count += 1\n        if count % 2 == 1:\n            for j in range(i, n):\n                sum_of_subarrays += arr[j]\n                \n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    # Initializing the sum variable\n    sum_odd = 0\n\n    # Looping through each subarray of odd length in the array\n    for i in range(1, len(arr) + 1, 2):\n        # Initializing the subarray variable\n        subarray = arr[i - 1:i]\n        # Adding the sum of the subarray to the sum_odd variable\n        sum_odd += sum(subarray)\n\n    # Returning the sum_odd variable\n    return sum_odd\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total_sum += arr[j-2] - arr[j-4]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum_odd += arr[j]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        start = i\n        end = i\n        count = 1\n\n        while end < n:\n            end += 1\n            count += 1\n            if count % 2!= 0:\n                sum += arr[start:end]\n\n            if count % 2 == 0:\n                break\n\n            start = end\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    sum_of_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2!= 0:\n                sum_of_subarrays += sum(arr[i:j+1])\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum_odd_subarrays = 0\n    \n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2!= 0:\n            count += 1\n            sum_odd_subarrays += arr[i]\n    \n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j-i+1%2!=0:\n                sum += sum_subarray(arr[i:j+1])\n    return sum\n\ndef sum_subarray(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd_len = 0\n\n    # Initialize the sum of odd length subarrays\n    for i in range(n):\n        if i % 2 == 1:\n            sum_odd_len += arr[i]\n\n    for i in range(1, n):\n        # Check if the current element is even\n        if i % 2 == 0:\n            count += 1\n        else:\n            # Check if the sum of odd length subarrays is still odd\n            if sum_odd_len % 2 == 0:\n                count -= 1\n            sum_odd_len -= arr[i-1]\n            sum_odd_len += arr[i]\n\n    return sum_odd_len + (count * arr[-1])"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_value\n\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        h = 2 + (b - r) / (max_value - min_value)\n    elif max_value == b:\n        h = 4 + (r - g) / (max_value - min_value)\n\n    h = round(h * 60)\n\n    if h < 0:\n        h += 360\n\n    s = (max_value - min_value) / max_value\n\n    if max_value == 0:\n        s = 0\n\n    v = max_value\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red value (0-255)\n        g (int): Green value (0-255)\n        b (int): Blue value (0-255)\n\n    Returns:\n        h (float): Hue value in range of [0, 360)\n        s (float): Saturation value in range of [0, 1]\n        v (float): Value value in range of [0, 1]\n    \"\"\"\n\n    r, g, b = r/255, g/255, b/255\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    if delta == 0:\n        v = 0\n    else:\n        v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert the red, green and blue color values to floats\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Calculate the minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the value of the hue\n    if max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Convert the hue value to a percentage value\n    if hue < 0:\n        hue += 1\n\n    hue = hue * 60\n\n    # Calculate the saturation value\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate the value of the brightness\n    brightness = max_val\n\n    # Calculate the value of the hue in degrees\n    hue = hue % 360\n\n    # Convert the hue value to a float value\n    hue = float(hue)\n\n    # Return the hsv values as a tuple\n    return (hue, saturation, brightness)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    if max_val == min_val:\n        h = 0\n    else:\n        delta = max_val - min_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n            \n        if h < 0:\n            h += 6\n            \n        h = h * 60\n        if h < 0:\n            h += 360\n            \n        s = delta / (max_val + 0.00001)\n        \n    hsv_color = (h, s, v)\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    if max_rgb == min_rgb:\n        h = s = 0\n    else:\n        delta_rgb = max_rgb - min_rgb\n\n        if max_rgb == r:\n            h = (g - b) / delta_rgb\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta_rgb\n        else:\n            h = 4 + (r - g) / delta_rgb\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n        s = delta_rgb / max_rgb\n\n    v = max_rgb\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    \n    if max_c == min_c:\n        h = 0\n        s = 0\n    else:\n        delta = max_c - min_c\n        if max_c == r:\n            h = (g - b) / delta\n        elif max_c == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        h = h * 60\n        \n        if h < 0:\n            h += 360\n        \n        s = delta / max_c\n    \n    v = max_c\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    del_max = max_val - min_val\n    \n    h = 0\n    if del_max == 0:\n        h = 0\n    elif max_val == r:\n        h = ((g - b) / del_max) % 6\n    elif max_val == g:\n        h = (b - r) / del_max + 2\n    else:\n        h = (r - g) / del_max + 4\n    \n    h = h * 60\n    \n    s = 0\n    if del_max == 0:\n        s = 0\n    else:\n        s = del_max / max_val\n    \n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three parameters, r, g, and b, which represent the red, green, and blue components of an RGB color. \n    It then converts the color from the RGB color model to the HSV color model.\n    \"\"\"\n    # Convert R, G, and B to floating point numbers\n    r = float(r)/255.0\n    g = float(g)/255.0\n    b = float(b)/255.0\n    \n    # Find the minimum and maximum values of R, G, and B\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Find the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # If the difference is 0, return 0, 0, and the value of the color\n    if delta == 0:\n        h = s = v = delta\n        return (int(h*255), int(s*255), int(v*255))\n    \n    # Calculate the hue value based on the RGB color model\n    if r == max_val:\n        h = (g - b) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h/6\n    \n    # Calculate the saturation and value based on the RGB color model\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    s = s * 255\n    \n    # Calculate the value based on the RGB color model\n    v = max_val\n    \n    # Convert the hsv values to integers and return them\n    return (int(h*255), int(s*255), int(v*255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    delta = max_value - min_value\n    \n    if max_value == 0:\n        h = 0\n    else:\n        if max_value == r:\n            h = 60 * ((g - b) / delta)\n        elif max_value == g:\n            h = 60 * ((b - r) / delta) + 120\n        else:\n            h = 60 * ((r - g) / delta) + 240\n    \n    if delta == 0:\n        s = 0\n    else:\n        if max_value == r:\n            s = delta / (max_value + min_value)\n        elif max_value == g:\n            s = delta / (max_value + min_value)\n        else:\n            s = delta / (max_value + min_value)\n    \n    v = max_value\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \n    Parameters:\n    r (int): Red value from 0 to 255\n    g (int): Green value from 0 to 255\n    b (int): Blue value from 0 to 255\n    \n    Returns:\n    h (float): Hue value from 0 to 360 degrees\n    s (float): Saturation value from 0 to 1\n    v (float): Value value from 0 to 1\n    \n    \"\"\"\n    \n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    \n    h = 0\n    s = 0\n    v = max_color\n    \n    if max_color == min_color:\n        h = 0\n    elif max_color == r:\n        h = (g - b) / delta % 6\n    elif max_color == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h / 6.0\n    if h < 0:\n        h += 1\n    \n    s = delta / (1 - abs(2 * h - 1))\n    if max_color == 0:\n        s = 0\n    else:\n        s = s / max_color\n    \n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return \"No even and odd number found in the list\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of the first even and odd numbers in the list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        count += 1\n    if count == 0:\n        return 0\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0 or odd_count == 0:\n        return \"List should contain at least one even and one odd number.\"\n    \n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        product *= min(even_count, odd_count)\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    \n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    return count * list1[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n\n    even = 0\n    odd = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n\n    if even == 0:\n        return odd\n    elif odd == 0:\n        return even\n    else:\n        return even * odd"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Define a function that will split the string into a list\n    def split_string(string):\n        return string.split(',')\n\n    # Define a function that will convert each element in the list to an integer\n    def convert_list(list_str):\n        return [int(x.strip()) for x in list_str]\n\n    # Split the input string into a list of strings\n    list_str = split_string(test_str)\n\n    # Convert the list of strings to a list of integers\n    list_int = convert_list(list_str)\n\n    # Return the list of integers as a tuple\n    return tuple(list_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into individual strings separated by commas\n    tuple_str = test_str.split(',')\n    # Create a new tuple with each string converted to an integer\n    int_tuple = tuple(int(x) for x in tuple_str)\n    # Return the new tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for i in test_str:\n        try:\n            new_tuple.append(int(i))\n        except ValueError:\n            new_tuple.append(i)\n    return tuple(new_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas and spaces\n    str_list = test_str.split(',')\n    int_list = []\n    for i in str_list:\n        # Convert each string element to integer\n        int_list.append(int(i))\n    # Convert the list to tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by \",\" and convert each substring to integer\n    int_tuple = tuple(int(i) for i in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = [int(i) for i in str_list]\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    list_str = test_str.split(',')\n    \n    # Create an empty list to store the integer values\n    list_int = []\n    \n    # Loop through each string and convert it to an integer\n    for num_str in list_str:\n        num_int = int(num_str.strip())\n        list_int.append(num_int)\n    \n    # Convert the list to a tuple\n    return tuple(list_int)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(x) for x in test_str.split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, str):\n        try:\n            return tuple(int(x) for x in test_str.split(','))\n        except ValueError:\n            return None\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Convert string to tuple\n    test_tuple = tuple(test_str)\n\n    # Convert tuple to integer tuple\n    int_tuple = tuple(map(int, test_tuple))\n\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a) or a[idx]!= x:\n        return -1\n    else:\n        return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif x == a[index-1]:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the binary search algorithm to find the insertion point\n    index = bisect.bisect_right(a, x)\n\n    # Return the insertion point\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a{1}b{3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=.{3}b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    return match.group()"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{2}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{2})'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"This is a string with two b's.\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_tuple = tuple(test_list)\n    # Join the elements of the tuple with the separator specified in the string\n    new_tuple = separator.join(new_tuple)\n    # Convert the joined string back to a tuple\n    new_tuple = tuple(new_tuple)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given string to a list\n    test_list = list(test_str)\n    # Concatenate the given list with the given string\n    new_tuple = test_list + test_list\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for char in test_str:\n        new_list.append(char)\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i])\n    new_tuple = (test_str, *new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the list and string into a tuple\n    new_tuple = (test_list, test_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Combine the two lists and strings into a new list of tuples\n    combined_list = test_list + test_str\n    # Create a new tuple from the combined list\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Combine the list and string into a single tuple\n    new_tuple = (test_str, new_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(len(nums)) if j!= i])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if sum(nums[i:i+2]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    even_count = 0\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if not all(nums[i] % 2 == 0):\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # loop through the list and check if the even index contains even numbers\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    \n    # if we reach this point, then all even indices contain even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        count += nums[i]\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n    return even_count == len(nums) // 2"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while isinstance(test_tup, tuple):\n        test_tup = test_tup[0]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # create a new list to store the non-nested tuples\n    flat_list = []\n    # loop through the tuples in the given tuple\n    for tup in test_tup:\n        # if the tuple is not a nested tuple, add it to the flat list\n        if not isinstance(tup, tuple):\n            flat_list.append(tup)\n        # if the tuple is a nested tuple, recursively call the function on it and add the result to the flat list\n        else:\n            flat_list.extend(remove_nested(tup))\n    # return the flat list of non-nested tuples\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result += remove_nested(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup) == tuple:\n        return remove_nested(test_tup[0]) + remove_nested(test_tup[1:])\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        new_tup = []\n        for elem in test_tup:\n            if not isinstance(elem, tuple):\n                new_tup.append(elem)\n        return tuple(new_tup)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Remove nested tuples from the tuple\n    return test_tup[0], test_tup[1:]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    def remove_nested_helper(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                result.extend(remove_nested_helper(item))\n            else:\n                result.append(item)\n        return result\n\n    return remove_nested_helper(test_tup)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists as input and returns the total number of lists in the input.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i > 0 and arr[i] > x:\n        i -= 1\n    if i == 0 and arr[i]!= x:\n        return -1\n    else:\n        while i >= 0 and arr[i] == x:\n            i -= 1\n        return i + 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return -1 # if the array is empty, return -1\n    if arr[0] == x:\n        return 0 # if the first element is the search element, return 0\n    i = 0\n    while i < len(arr)-1 and arr[i] == x:\n        i += 1\n    return i # otherwise, return the index of the search element"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and a value x as input and returns the index of the last occurrence of x in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # x is present at last position\n            return mid\n\n    # x is not present in array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            while mid < right and arr[mid] == x:\n                mid += 1\n            return mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Initialize variables\n    left, right = 0, len(arr) - 1\n    last_position = -1\n\n    # Binary search for x in arr[left...right]\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            last_position = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(arr)\n    while i < n and arr[i]!= x:\n        i += 1\n    if i == n:\n        return -1\n    return i - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function takes an array and an element x as input and returns the last position of the element in the array.\n    If the element is not present in the array, it returns -1.\n    '''\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    # Binary search to find the last occurrence of x\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'^a.*b$')\n    return pattern.match(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b$'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)\\S*(?=\\sb)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'\\ba[^b]*b\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dictionary:\n        total += dictionary[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the range: \").split())\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    print(\"The sum of all odd natural numbers in the range is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n\n    # iterate through the range l to r (inclusive)\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add the number to the sum\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a Python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the range: \").split())\n    odd_sum = 0\n    \n    for i in range(l, r+1, 2):\n        odd_sum += i\n    \n    print(f\"Sum of all odd natural numbers within the range {l} to {r} is: {odd_sum}\")"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    This function takes an integer `n` as input and returns the sum of all odd natural numbers within the range [1, n].\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    if l % 2 == 0:\n        l += 1\n    s = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input from user for range of numbers\n    l = int(input(\"Enter the lower limit of the range (inclusive): \"))\n    r = int(input(\"Enter the upper limit of the range (inclusive): \"))\n\n    # initialize sum variable to 0\n    sum_odd = 0\n\n    # loop through range of numbers from l to r\n    for i in range(l, r+1):\n        # if the number is odd, add it to the sum variable\n        if i % 2!= 0:\n            sum_odd += i\n\n    # return the sum of all odd numbers in the range\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum to zero\n    sum_odd = 0\n    # loop through numbers from l to r (inclusive)\n    for i in range(n+1):\n        # check if i is odd (i.e., its remainder when divided by 2 is 1)\n        if i % 2!= 0:\n            # if i is odd, add it to the sum\n            sum_odd += i\n    # return the sum of all odd numbers within the range\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_array(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for num in arr:  \n        total += num  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF\n    n &= mask\n    d &= 31\n    n = (n << d) | (n >> (32 - d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # initialize the result\n    result = 0\n    # convert the number to binary string\n    binary_str = bin(n)[2:]\n    # get the number of bits in binary string\n    num_bits = len(binary_str)\n    # if d is greater than the number of bits in binary string, rotate d % num_bits times\n    d = d % num_bits\n    # calculate the number of bits to rotate\n    num_bits_to_rotate = num_bits - d\n    # rotate left the bits in binary string by num_bits_to_rotate positions\n    rotated_binary_str = binary_str[-num_bits_to_rotate:] + binary_str[:-num_bits_to_rotate]\n    # convert the rotated binary string to decimal\n    rotated_int = int(rotated_binary_str, 2)\n    # return the rotated decimal number\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary and split it into bits\n    bits = bin(n)[2:].zfill(32)\n    # Split the first d bits into two parts\n    a, b = bits[:d], bits[d:]\n    # Concatenate the two parts and convert it back to integer\n    n = int(a + b, 2)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    # Convert the input number to a binary string\n    num_bin = bin(n)[2:]\n    # If the binary string is less than d bits, we pad it with zeros\n    num_bin = '0'*(d - len(num_bin)) + num_bin\n    # Convert the binary string back to an integer\n    num_rotated = int(num_bin, 2)\n    # Return the rotated number\n    return num_rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):   \n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Get the binary representation of the input number\n    bin_num = bin(n)[2:]\n\n    # Check if the number is negative\n    if n < 0:\n        # If negative, convert to positive and add 2^32 to make it positive\n        n = (2 ** 32) + n\n\n    # Compute the total number of bits in the binary representation\n    total_bits = len(bin_num)\n\n    # Compute the number of bits to rotate\n    rotate_bits = d % total_bits\n\n    # If the number of bits to rotate is less than or equal to zero, just return the original number\n    if rotate_bits <= 0:\n        return n\n\n    # Compute the rotation count and the number of bits to shift\n    rotate_count = rotate_bits // total_bits\n    shift_bits = rotate_bits % total_bits\n\n    # Check if the shift is required\n    if shift_bits > 0:\n        # If the number of bits to shift is less than or equal to zero, rotate the whole number\n        if shift_bits <= total_bits:\n            shift_count = 1\n            shift_bits = total_bits\n        else:\n            shift_count = rotate_count\n            shift_bits = shift_bits - total_bits\n\n        # Shift the binary representation to the right by the number of bits to shift\n        bin_num = bin_num[:shift_bits] + bin_num[shift_bits:]\n\n        # Rotate the binary representation to the left by the number of bits to rotate\n        if rotate_count % 2 == 0:\n            rotate_count = rotate_count // 2\n            for _ in range(rotate_count):\n                bin_num = bin_num + bin_num[1:]\n        else:\n            rotate_count = (rotate_count - 1) // 2\n            for _ in range(rotate_count):\n                bin_num = bin_num + bin_num[:-1]\n\n    # Compute the final rotated number\n    return int(bin_num, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    # Initialize result as 0\n    result = 0\n    # Get the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n    # If d is greater than the number of bits, rotate d % num_bits bits to the left\n    if d > num_bits:\n        d = d % num_bits\n    # Rotate d bits to the left\n    for i in range(d):\n        # Check if bit at position i is set\n        if n & (1 << i):\n            # Set the bit at position i+d to 1\n            result |= (1 << (i+d))\n        # Shift all bits to the left by 1\n        n = n >> 1\n    # Return result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    # calculate the number of bits to rotate\n    num_bits = 32 # assume 32 bits\n    num_rotations = d % num_bits\n\n    # calculate the mask to extract the rightmost bits\n    mask = (1 << num_bits) - 1\n\n    # extract the rightmost d bits and left shift by d bits\n    rightmost_bits = (n >> num_rotations) & mask\n    n = (n << num_rotations) & ((1 << num_bits) - 1)\n\n    # insert the rightmost bits into the leftmost bits\n    n = n | rightmost_bits\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32-d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Extract the least significant d bits of n\n    mask = ((1 << d) - 1)\n    x = (n & mask) << (32 - d)\n\n    # Extract the most significant d bits of n\n    y = (n >> d) & ((1 << d) - 1)\n\n    # Combine x and y and return the result\n    return x | y"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string using regular expressions.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with empty string\n    text = re.sub('\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z),max(x,y,z)+1):\n        if i%x == 0 and i%y == 0 and i%z == 0:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n\n    if x == y and y == z:\n        count += 1\n\n    if x == y:\n        count += 1\n\n    if y == z:\n        count += 1\n\n    if x == z:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    if x == y == z:\n        count += 1\n    if x == z == y:\n        count += 1\n    if y == z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    if x!= y and y!= z and x!= z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    # Check if the array is already sorted or not\n    if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        return 0\n\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize the count of rotations\n    count = 0\n\n    # Traverse the array and count the number of rotations\n    for i in range(len(arr)):\n        if arr[i] < min_element:\n            count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, return 0\n    if n == 1 or (arr[0] <= arr[n-1]):\n        return 0\n    \n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        if arr[i]!= min_element:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # Find the maximum element in the array\n    max_val = max(arr)\n\n    # Traverse the array once to find the number of elements greater than the maximum element\n    for i in range(n):\n        if arr[i] > max_val:\n            count += 1\n\n    # If the array has an even number of elements greater than the maximum element, there is no rotation required\n    if count % 2 == 0:\n        return count\n\n    # If the array has an odd number of elements greater than the maximum element, the array can be rotated by a single element\n    count -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the minimum number of rotations required to generate the sorted array.\n\n    The function works by comparing each element of the input array with its adjacent element in the same direction. If the element is greater than its adjacent element, it means that the array is already sorted in the required direction. If the element is less than its adjacent element, it means that the array must be rotated in the required direction. We can use two pointers, one pointing to the leftmost and the other pointing to the rightmost element of the array. We then compare the elements pointed by both pointers, and move the pointer that points to the element that is smaller. We continue this process until we reach the middle of the array.\n\n    We also keep track of the number of rotations required to generate the sorted array. We start by assuming that the array is already sorted in both directions. We then move the pointers towards each other until they meet in the middle of the array. At this point, we know that the array is already sorted in both directions, so we update the count of rotations.\n\n    Finally, we return the count of rotations required.\n    \"\"\"\n\n    n = len(arr)\n    left = 0\n    right = n - 1\n\n    count = 0\n\n    while left < right:\n        # Move the left pointer towards the right until it meets the right pointer\n        while arr[left] < arr[right]:\n            left += 1\n\n        # Move the right pointer towards the left until it meets the left pointer\n        while arr[right] > arr[left]:\n            right -= 1\n\n        # If the pointers meet, then the array is already sorted in both directions\n        if left < right:\n            count += right - left + 1\n            # Move the pointers towards each other until they meet in the middle of the array\n            left += 1\n            right -= 1\n\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[i+1]:\n            return 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the count variable\n    count = 0\n    # Traverse through the array and check if the elements are in sorted order\n    for i in range(n):\n        if i == 0 or arr[i] >= arr[i-1]:\n            continue\n        else:\n            # If the elements are not in sorted order, increment the count\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    min_val = min(arr)\n\n    # If array is already sorted, return 0\n    if min_val == 0:\n        return 0\n\n    # Check if array can be sorted with 1 rotation\n    if min_val == arr[-1]:\n        return 1\n\n    # Find the maximum value in the array\n    max_val = max(arr)\n\n    # Find the number of rotations required\n    if max_val == 0:\n        return n\n\n    # If the array can be sorted in O(n) time, return n\n    if max_val == min_val + 1:\n        return n\n\n    count = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    arr.sort()\n    n = len(arr)\n    i, j = 0, n - 1\n    count = 0\n    while i < j:\n        if arr[i] > arr[j]:\n            count += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Find the smallest element in the array\n    min_element = min(arr)\n\n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        # Find the number of elements smaller than the current element\n        count += arr.count(arr[i])\n\n        # Swap the smallest element with the current element\n        if arr[i] == min_element:\n            arr[i], min_element = min_element, arr[i]\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        a = n\n        b = n\n        while b**2 <= a:\n            a = b\n            b = (a + b) / 2\n        if b**2 == a:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square or False otherwise.\n    A perfect square is a number that is the square of a perfect square.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    sqrt_n = int(n ** 0.5)\n    for i in range(1, sqrt_n+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n and checks whether it is a perfect square or not.\n    \"\"\"\n    # check if the given number is a perfect square\n    root = int(n ** 0.5)\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # check if n is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # check if n is an integer\n    if n % 1!= 0:\n        return False\n\n    # initialize variable to store square root\n    root = n\n\n    # iterate while square root is greater than 0\n    while root > 0:\n        # check if square root is equal to integer part of n\n        if root == int(root):\n            # check if square root is equal to n\n            if root ** 2 == n:\n                return True\n        # increment square root by 1\n        root -= 1\n\n    # if no perfect square is found, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n\n    # Calculate the square root of the given number\n    sqrt_n = n ** 0.5\n\n    # Check if the square root is an integer or not\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Calculate the square root of n\n    root = int(n ** 0.5)\n    # Check if the square root is an integer\n    if n % root == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # use the math.sqrt function to find the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    # check if the square of sqrt_n is equal to n\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    # Check if the number is already a perfect square\n    if n == int(math.sqrt(n)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is a positive integer\n    if n < 1:\n        return False\n    \n    # Initialize sum and count of digits\n    sum_of_digits = 0\n    count_of_digits = 0\n    \n    # Convert n to a string\n    num_str = str(n)\n    \n    # Loop through each digit in the string\n    for digit in num_str:\n        # Check if the digit is a digit and add it to the sum and count\n        if digit.isdigit():\n            sum_of_digits += int(digit)\n            count_of_digits += 1\n    \n    # Check if the sum of the digits is equal to the square of the count\n    if sum_of_digits**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n    arr: a list of integers\n\n    Returns:\n    True if the product of numbers in the list is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return False\n    elif len(arr) > 1:\n        for i in range(len(arr)):\n            if arr[i] % 2 == 1:\n                return False\n        return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for storing max sum and max list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through all possible combinations of lists\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            # Combine lists and calculate sum\n            combined_list = lists[i] + lists[j]\n            combined_sum = sum(combined_list)\n\n            # Update max sum and max list if combined sum is greater than current max sum\n            if combined_sum > max_sum:\n                max_sum = combined_sum\n                max_list = combined_list\n\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -1\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                curr_sum = lists[i][j][k]\n                for l in range(len(lists[i][j][k])):\n                    curr_sum += lists[i][j][k][l]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n                    max_list = [lists[i][j][k]]\n                elif curr_sum == max_sum:\n                    max_list.append(lists[i][j][k])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    :param lists: a list of lists of integers\n    :return: the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n\n    # Initialize the variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Initialize a variable to store the current sum\n    current_sum = 0\n\n    # Iterate over all elements in the first list in the list of lists\n    for element in lists[0]:\n        # Add the current element to the current sum\n        current_sum += element\n\n        # If the current sum is greater than the maximum sum so far, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Initialize a variable to store the list with the maximum sum\n    max_list = []\n\n    # Iterate over all elements in the list of lists\n    for element in lists[1:]:\n        # Initialize a variable to store the current sum\n        current_sum = 0\n\n        # Iterate over all elements in the current list\n        for current_element in element:\n            # Add the current element to the current sum\n            current_sum += current_element\n\n            # If the current sum is greater than the maximum sum so far, update the maximum sum and append the current list to the maximum list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [element]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in the same list of lists whose sum of elements is the highest.\n    '''\n    # Find the sum of all elements in all lists\n    all_sum = sum(sum(lst) for lst in lists)\n\n    # Create a dictionary to store the sum of each list and the index of the list in the input list\n    list_sums = {}\n    for i, lst in enumerate(lists):\n        list_sums[lst] = i\n\n    # Find the maximum sum of elements in a list by finding the sum of all elements in the lists and subtracting the sum of their elements\n    max_sum = all_sum\n    max_list = []\n\n    # Iterate through all lists and find the sum of elements in each list and the index of the list in the input list\n    for i, lst in enumerate(lists):\n        curr_sum = sum(lst) - list_sums[lst]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and the list containing it\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = [lst]\n        elif curr_sum == max_sum:\n            max_list.append(lst)\n\n    # Return the list containing the maximum sum of elements\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = lst\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through each list in the input list of lists\n    for list in lists:\n        # Calculate the sum of all elements in the list\n        total_sum = sum(list)\n\n        # Check if the sum is greater than the current max sum\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Given a list of lists, return the list in the list whose sum of elements is the highest.\n    \"\"\"\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            temp_sum = lists[i][j]\n            for k in range(len(lists)):\n                if i!= k:\n                    temp_sum += lists[k][j]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_list = [lists[i][j]]\n            elif temp_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = None\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lists[i]\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    return result"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    max_run = 0\n    run_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i - run_start + 1 > max_run:\n                max_run = i - run_start + 1\n                run_start = i\n        else:\n            run_start = i\n\n    if max_run == 0:\n        return None\n    else:\n        return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment the current run and check if it's longer than the maximum run\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        # If the current character is not uppercase, reset the current run\n        else:\n            current_run = 0\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    uppercase_count = 0\n    current_run_length = 0\n    max_run_length = 0\n    start_index = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n        # Check if the character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment the count and length of the current run\n            uppercase_count += 1\n            current_run_length += 1\n\n            # If the count and length of the current run is greater than the maximum run, update the maximum values\n            if current_run_length > max_run_length:\n                max_run_length = current_run_length\n                start_index = i - max_run_length + 1\n        else:\n            # If it's not uppercase, reset the count and length of the current run\n            current_run_length = 0\n\n    # Return the maximum run of uppercase characters and its starting index\n    return (max_run_length, start_index)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run found so far\n    current_run = 0\n    max_run = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase and we have not encountered another uppercase character in the current run, increment the current run count\n        if char.isupper() and current_run == 0:\n            current_run += 1\n        # If we have found an uppercase character in the current run, and we have not encountered another uppercase character in the current run, update the maximum run\n        elif char.isupper() and current_run > 0:\n            max_run = max(max_run, current_run)\n            current_run = 1\n        # If we have encountered a non-uppercase character in the current run, reset the current run count to 0\n        else:\n            current_run = 0\n\n    # If there is a current run at the end of the string, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables to store the current run of uppercase characters\n    current_run = 0\n    max_run = 0\n\n    # Loop through each character in the string\n    for char in test_str:\n        # If the current character is uppercase and not the start of a new run, increment the current run\n        if char.isupper() and current_run == 0:\n            current_run += 1\n        # If the current character is not uppercase or the end of a run, update the maximum run if necessary\n        elif not char.isupper() or current_run > max_run:\n            max_run = current_run\n            current_run = 0\n\n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables for max run and current run\n    max_run = 0\n    current_run = 0\n    # loop through each character in the string\n    for char in test_str:\n        # check if character is uppercase\n        if char.isupper():\n            # if character is uppercase, add to current run\n            current_run += 1\n            # if current run is longer than max run, update max run\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # if character is not uppercase, reset current run to 0\n            current_run = 0\n    # return max run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    curr_run = 0\n    uppercase_count = 0\n    # Iterate over each character in the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increment the count and check if this is the maximum run so far\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if curr_run < uppercase_count:\n                curr_run = uppercase_count\n                max_run = i\n        # If the character is not uppercase, reset the count and check if this is the maximum run so far\n        else:\n            uppercase_count = 0\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    # Check if the maximum run is longer than the current maximum run\n    if curr_run > max_run:\n        max_run = curr_run\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 1\n    max_run = 1\n    current_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_char = test_str[i]\n            run += 1\n        else:\n            if run > max_run:\n                max_run = run\n            run = 1\n    if run > max_run:\n        max_run = run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_run = []\n    current_run = []\n    for char in test_str:\n        if char.isupper():\n            current_run.append(char)\n        else:\n            if len(current_run) > len(uppercase_run) or (len(current_run) == len(uppercase_run) and current_run > uppercase_run):\n                uppercase_run = current_run\n            current_run = []\n    return len(uppercase_run)"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if (K in test_tup[0]) or (K in test_tup[1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (K in test_tup) or (K in test_tup[::-1])"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for elem in test_tup:\n        if elem == K:\n            k_count += 1\n    return k_count"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count == len(test_tup):\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Loop through each element in the tuple\n    for elem in test_tup:\n        # Check if the element is equal to K\n        if elem == K:\n            return True\n    # If no element in the tuple is equal to K, return False\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if tup[0] == K:\n            print(\"The first element of the tuple contains the value of K.\")\n            return\n    print(\"The given tuple does not contain the value of K.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for item in test_tup:\n        if item == K:\n            count += 1\n    return count"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_list = []\n    for tup in test_tup:\n        for elem in tup:\n            k_list.append(elem)\n    return K in k_list"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return True\n            else:\n                return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The element at index\", i, \"in the first tuple is greater than the element at the same index in the second tuple.\")\n            return\n    \n    print(\"Both tuples are sorted in ascending order.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tupples must have the same length.')\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # Loop through each element in the second tuple\n    for i in range(len(test_tup2)):\n        # Check if the element in the second tuple is smaller than the element in the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    # If all the elements in the second tuple are smaller than their corresponding element in the first tuple, then return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths do not match!\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Tuple elements are not in order!\")\n            return False\n            \n    print(\"All elements in the tuples are smaller than their corresponding elements in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    }
]