[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    # Convert tuples to lists to work with them\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return []\n\n    # Find the shared elements\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared:\n            shared.append(element)\n\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # extract the values from the tuples\n    list1 = [tup[0] for tup in test_tup1]\n    list2 = [tup[0] for tup in test_tup2]\n    # convert the lists into sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    # convert the intersection set back to a list and return\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = set(test_tup1) & set(test_tup2)\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Find the shared elements\n    shared = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared.append(test_tup1[i])\n    \n    # Return the shared elements\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # get the first list\n    lst1 = test_tup1[0]\n    # get the second list\n    lst2 = test_tup2[0]\n    # create a set for lst1\n    set1 = set(lst1)\n    # create a set for lst2\n    set2 = set(lst2)\n    # find the shared elements in the sets\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Filter out non-unique elements in both lists\n    unique_tup1 = list(set(test_tup1))\n    unique_tup2 = list(set(test_tup2))\n\n    # Find the intersection of the unique lists\n    shared = [x for x in unique_tup1 if x in unique_tup2]\n\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check for even numbers\n    if n % 2 == 0:\n        return True\n\n    # check for odd numbers greater than 3\n    if n > 3 and n % 3 == 0:\n        return True\n\n    # check for odd numbers greater than 5\n    if n > 5 and n % 5 == 0:\n        return True\n\n    # check for odd numbers greater than 7\n    if n > 7 and n % 7 == 0:\n        return True\n\n    # check for odd numbers greater than 11\n    if n > 11 and n % 11 == 0:\n        return True\n\n    # check for odd numbers greater than 13\n    if n > 13 and n % 13 == 0:\n        return True\n\n    # check for odd numbers greater than 17\n    if n > 17 and n % 17 == 0:\n        return True\n\n    # check for odd numbers greater than 19\n    if n > 19 and n % 19 == 0:\n        return True\n\n    # check for odd numbers greater than 23\n    if n > 23 and n % 23 == 0:\n        return True\n\n    # check for odd numbers greater than 29\n    if n > 29 and n % 29 == 0:\n        return True\n\n    # check for odd numbers greater than 31\n    if n > 31 and n % 31 == 0:\n        return True\n\n    # check for odd numbers greater than 37\n    if n > 37 and n % 37 == 0:\n        return True\n\n    # check for odd numbers greater than 41\n    if n > 41 and n % 41 == 0:\n        return True\n\n    # check for odd numbers greater than 43\n    if n > 43 and n % 43 == 0:\n        return True\n\n    # check for odd numbers greater than 47\n    if n > 47 and n % 47 == 0:\n        return True\n\n    # check for odd numbers greater than 53\n    if n > 53 and n % 53 == 0:\n        return True\n\n    # check for odd numbers greater than 59\n    if n > 59 and n % 59 == 0:\n        return True\n\n    # check for odd numbers greater than 61\n    if n > 61 and n % 61 == 0:\n        return True\n\n    # check for odd numbers greater than 67\n    if n > 67 and n % 67 == 0:\n        return True\n\n    # check for odd numbers greater than 71\n    if n > 71 and n % 71 == 0:\n        return True\n\n    # check for odd numbers greater than 73\n    if n > 73 and n % 73 == 0:\n        return True\n\n    # check for odd numbers greater than 79\n    if n > 79 and n % 79 == 0:\n        return True\n\n    # check for odd numbers greater than 83\n    if n > 83 and n % 83 == 0:\n        return True\n\n    # check for odd numbers greater than 89\n    if n > 89 and n % 89 == 0:\n        return True\n\n    # check for odd numbers greater than 97\n    if n > 97 and n % 97 == 0:\n        return True\n\n    # check for odd numbers greater than 101\n    if n > 101 and n % 101 == 0:\n        return True\n\n    # check for odd numbers greater than 103\n    if n > 103 and n % 103 == 0:\n        return True\n\n    # check for odd numbers greater than 107\n    if n > 107 and n % 107 == 0:\n        return True\n\n    # check for odd numbers greater than 109\n    if n > 109 and n % 109 == 0:\n        return True\n\n    # check for odd numbers greater than 113\n    if n > 113 and n % 113 == 0:\n        return True\n\n    # check for odd numbers greater than 127\n    if n > 127 and n % 127 == 0:\n        return True\n\n    # check for odd numbers greater than 131\n    if n > 131 and n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return True\n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n    # check odd numbers up to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n    # if no divisors found, n is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return True\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check for prime number\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min heap and push the first n elements\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -nums[i])\n\n    # Pop the largest elements from the heap and append them to the result list\n    for i in range(n, len(nums)):\n        # Pop the smallest element from the heap and append it to the result list\n        heapq.heappush(max_heap, -heapq.heappop(max_heap))\n        # Pop the smallest element from the heap and append it to the result list\n        if len(max_heap) == 1:\n            heapq.heappush(max_heap, -heapq.heappop(max_heap))\n        # Pop the smallest element from the heap and append it to the result list\n        if len(max_heap) == 2:\n            heapq.heappush(max_heap, -heapq.heappop(max_heap))\n\n    # Return the result list\n    return [-x for x in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            hq.heappushpop(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers and an integer n as input and returns the n largest numbers in descending order.\n    The numbers are first sorted in descending order using the built-in sort() function.\n    Then, the n largest numbers are extracted from the sorted list using a heap.\n    \"\"\"\n    heap = nums[:n]\n    hq.heapify(heap)\n    for num in nums[n:]:\n        if num > hq.heappop(heap):\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap from the first n numbers\n    min_heap = hq.nsmallest(n, nums)\n    # extract the largest n numbers from the min-heap\n    result = []\n    while len(min_heap) > 0:\n        result.append(min_heap[0])\n        min_heap = hq.nsmallest(len(min_heap), min_heap[1:])\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, -num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappushpop(max_heap, -num)\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes in a list of numbers and the number of largest elements to find, and returns\n    a list of the n largest integers in descending order.\n    \"\"\"\n    # create a min heap of size n, and add the first n elements of the input list\n    max_heap = [max(nums[:n])]\n    for num in nums[n:]:\n        # if the current number is greater than the maximum element in the heap, pop the maximum element and add the current number\n        if num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n        # if the current number is not greater than the maximum element, just add it to the heap\n        else:\n            hq.heappush(max_heap, num)\n    # return the n largest elements in descending order\n    return max_heap[0]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize an empty max heap\n    max_heap = []\n    # Add the first n elements to the max heap\n    for i in range(n):\n        heapq.heappush(max_heap, nums[i])\n    # Iterate over the remaining elements of the list\n    for i in range(n, len(nums)):\n        # If the current element is greater than the maximum element, pop the maximum element and push the current element\n        if nums[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, nums[i])\n    # Return the maximum n elements of the max heap in descending order\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    \n    # Remove all elements from the min-heap and add the remaining elements to a new list\n    largest = []\n    for num in nums:\n        if num not in heap:\n            heapq.heappush(heap, num)\n            if len(heap) > n:\n                hq.heappop(heap)\n        else:\n            largest.append(num)\n    \n    return largest"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    while x & (x-1)!= 0: # while there is a bit set to 1\n        x &= x-1 # clear the set bit\n    return x == 1 # if there are no set bits, x will be 1 after the loop\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        while x % 2 == 0:\n            x //= 2\n        if x == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Returns True if x is a power of two, False otherwise.\n\n    >>> is_Power_Of_Two(2)\n    True\n    >>> is_Power_Of_Two(3)\n    False\n    >>> is_Power_Of_Two(8)\n    True\n    >>> is_Power_Of_Two(9)\n    False\n    \"\"\"\n\n    if x == 0:\n        return False\n\n    if x & (x - 1) == 0:\n        return True\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = bin(x)[2:]\n    y = bin(x+1)[2:]\n    return (x!=y)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if n & (n - 1) == 0:  # if n has only one bit set\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the integer to binary and check if the length of the binary string is odd or even\n    if len(bin(x)[2:]) % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Remove the last bit of the first number (x)\n    x &= (x-1)\n\n    # Check if the new number is 0\n    return (x == 0)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    if x == 1: \n        return True\n    if x % 2 == 0: \n        return False\n    if x % 2 == 1: \n        return True\n    while x % 2 == 0: \n        x /= 2\n    while x % 2 == 1: \n        x /= 2\n    return x == 1"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # convert text to lowercase and split the string into words\n    words = text.lower().split()\n    # initialize an empty list to store the words with at least 4 characters\n    long_words = []\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is at least 4 characters long\n        if len(word) >= 4:\n            # append the word to the list of long words\n            long_words.append(word)\n    # return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use the regular expression to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression pattern to match words\n    pattern = r'\\b\\w{4,}\\b'\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words which are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out words which are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    # Return the filtered list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num * num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i+1\n    return n//2+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # initialize an empty dictionary to store the frequency of each character\n    freq = {}\n\n    # iterate through the string and count the frequency of each character\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the maximum frequency\n    max_freq = max(freq.values())\n\n    # iterate through the string again and count the frequency of each character after rotation\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] == str[j-1:i]:\n                for char in str[i:j]:\n                    if char in freq:\n                        freq[char] -= 1\n                        if freq[char] == 0:\n                            del freq[char]\n\n    # find the minimum number of rotations required\n    min_rotations = 0\n    for freq_count in freq.values():\n        min_rotations += freq_count\n\n    return min_rotations - max_freq"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Initialize an empty list to store the counts of each character in the string\n    char_counts = []\n\n    # Loop through each character in the string\n    for char in str:\n        # If the character is not already in the char_counts list, add it with a count of 1\n        if char not in char_counts:\n            char_counts.append((char, 1))\n        # If the character is already in the list, increment its count by 1\n        else:\n            index = char_counts.index(char)\n            char_counts[index] = (char, char_counts[index][1] + 1)\n\n    # Initialize an empty list to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Loop through each character in the char_counts list\n    for count, char in char_counts:\n        # If the count is greater than 1, increment the min_rotations variable by 1\n        if count > 1:\n            min_rotations += 1\n\n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    # create a set of all unique characters in the string\n    char_set = set(str)\n    # loop through all unique characters\n    for char in char_set: \n        # count the number of times the character appears in the string\n        count = str.count(char)\n        # calculate the number of rotations required for this character\n        rotations = count // 2\n        # check if there are any odd number of rotations required for this character\n        if count % 2 == 1: \n            # increment the rotation count if there are odd number of rotations required\n            rotations += 1\n        # update the minimum number of rotations required if this is the first time we have seen this character or if the current rotation count is less than the current minimum rotation count\n        if char not in rotation_counts or rotations < rotation_counts[char]:\n            rotation_counts[char] = rotations\n    # find the minimum number of rotations required\n    min_rotations = min(rotation_counts.values())\n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # Convert string to list of characters\n    chars = list(str)\n\n    # Calculate the frequency of each character\n    freq = {}\n    for char in chars:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Calculate the minimum rotations required\n    min_rotations = 0\n    for char in freq:\n        if freq[char] > 0:\n            min_rotations += freq[char] - 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        # check for rotations\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                # found a rotation\n                # determine how many rotations are required to get the original string\n                count = 1\n                while j+count < n and str[j+count] == str[i]:\n                    count += 1\n                return count-1\n    # no rotations found\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    # Find all possible rotations of the string \n    rotations = [str[::-1]] \n    for i in range(n): \n        for j in range(i+1, n): \n            rotations.append(str[i:j+1][::-1] + str[j:i:-1][::-1]) \n    # Find the minimum number of rotations required \n    min_rotations = n \n    for i in range(n): \n        min_rotations = min(min_rotations, rotations.count(str[::-1])) \n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Check if the string is empty\n    if not str:\n        return 0\n\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize a dictionary to store the frequency of characters in the string\n    freq = {}\n\n    # Iterate through the string and update the frequency dictionary\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Check if the two substrings are equal after rotating\n            if str[i:j] == str[j - 1:i - 1][::-1]:\n                # Calculate the minimum number of rotations required to get the same string\n                min_rotations = 0\n                while str[i:j]!= str[j - 1:i - 1][::-1]:\n                    min_rotations += 1\n                    # Rotate the string by one character to the left\n                    str = str[:j - 1] + str[j - 2] + str[j - 1:i] + str[i] + str[i:j - 1]\n                    # Update the frequency dictionary\n                    for char in str:\n                        freq[char] = freq.get(char, 0) - 1\n                        freq[char] = freq.get(char, 0) + 1\n                return min_rotations + 1\n\n    # If no rotations are found, return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    n = len(str)\n    for i in range(n//2): \n        if str[i]!= str[n-1-i]: \n            rotations += 1\n            break \n    return rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # first, create a set of all possible rotations of the input string\n    rotations = set([str[::-1]])\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            rotations.add(str[i:j][::-1])\n\n    # count the number of rotations in the set\n    count = len(rotations)\n\n    # return the minimum number of rotations required\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find index of first occurrence of character in string\n    first_occ = s.find(ch)\n\n    # If character is not found, return original string\n    if first_occ == -1:\n        return s\n\n    # Find index of last occurrence of character in string\n    last_occ = s.rfind(ch)\n\n    # If character is not found, return original string\n    if last_occ == -1:\n        return s\n\n    # Remove first and last occurrence of character in string\n    return s[:first_occ] + s[last_occ+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #initialize an empty list to store the result string\n    result = []\n    #loop through each character in the input string\n    for char in s:\n        #if the character is not the given character, append it to the result list\n        if char!= ch:\n            result.append(char)\n    #return the result string after removing the first and last occurrence of the given character\n    return ''.join(result)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    s = s.replace(ch, \"\")\n    if ch in s:\n        s = s.replace(ch, \"\")\n    if ch in s:\n        s = s.replace(ch, \"\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, \"\", 1) + s.replace(ch, \"\", -1)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is not present in the string\n    if ch not in s:\n        return \"Character not found in the string\"\n    \n    # Split the string into two parts using the character as a delimiter\n    parts = s.split(ch)\n    \n    # Check if the first part is empty\n    if not parts[0]:\n        parts.pop(0)\n    \n    # Check if the last part is empty\n    if not parts[-1]:\n        parts.pop()\n    \n    # Join the two parts using the character as a delimiter\n    return ch.join(parts)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    charList = list(s)\n    # Find the index of the first occurrence of the character to be removed\n    firstIndex = charList.index(ch)\n    # Find the index of the last occurrence of the character to be removed\n    lastIndex = charList.rindex(ch)\n    # Remove the first and last occurrence of the character from the string\n    charList = charList[:firstIndex] + charList[firstIndex+1:lastIndex] + charList[lastIndex+1:]\n    # Convert the list of characters back to a string and return it\n    return ''.join(charList)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #initialize the index variables\n    left = 0\n    right = len(s)-1\n    \n    #loop through the string until the left index is greater than the right index\n    while left <= right:\n        #if the character at the left index is equal to the given character\n        if s[left] == ch:\n            #increment the left index by 1\n            left += 1\n        #if the character at the right index is equal to the given character\n        elif s[right] == ch:\n            #decrement the right index by 1\n            right -= 1\n        #if the characters are not equal to the given character, move both the left and right indices one index forward\n        else:\n            left += 1\n            right -= 1\n            \n    #return the string without the given character\n    return s[:left] + s[right+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    if s.count(ch) >= 2:\n        s = s.replace(ch, \"\", 1)\n    if s.count(ch) >= 2:\n        s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Remove first occurrence of the character from the string\n    s = s.replace(ch, '', 1)\n    # Remove last occurrence of the character from the string\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    chars = list(s)\n    \n    # Initialize the first and last occurrence indices to -1\n    first_occ_index = -1\n    last_occ_index = -1\n    \n    # Traverse the list of characters and find the indices of first and last occurrences of the character\n    for i in range(len(chars)):\n        if chars[i] == ch:\n            if first_occ_index == -1:\n                first_occ_index = i\n            last_occ_index = i\n            \n    # If there are no occurrences of the character, return the original string\n    if first_occ_index == -1 and last_occ_index == -1:\n        return s\n    \n    # If there are no occurrences of the character in the first half of the string, return the last half of the string\n    elif first_occ_index == -1:\n        return s[last_occ_index+1:]\n    \n    # If there are no occurrences of the character in the last half of the string, return the first half of the string\n    elif last_occ_index == -1:\n        return s[:first_occ_index]\n    \n    # If there are occurrences of the character in both halves of the string, remove the first and last occurrences and return the remaining string\n    else:\n        return ''.join(chars[first_occ_index+1:last_occ_index])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the minimum value in the current row and swap with the first element in the row\n        min_val = min(M[i])\n        for j in range(1, n):\n            if M[i][j] < min_val:\n                M[i][j], M[i][0] = M[i][0], M[i][j]\n                break\n    # Sort the matrix in row-wise order using merge sort algorithm\n    for i in range(1, n):\n        left = [[] for _ in range(n)]\n        right = [[] for _ in range(n)]\n        # Divide the matrix into two halves\n        for j in range(n):\n            if j < i:\n                left[j] = M[j][:i]\n            else:\n                left[j] = M[j][i:]\n            if j < n-i:\n                right[j] = M[j+i][:n-i]\n            else:\n                right[j] = M[j+i][n-i:]\n        # Sort the two halves in ascending order\n        for j in range(n):\n            left[j] = sort_matrix(left[j])\n        for j in range(n):\n            right[j] = sort_matrix(right[j])\n        # Merge the two sorted halves\n        for j in range(n):\n            M[j][:i] = left[j][:i]\n            M[j][i:] = left[j][i:]\n            M[j][i+i:] = right[j][:n-i]\n            M[j][i+i+n-i:] = right[j][n-i:]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the row\n        for j in range(i+1, len(M[i])):\n            # calculate the sum of the current row and the element in the current row\n            current_sum = sum(M[i]) + M[j]\n            # if the sum of the current row is less than the sum of the row above it, swap the rows\n            if current_sum < sum(M[i-1]) + M[i-1][j]:\n                M[i], M[i-1] = M[i-1], M[i]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to store the sorted matrix\n    sorted_M = []\n\n    # Loop through each row in the matrix\n    for row in M:\n        # Find the sum of the row\n        row_sum = sum(row)\n\n        # Loop through each element in the row\n        for i in range(len(row)):\n            # Check if the current element is smaller than the current row_sum\n            if row[i] < row_sum:\n                # If so, swap it with the element at the current position\n                row[i], row[row.index(row_sum)] = row[row.index(row_sum)], row[i]\n                break\n\n            # If not, check if the current element is greater than the current row_sum\n            elif row[i] > row_sum:\n                # If so, append the element at the current position to the sorted_M list and move on to the next element\n                sorted_M.append(row[i])\n                break\n\n            # If the element is equal to the current row_sum, move on to the next element\n            else:\n                continue\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Initialize the count variable\n    count = 0\n    # Loop through the matrix\n    for i in range(len(M)):\n        # Initialize the row with the largest sum\n        max_sum = M[i][0]\n        # Loop through the columns of the row\n        for j in range(len(M[i])):\n            # Update the count variable\n            count += M[i][j]\n            # Update the max_sum variable if the current column sum is greater\n            if M[i][j] > max_sum:\n                max_sum = M[i][j]\n        # Update the count variable for the next row\n        count -= M[i][0]\n        # Append the max_sum row to the final sorted matrix\n        M[i].append(max_sum)\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # transpose the matrix\n    M = [[M[j][i] for j in range(len(M))] for i in range(len(M[0]))]\n\n    # initialize the sums array\n    sums = [sum(row) for row in M]\n\n    # sort the matrix using the sums array\n    M = [sorted(row) for row in M]\n\n    # transpose the matrix back\n    M = [[M[j][i] for j in range(len(M))] for i in range(len(M[0]))]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sorted matrix with zeros\n    sorted_matrix = [[0 for j in range(len(M))] for i in range(len(M))]\n\n    # Initialize the sum of rows for each element\n    row_sums = [[0 for j in range(len(M[i]))] for i in range(len(M))]\n\n    # Calculate the sum of each row for each element\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            row_sums[i][j] = sum(M[i])\n\n    # Sort the matrix in ascending order based on the sum of its rows\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sorted_matrix[i][j] = M[i][j]\n            for k in range(i):\n                if row_sums[i][j] > row_sums[k][j]:\n                    sorted_matrix[i][j], sorted_matrix[k][j] = sorted_matrix[k][j], sorted_matrix[i][j]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples representing each row in the matrix\n    rows = [(row_sum, row) for row in M]\n\n    # Sort the list of tuples by the first element (the sum of the row)\n    rows.sort()\n\n    # Extract the sorted rows from the sorted list of tuples\n    sorted_rows = [row for row_sum, row in rows]\n\n    # Convert the list of rows back into a matrix\n    sorted_matrix = [[row[j] for j in range(len(row))] for row in sorted_rows]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Check if the input matrix is valid\n    if not all(len(row) == len(M[0]) for row in M):\n        raise ValueError(\"The input matrix must be a rectangular array.\")\n    \n    # Find the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the row sums\n    M.sort(key=lambda x: row_sums.index(sum(x)))\n    \n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h) / 3\n    print(\"The Volume of the triangular prism is: \", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h # Formula to find the volume of a triangular prism\n    print(\"The volume of the triangular prism is:\", V) "
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, width, and height of a triangular prism and returns the volume.\n    \"\"\"\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n\n    # Formula for Volume of a triangular prism \n    V = (1/3) * l * b * h \n\n    # Return the calculated volume \n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume\n    V = (l * b * h) / 3\n\n    # Return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'^[a-z]*[_][a-z]*$'\n    return re.match(pattern, text)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])(?=[a-z])(?=[A-Z])(?=[a-zA-Z])[a-z]+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define regex pattern for lowercase letters followed by an underscore\n    pattern = r'([a-z][a-z_]*)'\n\n    # Use re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # If match is not None, then the input text contains a sequence of lowercase letters joined with an underscore\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r\"(?<![a-z])(?=[a-z])\"\n    \n    pattern = re.compile(regex)\n    matches = pattern.findall(text)\n    \n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z]*_[a-z]*'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<!_)\\b[a-z]*[_a-z]*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![\\w\\d])([a-z]+)_+([a-z]+)(?![\\w\\d])'\n    match = re.match(pattern, text, re.IGNORECASE)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=[A-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Use regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<![A-Z])([a-z]+)_+(?![A-Z])'\n\n    # Use re.search() to search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = set('aeiouAEIOU')\n    filtered_string = ''.join([char for char in string if char not in chars_to_remove])\n    return filtered_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert string to list of characters\n    char_list = list(string)\n    \n    # Remove characters from the first string which are present in the second string\n    for i in range(NO_OF_CHARS):\n        if i in char_list:\n            char_list.remove(i)\n    \n    # Convert the list of characters back to a string\n    new_string = \"\".join(char_list)\n    \n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    char_set = set(string)\n    for i in range(no_of_chars):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    return [char for char in string if char not in char_set]\n\nNO_OF_CHARS = 256\ndef remove_chars(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string2)\n    return ''.join([char for char in string1 if char not in char_set])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list of characters that are present in the string.\n    '''\n    # Initialize an empty list to store the characters from the string\n    result = []\n    \n    # Iterate over each character in the string\n    for char in string: \n        # If the character is not present in the NO_OF_CHARS set, add it to the result list\n        if char not in set(''.join(chr(i) for i in range(256))): \n            result.append(char)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Split the strings into lists\n    list1 = list(string)\n    list2 = list(set(string))\n    # Remove the characters present in list2 from list1\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    # Convert list1 back to a string\n    result = ''.join(list1)\n    # Return the result\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    result = []\n    for char in string:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)\n\nstring = input(\"Enter the string: \")\nto_remove = input(\"Enter the string containing characters to be removed: \")\nprint(\"The modified string without the characters present in the second string is:\", str_to_list(string, to_remove))"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert string to list of characters\n    list_of_chars = list(string)\n\n    # Remove characters which are present in the second string\n    for char in list_of_chars:\n        if char in string:\n            list_of_chars.remove(char)\n\n    # Convert list of characters back to string\n    removed_string = ''.join(list_of_chars)\n\n    return removed_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # iterate over each character in the first string\n    for char in string:\n        # check if the character is present in the second string\n        if char not in string:\n            # if it is not, add it to the result list\n            result.append(char)\n    # convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    str_list = list(string)\n    remove_list = [ord(char) for char in string if ord(char) in range(NO_OF_CHARS)]\n    for char in remove_list:\n        try:\n            str_list.remove(char)\n        except ValueError:\n            pass\n    return ''.join(map(chr, str_list))"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes in an array of integers and returns True if the array contains any duplicate elements,\n    and False otherwise.\n    \"\"\"\n    # Initialize an empty dictionary to store the unique elements\n    unique_dict = {}\n\n    # Loop through each element in the array\n    for num in arraynums:\n        # If the element is already in the dictionary, return True (indicating duplicate)\n        if num in unique_dict:\n            return True\n        # Otherwise, add the element to the dictionary\n        else:\n            unique_dict[num] = True\n\n    # If we make it through the loop without finding any duplicates, return False (indicating no duplicates)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # check if there are any elements with a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # Otherwise, add the number to the dictionary with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the dictionary and check if any count is greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    \n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    arrayset = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(arrayset) == len(arraynums):\n        return False\n    \n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # initialize an empty set to store the unique elements\n    unique_elements = set()\n    # loop through the array and add each element to the set\n    for element in arraynums:\n        unique_elements.add(element)\n    # check if the length of the unique_elements set is less than the length of the array\n    if len(unique_elements) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate through the array\n    for num in arraynums:\n        # if the number is not already in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n        # if we have found a duplicate, return True\n        elif num in unique_set:\n            return True\n\n    # if we have made it through the loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there is at least one duplicate element in the array.\n    Otherwise, it returns False.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and check if there is at least one duplicate element\n    for value in freq.values():\n        if value > 1:\n            return True\n\n    # If there are no duplicate elements, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_nums = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x in [1, 2, 3, 4, 5, 6]:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        if (x % 3 == 0) and (x % 5 == 0):\n            return True\n        else:\n            return False\n    else:\n        if (x % 2 == 0) and (x % 3 == 0):\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return \"Woodall is a number\"\n    else:\n        return \"Woodall is not a number\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = 0\n    for i in range(1, x+1):\n        if x%i == 0:\n            woodball += 1\n            if woodball > 2:\n                return True\n    if woodball == 0:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 2 or x % 10 == 7:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in [1, 2, 5, 10, 20, 50, 100, 200, 500]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x >= 20:\n            return \"Woodball\"\n        else:\n            return \"Not Woodball\"\n    else:\n        return \"Not a number\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    if rev_num == 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n        \n    return num == reverse - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_num_str)\n    # Check if the reversed number is one less than twice the original number\n    if reversed_num < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string\n    num = str(num)\n    # reverse the string\n    rev_num = num[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_num)\n    # check if the original number is one less than twice its reverse\n    if num == str(rev_num+1):\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return (2 * num) - num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return (reverse < 2 * reverse)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n        \n    return reverse == num - 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse == 2 * reverse - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    # Reverse the number\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Compare the reversed and original numbers\n    if reverse == num:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = num * -1\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes an array of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    # initialize the maximum number to 0\n    max_num = 0\n    # loop through each digit in the array\n    for digit in arr:\n        # convert the digit to an integer and add it to the maximum number\n        max_num += int(digit)\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(arr[i:j]))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    \n    # Creating a new list to store the sum of each digit\n    digit_sum = []\n    \n    # Looping through each digit in the list\n    for digit in arr : \n        # Storing the sum of the current digit in the list\n        digit_sum.append(sum(int(x) for x in digit))\n    \n    # Sorting the list in descending order\n    digit_sum.sort(reverse=True)\n    \n    # Creating a string from the sorted list and returning the largest number\n    return ''.join(str(x) for x in digit_sum[0:len(arr)])"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Initialize max_num to be the first number in the array\n    max_num = arr[0]\n\n    # Loop through the rest of the array\n    for i in range(1, len(arr)):\n        # Iterate through the digits in the current number and subtract the next digit from it\n        for digit in str(arr[i]):\n            max_num = max(max_num, int(digit) - int(arr[i][digit]))\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_num = max(max_num, int(\"\".join(sorted(str(arr[i])+str(arr[j])))))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the digits in decreasing order\n    arr.sort(reverse=True)\n    # initialize max_num with the first digit\n    max_num = arr[0]\n    # loop through the remaining digits\n    for i in range(1, len(arr)):\n        # calculate the next largest number\n        next_num = max_num * 10 + arr[i]\n        # check if the next largest number is greater than the current max_num\n        if next_num > max_num : \n            max_num = next_num\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += (arr[i]*(10**(len(arr)-i-1)))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n\n    # Function to check if a number is divisible by 10\n    def is_divisible(num):\n        return num % 10 == 0\n\n    # Sort the list of digits in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables for the maximum number formed and the current number being checked\n    max_num = 0\n    current_num = 0\n\n    # Loop through each digit in the list\n    for digit in arr:\n        # If the current digit is divisible by 10, add it to the current number\n        if is_divisible(digit):\n            current_num += digit\n        # If the current digit is not divisible by 10, multiply it by the current number and add it to the maximum number\n        else:\n            max_num = max(max_num, current_num * digit)\n            current_num = digit\n\n    # Add the last digit of the list to the current number\n    current_num += arr[-1]\n\n    # Return the maximum number formed by the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number\n    max_num = 0\n\n    # Iterate through the sorted list\n    for i in range(len(arr)):\n\n        # Calculate the power of 10\n        num = 10 ** i\n\n        # Calculate the product of the number and the sorted array\n        product = num * arr[i]\n\n        # Update the maximum number\n        max_num = max(max_num, product)\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check for equal signs\n    if x == 0:\n        if y == 0:\n            # If both numbers are zero, they have the same sign\n            return True\n        else:\n            # If x is zero and y is non-zero, then y has a positive sign\n            return True\n    elif y == 0:\n        # If y is zero and x is non-zero, then x has a negative sign\n        return True\n    else:\n        # If both numbers are non-zero, then they have opposite signs\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs, else returns False.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return False\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    if x*y >= 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both numbers have the same sign or not\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return False\n    # if at least one number has the opposite sign, it means they have opposite signs\n    return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, else False.\n    \"\"\"\n    if x == 0 or y == 0:\n        return False\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y < 0 or x < 0 and y > 0: \n        print(\"The two integers have opposite signs.\") \n    else: \n        print(\"The two integers have same signs.\") "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0): \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return \"The two numbers have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"The two numbers have opposite signs.\"\n    elif x == 0 and y == 0:\n        return \"The two numbers are equal.\"\n    else:\n        return \"The two numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = 1\n    while a <= n: \n        print(a)\n        a += b\n        b += 2\n    print(n)\n\nis_octagonal(5)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    This function takes an integer n and checks if it is an octagonal number or not.\n    '''\n    # Calculate the side of the square root of n\n    side = (n ** 0.5) ** 2\n    # Check if the square of the side is equal to n\n    if side ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    def nth_octagonal_num(n):\n        return (n * (2 * n - 1)) ** 2\n\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return nth_octagonal_num(n - 1) == nth_octagonal_num(n - 2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        j = (i * (3 * i - 1)) / 2\n        if j == n:\n            return True\n    return False\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        j = (i * (3 * i - 1)) / 2\n        if j == n:\n            return j\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_num = 0\n    for i in range(1, n+1):\n        octagonal_num = octagonal_num + 6 * (i**2) - 4 * i + 1\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Set the limit for the loop to n\n    limit = n * (n - 1) // 2\n    # Initialize the counter\n    count = 1\n    # Loop through the numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # Check if the number is octagonal\n        if i ** 2 == count ** 2:\n            return True\n        # Increment the counter\n        count += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        return (8 * (n-1))**2 + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2\n\nn = 10\nprint(is_octagonal(n))  # Output: 84"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n+1):\n        if (i*(i**2)) % 8!= 0:\n            return False\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if the number is an octagonal number, False otherwise.\n    A number is an octagonal number if it is equal to the sum of the square of its integer part and its integer part raised to the power of 2.\n    '''\n    if n == 1:\n        return False\n    num = n\n    int_part = int(num**0.5)\n    for i in range(2, int_part + 1):\n        if i*i == num:\n            return True\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with a certain sum of digits\n    substrings_dict = defaultdict(int)\n\n    # Iterate through the string\n    for i in range(len(s)):\n        # Check for all possible substrings of length i+1\n        for j in range(i, len(s)):\n            # Calculate the sum of digits of the substring\n            substring_sum = sum(int(digit) for digit in s[j])\n            # If the sum of digits is equal to i+1, increment the count of substrings in the dictionary\n            if substring_sum == i+1:\n                substrings_dict[i+1] += 1\n\n    # Return the count of substrings in the dictionary\n    return substrings_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            digits_sum = sum(int(digit) for digit in s[i:j+1])\n            if digits_sum == j-i+1:\n                count += 1\n                if j-i+1 in dp:\n                    dp[j-i+1] += 1\n                else:\n                    dp[j-i+1] = 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of each digit\n    count_dict = defaultdict(int)\n\n    # Count the number of occurrences of each digit in the string\n    for char in s:\n        count_dict[int(char)] += 1\n\n    # Initialize variables to keep track of the current substring and the sum of digits\n    current_substring = \"\"\n    digit_sum = 0\n\n    # Iterate through the string again, checking for substrings with the sum of digits equal to their length\n    for i, char in enumerate(s):\n        # Add the current character to the substring and update the digit sum\n        current_substring += char\n        digit_sum += int(char)\n\n        # If the digit sum is equal to the length of the substring, increment the count of the substring\n        if digit_sum == len(current_substring):\n            count_dict[len(current_substring)] += 1\n\n        # If the digit sum is greater than the length of the substring, decrement the count of the current substring\n        elif digit_sum > len(current_substring):\n            digit_sum -= int(s[i-len(current_substring)-1])\n            count_dict[len(current_substring)-1] -= 1\n            current_substring = s[i-len(current_substring):i] + current_substring[len(current_substring)-1]\n\n        # If the digit sum is less than the length of the substring, decrement the count of the current substring and increment the count of the next substring\n        else:\n            digit_sum -= int(s[i-len(current_substring)-1])\n            count_dict[len(current_substring)-1] -= 1\n            current_substring = s[i-len(current_substring):i] + current_substring\n\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    digit_count = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Loop through each character from the current position to the end of the string\n        for j in range(i, len(s)):\n            # If the sum of digits in the substring is equal to its length, increment the count in the dictionary\n            if sum(int(d) for d in s[i:j+1]) == j-i+1:\n                digit_count[j-i+1] += 1\n    \n    # Return the count of substrings with sum of digits equal to their length\n    return digit_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digit_sum = sum(map(int, substring))\n            d[digit_sum] += 1\n            count += d[digit_sum]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    n = len(s)\n    \n    # Iterate through all possible substrings of s\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(d) for d in s[i:j+1]) == j-i+1:\n                count[j-i+1] += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n\n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n+1):\n            substring = s[i:j]\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub = s[i:j+1]\n            digits_sum = sum(int(d) for d in sub)\n            if digits_sum == len(sub):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Extract the substring from the input string\n            substring = s[i:j]\n\n            # Check if the substring has a sum of digits equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                # If it does, increment the count for this substring\n                count[substring] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n    \n    # Iterate through each character in the string and calculate the sum of digits\n    for i in range(len(s)):\n        digits_sum = sum(int(digit) for digit in s[i:i+len(s)])\n        # Add 1 to the count of substrings with the sum of digits equal to their length\n        count_dict[digits_sum] += 1\n    \n    return sum(count_dict.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = xs[0]\n        for num in xs[1:]:\n            if num < smallest:\n                smallest = num\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize the maximum difference to be the difference between the first and second elements\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n\n    # Iterate over the sorted list of tuples\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current element and the next one\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n\n        # Update the maximum difference if necessary\n        max_diff = max(diff, max_diff)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Find the minimum and maximum values in the list of tuples\n    min_val = min(test_list, key=lambda x: x[0])[0]\n    max_val = max(test_list, key=lambda x: x[1])[1]\n\n    # Calculate the difference between the maximum and minimum values\n    max_diff = max_val - min_val\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[j][1]-test_list[i][1] > max_diff:\n                max_diff = test_list[j][1]-test_list[i][1]\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the maximum difference\n    max_diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current and next tuple in the list\n        diff = test_list[i + 1][0] - test_list[i][0]\n\n        # Update the maximum difference if the current difference is greater than the previous maximum\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples\n    test_list.sort()\n\n    # Initialize variables to store the maximum and minimum differences found so far\n    max_diff = test_list[1][1] - test_list[0][1]\n    min_diff = test_list[0][1]\n\n    # Loop through the sorted list of tuples and update the max and min differences as needed\n    for i in range(1, len(test_list)):\n        current_diff = test_list[i][1] - test_list[i-1][1]\n        max_diff = max(max_diff, current_diff)\n        min_diff = min(min_diff, current_diff)\n\n    return max_diff, min_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize the maximum difference to be the smallest possible value\n    max_diff = float('-inf')\n\n    # Iterate over each pair of elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair of elements\n            diff = abs(test_list[i][0] - test_list[j][0])\n\n            # Update the maximum difference if the current difference is greater than the current maximum\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_list = sorted(test_list)\n    # Initialize the maximum difference to be zero\n    max_diff = 0\n    # Iterate over the sorted list and find the maximum difference\n    for i in range(len(sorted_list) - 1):\n        diff = sorted_list[i+1] - sorted_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples by the second value of each tuple in ascending order\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list contains only one element, return the element\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: Flatten the list and sum all its elements\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: sum the head and tail of the list recursively\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return flat_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Recursive function to flatten a list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    def sum_flattened_list(flattened_list):\n        '''\n        Recursive function to sum all the elements in a flattened list.\n        '''\n        if not flattened_list:\n            return 0\n        else:\n            return flattened_list.pop(0) + sum_flattened_list(flattened_list)\n\n    flattened_list = flatten_list(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    elif isinstance(data_list, list):\n        return sum(recursive_list_sum(sublist) for sublist in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst, result=None):\n        if result is None:\n            result = []\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the result as 0\n    result = 0\n\n    # Iterate through all possible partition sizes\n    for i in range(1, n + 1):\n        # Count the number of ways to partition the set of Bell numbers with i elements\n        count = 0\n        for j in range(i, n + 1):\n            count += (j - i + 1) * (bell_number(j - i + 1) // bell_number(i))\n\n        # Add the count to the result\n        result += count\n\n    return result\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(arr, i, j, k):\n        if k == 1:\n            return 1\n        if k > len(arr) or k < 1:\n            return 0\n        if i > j:\n            return 0\n        if k == 2:\n            if arr[i] <= arr[j]:\n                return 1\n            else:\n                return 0\n        if k % 2 == 1:\n            return (partition(arr, i+1, j, k-1) + partition(arr, i, j-1, k-1))\n        else:\n            return (partition(arr, i+1, j, k-1) + partition(arr, i, j-1, k-1))\n\n    return partition([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 9, n)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\ndef partition_bell_numbers(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = 0\n    bell_numbers[1] = 1\n    for i in range(2, n+1):\n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n    return bell_numbers[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Base case: if n == 0 or n == 1, there is only one way to partition\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the first few Bell numbers\n    bell_nums = [0, 1]\n\n    # Initialize the number of ways to partition\n    ways = 1\n\n    # Iterate through the remaining Bell numbers\n    for i in range(2, n + 1):\n        # For each Bell number, check if it can be partitioned into two smaller Bell numbers\n        for j in range(len(bell_nums)):\n            if bell_nums[j] + i <= n:\n                bell_nums.append(bell_nums[j] + i)\n\n        # Update the number of ways to partition\n        ways *= len(bell_nums)\n\n    # Return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the array to store the number of ways\n    ways = [0] * (n+1)\n    ways[0] = 1\n    ways[1] = 1\n\n    for i in range(2, n+1):\n        ways[i] = ways[i-1] + ways[i-2]\n\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition as 0\n    ways = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a Bell number\n        if is_bell(i):\n            # Increment the number of ways to partition if the number is a Bell number\n            ways += 1\n    # Return the number of ways to partition\n    return ways\n\ndef is_bell(n):\n    '''\n    Determine if a number is a Bell number.\n    '''\n    # Check if the number is divisible by 4\n    if n % 4 == 0:\n        return True\n    # Check if the number is divisible by 6\n    elif n % 6 == 0:\n        return True\n    # Check if the number is divisible by 28\n    elif n % 28 == 0:\n        return True\n    # Check if the number is divisible by 42\n    elif n % 42 == 0:\n        return True\n    # If none of the conditions are met, the number is not a Bell number\n    else:\n        return False"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 0, there is one way to partition the set of Bell numbers\n    if n == 0:\n        return 1\n    # Base case: if n is 1, there is no way to partition the set of Bell numbers\n    if n == 1:\n        return 0\n    # If n is even, there are two ways to partition the set of Bell numbers:\n    #  1. Include the even Bell number in the first partition\n    #  2. Exclude the even Bell number from the first partition\n    if n % 2 == 0:\n        return bell_number(n//2) + bell_number(n//2 + 1)\n    # If n is odd, there is one way to partition the set of Bell numbers:\n    #  1. Include the odd Bell number in the first partition\n    #  2. Exclude the odd Bell number from the first partition\n    else:\n        return bell_number(n//2) + bell_number(n//2 - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    \n    # Check if the array is monotonic in increasing order\n    for i in range(n-1):\n        if A[i] >= A[i+1]:\n            return False\n    \n    # Check if the array is monotonic in decreasing order\n    for i in range(n-1):\n        if A[i] <= A[i+1]:\n            return False\n    \n    # If none of the above conditions are met, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    The function should return True if the array is monotonic and False otherwise.\n    A monotonic array is an array where either all elements are increasing or all elements are decreasing.\n    '''\n    # If the array is empty or contains only one element, it is always monotonic\n    if len(A) <= 1:\n        return True\n    \n    # Initialize variables to keep track of whether the array is increasing or decreasing\n    increasing = True\n    decreasing = True\n    \n    # Check if all elements in the array are the same\n    if A[0] == A[-1]:\n        return False\n    \n    # Iterate through the array and check if each element is increasing or decreasing\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            if increasing:\n                increasing = False\n            else:\n                return False\n        elif A[i] < A[i+1]:\n            if decreasing:\n                decreasing = False\n            else:\n                return False\n    \n    # If all elements are increasing or decreasing, the array is monotonic\n    if increasing or decreasing:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True \n\n    for i in range(len(A)-1): \n        if A[i] >= A[i+1]: \n            return False\n        elif A[i] < A[i+1]: \n            return True\n\n    return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n <= 1:\n        return True\n\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n        elif A[i] < A[i-1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    # If array is empty or has only one element, it is always monotonic \n    if len(A) <= 1: \n        return True\n\n    # Check if array is increasing or decreasing \n    if A[1] > A[0]: \n        # If increasing, check if it is monotonic \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n\n    else:\n        # If decreasing, check if it is monotonic \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # check if the array is monotonic\n    if A[0] < A[1] and A[len(A) - 1] > A[len(A) - 2]:\n        return True\n    elif A[0] > A[1] and A[len(A) - 1] < A[len(A) - 2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n\n    if n <= 1:\n        return True\n\n    for i in range(n):\n        if A[i] > A[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if the array is monotonic and False otherwise.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    if A[0] <= A[1] and A[1] <= A[2]:\n        return True\n    elif A[0] >= A[1] and A[1] >= A[2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A of integers as input and returns True if it is a monotonic array or False otherwise.\n    A monotonic array is an array where either it is increasing or decreasing.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    i = 0\n    j = 0\n    while j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n    return i == len(s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    l (list): The list to be checked.\n    s (list): The sublist to be searched.\n\n    Returns:\n    bool: True if the list contains the given sublist, False otherwise.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    return j == len(s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    This function checks whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return all(s in sl for sl in l)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    if not isinstance(l, list):\n        raise TypeError(\"The first argument must be a list\")\n    if not isinstance(s, list):\n        raise TypeError(\"The second argument must be a list\")\n    if len(s) > len(l):\n        raise ValueError(\"The sublist must be a subsequence of the given list\")\n\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n\n    if j == len(s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for tup in Input:\n        if len(tup) == count:\n            count += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    for i in range(len(Input[0])):\n        for j in range(1, len(Input)):\n            if len(Input[j])!= len(Input[0]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # To find whether all the given tuples have equal length or not, we need to compare the length of all the tuples.\n    all_lengths_same = True\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            all_lengths_same = False\n            break\n\n    return all_lengths_same"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                print(f\"The tuples {Input[i]} and {Input[j]} are equal\")\n                return True\n    print(\"All the tuples have different length\")\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if the input is a list of tuples\n    if not all(isinstance(t, tuple) for t in Input):\n        return \"Input must be a list of tuples\"\n\n    # Get the length of the first tuple\n    first_len = len(Input[0])\n\n    # Check if all tuples have equal length\n    if not all(len(t) == first_len for t in Input):\n        return \"All the tuples in the list must have the same length\"\n\n    # If all the above conditions are met, then all tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    gap = len(nums)\n    while gap > 1:\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = gap // 1.3  # decrease the gap by a factor of 1.3 each iteration\n\n        # iterate through the list and compare adjacent elements\n        for i in range(n - gap):\n            # if the elements are not in the correct order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n\n    # initialize the gap and the swapping variables\n    gap = n\n    swapping = True\n\n    # start a loop while swapping is True\n    while swapping:\n        # set swapping to False\n        swapping = False\n\n        # initialize the start and end index of the gap\n        start = 0\n        end = gap\n\n        # start a loop while the start index is less than the end index\n        while start < end:\n            # if the current element is greater than the next element, swap them\n            if nums[start] > nums[start + 1]:\n                nums[start], nums[start + 1] = nums[start + 1], nums[start]\n                swapping = True\n            # increment the start and end indices\n            start += 1\n            end -= 1\n\n        # decrement the gap by 1\n        gap = int((gap + 1) / 1.3)\n\n        # if the gap is less than 1, set it to 1\n        if gap < 1:\n            gap = 1\n\n        # print the sorted list\n        print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = (gap * 10) // 10\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Args:\n        nums: list of elements to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    # Set the default gap size and the maximum number of iterations.\n    gap = len(nums)\n    max_iter = 100\n\n    # Do the sorting.\n    while gap > 1 or gap == 0:\n        # Calculate the new gap size.\n        gap = int(gap / 1.3)\n\n        # If the gap is too large, decrease the gap size.\n        if gap == 0:\n            gap = 1\n\n        # Do the sorting.\n        for i in range(max_iter):\n            sorted = True\n            for j in range(len(nums) - gap):\n                if nums[j] > nums[j + gap]:\n                    # Swap the elements.\n                    nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                    sorted = False\n\n            # If the list is sorted, stop the loop.\n            if sorted:\n                break\n\n        # Update the maximum number of iterations.\n        max_iter *= 1.3\n\n    # Return the sorted list.\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = max(1, gap // 2)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums: list - The list of elements to be sorted.\n\n    Returns:\n    The sorted list.\n    '''\n\n    # initialize variables\n    swapped = True\n    n = len(nums)\n    gap = n\n\n    # loop while swapping is true\n    while swapped:\n        swapped = False\n\n        # loop over each element of the list\n        for i in range(gap):\n            # if the element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # decrease the gap size\n        gap = int(gap / 1.3)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    max_iter = 100\n\n    while max_iter > 0:\n        swapped = False\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        max_iter -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap //= 1.3\n            if gap < 1:\n                gap = 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is odd or even\n    if sqrt_n % 2 == 0:\n        # The square root is even, so the difference of two squares is not possible\n        return False\n    else:\n        # The square root is odd, so the difference of two squares is possible\n        return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    # Check if the given number can be represented as the difference of two squares\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0 and i*i == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 4 == 0:\n        return False\n    else:\n        x = int(n ** 0.5)\n        return dif_Square(x * x)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n % 4 == 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        for j in range(i, int(n ** 0.5) + 1):\n            if i * i + j * j == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a positive integer\n    if type(n)!= int or n <= 0: \n        return \"Please enter a positive integer.\"\n\n    # check if the difference of squares of n is equal to n\n    for i in range(1, int(n**0.5)+1):\n        if n-i**2 == i**2:\n            return \"Yes, the difference of squares of {} is equal to {}.\".format(n, i**2)\n\n    # check if the difference of squares of n is not equal to n\n    for i in range(1, int(n**0.5)+1):\n        if n-i**2!= i**2:\n            return \"No, the difference of squares of {} is not equal to {}.\".format(n, i**2)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # calculate the sum of squares of digits in n\n    squares = []\n    while n > 0:\n        squares.append(n % 10 ** 2)\n        n //= 10\n    squares.reverse()\n\n    # calculate the difference of squares\n    diff_squares = [x - y for x, y in zip(squares, squares[1:])]\n\n    # check if the difference of squares is the same as the original number\n    return diff_squares == [n]"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # To check whether the given number can be represented as the difference of two squares or not, we need to check whether it can be represented as the sum of two squares or not.\n    # If it can be represented as the sum of two squares, then the given number can also be represented as the difference of two squares.\n    # If it can be represented as the sum of two squares, then we can check if the difference of the two squares is equal to the given number.\n    if n**2 == sum([x**2 for x in range(1, int(n**0.5)+1)]):\n        # If the given number can be represented as the sum of two squares, then we can check if the difference of the two squares is equal to the given number.\n        if n == sum([x**2 for x in range(1, int(n**0.5)+1)]) - n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a perfect square\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Get the square root of the given number\n    sqrt_n = round(n ** 0.5)\n\n    # Check if the square of the square root is equal to the given number\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of the given number\n    root = int(n**(1/2))\n\n    # Check if the square root is an integer\n    if root.is_integer():\n        # Check if the given number can be represented as the difference of two squares\n        return True\n    else:\n        # Check if the given number can be represented as the sum of two squares\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize a boolean variable to keep track of whether all patterns are followed\n    all_patterns_followed = True\n\n    # loop through each pattern in the patterns array\n    for pattern in patterns:\n        # loop through each color in the colors array\n        for color in colors:\n            # if the color does not match the pattern, set the all_patterns_followed boolean to False and break out of the inner loop\n            if color!= pattern:\n                all_patterns_followed = False\n                break\n        # if all colors in the pattern are not the same, set all_patterns_followed to False and break out of the outer loop\n        if not all_patterns_followed:\n            break\n\n    # return the value of all_patterns_followed\n    return all_patterns_followed"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n\n    for i in range(n):\n        if patterns[i]!= colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    for pattern in patterns:\n        if color_count[pattern[0]] > pattern[1]:\n            return False\n        color_count[pattern[0]] -= 1\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check that the number of patterns matches the number of colors\n    if len(patterns)!= len(colors):\n        return False\n\n    # Initialize an empty dictionary to store the current color\n    current_color = {}\n\n    # Iterate over the colors and patterns\n    for i in range(len(colors)):\n        # Check that the current color is the same as the one in the pattern\n        if colors[i]!= current_color.get(patterns[i], -1):\n            return False\n\n        # Update the current color\n        current_color[patterns[i]] = colors[i]\n\n    # If we reach this point, the colors follow the patterns sequentially\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n - 1):\n        if colors[i]!= colors[i+1]:\n            return False\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables\n    n = len(colors)\n    pattern_start = 0\n    pattern_length = 1\n    \n    # Check if the colors match with the first pattern\n    if colors == patterns[pattern_start]:\n        pattern_length += 1\n        pattern_start = 0\n        \n        # Check for remaining patterns\n        for i in range(1, len(patterns)):\n            pattern_length += 1\n            \n            # Check if the colors match with the current pattern\n            if colors == patterns[pattern_start:pattern_start+pattern_length]:\n                pattern_start += pattern_length\n                break\n            \n            # If the colors do not match, move to the next pattern and restart the pattern length\n            else:\n                pattern_start = 0\n                pattern_length = 1\n            \n            # Check if the colors match with the current pattern\n            if colors == patterns[pattern_start:pattern_start+pattern_length]:\n                pattern_start += pattern_length\n                break\n            \n            # If the colors do not match, move to the next pattern and restart the pattern length\n            else:\n                pattern_start = 0\n                pattern_length = 1\n    \n    # If the colors do not match with the first pattern, return False\n    else:\n        return False\n    \n    # Check if the remaining colors match with the last pattern\n    if colors == patterns[-1]:\n        return True\n    \n    # If the remaining colors do not match with the last pattern, return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(patterns)!= len(colors):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables to keep track of the previous color and pattern\n    prev_color = None\n    prev_pattern = None\n\n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        # If the current color and pattern match the previous color and pattern, continue\n        if colors[i] == prev_color and patterns[i] == prev_pattern:\n            continue\n        # Otherwise, if the current color is different from the previous color, return False\n        elif colors[i]!= prev_color:\n            return False\n        # Otherwise, if the current pattern is different from the previous pattern, return False\n        else:\n            return False\n        # Update the previous color and pattern for the next iteration\n        prev_color = colors[i]\n        prev_pattern = patterns[i]\n\n    # If all the colors and patterns have matched, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize variables\n    count = 0\n    i = 0\n\n    # loop through the colors\n    for color in colors:\n        # check if the current color matches the pattern at the current index\n        if color == patterns[i]:\n            count += 1\n\n            # move to the next pattern in the sequence\n            if count == len(patterns[i]):\n                i += 1\n                count = 0\n\n            # if the sequence is complete, return True\n            if i == len(patterns):\n                return True\n\n    # if the sequence is not complete, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    m = len(patterns)\n    if m > 2 * n - 1:\n        return False\n\n    i = 0\n    j = 0\n    while i < m:\n        if colors[j] == patterns[i]:\n            i += 1\n            j += 1\n            if i == m:\n                return True\n        else:\n            i = 0\n            j = 0\n\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in test_list:\n        if all(x % K == 0 for x in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp_list = []\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                temp_list.append(test_list[i][j])\n            else:\n                temp_list = []\n                break\n        if len(temp_list) == len(set(temp_list)):\n            result.append(temp_list)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if sum(test_list[i]) % K == 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_with_k = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            tuples_with_k.append(tup)\n    return tuples_with_k\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples\n    result_list = []\n    \n    # loop through each tuple in the test list\n    for t in test_list:\n        # check if all elements are divisible by k\n        if all(t[i] % K == 0 for i in range(len(t))):\n            # if all elements are divisible by k, append the tuple to the result list\n            result_list.append(t)\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        is_valid = True\n        for num in tup:\n            if num % K!= 0:\n                is_valid = False\n                break\n        if is_valid:\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word)\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower()\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    # Convert the input string to lowercase\n    s = s.lower()\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            print(f\"{word} is an odd length\")\n        # Check if the length of the word is even\n        else:\n            print(f\"{word} is an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd-length\")\n        else:\n            print(word, \"is even-length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n\n    return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()  # Splitting the string into a list of words\n    \n    for word in word_list:\n        if len(word) % 2!= 0:  # Checking whether the length of the word is odd or not\n            print(word + \" is an odd length.\")\n        else:\n            print(word + \" is an even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Convert the input string to lowercase\n    s = s.lower()\n\n    # Split the string into words\n    words = s.split()\n\n    # Iterate through each word and check its length\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n        else:\n            return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    # Split the string into words\n    words = s.split()\n\n    # Iterate over the words and check the length of each word\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        return 4 * n - 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the tetrahedral numbers\n    tetrahedral_numbers = [4*i*i*i - 1 for i in range(1, n+1)]\n    return tetrahedral_numbers[-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number to 1\n    tetrahedral_num = 1\n    \n    # Iterate through the rest of the numbers\n    for i in range(2, n+1):\n        # Calculate the sum of the previous n-2 tetrahedral numbers\n        tetrahedral_sum = 0\n        for j in range(i-1, -1, -1):\n            tetrahedral_sum += j**2\n        \n        # Update the value of the current tetrahedral number\n        tetrahedral_num += tetrahedral_sum\n    \n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 4*n**3 - 6*n**2 + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a variable to store the nth tetrahedral number\n    tetra = 0\n    \n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # Compute the value of the nth tetrahedral number\n        tetra += 4*i*(i-1)\n    \n    # Return the nth tetrahedral number\n    return tetra"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral_helper(n, curr_sum, total_sum):\n        if curr_sum == total_sum:\n            return n\n        elif curr_sum > total_sum:\n            return tetrahedral_helper(n, curr_sum - total_sum, total_sum)\n        else:\n            return tetrahedral_helper(n + 1, curr_sum, total_sum)\n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return tetrahedral_helper(1, n - 1, (n * (n - 1)) // 2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the variables\n    a = 1\n    b = 2\n    c = 3\n    t = 0\n    i = 1\n\n    # Loop through the first n terms\n    while i <= n:\n        # Calculate the next term\n        t = a + b + c\n\n        # Update the variables\n        a = b\n        b = c\n        c = t\n\n        # Increment the counter\n        i += 1\n\n    # Return the final term\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables for the sequence\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    # Initialize variables for the function value\n    s = 0\n    # Loop through the sequence and calculate the function value\n    for i in range(1, n+1):\n        s += a / b / c / d\n        # Calculate the next terms\n        a += 1\n        b += 1\n        c += 1\n        d += 1\n    # Return the function value\n    return s"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 3\n    c = 4\n    d = 5\n\n    while True:\n        if a*a + b*b + c*c + d*d == n:\n            return a + b + c + d\n        a += 1\n        b -= 1\n        c -= 2\n        d += 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    num = 0\n    count = 0\n    # Loop through numbers and check if each number is a tetrahedral number\n    for i in range(1, n + 1):\n        if count == 0:\n            num = i\n            count += 1\n        else:\n            num *= i\n            count = 0\n    # Return the nth tetrahedral number\n    return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n\nprint(volume_sphere(5)) # Output: 178.53981633974483"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere given its radius.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r ** 3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    result = 0\n    for i in strr:\n        result += ord(i)\n    return result % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize an empty string to store the ASCII values of each character\n    ascii_str = ''\n    # loop through each character in the string\n    for char in strr:\n        # convert each character to its ASCII value and append it to the ascii_str variable\n        ascii_str += str(ord(char))\n    # calculate the sum of the ASCII values modulo 26 and convert the result back to a character\n    result = chr((sum([int(ascii_str[i:i+4]) for i in range(0, len(ascii_str), 4)]) % 26) + 97)\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n        count += 1\n    return chr(ascii_value % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = sum([ord(i) for i in strr])\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the sum of ASCII values of the characters in the string\n    ascii_sum = 0\n\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        ascii_sum += ord(char)\n\n    # Find the character made by adding the ASCII value of all the characters modulo 26\n    char_made = chr((ascii_sum % 26) + 97)\n\n    # Return the character made\n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    char_num = ascii_sum % 26\n    char_value = chr(65 + char_num)\n    \n    return char_value"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    mod_ascii_val = ascii_val % 26\n    char_value = 65 + mod_ascii_val\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    sequence = [1, 1]  # start with first two numbers in sequence\n    for i in range(2, n):  # loop until n is reached\n        next_num = (sequence[i-1] + sequence[i-2]) % 2  # calculate next number in sequence\n        sequence.append(next_num)  # append next number to sequence\n    return sequence[-1]  # return final number in sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41, 43, 44, 46, 47, 49, 50]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    sequence = [0, 1]\n    if n <= 1:\n        return sequence[n]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n\n    sequence = [0, 1]\n\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, 4 * a + b\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with the first two numbers\n    sequence = [1, 1]\n\n    # loop through each subsequent number\n    for i in range(2, n+1):\n        # add the next number to the sequence\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    # return the nth number in the sequence\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        next_sequence = []\n        for j in range(len(sequence)):\n            if j == 0:\n                next_sequence.append(sequence[j] + sequence[j+1])\n            elif j == len(sequence)-1:\n                next_sequence.append(sequence[j-1] + sequence[j])\n            else:\n                next_sequence.append(sequence[j-1] + sequence[j] + sequence[j+1])\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    for i in range(n):\n        print(a, end=' ')\n        a = 2 * a - 1"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of a sphere and returns the surface area of that sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4 * pi * r**2) ** 0.5\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function finds the surface area of a sphere with a radius of r.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"Negative value of n is not allowed.\")\n    else:\n        i = 1\n        while True:\n            if i % 2 == 0:\n                j = 0\n                while j <= i/2:\n                    print(\" \", end=\"\")\n                    j += 1\n                print(i)\n                i += 1\n            else:\n                j = 0\n                while j <= i/2:\n                    print(\" \", end=\"\")\n                    j += 1\n                print(i)\n                i += 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 2\n    d = 1\n\n    # Calculate the centered hexagonal number\n    for i in range(1, n):\n        a, b, c, d = b, c, a + b + c + d, d\n\n    return a"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # function to find centered hexagonal number\n    def centered_hexagonal(n):\n        a = 0\n        b = 1\n        c = 1\n        while b < n:\n            a, b, c = b, 2*a + b, 2*a + b + 1\n        return b\n\n    # find the centered hexagonal number\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Initialize the variables\n    p = 1  # Starting point\n    q = 1  # Divisor\n    r = n  # Current number\n    \n    # Calculate the centered hexagonal number\n    while r!= 1:\n        if r % 2 == 0:\n            # Update the p and q values\n            p = p + q\n            q = p - q\n            r = r // 2\n        else:\n            # Update the p and q values\n            p = 2 * p - q\n            q = p - q\n            r = 3 * r // 2\n    \n    # Return the centered hexagonal number\n    return p"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0.5 * (3**0.5 - 1)\n    b = -0.5 * (3**0.5 + 1)\n    return int(n * (a + b))"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # define the first centered hexagonal number\n    first_centered_hexagonal = 24\n    \n    # calculate the number of rows needed for the nth centered hexagonal number\n    num_rows = 4 * ((n - 1) // 2) + 1\n    \n    # calculate the base of the centered hexagonal number\n    base = first_centered_hexagonal + n - 1\n    \n    # calculate the number of digits in the base\n    num_digits = len(str(base))\n    \n    # calculate the number of spaces needed for the base\n    num_spaces = 10 - num_digits\n    \n    # create the centered hexagonal number by padding the base with zeros\n    centered_hexagonal = '{0:0{1}}'.format(base, num_spaces)\n    \n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # The centered hexagonal numbers are the same as centered triangular numbers.\n    # The centered triangular numbers are (n+1)(n+2)/2 and the centered hexagonal numbers are (n+1)(n+2)/6.\n    # Therefore, the centered hexagonal number can be found using the formula for centered triangular numbers:\n    # centered_hexagonal_number(n) = (n+1)(n+2)/6\n    return ((n+1)*(n+2))/6"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries and returns a single dictionary that contains\n    all the keys and values from the input dictionaries.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary that contains all the key-value pairs from the three dictionaries.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # create an empty dictionary to hold the merged data\n    merged_dict = {}\n    # loop through the three dictionaries\n    for key in dict1:\n        # if the key is already in the merged dictionary, add the values\n        if key in merged_dict:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        # if the key is not in the merged dictionary, add the key and values\n        else:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary.\n        dict2 (dict): Second dictionary.\n        dict3 (dict): Third dictionary.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n\n    Returns:\n        dict: The merged dictionary.\n\n    Examples:\n        >>> dict1 = {'a': 1, 'b': 2}\n        >>> dict2 = {'c': 3, 'd': 4}\n        >>> dict3 = {'e': 5, 'f': 6}\n        >>> merge_dictionaries_three(dict1, dict2, dict3)\n        {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n    \"\"\"\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements of the list and the values are their frequency count.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using collections.Counter function to count the frequency of each element in the list\n    count_dict = collections.Counter(list1)\n    return count_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # iterate through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N\n    closest = None\n    \n    # Loop through each number from 1 to N\n    for num in range(1, N+1):\n        # If the current number is smaller than the current minimum, update the minimum and closest\n        if num < min_num:\n            min_num = num\n            closest = num\n            \n    # If the closest smaller number has not been found yet, return N\n    if closest is None:\n        return N\n    \n    # Otherwise, return the closest smaller number\n    else:\n        return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num_list = [i for i in range(1, N+1)]  # generate a list of numbers from 1 to N\n    closest_num = float('inf')  # initialize the closest number to infinity\n    \n    for num in num_list:\n        if num < N and abs(N - num) < abs(N - closest_num):\n            closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = float('inf')\n    for i in range(1, N):\n        if abs(N - i) < abs(N - closest):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    min_diff = float('inf')\n    closest = float('inf')\n    for num in range(1, N+1):\n        if num < N:\n            diff = N - num\n            if diff < min_diff:\n                min_diff = diff\n                closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    # Initialize the closest number to be greater than N\n    closest = N + 1\n\n    # Iterate over all numbers from 0 to N\n    for num in range(N):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(num - N)\n\n        # If the current number is closer than the current closest number, update the closest number\n        if diff < closest:\n            closest = diff\n\n    # Return the closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    \n    for num in range(1, N+1):\n        diff = abs(N - num)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = 1\n    while True:\n        if N - smaller_num > 0:\n            return smaller_num\n        else:\n            smaller_num += 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    n_list = [i for i in range(1, N+1)]\n    min_diff = float('inf')\n    closest_num = None\n    for num in n_list:\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # find the absolute difference between n and all numbers in the range [0, N]\n    diff_list = [abs(num - N) for num in range(N)]\n    # find the minimum difference\n    min_diff = min(diff_list)\n    # find the closest number to n that is smaller than N\n    closest_num = N - min_diff\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for i in range(len(list1)):\n        words.extend(list1[i].split())\n    lengths = []\n    for i in range(len(words)):\n        lengths.append(len(words[i]))\n    return max(lengths)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize variables\n    max_len = 0\n    word = \"\"\n\n    # Loop through the list\n    for item in list1:\n\n        # Split the item into words\n        words = item.split()\n\n        # Check if the word is longer than the current longest\n        if len(words[0]) > max_len:\n            max_len = len(words[0])\n            word = words[0]\n\n    # Return the longest word\n    return word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # create a list of all the substrings of the given sub_str in str1\n    substrings = [s for s in str1 if sub_str in s]\n    # check if any of the substrings is present in the given list of string values\n    if substrings:\n        # return True if a substring is present\n        return True\n    else:\n        # return False if no substring is present\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        for string in str1.split():\n            if sub_str in string:\n                return True\n        return False\n    else:\n        raise ValueError(\"Both input values must be of type string\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str_list:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert sub_str to lowercase to avoid case-sensitive matching\n    sub_str = sub_str.lower()\n    # iterate over the list of strings and check if sub_str is a substring of each string\n    for s in str1:\n        if sub_str in s.lower():\n            return True\n    # if no match was found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return False\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Check if the given string is a substring of the list\n    if any(sub_str in s for s in str1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False\n\nprint(is_undulating(5))    # Output: True\nprint(is_undulating(0))    # Output: False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    # If the number is even, it is not undulating\n    if n % 2 == 0:\n        return False\n    \n    # If the number is odd, check if it is divisible by 7\n    if n % 7 == 0:\n        return True\n    \n    # If none of the above conditions are met, then it is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the number is even or odd\n    if n % 2 == 0: \n        return 'Even'\n    else: \n        return 'Odd'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # define the lower and upper range of the number \n    lower_range = 0 \n    upper_range = 1000 \n\n    # loop through the range of numbers \n    for i in range(lower_range, upper_range+1): \n        # check if the number is undulating \n        if n % i == 0: \n            # if the number is undulating, return True \n            return True \n\n    # if no number is undulating, return False \n    return False "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    if n % 2 == 0:\n        print(f\"{n} is an odd number.\")\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                print(f\"{n} is not an odd number, because it is divisible by {i}.\")\n                return False\n        print(f\"{n} is an odd number.\")\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 10:\n        return False\n    elif n % 2 == 0:\n        return is_undulating(n/2)\n    else:\n        return is_undulating(3*n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer `n` as input and returns True if it is \n    undulating, and False otherwise.\n    '''\n\n    if n == 1:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if n is divisible by 3 and greater than 5\n    if n % 3 == 0 and n > 5:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a,abs(b))\n    else:\n        result = 1\n        for i in range(b):\n            result *= a\n        return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1/power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the built-in min function to find the index of the minimum value\n    min_index = test_list.index(min(test_list, key=lambda x: x[1]))\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, return the index of the first tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    min_value = test_list[0][1]\n    for i, (x, y) in enumerate(test_list):\n        if y < min_value:\n            min_index = i\n            min_value = y\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_val = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_val:\n            min_index = i\n            min_val = test_list[i][1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples by the second value (index 1)\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_item = test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_item[1]:\n            min_index = i\n            min_item = test_list[i]\n\n    return min_item[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda x: test_list[x][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # use the built-in sorted function to sort the list of tuples by second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # loop through the sorted list and return the index of the first tuple with the smallest second value\n    for i in range(len(sorted_list)):\n        if sorted_list[i][0] == sorted_list[i-1][0]:\n            return i\n    return len(sorted_list)-1"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = None\n    for sublist in lst:\n        if min_len is None or len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_len:\n            min_len = len(sub_lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    # Initialize a variable to store the length of the smallest list\n    min_length = float('inf')\n    \n    # Loop through each sublist in the input list\n    for sublist in lst:\n        # If the length of the current sublist is less than the current minimum length, update the minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # Return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and finds the length of the smallest list in the list.\n    '''\n    # initialize a variable to store the smallest length\n    min_len = float('inf')\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # loop through each element in the current list\n        for j in range(len(lst[i])):\n            # check if the current element is shorter than the current minimum length\n            if len(lst[i][j]) < min_len:\n                # update the minimum length to be the length of the current element\n                min_len = len(lst[i][j])\n    # return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = len(lst[0])\n    min_index = 0\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n\n    return min_len, min_index"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sub_list in lst:\n        if min_len is None or len(sub_list) < min_len:\n            min_len = len(sub_list)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # Initialize a variable to store the number of divisors\n    count = 0\n    # Iterate through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If it is, increment the count\n            count += 1\n    # Return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n\n    # iterate over the list of lists\n    for sublist in list1:\n        # iterate over the sublist and update the frequency count for each element in the sublist\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through the list of lists and for each sublist, loop through it and update the frequency dictionary\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    # return the final frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the flattened list of lists\n    for elem in list1:\n        # Check if the element is already in the dictionary\n        if elem in freq_dict:\n            # If it is, increment its frequency by 1\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[elem] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary\n    freq_dict = {}\n    # loop through the flattened list of lists\n    for elem in list1:\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # otherwise, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n\n    # loop through the list of lists\n    for sublist in list1:\n        # loop through the sublist\n        for item in sublist:\n            # if the item is not already in the dictionary, add it with a frequency of 1\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            # otherwise, increment the frequency of the item by 1\n            else:\n                freq_dict[item] += 1\n\n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # create a dictionary to store the frequency of each element\n    frequency = {}\n    # loop through each element in the flattened list\n    for item in flat_list:\n        # if the element is already in the dictionary, increment its frequency by 1\n        if item in frequency:\n            frequency[item] += 1\n        # otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            frequency[item] = 1\n    # return the dictionary of frequency\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = numbers[0]\n    for i in range(1, len(numbers)):\n        result *= numbers[i]\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Base case: if n is zero, return \"0\"\n    if n == 0:\n        return \"0\"\n\n    # Base case: if n has only one digit, return it as a binary string\n    if n < 10:\n        return str(n)\n\n    # Recursive case: convert n to binary, then remove the last digit\n    binary_n = decimal_to_binary(n // 2)\n    return str(n % 2) + binary_n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using bitwise operators.\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # check if input is positive integer\n    if type(n)!= int or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # initialize an empty list to store the binary digits\n    binary_digits = []\n\n    # loop until n is zero\n    while n > 0:\n        # get the last digit of n\n        digit = n % 2\n\n        # append the digit to the list of binary digits\n        binary_digits.append(digit)\n\n        # divide n by 2 and round down to the nearest integer\n        n = (n - digit) // 2\n\n    # convert the list of binary digits to a string and remove leading zeros\n    binary_string = ''.join([str(d) for d in binary_digits[::-1]])\n\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    # Initialize an empty string to store the binary equivalent\n    binary = \"\" \n    # Convert the decimal number to a string and store it in a variable\n    decimal = str(n) \n    # Initialize a flag variable to keep track of the position of the last set bit \n    last_bit = len(decimal) - 1 \n    # Loop through each digit in the decimal number and convert it to its binary equivalent\n    for i in range(len(decimal)): \n        digit = decimal[i] \n        # Convert the digit to its binary equivalent and append it to the binary string\n        binary += str(int(digit)) \n    # Reverse the binary string to get the actual binary equivalent\n    binary = binary[::-1] \n    # If the last digit is 0, remove it from the binary string \n    if int(binary[-1]) == 0: \n        binary = binary[:-1] \n    # Return the binary string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert the decimal number to binary using bitwise operators.\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n\n    # Remove any leading zeros from the binary string.\n    while binary.startswith('0') and len(binary) > 1:\n        binary = binary[1:]\n\n    # Reverse the binary string to get the binary equivalent of the decimal number.\n    return binary[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    # convert the integer to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # if the reversed number is odd, add a 0 to the beginning of it\n    if len(reversed_num) % 2!= 0:\n        reversed_num = '0' + reversed_num\n    # compute the length of the original number and the reversed number\n    num_length = len(num)\n    reversed_length = len(reversed_num)\n    # subtract the lengths and add 1\n    shift = abs(num_length - reversed_length) - 1\n    # add a 9 to the beginning of the reversed number if necessary\n    if num_length > reversed_length:\n        reversed_num = '9' + reversed_num\n    # reverse the original number again and concatenate it with the shifted reversed number\n    result = str(num)[::-1] + str(reversed_num)[shift:]\n    # convert the result back to an integer\n    return int(result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is odd or even\n    if num % 2 == 0:\n        # Check if the input number is even and greater than 2\n        while num % 2 == 0:\n            num = (num // 2) + 1\n        # Find the next smallest palindrome of the number\n        for i in range(num, 10**9, -1):\n            if i == 1:\n                break\n            if i % 11 == 0:\n                continue\n            if str(i)[::-1] == str(i)[::-1][0:2]:\n                return i\n    else:\n        # Check if the input number is odd and greater than 2\n        while num % 2 == 1:\n            num = (num // 2) + 1\n        # Find the next smallest palindrome of the number\n        for i in range(num, 10**9, -1):\n            if i == 1:\n                break\n            if i % 11 == 0:\n                continue\n            if str(i)[::-1] == str(i)[::-1][0:2]:\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        num = -num\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    if num < 0:\n        num = -num\n    return str(num) == str(num)[::-1]\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        num = int(sys.argv[1])\n    else:\n        num = 1\n    result = next_smallest_palindrome(num)\n    print(\"Next smallest palindrome of\", num, \"is\", result)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 10**6:\n        return 0\n    \n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    def find_next_smallest(num):\n        if is_palindrome(num+1):\n            return num+1\n        else:\n            return find_next_smallest(num+1)\n    \n    return find_next_smallest(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    i = 10**(num-1)\n    while True:\n        if i + 1 <= 10**num and is_palindrome(i + 1):\n            return i + 1\n        i += 1\n\nif __name__ == '__main__':\n    if len(sys.argv)!= 2:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")\n        sys.exit(1)\n    num = int(sys.argv[1])\n    if num < 1:\n        print(\"The next smallest palindrome is not found for a number less than 1.\")\n    else:\n        print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Check if the number is even or odd\n    if num % 2 == 0:\n        # If even, find the smallest odd number\n        smallest_odd = 2\n        while smallest_odd % num!= 0:\n            smallest_odd += 2\n        return smallest_odd\n    else:\n        # If odd, find the smallest even number\n        smallest_even = 2\n        while smallest_even % num!= 0:\n            smallest_even += 2\n        return smallest_even - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert integer to string\n    s = str(num)\n    # Reverse the string\n    s = s[::-1]\n    # Find the index of the largest digit\n    index = 0\n    for i, c in enumerate(s):\n        if c!= '0':\n            index = i\n            break\n    # Replace the largest digit with 9\n    s = s[:index] + '9' + s[index:]\n    # Convert the string back to an integer\n    result = int(s)\n    return result"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the smallest palindrome to be the given number\n    smallest_palindrome = num\n    \n    # Loop through all possible palindromes of the form 9999...999\n    for i in range(9, -1, -1):\n        for j in range(9, -1, -1):\n            for k in range(9, -1, -1):\n                palindrome = i*1000 + j*100 + k\n                if palindrome > num and is_palindrome(palindrome):\n                    # Check if the palindrome is smaller than the current smallest palindrome\n                    if palindrome < smallest_palindrome:\n                        smallest_palindrome = palindrome\n    \n    # Return the smallest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    \n    # Check if the number is a palindrome or not\n    if num == int(str(num)[::-1]):\n        # If it is, find the next smaller palindrome\n        prev = int(str(num)[::-1])\n        curr = prev - 1\n        \n        while curr >= 10:\n            prev = curr\n            curr = prev - 1\n        \n        return curr\n        \n    else:\n        # If it's not, start from the next smallest number greater than the input number\n        next_num = num + 1\n        \n        while True:\n            if next_num % 10 == 0:\n                next_num += 1\n            else:\n                break\n        \n        return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Reverse the string\n    num_str = num_str[::-1]\n\n    # Check if the reversed string is greater than or equal to the original number\n    is_palindrome = (num_str == num_str[::-1])\n\n    # If it is, find the next smallest palindrome by adding 1\n    if is_palindrome:\n        num += 1\n\n        # Convert the integer back to a string\n        num_str = str(num)\n\n        # Reverse the string\n        num_str = num_str[::-1]\n\n    # If it's not a palindrome, return the original number\n    else:\n        return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        raise ValueError('The value of k is greater than the length of the array.')\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = n - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid-1] < arr[mid] and arr[mid] < arr[mid+1]:\n                return arr[mid-1]\n            elif arr[mid-1] > arr[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k:\n        return \"Array is smaller than k.\"\n    for i in range(n):\n        if i < k-1:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    \n    if k == 1:\n        return arr[0]\n    \n    if k == len(arr):\n        return arr[-1]\n    \n    middle = len(arr) // 2\n    \n    if k < middle + 1:\n        return kth_element(arr[:middle], k)\n    else:\n        return kth_element(arr[middle:], k - middle - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[-1]\n    else:\n        left = 0\n        right = n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first letter of each word to upper case\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join the words back together with a space as the separator\n    camel_case =''.join(words)\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().replace('_','').split())"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first word\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i > 0 and word[i-1] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    first_word = word.split(\"_\")[0]\n    return first_word + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: The camel case string.\n    \"\"\"\n    # Convert all underscores to spaces\n    words = word.replace(\"_\", \" \")\n    # Split the words into individual words\n    words = words.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    camel_case = \" \".join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i == len(word) - 1:\n            camel_case += word[i]\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word except the first one\n    camel_case_word = words[0].capitalize()\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case = words[0].lower()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i > 0 and word[i-1] == '_':\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix with zeros\n    a = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill the matrix with 1's in the top left corner\n    for i in range(1, n + 1):\n        a[i][1] = 1\n\n    # Fill the matrix with 1's in the top right corner\n    for j in range(1, m + 1):\n        a[1][j] = 1\n\n    # Fill the matrix with 1's in the lower right corner\n    for i in range(2, n + 1):\n        for j in range(2, m + 1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n\n    # Calculate the Eulerian number a(n, m)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] == 0:\n                a[i][j] = 1\n\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the variables\n    A = [[0] * (m + 1) for i in range(n + 1)]\n    B = [[0] * (m + 1) for i in range(n + 1)]\n    C = [[0] * (m + 1) for i in range(n + 1)]\n    D = [[0] * (m + 1) for i in range(n + 1)]\n\n    # Fill the matrices with the values\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            A[i][j] = (i + 1) * (j + 1)\n            B[i][j] = (i + 1) * (m - j + 1)\n            C[i][j] = (n - i + 1) * (j + 1)\n            D[i][j] = (n - i + 1) * (m - j + 1)\n\n    # Calculate the Eulerian number using matrix exponentiation\n    def matrix_power(matrix, n):\n        result = [[1, 0], [0, 1]]\n        while n > 0:\n            if n % 2 == 1:\n                result = matrix_multiply(result, matrix)\n            matrix = matrix_multiply(matrix, matrix)\n            n //= 2\n        return result\n\n    def matrix_multiply(matrix1, matrix2):\n        result = [[0, 0], [0, 0]]\n        for i in range(1, m + 1):\n            for j in range(1, m + 1):\n                for k in range(1, n + 1):\n                    result[i][j] += matrix1[i][k] * matrix2[k][j]\n        return result\n\n    return matrix_power(A, m + 1)[1][1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is a(n, m) in base 10.\n\n    a(n, m) = 10^(n-m+1) * (1 - 1/10^m) * (1 - 1/10^(m-1)) *... * (1 - 1/10^1)\n\n    The first term is the sum of the first m terms of the power series.\n\n    Args:\n        n (int): The value of n in a(n, m).\n        m (int): The value of m in a(n, m).\n\n    Returns:\n        int: The value of a(n, m) in base 10.\n    \"\"\"\n    result = 1\n    for i in range(1, m+1):\n        result *= 1 - 1/(10**i)\n    return int(result*10**(n-m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [0] * (n + 1)\n    a[1] = 1\n    for i in range(2, n + 1):\n        a[i] = 2 * a[i - 1] + 1\n    for i in range(1, m + 1):\n        a[1] += a[n - i + 1]\n    return a[m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Create a dictionary to store the possible values for the first row and column\n    possible_values = {1: [], 2: [1], 3: [1, 2], 4: [1, 2, 3], 5: [1, 2, 3, 4], 6: [1, 2, 3, 4, 5], 7: [1, 2, 3, 4, 5, 6], 8: [1, 2, 3, 4, 5, 6, 7], 9: [1, 2, 3, 4, 5, 6, 7, 8], 10: [1, 2, 3, 4, 5, 6, 7, 8, 9]}\n\n    # Initialize the first row and column with 1\n    row1 = [1]\n    col1 = [1]\n\n    # Check if the given values are valid\n    if n not in possible_values or m not in possible_values[n]:\n        print(\"Invalid values for n or m.\")\n        return\n\n    # If the given values are valid, find the Eulerian number\n    for i in range(1, m+1):\n        new_row = []\n        new_col = []\n        for j in range(1, n+1):\n            # Add the values in the current row and column to the new row and column\n            new_row.append(row1[j-1])\n            new_col.append(col1[j-1])\n\n            # Check if the new row and column forms a valid Eulerian path\n            if sum(new_row) == n * m or sum(new_col) == n * m:\n                return\n\n            # Generate the new values for the next row and column\n            if new_row[-1] + i <= n:\n                new_row.append(new_row[-1] + i)\n            else:\n                new_row.append(1)\n            if new_col[-1] + i <= m:\n                new_col.append(new_col[-1] + i)\n            else:\n                new_col.append(1)\n\n        # Update the values for the next row and column\n        row1 = new_row\n        col1 = new_col\n\n    # If no valid Eulerian path is found, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Base case\n    if n == 0:\n        return m\n    # Recursive case\n    return eulerian_num(n-1, (n * m) % 1000000007)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return (n * (n + 1)) // 2\n    elif m == 1:\n        return n\n    else:\n        return (n * (n + 1)) // 2 - m * (m - 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    dp = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if i % 2 == 0:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j]\n    return dp[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a *= (m-i+1) // i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    # Initialize memoization table\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Base case: if there is no edge, there are two paths\n    if m == 0:\n        dp[0][0] = 2\n\n    # Fill memoization table\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # For each edge, add up paths that end at each node\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[n][m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool):\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    count_true = 0   \n    for i in lst:   \n        if i is True:   \n            count_true += 1   \n    return count_true   "
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(lst, tup):\n    \"\"\"\n    Append the given list to the given tuples.\n    \"\"\"\n    return lst + tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple using the extend() method\n    test_tup.extend(test_list)\n    # Print the modified tuple\n    print(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # Append the list to the tuple\n    test_tup += test_list\n\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the list with the tuple\n    combined_list = test_list + test_tup\n    # Convert the list back to a tuple\n    combined_tup = tuple(combined_list)\n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + test_list\n    \n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    test_list.append(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    test_tup = test_tup + new_list\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Convert the lists into a heap\n    heap1 = [int(x) for x in num1]\n    heap2 = [int(x) for x in num2]\n    heap3 = [int(x) for x in num3]\n    # Merge the heaps\n    heaps = [heapq.heappop(heap1) if heapq.heappop(heap2) < heapq.heappop(heap3) else heapq.heappop(heap2) for i in range(len(heap1) + len(heap2))]\n    heaps.extend([heapq.heappop(heap3) if heapq.heappop(heap1) < heapq.heappop(heap2) else heapq.heappop(heap1) for i in range(len(heap3))])\n    # Convert the heaps back into a list\n    result = [str(x) for x in heaps]\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Sort the three lists using heap sort\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    for i in num1:\n        heapq.heappush(heap1, i)\n    for i in num2:\n        heapq.heappush(heap2, i)\n    for i in num3:\n        heapq.heappush(heap3, i)\n\n    # Merge the sorted lists using another heap sort\n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        elif heapq.heappop(heap1) > heapq.heappop(heap2):\n            result.append(heapq.heappop(heap2))\n        else:\n            result.append(heapq.heappop(heap3))\n            heapq.heappop(heap2)\n\n    # Add any remaining elements from the heaps\n    result.extend(heap1)\n    result.extend(heap2)\n    result.extend(heap3)\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a list to hold the merged sorted list\n    merged_list = []\n\n    # Add the elements of the first list to the merged list\n    for num in num1:\n        heapq.heappush(merged_list, num)\n\n    # Add the elements of the second list to the merged list\n    for num in num2:\n        heapq.heappush(merged_list, num)\n\n    # Add the elements of the third list to the merged list\n    for num in num3:\n        heapq.heappush(merged_list, num)\n\n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge two lists\n    merged_list = heapq.merge(num1, num2)\n\n    # Merge the merged list with num3\n    merged_list = heapq.merge(merged_list, num3)\n\n    # Return the sorted merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): The first sorted list.\n    num2 (list): The second sorted list.\n    num3 (list): The third sorted list.\n\n    Returns:\n    list: The merged sorted list.\n    \"\"\"\n    # Merge the three lists into a single sorted list.\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n\n    while i < len(num1) and k < len(num3):\n        if num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    while j < len(num2) and k < len(num3):\n        if num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three sorted lists as input and returns a single sorted list.\n    \"\"\"\n    result = []\n    heapq.merge(num1, num2, result)\n    heapq.merge(result, num3, result)\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Combine the two lists and remove duplicates\n    combined_list = list(set(num1+num2))\n    # Combine the three lists and remove duplicates\n    combined_list = list(set(combined_list+num3))\n    # Sort the combined list\n    combined_list = sorted(combined_list)\n    # Return the sorted list\n    return combined_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n\n    # Initialize the index variable to 0\n    index = 0\n\n    # Loop n times\n    for i in range(n):\n        # Find the leftmost occurrence of '1' in the binary string\n        while s[index] == '0':\n            index += 1\n\n        # Find the rightmost occurrence of '1' in the binary string\n        right = index\n        while s[right] == '1':\n            right += 1\n\n        # If the length of the odd part is greater than 0, increment the count variable\n        if right - index > 0:\n            count += 1\n\n        # Rotate the binary string by one index\n        s = s[index:right] + s[:index]\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # initializing variables\n    count = 0\n    k = len(s) - 1\n    s = s.ljust(k, '0')\n    s = s.replace('1', '0')\n    s = s.replace('0', '1')\n    for i in range(n):\n        s = s[1:] + s[0]\n    for i in range(k):\n        if s[i] == '1':\n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if int(s, 2) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string into an array\n    binary_array = [int(x) for x in s]\n\n    # Initialize a variable to store the number of odd values\n    odd_count = 0\n\n    # Rotate the array n times\n    for i in range(n):\n        # Reverse the order of the elements in the array\n        binary_array.reverse()\n        # Initialize a variable to store the number of odd values\n        odd_count = 0\n        # Iterate over the array and count the odd values\n        for j in range(len(binary_array)):\n            if binary_array[j] % 2!= 0:\n                odd_count += 1\n        # Reverse the order of the elements in the array again\n        binary_array.reverse()\n\n    # Return the number of odd values\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    s = s[::-1]  # Reverse the string\n    odd_count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '1':\n            odd_count += 1\n        i += n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables\n    count = 0\n    prev_digit = s[0]\n    \n    # loop through the binary string n times\n    for i in range(n):\n        # convert binary string to decimal\n        dec_val = int(s, 2)\n        \n        # if the decimal value is odd, increment count\n        if dec_val % 2!= 0:\n            count += 1\n        \n        # reverse the binary string\n        s = bin(dec_val)[2:][::-1]\n        \n        # check if the previous digit is odd or even\n        if int(prev_digit) % 2!= 0:\n            count += 1\n        \n        # update previous digit\n        prev_digit = s[0]\n    \n    # return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the input string into a binary string\n    binary = bin(int(s,2))[2:]\n\n    # initialize the count to zero\n    count = 0\n\n    # iterate over the binary string n times\n    for i in range(n):\n        # get the last bit of the binary string\n        last_bit = binary[-1]\n\n        # iterate over the binary string from the second to last bit to the second last bit\n        for j in range(len(binary)-2, -1, -1):\n            # shift the binary string by one bit to the right\n            binary = binary[:j] + binary[j+1:]\n\n        # if the last bit is odd, increment the count\n        if last_bit == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): A binary string to be rotated.\n    n (int): A positive integer representing the number of rotations.\n\n    Returns:\n    int: The number of odd numbers with an odd value after rotating the binary string n times.\n    \"\"\"\n    # Initialize variables\n    odd_count = 0\n    # Convert the binary string to a list of binary digits\n    binary_list = list(map(str, bin(int(s))[2:]))\n    # Reverse the list to get the original binary string\n    binary_list.reverse()\n    # Loop through the list of binary digits and check if they are odd\n    for digit in binary_list:\n        if int(digit) % 2!= 0:\n            odd_count += 1\n    # Return the number of odd numbers with an odd value after rotating the binary string n times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables to store the count of odd values and the binary string rotated n times\n    count = 0\n    rotated_str = s\n\n    # Loop n times to rotate the binary string\n    for i in range(n):\n        # Convert the binary string to a list of digits\n        bin_list = [int(digit) for digit in s]\n\n        # Reverse the list\n        bin_list.reverse()\n\n        # Convert the reversed list back to a binary string and append it to the rotated_str variable\n        rotated_str = ''.join([str(digit) for digit in bin_list])\n\n    # Loop through the rotated binary string and count the number of odd values\n    for digit in rotated_str:\n        if int(digit) % 2 == 1:\n            count += 1\n\n    # Return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    def rotate(s):\n        return s[-1] + s[0:-1]\n    count = 0\n    for i in range(n):\n        s = rotate(s)\n        for j in range(len(s)):\n            if int(s[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1:\n        return []\n    else:\n        # Get the first element of the nested list\n        first = nestedlist[0]\n        # Create a set to store the common elements\n        common = set()\n        # Iterate through the rest of the nested list\n        for sublist in nestedlist[1:]:\n            # Create a set of the sublist elements\n            sublist_set = set(sublist)\n            # Find the common elements of the current sublist with the first sublist element\n            common_elements = sublist_set.intersection(set(first))\n            # Add the common elements to the common set\n            common.update(common_elements)\n        # Convert the common set to a list\n        common_list = list(common)\n        # Recursively call the function with the rest of the nested list and return the common elements\n        return common_list + common_in_nested_lists(nestedlist[1:])"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            common_elements.append(j)\n    return list(set(common_elements))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # create an empty set to store common elements\n    common = set()\n    \n    # loop through each list in the nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist\n        for element in sublist:\n            # add the element to the set if it is common to all sublists\n            if element in common:\n                common.add(element)\n    \n    # convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Remove duplicates from the given nested list\n    unique_list = list(set(nestedlist))\n\n    # Find common elements between all pairs of nested lists\n    common_elements = []\n    for i in range(len(unique_list)):\n        for j in range(i+1, len(unique_list)):\n            if set(unique_list[i]) & set(unique_list[j]):\n                common_elements.append(set(unique_list[i]) & set(unique_list[j]))\n\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n                break\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n    # Loop through the nested lists\n    for lst in nestedlist:\n        # Loop through the elements in the list\n        for elem in lst:\n            # Add the element to the common set if it's not already there\n            if elem not in common_set:\n                common_set.add(elem)\n    # Return the list of common elements\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                continue\n            if not all(x in j for x in i):\n                continue\n            common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # loop through the nested lists\n    for i in range(len(nestedlist)):\n        # loop through the elements in the nested list\n        for j in range(len(nestedlist[i])):\n            # check if the element is already in the result list\n            if nestedlist[i][j] not in result:\n                result.append(nestedlist[i][j])\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pattern = r'^[+-]?(\\d+)$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty list to hold the integer values\n    result = []\n    # iterate over the tuple elements\n    for num in nums:\n        # convert each number to an integer and append it to the result list\n        result.append(int(num))\n    # concatenate the integer values into a single string and return it as an integer\n    return int(''.join(map(str, result)))"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # convert the tuple to a list\n    nums_list = list(nums)\n    # initialize the sum of the integers to zero\n    sum_int = 0\n    # iterate through the list of integers\n    for num in nums_list:\n        # add each integer to the sum\n        sum_int += num\n    # return the sum of the integers\n    return sum_int"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes in a tuple of positive integers as input and returns the sum of all the integers in the tuple.\n    \"\"\"\n    # Initialize a variable to store the sum of the integers in the tuple\n    total = 0\n    \n    # Loop through each integer in the tuple and add it to the total variable\n    for num in nums:\n        total += num\n        \n    # Return the total sum of the integers in the tuple\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list of integers\n    nums_list = list(nums)\n    \n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over the list and add each integer to the result\n    for num in nums_list:\n        result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the integer variable to 0\n    int_sum = 0\n    # Loop through the list of numbers\n    for num in nums_list:\n        # Add each number to the integer sum\n        int_sum += num\n    # Return the final integer sum\n    return int_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for element in test_list:\n        try:\n            result_list.append(float(element))\n        except ValueError:\n            pass\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each element in the list\n    for i in range(len(test_list)):\n        # check if the element is convertible to a float\n        try:\n            test_list[i] = float(test_list[i])\n        # if it is not convertible, print an error message\n        except ValueError:\n            print(f\"Error: {i}th element in list is not convertible to a float.\")\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float, str)):\n                new_item = float(item)\n                new_list.append(new_item)\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, row in enumerate(test_list):\n        for j, value in enumerate(row):\n            try:\n                test_list[i][j] = float(value)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        for j in i:\n            if isinstance(j, (int, float)):\n                new_list.append(float(j))\n            elif isinstance(j, str):\n                try:\n                    new_list.append(float(j))\n                except ValueError:\n                    new_list.append(j)\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str):\n                element = float(element)\n            elif isinstance(element, (int, float)):\n                element = float(element)\n            elif element is None:\n                element = None\n            else:\n                raise TypeError(f\"Element {element} is not convertible to float.\")\n            sublist[sublist.index(element)] = element"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert string to list\n    lst = string.split()\n    # Return list\n    return lst"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    \n    # Iterate through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Traverse the array and update the frequency of each element in the dictionary\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Traverse the dictionary and find the element that appears only once\n    for i in freq:\n        if freq[i] == 1:\n            return i\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            count += 1\n            if count == 2:\n                return arr[i]\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return -1 # if the array has duplicates, return -1\n    \n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    \n    return -1 # if the array is sorted and no duplicate elements are found, return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables to keep track of the element and its count\n    unique_element = None\n    count = 0\n\n    # Loop through the array\n    for num in arr:\n        # If the element is the same as the previous unique element, increment the count\n        if num == unique_element:\n            count += 1\n        # If the element is not the same as the previous unique element, update the count and save the current element\n        else:\n            unique_element = num\n            count = 1\n\n    # If the array is empty or only contains one element, return None\n    if count == 1:\n        return None\n    # If the element appears only once, return it\n    else:\n        return unique_element\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once.\n    \"\"\"\n    unique_element = None\n    count = 0\n\n    for num in arr:\n        if num == unique_element:\n            count += 1\n        elif num!= unique_element:\n            if count == 1:\n                unique_element = num\n                count = 0\n            else:\n                count = 0\n\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the element that appears only once in the array\n    unique_element = None\n    # Initialize a variable to store the count of occurrences of the element in the array\n    count = 0\n    # Loop through the array and increment the count of occurrences of the element as we encounter it\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1] and arr[i]!= unique_element:\n            count += 1\n            # Update the unique_element variable if we encounter a repeated element\n            unique_element = arr[i]\n    # Return the unique element if it exists, otherwise return None\n    return unique_element if unique_element is not None else None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the maximum absolute product\n    max_product = 0\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list starting from the next tuple\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the numbers in each tuple\n            product = abs(list1[i][0]*list1[j][1])\n            # Check if the absolute product is greater than the current maximum product\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n    pairs = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] - list1[j][0]) * abs(list1[i][1] - list1[j][1])\n            pairs.append((list1[i], list1[j], diff))\n\n    for pair in pairs:\n        if pair[2] > max_product:\n            max_product = pair[2]\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list as input and finds the maximum absolute product between numbers in pairs of tuples\n    within the list.\n    '''\n    max_product = float('-inf')\n    max_product_tuple = None\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n                max_product_tuple = (lst[i], lst[j])\n\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_abs_product:\n                max_abs_product = abs(list1[i][0]*list1[j][1])\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    '''\n    This function takes a list of tuples and returns the maximum absolute product of pairs of numbers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the maximum product and the indices of the two numbers in the pair\n    max_product = float('-inf')\n    index1, index2 = 0, 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two numbers in the pair\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            \n            # Update the maximum product and the indices of the two numbers in the pair if the current product is greater\n            if product > max_product:\n                max_product = product\n                index1, index2 = i, j\n    \n    # Return the maximum product and the indices of the two numbers in the pair\n    return max_product, index1, index2"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    max_product = 0\n    product = 1\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] - list1[j][0]) * abs(list1[i][1] - list1[j][1])\n            if diff > max_product:\n                max_product = diff\n                product = (list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n\n    return product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == sum_of_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef sum_of_amicable(n):\n    '''\n    Calculate the sum of all amicable numbers from 1 to n.\n    '''\n    sum_amicable = 0\n    for i in range(1, n):\n        if n % i == 0 and sum_of_amicable(i) == n/i:\n            sum_amicable += i\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1:\n            if i in amicable_numbers:\n                amicable_numbers.append(i)\n            else:\n                j = 1\n                while j <= limit//i:\n                    if i*j == j or j*i == j:\n                        if j == 1 or j == i:\n                            amicable_numbers.append(i)\n                            break\n                        elif i*j == i:\n                            break\n                    j += 1\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter the upper limit: \"))\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def is_amicable(num):\n        \"\"\"\n        Determine whether a number is amicable or not.\n        \"\"\"\n        a = sum([i for i in range(1, int(num**0.5)+1) if num % i == 0])\n        return a == num\n\n    def sum_amicable(limit):\n        \"\"\"\n        Sum all the amicable numbers from 1 to a specified limit.\n        \"\"\"\n        total = 0\n        for num in range(1, limit+1):\n            if is_amicable(num):\n                total += num\n        return total\n\n    return sum_amicable(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def sum_of_proper_divisors(n):\n        \"\"\"\n        Helper function to compute the sum of proper divisors of a number n.\n        \"\"\"\n        divisors = [i for i in range(1, n+1) if n % i == 0]\n        return sum(divisors)\n    \n    # Compute the proper divisors of numbers from 2 to limit\n    proper_divisors = []\n    for n in range(2, limit+1):\n        if n == 1:\n            continue\n        proper_divisors.append(sum_of_proper_divisors(n))\n    \n    # Compute the sum of amicable numbers\n    amicable_sum = 0\n    for n in range(2, limit+1):\n        if n == 1:\n            continue\n        if n in proper_divisors:\n            continue\n        if sum_of_proper_divisors(n) == n:\n            amicable_sum += n\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_sum += num\n    \n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable to any number from 1 to its square root.\n    '''\n    sqrt = int(num**0.5)\n    for i in range(1, sqrt+1):\n        if (num % i == 0) and (i!= num // i):\n            return True\n    return False\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit+1):\n        if i == sum_amicable:\n            continue\n        elif is_amicable(i, sum_amicable):\n            sum_amicable += i\n    return sum_amicable\n\ndef is_amicable(num1, num2):\n    if num1 == num2 or num1 + num2 == 1:\n        return False\n    elif num1 == sum_amicable or num2 == sum_amicable:\n        return True\n    else:\n        return is_amicable(num1, num2)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize a set to store amicable numbers\n    amicable_set = set()\n\n    # Check all numbers from 1 to limit-1\n    for num in range(1, limit):\n\n        # Check if the current number is amicable to any other number\n        for i in range(2, num):\n            if num % i == 0:\n                # Check if the product of the two numbers is also an amicable number\n                if i*num in amicable_set:\n                    # Add the product to the set\n                    amicable_set.add(num*i)\n                    # Add the original number to the set\n                    amicable_set.add(num)\n                else:\n                    # Check if the product is already in the set\n                    if i*num == num:\n                        # Add the original number to the set\n                        amicable_set.add(num)\n\n    # Calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_set)\n\n    # Print the sum\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", amicable_sum)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a given number is amicable or not.\n    \"\"\"\n    # find the sum of proper divisors of the number\n    sum_of_proper_divisors = sum([x for x in range(1, int(num**0.5)+1) if num % x == 0])\n    # if the sum is equal to the original number, the number is amicable\n    return sum_of_proper_divisors == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        elif i == 2:\n            amicable_numbers.append(i)\n        else:\n            is_amicable = False\n            for j in range(2, i):\n                if i % j == 0:\n                    is_amicable = True\n                    break\n            if is_amicable:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n\n    # Function to check if a number is amicable or not\n    def is_amicable(num):\n        if num < 2:\n            return False\n\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n\n        return True\n\n    # Function to get the sum of two numbers\n    def sum_of_two_numbers(a, b):\n        return a + b\n\n    # Initializing the sum variable\n    amicable_sum = 0\n\n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Check if the sum of the two numbers is also amicable\n            if is_amicable(sum_of_two_numbers(num, num)):\n                # If both conditions are satisfied, add the number to the sum\n                amicable_sum += num\n\n    # Return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return round(angle, 4)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a,b))\n    angle_rad = angle * (cmath.pi/180)\n    angle_deg = angle_rad * (180/cmath.pi)\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j) # angle in radians\n    angle = cmath.phase(a-b*1j) # angle in radians\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex numbers.\n    '''\n\n    angle = cmath.phase(a * b)\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    \"\"\"\n\n    # Convert the complex number to polar form\n    mag = abs(a+b)\n    arg = cmath.phase(a+b)\n\n    # Calculate the angle in degrees\n    angle = arg*180/cmath.pi\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    :param a: real part of the complex number\n    :param b: imaginary part of the complex number\n    :return: angle of the complex number in radians\n    \"\"\"\n    # Convert the complex number to polar coordinates\n    r, theta = cmath.polar(a + b*1j)\n\n    # Return the angle in radians\n    return theta"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n\n        if i == 0 or string[i]!= string[i-1]:\n            max_diff = max(max_diff, count)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff += 0\n                    \n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count_0 = 0\n            count_1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_0 += 1\n                else:\n                    count_1 += 1\n\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    # Initialize the count of 0s and 1s in each substring\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # Check if the current character is a 0 or a 1\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        \n        # Update the maximum difference if the count of 0s is less than the count of 1s\n        if count0 < count1:\n            max_diff = max(max_diff, count1 - count0)\n        \n        # Update the count of 0s and 1s for the next iteration\n        count0 = 0\n        count1 = 0\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n        if count_zeros > 0 and count_ones > 0:\n            max_diff = max(max_diff, count_zeros - count_ones)\n        if i + 1 < n and string[i] == string[i+1]:\n            count_zeros = 0\n            count_ones = 0\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [0] * n\n    max_diff = 0\n    for i in range(1, n):\n        if string[i] == string[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = 1\n        if i > 1:\n            dp[i] = max(dp[i], dp[i-2] + 1)\n        max_diff = max(max_diff, dp[i])\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    n = len(string)\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        diff = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the common divisors of the two numbers\n    common_divisors = set(set(a) & set(b))\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize variables to store the sum and the set of common divisors\n    sum_cd = 0\n    common_divisors = set()\n    \n    # Check if the numbers are non-negative integers\n    if not isinstance(a, int) or not isinstance(b, int) or a < 0 or b < 0:\n        return \"Error: Both numbers must be non-negative integers.\"\n    \n    # Calculate the sum of common divisors of a and b\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n            common_divisors.add(i)\n    \n    # Return the sum of common divisors and the set of common divisors\n    return sum_cd, common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to find common divisors of two numbers\n    def find_common_divisors(a, b):\n        \"\"\"\n        Function to find common divisors of two numbers.\n        \"\"\"\n        # Create a list of all possible divisors of a and b\n        divisors = [i for i in range(1, max(a, b) + 1) if a % i == 0 and b % i == 0]\n        # Calculate the sum of common divisors\n        common_divisors_sum = sum(divisors)\n        return common_divisors_sum\n\n    # Calculate the sum of common divisors of a and b\n    common_divisors_sum = find_common_divisors(a, b)\n    # Print the result\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is:\", common_divisors_sum)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the set of common divisors of a and b\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    # Finding the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n    # Returning the sum of common divisors\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(x, y):\n        \"\"\"\n        Recursive function to find the greatest common divisor of two numbers.\n        \"\"\"\n        if y == 0:\n            return x\n        else:\n            return gcd(y, x % y)\n\n    def sum_of_divisors(n):\n        \"\"\"\n        Recursive function to find the sum of the common divisors of a number.\n        \"\"\"\n        divisors = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                if i!= n // i:\n                    divisors.add(n // i)\n        return sum(divisors)\n\n    return sum_of_divisors(gcd(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a % b == 0:\n        return b + sum(a // b, b)\n    else:\n        return sum(a, b - 1)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    # calculate the sum of all the divisors of a\n    div_sum = sum(i for i in range(1, a+1) if a % i == 0)\n\n    # calculate the sum of all the divisors of b\n    div_sum += sum(i for i in range(1, b+1) if b % i == 0)\n\n    return div_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    Returns the common divisor of two given numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef sum(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    return (a * b) // common_divisor(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Use set() to remove duplicates from the given numbers\n    a = set(a)\n    b = set(b)\n    \n    # Find the intersection of the two sets\n    common = a.intersection(b)\n    \n    # Calculate the sum of the common divisors\n    sum_common = sum(common)\n    \n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of the two given numbers\n    c = a\n    d = b\n    while c!= d:\n        if c > d:\n            c = c - d\n        else:\n            d = d - c\n    # Calculate the sum of common divisors\n    common_divisor = c\n    sum_of_common_divisors = 0\n    for i in range(1, common_divisor + 1):\n        if common_divisor % i == 0:\n            sum_of_common_divisors = sum_of_common_divisors + i\n    return sum_of_common_divisors"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        temp = y\n        y = x % y\n        x = temp\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n        result += x\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    n (int): the maximum number of characters that a word can have.\n    str (list): a list of words.\n\n    Returns:\n    list: a list of words that are longer than n characters.\n\n    \"\"\"\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # create an empty list to store the words that are longer than n characters\n    long_words = []\n\n    # loop through each word in the list\n    for word in str:\n        # check if the length of the word is greater than n\n        if len(word) > n:\n            # append the word to the list of longer words\n            long_words.append(word)\n\n    # return the list of longer words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    n (int): The maximum number of characters that a word can have.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))]\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum_2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    return (row_sums == col_sums) and (row_sums == diag_sum_1) and (row_sums == diag_sum_2)"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    square = [[0 for x in range(n)] for y in range(n)]\n\n    # Check if the matrix has the same number of rows and columns\n    if n!= len(set(len(row) for row in my_matrix)):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                square[i][j] += my_matrix[i][k]\n                if square[i][j] > n ** 2:\n                    return False\n                square[i][j] -= my_matrix[i][k]\n                square[j][i] += my_matrix[k][j]\n                if square[j][i] > n ** 2:\n                    return False\n                square[j][i] -= my_matrix[k][j]\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if matrix is a square matrix\n    if n!= len(set(map(list, my_matrix))):\n        return False\n    # check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            if sum(my_matrix[i]) == n * (i + 1) or sum(my_matrix[j]) == n * (j + 1) or my_matrix[i][j] == n * (i + j + 1):\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # create a set to store the sum of each row and column\n    row_sum_set = set()\n    col_sum_set = set()\n    \n    # iterate through each row and column\n    for i in range(len(my_matrix)):\n        # add the sum of the row to the set of row sums\n        row_sum_set.add(sum(my_matrix[i]))\n        # add the sum of the column to the set of column sums\n        col_sum_set.add(sum(my_matrix[:, i]))\n    \n    # check if the set of row sums and set of column sums have a single element\n    if len(row_sum_set) == 1 and len(col_sum_set) == 1:\n        return True\n    \n    # if none of the above conditions are met, it is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the diagonal elements\n    diagonal_sum = 0\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all elements in the matrix are non-zero\n    for row in my_matrix:\n        for element in row:\n            if element == 0:\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if i == j:\n                # Check if the current element is the sum of its diagonal elements\n                diagonal_sum += my_matrix[i][j]\n                if diagonal_sum > 15:\n                    return False\n            elif i+j == len(my_matrix[i])-1:\n                # Check if the current element is the sum of its diagonal elements\n                diagonal_sum += my_matrix[i][j]\n                if diagonal_sum > 15:\n                    return False\n    \n    # If the matrix is a magic square, it must have a sum of 16 or fewer\n    return diagonal_sum <= 15"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= i+j+1:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the length of the matrix is 3\n    if len(my_matrix)!= 3:\n        return False\n    \n    # Check if all the rows and columns have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Calculate the sum of the rows\n    row_sum = sum(sum(row) for row in my_matrix)\n    \n    # Calculate the sum of the columns\n    col_sum = sum(row[i] for row in my_matrix for i in range(len(row)))\n    \n    # Calculate the sum of the 2x2 submatrices\n    submatrix_sum = sum(sum(my_matrix[i:i+2]) for i in range(0, len(my_matrix)-1, 2))\n    \n    # Check if the row sum, column sum, and submatrix sum are equal\n    if row_sum == col_sum == submatrix_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if all rows are the same\n    for i in range(n):\n        if my_matrix[i]!= my_matrix[0]:\n            return False\n    # check if all columns are the same\n    for j in range(n):\n        col = [my_matrix[i][j] for i in range(n)]\n        if col!= col[0]:\n            return False\n    # check if all 3x3 squares are the same\n    for i in range(n-2):\n        for j in range(n-2):\n            sq = [[my_matrix[i][j], my_matrix[i][j+1], my_matrix[i][j+2]],\n                  [my_matrix[i+1][j], my_matrix[i+1][j+1], my_matrix[i+1][j+2]],\n                  [my_matrix[i+2][j], my_matrix[i+2][j+1], my_matrix[i+2][j+2]]]\n            if sq!= sq[0]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Initialize a counter variable\n    count = 0\n    \n    # Check rows and columns for duplicates\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= my_matrix[i][j+1]:\n                return False\n            if my_matrix[i][j]!= my_matrix[j][i]:\n                return False\n    \n    # Check diagonals for duplicates\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][i+1]:\n            return False\n        if my_matrix[i][i]!= my_matrix[i+1][i]:\n            return False\n    \n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is rectangular\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check for zeros in the matrix\n    for row in my_matrix:\n        for num in row:\n            if num == 0:\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([row[i] for row in my_matrix])\n        diag_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n        if row_sum!= col_sum or row_sum!= diag_sum or col_sum!= diag_sum:\n            return False\n    \n    # If we made it this far, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_num = None\n    max_freq = 0\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_num = num\n            max_freq = freq\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n\n    Args:\n        nums (list): A list of integers representing the frequency of each item in the list.\n\n    Returns:\n        int: The item with the maximum frequency in the given list.\n    \"\"\"\n\n    # create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with the maximum frequency\n    max_freq = 0\n    max_num = None\n    for num in freq_dict:\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Loop through the list and update the frequency of each item\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    max_freq = max(freq.values())\n    for item, freq in freq.items():\n        if freq == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # remove vowels from the string\n    new_str = ''.join([char for char in str1 if char not in vowels])\n    # reverse the string\n    new_str = new_str[::-1]\n    # append vowels back to the string\n    return new_str + ''.join(vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels and char.isalpha():\n            new_str = char + new_str\n        else:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for char in str1:\n        if char.lower() in vowels:\n            if char.lower() not in reversed_vowels:\n                reversed_vowels.append(char.lower())\n    reversed_str = ''.join(reversed_vowels)\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for char in str1:\n        if char.upper() not in vowels:\n            result = char + result\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    vowel_list = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_list.append(str1[i])\n    vowel_list.reverse()\n    rev_str = ''\n    for i in range(len(vowel_list)):\n        rev_str += vowel_list[i]\n    return rev_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = \"\"\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    result = []\n    for char in str1:\n        if char.lower() not in vowels_set:\n            result.append(char)\n    result = ''.join(result)\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_index.append(i)\n    vowels_index.sort(reverse=True)\n    reversed_str = ''\n    for i in vowels_index:\n        reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \", \".join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) + ','\n    return str1[:-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n\n    Args:\n    tup (tuple): a tuple\n\n    Returns:\n    str: the tuple converted to a string\n    \"\"\"\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    string_tup = \",\".join(str(x) for x in tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    # Return the sum\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the total\n        if num < 0:\n            total += num\n    # Return the total\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n * n) - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer greater than 0.\"\n    else:\n        return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2 "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * hexagonal_num(n-1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 2\n    count = 0\n    \n    while count < n:\n        print(a)\n        a += b\n        b += 1\n        count += 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through all possible values of x and y\n    for i in range(1, n+1):\n        # Calculate the value of x\n        x = 2*i - 1\n\n        # Calculate the value of y\n        y = 2*i - 1\n\n        # Calculate the value of z\n        z = (3*i**2 - 1) // 2\n\n        # Calculate the value of r\n        r = (x**2 + y**2 + z**2) ** 0.5\n\n        # Calculate the value of phi\n        phi = (1 + r/2)**0.5\n\n        # Calculate the value of x_prime\n        x_prime = (x - y + z)/phi\n\n        # Calculate the value of y_prime\n        y_prime = (x + y + z)/phi\n\n        # Add the result to the variable\n        result += int(x_prime + y_prime)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n - 1) * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n\n    # Define a function to calculate the nth hexagonal number\n    def nth_hexagonal(n): \n        # The number of rows of hexagonal numbers is equal to the number of columns\n        # multiplied by 2. So we can calculate the nth hexagonal number using this formula:\n        # n*(n-1)*3/2\n        return n * (n - 1) * 3 // 2\n\n    # Return the nth hexagonal number\n    return nth_hexagonal(n)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*(max(nums)+1)) # initialize the count array with zeros\n\n    for num in nums:\n        count[num] += 1 # increment the count for each non-zero integer\n\n    total = len(nums)\n    non_zero_count = 0\n    for count_value in count:\n        if count_value > 0:\n            non_zero_count += 1\n\n    ratio = non_zero_count / total if total > 0 else 0 # calculate the ratio if the array is not empty, else return 0\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_non_zeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_non_zeros += 1\n    return num_zeros / num_non_zeros if num_non_zeros!= 0 else 0"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n    if len(zeros) == 0 or len(non_zeros) == 0:\n        return 0\n    return float(zeros[0]) / non_zeros[0]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros[i] = 1\n    \n    non_zeros = len(nums) - sum(zeros)\n    return non_zeros / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create a new array to store the count of zeros and non-zeros\n    counts = array('i', [0, 0])\n\n    # iterate over the elements of the input array\n    for num in nums:\n        # increment the count of zeros if the number is zero\n        if num == 0:\n            counts[0] += 1\n        else:\n            counts[1] += 1\n\n    # calculate the ratio of zeroes to non-zeroes and return it\n    return counts[0] / counts[1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    ones = array('i', [0])\n    \n    for num in nums:\n        if num == 0:\n            zeros.append(0)\n        else:\n            ones.append(1)\n    \n    ratio = zeros[0] / ones[0]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * 10) # create a count array of size 10 to store the number of occurrences of each digit\n\n    for num in nums:\n        for digit in str(num):\n            count[int(digit)] += 1 # increment the count of the digit\n\n    non_zero_count = sum(count) # get the total number of non-zero digits\n\n    zero_count = sum([count[i] for i in range(10) if count[i] == 0]) # get the count of zeroes\n\n    if non_zero_count == 0: # handle the case when all digits are zero\n        return 0, 0\n    else:\n        return zero_count / non_zero_count, non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(num)\n        else:\n            non_zeros.append(num)\n\n    ratio = zeros[0] / non_zeros[0]\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns a boolean value indicating whether it can be represented as sum of non-zero powers of 2 or not.\n    \n    Examples:\n    is_Sum_Of_Powers_Of_Two(8)  # Output: True\n    is_Sum_Of_Powers_Of_Two(15) # Output: True\n    is_Sum_Of_Powers_Of_Two(20) # Output: False\n    \"\"\"\n\n    if n < 0:\n        return False\n\n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i!= 1:\n                return False\n            if n // i == 1:\n                return True\n            if n // i == i:\n                return False\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the input number to binary form\n    binary = bin(n)[2:]\n    \n    # Split the binary string into digits\n    digits = [int(digit) for digit in binary]\n    \n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(len(digits)):\n        if digits[i]!= 0 and (i == 0 or digits[i]!= digits[i-1]):\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(num):\n        '''\n        A helper function to check whether a given number is a power of 2 or not.\n        '''\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return is_power_of_two(num // 2)\n        else:\n            return False\n\n    def is_sum_of_powers_of_two(n):\n        '''\n        A helper function to check whether a given number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        if n == 0:\n            return True\n        if is_power_of_two(n):\n            return True\n        return is_sum_of_powers_of_two(n - 1)\n\n    if is_sum_of_powers_of_two(n):\n        print(n, \"can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(n, \"can't be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if n is odd\n    if n % 2 == 1: \n        return False \n    # loop through odd numbers from 3 to n/2 \n    for i in range(3, n//2+1, 2): \n        # check if i^2 is a power of 2 and n-i^2 is a power of 2 \n        if (i*i) == (n-i*i) and (n-i*i) == (2**((n//2)-1)): \n            return True \n    return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    This function takes an integer n as input and returns True if it is possible to represent it as sum of non-zero powers of 2. Otherwise, it returns False.\n    '''\n\n    # Initialize two variables to keep track of the sum and the current power of 2\n    sum = 0\n    power = 0\n\n    # Check if the given number is already a power of 2\n    while n > 0:\n        if n % 2 == 0:\n            power += 1\n            n //= 2\n        else:\n            return False\n\n    # Check if the power of 2 is greater than or equal to 2 and the sum of powers of 2 is equal to n\n    if power >= 2 and n - power * (power - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # initialize the count of non-zero powers of 2 \n    count = 0\n\n    # check all possible powers of 2 from 1 to the given number \n    for i in range(1, n+1): \n        # check if the given number can be represented as sum of non-zero powers of 2 using the given power \n        if n % i == 0: \n            # if yes, increment the count \n            count += 1\n            # check if the number can be represented as sum of non-zero powers of 2 using all powers from 1 to i-1 \n            for j in range(1, i): \n                if n % j == 0: \n                    # if yes, increment the count again and exit the inner loop \n                    count += 1\n                    break\n            # if the inner loop exits without any break, it means all powers from 1 to i-1 were not used in the given number \n            break\n\n    # check if the count is equal to the number of non-zero powers of 2 \n    if count == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False\n    power = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n            power += 1\n        else:\n            n -= 1\n    return power == 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables to keep track of power of 2 and sum of powers of 2\n    power_of_two = 1\n    total_sum = 0\n    \n    # Check each bit of the binary representation of n\n    for i in range(32):\n        # If bit is 1, add power of 2 to total sum\n        if n & (1 << i):\n            total_sum += power_of_two\n        \n        # Increment power of 2\n        power_of_two *= 2\n        \n    # Check if total sum is divisible by 2\n    if total_sum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    def check(n):\n        # Initialize sum to 0\n        sum = 0\n        # Iterate through the binary representation of n\n        for i in bin(n)[2:]:\n            # Check if the binary digit is 1\n            if i == '1':\n                # If it is, add 2 raised to the power of the number of 1s in the binary representation\n                sum += 2**sum\n        # Check if the sum is equal to n\n        return sum == n\n    # Check if the given number can be represented as sum of non-zero powers of 2 or not\n    return check(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is even or not\n    if n%2 == 0: \n        return False\n\n    # Initialize variables\n    power = 0\n    sum_of_powers = 0\n\n    # Loop through odd powers of 2 and check if sum of powers is equal to n\n    while power*2 <= n: \n        if n == power*2: \n            return True\n        if n % (power*2) == 0: \n            n -= power*2\n            sum_of_powers += power*2\n        else: \n            sum_of_powers += power*2\n            power += 1\n\n    # If the loop finishes without returning True, then n is not a possible sum of powers of 2\n    return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r  # Formula to find circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # approximation for circumference using the formula pi * r^2\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for calculating circumference of a circle\n    print(\"Circumference of a circle of radius\", r, \"is\", circumference, \"units.\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r  # 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Parameters:\n    test_list (list): A list of lists containing numbers.\n\n    Returns:\n    set: A set containing all the unique numbers in the input list.\n\n    Example:\n    >>> test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> extract_singly(test_list)\n    {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    \"\"\"\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in test_list for item in sublist]\n    # Convert the list to a set to remove duplicates\n    unique_set = set(flat_list)\n    return unique_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list += item\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sub_list in test_list:\n        flattened_list.extend(sub_list)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Convert the list to a string to make it immutable\n    nums = ''.join(str(x) for x in nums)\n    # Convert the string back to a list to sort it\n    nums = list(int(x) for x in sorted(nums))\n    # Convert the list back to a string to make it mutable again\n    nums = ''.join(str(x) for x in nums)\n    # Convert the string back to a list to return it\n    return [int(x) for x in nums]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    # get the length of the list\n    n = len(nums)\n\n    # loop through the list\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # if the maximum element is not in its correct position, swap them\n        if max_index!= i:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # loop through the list\n    for i in range(len(nums)-1, 0, -1):\n        # find the index of the smallest element in the unsorted portion of the list\n        min_idx = i\n        for j in range(i):\n            if nums[j] > nums[min_idx]:\n                min_idx = j\n        \n        # swap the smallest element with the last element of the unsorted portion of the list\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Loop through the list and find the largest element\n    max_num = max(nums)\n    \n    # Loop through the list again and find the smallest element\n    min_num = min(nums)\n    \n    # Loop through the list and break the element into a pancake\n    while max_num > min_num:\n        \n        # Find the index of the maximum element in the list\n        max_index = nums.index(max_num)\n        \n        # Find the index of the minimum element in the list\n        min_index = nums.index(min_num)\n        \n        # Swap the maximum and minimum elements in the list\n        nums[max_index], nums[min_index] = nums[min_index], nums[max_index]\n        \n        # Find the new maximum and minimum elements in the list\n        max_num = max(nums)\n        min_num = min(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Perform n-1 passes of Bubble Sort to get the maximum number of elements in each column\n    for i in range(n-1):\n        # Find the maximum element in the unsorted column\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the first element of the unsorted column\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Print the sorted column after each iteration\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # initialize the length of the list\n    length = len(nums)\n\n    # loop while the length of the list is greater than 1\n    while length > 1:\n\n        # initialize the largest index and its value\n        largest = 0\n        for i in range(1, length):\n            if nums[i] > nums[largest]:\n                largest = i\n\n        # swap the first and largest elements\n        nums[0], nums[largest] = nums[largest], nums[0]\n\n        # decrement the length of the list\n        length -= 1\n\n        # loop through the remaining elements and swap adjacent elements if they are in the wrong order\n        for i in range(1, length):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Step 1: Sort the array in decreasing order using the largest element as the pivot\n    for i in range(n - 1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Step 2: Sort the array using pancake sorting algorithm\n    for i in range(n - 1, 0, -1):\n        # Step 2a: Choose a random index from 0 to i and swap the elements\n        random_index = random.randint(0, i)\n        nums[i], nums[random_index] = nums[random_index], nums[i]\n\n        # Step 2b: Reverse the sub-array from 0 to i-1\n        start = 0\n        while start < i:\n            nums[start], nums[i - start] = nums[i - start], nums[start]\n            start += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Iterate through the list and reverse the order of the elements until the list is sorted\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the order of the elements in the current iteration of the loop\n        for k in range(i, n):\n            nums[i], nums[k] = nums[k], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_sort_helper(nums, start, end):\n        if start >= end:\n            return\n\n        # Find the largest element in the range\n        max_index = start\n        for i in range(start+1, end+1):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Swap the largest element with the first element\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n\n        # Recursively sort the sub-range excluding the largest element\n        pancake_sort_helper(nums, start+1, end)\n\n        # Recursively sort the sub-range including the largest element\n        pancake_sort_helper(nums, start, end-1)\n\n    pancake_sort_helper(nums, 0, len(nums)-1)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Initialize two variables to store the maximum absolute difference found so far\n    max_diff = float('-inf')\n    # Iterate over the array and find the maximum absolute difference between any two elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(diff, max_diff)\n    # Return the maximum absolute difference found\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in an array as input and returns the maximum difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    # initialize maximum difference to 0 \n    max_diff = 0 \n    # loop through the array \n    for i in range(len(arr)): \n        # loop through the remaining elements in the array \n        for j in range(i+1, len(arr)): \n            # calculate the absolute difference between the current element and the next element \n            diff = abs(arr[i] - arr[j]) \n            # update the maximum difference if the calculated difference is greater than the current maximum \n            max_diff = max(max_diff, diff) \n    # return the maximum difference \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Get the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if the discriminant is positive or negative\n    if d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return (x1, x2)\n    elif d == 0:\n        x1 = -b / (2*a)\n        return (x1, x1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # check if the equation is valid\n    if a == 0:\n        return None\n    \n    # find the solution using the quadratic formula\n    discriminant = b**2 - 4*a*n\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Find the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if there exists a solution\n    if d < 0:\n        return None\n    \n    # Find the two solutions\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    \n    # Check if they satisfy the condition\n    if x1*a + y1*b == n:\n        return (x1, y1)\n    elif x2*a + y2*b == n:\n        return (x2, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = (n - b) / a\n    y = a * x + b\n    if a * x + b == n:\n        return (int(x), int(y))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Solve the quadratic equation using the quadratic formula\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b/2/a\n        return (x,)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    elif d == 0:\n        x = -b/2/a\n        return (x, x)\n    else:\n        x1 = (-b + d**0.5)/2/a\n        x2 = (-b - d**0.5)/2/a\n        return (x1, x2)\n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize variables for solution\n    x = y = None\n\n    # check if a is zero\n    if a == 0:\n        # return None if b is zero or n is not divisible by b\n        if b == 0 or n % b!= 0:\n            return None\n        # check if n is divisible by a^(1/b)\n        else:\n            x = n // b\n            y = n - x * b\n    # check if b is zero\n    elif b == 0:\n        # return None if a is zero or n is not divisible by a\n        if a == 0 or n % a!= 0:\n            return None\n        # check if n is divisible by b^(1/a)\n        else:\n            x = n // a\n            y = n - x * a\n    # check if a and b are both non-zero\n    else:\n        # check if n is divisible by a*b^(1/2)\n        if n % (a * b ** 0.5) == 0:\n            x = n // (a * b ** 0.5)\n            y = n - x * (a * b ** 0.5)\n        # check if n is divisible by b*a^(1/2)\n        elif n % (b * a ** 0.5) == 0:\n            x = n // (b * a ** 0.5)\n            y = n - x * (b * a ** 0.5)\n        # check if n is divisible by a*b^(1/2) + b*a^(1/2)\n        elif n % (a * b ** 0.5 + b * a ** 0.5) == 0:\n            x = n // (a * b ** 0.5 + b * a ** 0.5)\n            y = n - x * (a * b ** 0.5 + b * a ** 0.5)\n        # if no solution exists, return None\n        else:\n            return None\n\n    # return solution as a tuple (x, y)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # initialize the two variables to try\n    x = 0\n    y = 0\n\n    # while the product of x and y is less than n\n    while a * x + b * y < n:\n        # increment x and y\n        x += 1\n        y += 1\n\n    # if the product of x and y is still less than n, then no solution exists\n    if a * x + b * y < n:\n        return None\n\n    # otherwise, return the tuple (x, y)\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the given equation has a solution\n    if a == 0:\n        return None\n\n    # calculate the first and second solutions of the equation\n    x1 = (-b + (b**2 - 4*a*n)**0.5)/2/a\n    x2 = (-b - (b**2 - 4*a*n)**0.5)/2/a\n\n    # check if there are any real solutions\n    if x1.imag == 0 and x2.imag == 0:\n        return (int(x1.real), int(x2.real))\n\n    # there are no real solutions, so return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0: # if a is zero, there is no solution\n        return None\n    else:\n        x1 = (-b + n//a) // a\n        x2 = (-b - n//a) // a\n        return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set to store unique elements from list1\n    set1 = set(list1)\n    # loop through list2 and add unique elements to set1\n    for element in list2:\n        if element in set1:\n            set1.remove(element)\n    # convert set1 to list and return it\n    return list(set1)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create an empty list to store the elements from list2 that are not present in list1\n    result = [x for x in list2 if x not in list1]\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the elements of list1 that are not present in list2\n    result_list = [element for element in list1 if element not in list2]\n    return result_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n\n    Args:\n    list1: list, the original list\n    list2: list, the list containing the elements to remove from list1\n\n    Returns:\n    list, a new list with all elements from list1 that are not present in list2.\n    \"\"\"\n    result = []\n    for elem in list1:\n        if elem not in list2:\n            result.append(elem)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        total = 0\n        for i in range(n // 2):\n            total += n - 2 * i\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += (n - 2*i)\n    return sum_value\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return sum_series(n-1) + (n-2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    elif n % 2 == 1:\n        return sum_series(n - 1) + n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        sum_val = n * (n - 1) // 2\n    else:\n        sum_val = n * (n - 1) // 2 - 1\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l)**2\n    return area * s"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    sp = (s * l) / 2\n    # Calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(pi/l) ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the side length of the polygon\n    side_length = s / l\n    \n    # calculate the area of the polygon using the formula: area = 1/2 * s * (tan(pi/l))^2\n    area = 0.5 * s * pow(tan(pi/l), 2)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of each side\n    a = s / l\n    \n    # Calculate the area of the polygon\n    area = 0.5 * s * (tan(pi / l) ** 2)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area using formula for area of triangle\n    area = 0.5 * s * l\n    \n    # calculate the length of a side using the formula for the diagonal of a triangle\n    side = tan(pi/l) * s\n    \n    # calculate the number of sides required to form a polygon with side length s and number of sides l\n    n = l\n    \n    # calculate the area of the polygon\n    area = area_polygon(s, n) * side\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of the polygon using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s/2) * (tan(pi/l)) ** i\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the circumference\n    c = 2 * pi * s\n\n    # Calculate the area using the Heron's formula\n    area = 0.5 * s * (tan(pi/l) + tan(pi/l))\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - tan(pi/l))) / 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # find the sum of the divisors of n\n    def sum_of_divisors(n):\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n/i:\n                    divisors.append(n/i)\n        return sum(divisors)\n\n    # determine if the sum of the divisors of n is the same as the sum of the divisors of n-1\n    if sum_of_divisors(n) == sum_of_divisors(n-1):\n        print(f\"The sum of the divisors of {n} and {n-1} is the same.\")\n    else:\n        print(f\"The sum of the divisors of {n} and {n-1} are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n//i:\n                div_list.append(n//i)\n    \n    return sum(div_list) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors\n    def sum_of_divisors(num): \n        sum = 1\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                sum += i + num // i\n        return sum\n\n    # check if the sum of the divisors is the same\n    def same_sum(x, y): \n        return sum_of_divisors(x) == sum_of_divisors(y)\n\n    # test the function\n    x = 12\n    y = 28\n    print(\"Are the sum of divisors of\", x, \"and\", y, \"the same?\", same_sum(x, y)) # output: Are the sum of divisors of 12 and 28 the same? True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, n+1) if n % i == 0])\n\n    # Check if the sum of the divisors of n is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n \n    sum_div = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of the divisors is the same as n \n    if sum_div == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n using the math.factorial() function\n    div_sum = sum([math.factorial(i) for i in range(1, int(n**0.5)+1)])\n    # Check if the div_sum is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n and n-1 are the same, False otherwise. \n    '''\n    div1 = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div2 = [j for j in range(1, int(math.sqrt(n))+1) if n % j == 0]\n    if sorted(div1) == sorted(div2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_count = 0\n    divisor = 2\n\n    while divisor <= n:\n        if n % divisor == 0:\n            div_count += 1\n\n        divisor += 1\n\n    if div_count == 0:\n        return \"There are no divisors in this range.\"\n    elif div_count == 1:\n        return \"There is one divisor in this range.\"\n    else:\n        return f\"There are {div_count} divisors in this range.\""
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of the divisors of n\n    div_sum = sum(i for i in range(1, n+1) if n % i == 0)\n\n    # determine if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # Loop through the characters of the string\n    for i in range(26):\n        # If the current character is a letter, increment its count in the dictionary\n        if str1[i].isalpha():\n            if str1[i] in char_count:\n                char_count[str1[i]] += 1\n            else:\n                char_count[str1[i]] = 1\n    # Return the dictionary containing the count of characters at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # create a dictionary to store the position and character counts\n    char_pos_dict = {}\n    \n    # loop through the string and count the characters at the same position as in the English alphabet\n    for i in range(26): \n        char = chr(i+65)\n        if char in str1.lower(): \n            # check if the character is already in the dictionary\n            if char in char_pos_dict: \n                # increment the count if it is\n                char_pos_dict[char] += 1\n            else: \n                # otherwise, add the character to the dictionary with a count of 1\n                char_pos_dict[char] = 1\n    \n    # count the total number of unique characters\n    unique_chars = len(char_pos_dict)\n    \n    # return the dictionary and the total number of unique characters\n    return char_pos_dict, unique_chars"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    char_count = {}\n\n    # loop through the string and count the number of characters at the same position as in the English alphabet\n    for char in str1:\n        if char in english_alphabet:\n            if char.lower() in char_count:\n                char_count[char.lower()] += 1\n            else:\n                char_count[char.lower()] = 1\n\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    # initialize an empty dictionary to store positions of characters in the English alphabet\n    alpha_pos = {}\n    # iterate through each character in the string\n    for i, char in enumerate(str1):\n        # convert the character to lowercase to ignore case sensitivity\n        char = char.lower()\n        # check if the character is already in the dictionary\n        if char in alpha_pos:\n            # increment the count of the character at the current position\n            alpha_pos[char] += 1\n        else:\n            # add the character to the dictionary with a count of 1\n            alpha_pos[char] = 1\n    # return the count of characters that occur at the same position in the string as in the English alphabet\n    return sum(alpha_pos.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # convert the input string to lowercase\n    str1 = str1.lower()\n\n    # initialize counters for each character in the English alphabet\n    count = {chr(i): 0 for i in range(97, 123)}\n\n    # iterate over the characters in the input string\n    for char in str1:\n        # check if the character is in the English alphabet\n        if char in count:\n            # increment the counter for the character at its position in the English alphabet\n            count[char] += 1\n\n    # return the final count of characters at each position in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize the count variable to zero\n    count = 0\n\n    # iterate through the characters in the string\n    for i in range(len(str1)):\n        # get the character at the current position\n        current_char = str1[i]\n\n        # check if the current character is in the English alphabet\n        if current_char.isalpha():\n            # if it is, check if it occurs at the same position in the English alphabet\n            if (current_char == 'a' and i == 0) or (current_char == 'b' and i == 1) or (current_char == 'c' and i == 2) or \\\n                (current_char == 'd' and i == 3) or (current_char == 'e' and i == 4) or (current_char == 'f' and i == 5) or \\\n                (current_char == 'g' and i == 6) or (current_char == 'h' and i == 7) or (current_char == 'i' and i == 8) or \\\n                (current_char == 'j' and i == 9) or (current_char == 'k' and i == 10) or (current_char == 'l' and i == 11) or \\\n                (current_char =='m' and i == 12) or (current_char == 'n' and i == 13) or (current_char == 'o' and i == 14) or \\\n                (current_char == 'p' and i == 15) or (current_char == 'q' and i == 16) or (current_char == 'r' and i == 17) or \\\n                (current_char =='s' and i == 18) or (current_char == 't' and i == 19) or (current_char == 'u' and i == 20) or \\\n                (current_char == 'v' and i == 21) or (current_char == 'w' and i == 22) or (current_char == 'x' and i == 23) or \\\n                (current_char == 'y' and i == 24) or (current_char == 'z' and i == 25):\n                # if it does, increment the count\n                count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n\n    # Iterate over the string\n    for i, char in enumerate(str1):\n        # Check if the character is in the English alphabet\n        if ord('a') <= ord(char) <= ord('z'):\n            # If it is, check if it already exists in the dictionary\n            if char in char_count:\n                # If it does, increment its count\n                char_count[char] += 1\n            else:\n                # If it doesn't, add it to the dictionary with a count of 1\n                char_count[char] = 1\n\n    # Return the dictionary containing the count of characters at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i, char in enumerate(str1):\n        if char.lower() == alphabet[i]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the current character is a vowel (a, e, i, o, u)\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            # If it is, increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and (A[i] % 2 == 0 or A[j] % 2 == 0):\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the power of 2 to 2\n    power = 2\n    # loop until we find a power of 2 greater than or equal to n\n    while power < n:\n        # increment the power of 2\n        power <<= 1\n    # return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes in a number and returns the next power of 2 greater than or equal to the input number n.\n    \"\"\"\n    # convert n to binary string\n    bin_str = bin(n)[2:]\n    # count number of 1's in binary string\n    count = bin_str.count('1')\n    # create power of 2\n    power_of_2 = 2 ** count\n    # check if power of 2 is greater than n\n    if power_of_2 > n:\n        return power_of_2\n    # if power of 2 is less than or equal to n, increment it by 1\n    else:\n        return power_of_2 + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**((n-1).bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2**ceil(log2(n))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n    \n    # Reverse the binary string and convert it back to an integer\n    power_of_two = int(binary[::-1], 2)\n    \n    # Return the smallest power of 2 greater than or equal to n\n    return power_of_two"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i * 2\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Convert n to an integer\n    n = int(n)\n\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Initialize an empty list to store the powers of 2\n    powers = []\n\n    # Iterate through the binary string of n\n    for i in range(len(binary)):\n\n        # If the bit is 1, add the power of 2 to the list\n        if binary[i] == '1':\n            powers.append(2 ** i)\n\n    # Check if there are any powers of 2 in the list\n    if len(powers) == 0:\n        return n\n\n    # Find the smallest power of 2 in the list\n    min_power = min(powers)\n\n    # Return the smallest power of 2\n    return min_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2**(int(log2(n)) + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize variable to keep track of the current power of 2\n    power = 1\n    \n    # Loop until we reach the next power of 2\n    while power < n:\n        power *= 2\n    \n    # Return the last power of 2\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n\n    Args:\n        a (list): a list of numbers\n        x (int): a number to count occurrences of\n\n    Returns:\n        int: the number of occurrences of x in a\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    This function takes a list and a number as input, and returns the number of times the number appears in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = sum(list1[i] for i in range(m, n+1))\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    # check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid indices\"\n\n    # calculate the sum of numbers within the range\n    sum_range = sum(list1[m:n+1])\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the indices from m to n\n    for i in range(m, n+1):\n        # Check if the index is within the range of the list\n        if i >= 0 and i < length:\n            # Add the value at the index to the sum\n            sum += list1[i]\n    # Return the sum of numbers in the list within the range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    \n    # loop through the list from index m to n\n    for i in range(m, n+1):\n        # add the value of the list at index i to the sum variable\n        sum += list1[i]\n        \n    # return the sum variable\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\nprint(perimeter_pentagon(5))  # Output: 30"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5*a\n    return round(p, 2)\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = 5 * a / 2\n    \n    # Return the perimeter as the square root of the semi-perimeter\n    return math.sqrt(semi_perimeter)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a * math.sin(math.pi/5)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5\n    s = a * (3*n - 2) / 2\n    perimeter = math.sqrt(s * (s - a) * (s - 2*a) * (s - 3*a) * (s - 4*a) * (s - 5*a))\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', 'python', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3) # search for the next occurrence starting from the next index\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 'd' and s[i-2] == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Checking if all the elements in tuple have the same data type\n    for i in range(len(test_tuple)):\n        # Checking if the i-th element is of same data type as the first element\n        if not isinstance(test_tuple[0], type(test_tuple[i])):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for element in test_tuple[1:]:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = {}\n    for element in test_tuple:\n        if type(element) in types:\n            types[type(element)] += 1\n        else:\n            types[type(element)] = 1\n    if len(types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # initialize the variable to store the data type of the first element\n    data_type = type(test_tuple[0])\n\n    # iterate through the tuple and check if all the elements have the same data type\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the same data type.\n    \"\"\"\n    # initialize a variable to keep track of the type of the first element\n    first_type = type(test_tuple[0])\n    \n    # iterate over the rest of the elements in the tuple\n    for elem in test_tuple[1:]:\n        # if the current element has a different type than the first one, return False\n        if type(elem)!= first_type:\n            return False\n    \n    # if we make it through the loop without returning False, all elements have the same type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # convert the tuple to a list and then check if all the elements have same data type or not\n    all_data_types = [type(x) for x in test_tuple]\n    data_type = all_data_types[0]\n    for i in range(1, len(all_data_types)):\n        if data_type!= all_data_types[i]:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # assuming all elements in tuple have same data type\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple[1:]:\n        if type(elem)!= first_elem:\n            return False\n\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    return count >= n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to the target element, increment the counter\n        if arr[i] == x:\n            count += 1\n\n    # If the counter variable is greater than or equal to n/2, return True\n    if count >= n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    # create an empty list to store the odd values\n    odd_list = []\n\n    # loop through each character in the string\n    for char in str:\n        # check if the index of the character is odd\n        if ord(char) % 2!= 0:\n            # if it is, add it to the odd_list\n            odd_list.append(char)\n\n    # join the odd values into a string\n    odd_str = ''.join(odd_list)\n\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Split the given string into a list of characters\n    char_list = list(str)\n\n    # Create an empty string to store the final result\n    result = \"\"\n\n    # Loop through each character in the list\n    for char in char_list:\n        # If the index of the character is odd, add it to the result string\n        if (char_list.index(char) % 2) == 1:\n            result += char\n\n    # Return the final result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    # create a new string with empty characters at the odd indices\n    new_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2 == 1:\n            new_string += char\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    return ''.join(str[i] if i % 2 == 0 else '' for i in range(len(str)))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create an empty string to store the new string\n    new_str = ''\n    # loop through each character in the input string\n    for char in str:\n        # check if the index of the character is odd\n        if (ord(char) - ord('a') + 1) % 2!= 0:\n            # add the character to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    return \"\".join([str[i] if i % 2!= 0 else \"\" for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Return the minimum number\n    return sorted_list[0]"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # find the difference between the given range and the maximum possible value\n    range_diff = r - l\n    # check if all the bits in the range are set or not\n    if (range_diff & (range_diff - 1)) == 0:\n        # all bits are set in the range\n        return True\n    else:\n        # some bits are not set in the range\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if l == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, r - 1, r)\n    if r == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, l - 1)\n    if n % 2 == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r - 1) and all_Bits_Set_In_The_Given_Range(n >> 1, r, r)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l, r - 1) and all_Bits_Set_In_The_Given_Range(n >> 1, r - 1, r)\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert decimal number to binary number\n    bin_num = bin(n)\n    # get the length of binary number\n    bin_len = len(bin_num)\n    # check whether all the bits are unset in the given range or not\n    if bin_num.startswith('0b') and bin_len >= l and bin_len <= r:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize all the bits in the given range as 1\n    range_bits = bin(n & ((1 << (r - l + 1)) - 1))[2:].zfill(r - l + 1)\n\n    # Check if all the bits in the range are set or unset\n    return range_bits == '1' * (r - l + 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable to store the sum of unset bits\n    unset_bits_sum = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(l, r + 1):\n        # Check if the bit at index i is set or not\n        if (n & (1 << i))!= 0:\n            # If the bit is set, add its binary representation to the sum\n            unset_bits_sum += (1 << i)\n\n    # If the sum of unset bits is equal to 0, it means all bits are unset in the given range\n    if unset_bits_sum == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert n to binary string\n    bin_str = bin(n)[2:]\n\n    # Check if all the bits are set or unset in the given range\n    for i in range(l, r+1):\n        if bin_str[i] == '0':\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Count the number of set bits in the given range using the bitwise AND operator\n    count = 0\n    for i in range(l, r + 1):\n        count += bin(n & i).count('1')\n\n    # Check if all the set bits are unset in the range\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if all the bits in the range are set or not\n    for i in range(l, r + 1):\n        if (n & (1 << i)) == 0:  # If the bit is not set\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # To check if all the bits are set in the given range, we need to check if all the bits after the rightmost set bit are unset.\n    # We can do this by iterating through the binary representation of n from right to left. If the current bit is 0, then the count of unset bits in the binary representation of n starting from that bit is equal to the count of bits set in the binary representation of n up to the bit to the right of the current bit.\n    # We can also initialize a count of unset bits to 0.\n    count = 0\n    for i in range(r, -1, -1):\n        if n & 1 == 0:\n            count += r - i\n        n >>= 1\n    # If all the bits are set in the given range, then count will be equal to the number of bits in the binary representation of n.\n    return count == n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].zfill(n)!= \"1\" * n:\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store positive and negative elements\n    pos = []\n    neg = []\n    \n    # iterate through the array and add elements to their respective lists\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos.append(arr[i])\n        elif arr[i] < 0:\n            neg.append(arr[i])\n    \n    # add the remaining elements to their respective lists\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos.append(arr[i])\n        elif arr[i] < 0:\n            neg.append(arr[i])\n    \n    # combine the positive and negative lists and return the result\n    return pos + neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n        else:\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create a dictionary to store the index of positive and negative elements\n    pos_dict = {}\n    neg_dict = {}\n    # Loop through the array and store the index of the positive and negative elements\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            if i < n:\n                neg_dict[i] = -1\n            else:\n                pos_dict[i] = i - n\n    # Reverse the order of the negative elements\n    neg_dict = dict(sorted(neg_dict.items(), reverse=True))\n    # Reverse the order of the positive elements\n    pos_dict = dict(sorted(pos_dict.items(), reverse=False))\n    # Combine the two dictionaries to get the final re-arrangement of the array\n    for key, value in neg_dict.items():\n        if value!= -1:\n            arr[key] = -arr[value]\n    for key, value in pos_dict.items():\n        arr[key] = arr[value]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and add elements to the appropriate lists based on their values\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Combine the two lists and return the final array\n    return neg_list + pos_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # check if n is valid\n    if n > len(arr) or n < 1:\n        return None\n    \n    # create empty lists to store negative and positive elements\n    neg = []\n    pos = []\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        \n        # if the element is negative, add it to the negative list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # if the element is positive, add it to the positive list\n        else:\n            pos.append(arr[i])\n    \n    # combine the negative and positive lists into one list\n    result = neg + pos\n    \n    # check if there are more than n negative elements\n    if len(neg) > n:\n        # remove the first n negative elements from the result list\n        result = result[n:]\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers - one for positive elements and one for negative elements\n    i = 0\n    j = n - 1\n    \n    # loop through the array and swap elements where necessary\n    while i <= j:\n        if arr[i] >= 0:\n            i += 1\n        elif arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            j -= 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize three lists to store the negative elements, positive elements, and the original array\n    neg = []\n    pos = []\n    orig = arr.copy()\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is negative, append it to the negative list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # If the current element is positive, append it to the positive list\n        else:\n            pos.append(arr[i])\n\n    # Combine the negative and positive lists and reverse the order of the positive elements\n    arr[:n] = neg + pos[::-1]\n\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for num in arr:\n        if num > 0:\n            positive.append(num)\n        else:\n            negative.append(num)\n    \n    final_arr = negative + positive\n    return final_arr[:n] + final_arr[n:]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of positive and negative elements\n    pos = []\n    neg = []\n\n    # Iterate through the array and add elements to the appropriate lists\n    for num in arr:\n        if num > 0:\n            pos.append(num)\n        elif num < 0:\n            neg.append(num)\n\n    # Sort the negative elements in ascending order\n    neg.sort()\n\n    # Re-arrange the positive elements such that they appear before negative ones\n    pos = neg + pos\n\n    # Concatenate the positive elements with the negative elements to form the final array\n    final_arr = neg + pos\n\n    # Return the final array\n    return final_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return char.join(str1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap with n largest elements\n    heap = [-x for x in list1[:n]]\n    heapq.heapify(heap)\n    # Fill the heap with the remaining elements of the list\n    for x in list1[n:]:\n        if x > -heap[0]:\n            heapq.heappushpop(heap, -x)\n    # Convert the heap to a list and return it\n    return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list to set to remove duplicates\n    list1 = list(set(list1))\n    # sort list in descending order\n    list1.sort(reverse=True)\n    # return the first n elements of the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list into a min-heap of size n\n    max_heap = heapq.nlargest(n, list1)\n    # Extract the largest n numbers from the heap and return them as a list\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1.pop())\n    # Add remaining items to heap\n    for item in list1:\n        heapq.heappush(min_heap, item)\n    # Return the n largest items from the list\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return [item for item in max_heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize a min heap of size n and fill it with the first n elements from the list\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1.pop(0))\n        \n    # Add the remaining elements to the heap\n    for i in range(n, len(list1)):\n        heapq.heappush(min_heap, list1.pop(0))\n        \n    # Return the elements in the heap\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculate the surface area of the cylinder\n    surface_area = 2 * r * h\n    \n    #Return the surface area\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder using the formula:\n\n    lateral_surface_area = 2 * pi * r * h\n\n    where pi is the value of pi constant.\n\n    Args:\n    r (float): the radius of the cylinder\n    h (float): the height of the cylinder\n\n    Returns:\n    float: the lateral surface area of the cylinder\n    '''\n\n    import math\n\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2 * r**2 * math.pi * h)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14159 * r * h\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*(3.14159*(r**2)+2*3.14159*r*h+3.14159*h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculating the lateral surface area of the cylinder using the formula\n    lateral_surface_area = 2*3.14159*r*h\n    # Printing the lateral surface area\n    print(\"The lateral surface area of the cylinder is:\", lateral_surface_area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to find lateral surface area of a cylinder\n    lateral_surface_area = 2*3.14159*r*h\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h * 3.141592653589793"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n\n    # loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # check if the bit is even\n        if int(bit) % 2 == 0:\n            # set the corresponding bit of the result to 1\n            result += 1 << int(bit)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    # iterate through each bit of the input number\n    for i in range(32):\n        # check if the current bit is even\n        if n & (1 << i):\n            # set the corresponding bit in the result to 1\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bit positions\n    even_bit_positions = []\n    # Loop through each bit of the number\n    for i in range(32):\n        # If the current bit is even, add it to the list of even bit positions\n        if (n >> i) & 1 == 0:\n            even_bit_positions.append(i)\n    # Set the even bits in the number to 1\n    for i in even_bit_positions:\n        n |= 1 << i\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n    # Initialize an empty list to store the binary string with even bits set\n    even_bits_set_binary = []\n    # Loop through each binary digit in the binary string\n    for digit in binary_str:\n        # If the current digit is even, add a 1 to the binary string\n        if int(digit) == 0:\n            even_bits_set_binary.append('0')\n        else:\n            even_bits_set_binary.append('1')\n    # Convert the binary string with even bits set back to an integer\n    even_bits_set_number = int(''.join(even_bits_set_binary), 2)\n    # Return the even bits set number\n    return even_bits_set_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through each bit of the given number\n    for bit in bin(n)[2:]:\n        # Check if the bit is an even number\n        if int(bit) % 2 == 0:\n            # If it is, set the corresponding bit in the result to 1\n            result += 2 ** (len(bin(n)[2:]) - int(bit))\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ 1\n        else:\n            n = n >> 1\n        count += 1\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate through each bit of the binary representation of n\n    for i in range(1, 33):\n        # Check if the i-th bit is an even bit\n        if n & (1 << i) == (1 << i):\n            # Set the i-th bit of n to 1\n            n |= 1 << i\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert binary representation of n to a list of bits\n    bits = [int(bit) for bit in bin(n)[2:]]\n    # iterate over the list of bits and set the even bits to 1\n    for i in range(len(bits)):\n        if bits[i] == 0:\n            bits[i] = 1\n    # convert the list of bits back to a binary number\n    n_new = int(''.join(str(bit) for bit in bits), 2)\n    # return the new binary number\n    return n_new"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Create an empty list to store the even bits\n    even_bits = []\n    \n    # Iterate over each bit of the given number\n    for i in range(32):\n        # If the current bit is even, add it to the even_bits list\n        if n & (1 << i):\n            even_bits.append(i)\n            \n    # Convert the list to a bitwise OR of the even bits\n    result = reduce(lambda x, y: x | y, even_bits)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the new number\n    new_num = 0\n\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1, otherwise leave it as 0\n        if bit == '0':\n            new_num += 0\n        else:\n            new_num += 1\n\n    return new_num"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        count = count_dict.get(tup, 0) + 1\n        count_dict[tup] = count\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the test_list\n    c = Counter(test_list)\n    # Convert the Counter object to a dictionary and return it\n    return dict(c)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a list of lists of unique tuples\n    unique_tuples = list(set(t for sublist in test_list for t in sublist))\n    # count the occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return Counter(unique_tuples)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each tuple\n    counts = {}\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in counts:\n            counts[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list) # creates a set of unique tuples from the input list\n    count_dict = Counter(unique_tuples) # creates a dictionary of unique tuples and their counts using the Counter function from the collections module\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    # Initialize variables\n    count = 0\n    start = 0\n    \n    # Loop through the characters of the string\n    for i in range(len(str)):\n        # If the current character is not empty, increment the count and move the start index forward\n        if str[i]!='':\n            count += 1\n            start = i + 1\n            \n        # If the current character is empty, reset the start index and move the end index backward\n        else:\n            end = i - 1\n            # Check for overlapping substrings\n            while start <= end:\n                if str[start:end+1]!='':\n                    count += 1\n                    start = end + 1\n                else:\n                    start += 1\n                    end -= 1\n                    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    substrings = []\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring:\n                substrings.append(substring)\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j].strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    \n    # Loop through each possible sequence of length n\n    for i in range(n):\n        # Initialize the current sequence to the first element of the range\n        current_sequence = i\n        \n        # Loop through each element of the sequence\n        for j in range(2,m+1):\n            # Check if the current element is less than or equal to the previous element\n            if j <= current_sequence:\n                # If the current element is less than or equal to the previous element, increment the number of possible sequences and reset the current sequence\n                total_sequences += 1\n                current_sequence = j\n                break\n        \n        # If the current sequence is not equal to the end of the range, increment the number of possible sequences by 1\n        if current_sequence < m:\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers, m and n, and returns the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    previous_element = float('-inf')\n    count = 0\n\n    for i in range(m, n + 1):\n        if i >= 2 * previous_element and i <= m:\n            count += 1\n        else:\n            total_sequences += count\n            count = 0\n        previous_element = i\n\n    total_sequences += count\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(m):\n        total_sequences += get_number_of_sequences(m, n, i)\n    return total_sequences\n\ndef get_number_of_sequences(m, n, previous_element):\n    count = 0\n    for i in range(previous_element+2, m):\n        if i <= n and i % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    total_sequences = 0 \n    for i in range(1,m+1): \n        if i>=2*n: \n            total_sequences += 1 \n        elif i>=2*n-m: \n            total_sequences += (m-i)//(n-2*n) \n    return total_sequences "
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(prev, curr, count):\n        if curr == n:\n            return count\n        if curr > n or curr < 2 * prev:\n            return helper(prev, curr + 1, count)\n        return helper(prev, curr + 1, count + helper(prev, curr + 1, 0))\n\n    return helper(1, 3, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n): \n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(m - n + 1):\n        is_valid = True\n        for j in range(n):\n            if i + j >= m:\n                is_valid = False\n                break\n            if i + j * 2 > m:\n                is_valid = False\n                break\n        if is_valid:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(2, m+1):\n        if i < 2 * i:\n            count += 1\n        else:\n            count -= 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    for i in range(1,m+1):\n        if i >= 2*n:\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_count = 0\n    sequence = [2]\n\n    for i in range(1, n + 1):\n        current_number = sequence[-1] + 2\n        while current_number <= m:\n            sequence.append(current_number)\n            current_number += 2\n        total_count += len(sequence) - 1\n        sequence = sequence[:-1]\n\n    return total_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n): \n    # Calculate the number of possible sequences of length n, where each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    total_sequences = 0\n    for i in range(2, m):\n        for j in range(1, n):\n            if i >= 2 * j and i <= m and j >= 1:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 1:\n        list1[-1] = list2\n    else:\n        list1 += list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # copy the original list to a new list\n    new_list = list1[:]\n    # replace the last element of the new list with the elements of the second list\n    new_list[-1] = list2\n    # return the new list\n    return new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the last element of the first list\n    last_element = list1[-1]\n\n    # Append the elements of the second list to the end of the first list\n    list1.extend(list2)\n\n    # Remove the last element of the first list\n    list1.pop()\n\n    # Replace the last element of the first list with the last element of the second list\n    list1[-1] = last_element\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Replace the last element of the first list with the elements of the second list\n    list1[length-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_chars = 0\n    for char in str1:\n        num_chars += 1\n    return num_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_characters(string):\n    return len(string)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than the given number.\n    \"\"\"\n    while True:\n        x = int(math.sqrt(N)) + 1\n        if x*x == N:\n            return x\n        else:\n            N = x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    root = math.sqrt(N)\n    # Find the integer part of the square root\n    root_int = math.floor(root)\n    # Find the square of the integer part\n    square_int = root_int**2\n    # If the square of the integer part is less than N, the next perfect square is the square of the integer part\n    if square_int < N:\n        next_perfect_square = square_int\n    # If the square of the integer part is greater than N, the next perfect square is the square of the next integer greater than the integer part\n    else:\n        next_perfect_square = root_int**2 + 1\n    # Return the next perfect square\n    return next_perfect_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Using binary search to find the next perfect square greater than N\n    left, right = N, int(math.sqrt(N))\n    while left <= right:\n        mid = (left + right) // 2\n        if is_perfect_square(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef is_perfect_square(num): \n    '''\n    Helper function to check if a number is a perfect square.\n    '''\n    return int(math.sqrt(num)) ** 2 == num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # convert given number to integer\n    N = int(N)\n    \n    # initialize maximum number\n    max_num = 2**31 - 1\n    \n    # iterate until maximum number is found\n    while True:\n        max_num -= 1\n        \n        # check if next perfect square is greater than given number\n        if math.sqrt(max_num)**2 > N:\n            return max_num\n        \n        # check if next perfect square is greater than maximum number\n        if math.sqrt(max_num)**2 < max_num:\n            return int(math.sqrt(max_num)**2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # Initialize variables\n    next_sqrt = sqrt_N\n    sqrt_count = 1\n\n    # Iterate until we find the next perfect square greater than sqrt_N\n    while sqrt_count < 100:\n        # Calculate the next perfect square greater than the current square root\n        next_sqrt = (sqrt_N ** 2) + sqrt_N\n\n        # If the next perfect square is greater than N, return it\n        if next_sqrt > N:\n            break\n\n        # Increment the square root count\n        sqrt_count += 1\n\n    # If we don't find a perfect square greater than sqrt_N, return N\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Function to check if a number is a perfect square\n    def is_perfect_square(num):\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    # Function to find the next perfect square\n    def next_square(num):\n        square = int(num**0.5) + 1\n        while not is_perfect_square(square):\n            square += 1\n        return square\n\n    # Check if N is a perfect square\n    if is_perfect_square(N):\n        # Find the next perfect square greater than N\n        next_square_greater_than_N = next_square(N)\n\n        # Check if the next perfect square is greater than the given number N\n        if next_square_greater_than_N > N:\n            # Return the next perfect square greater than N\n            return next_square_greater_than_N\n        else:\n            # Return the given number N if it's already a perfect square\n            return N\n    else:\n        # Return the given number N if it's not a perfect square\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n    \n    # If sqrt_N is an integer, we've already reached the next perfect square\n    if sqrt_N.is_integer():\n        return float('inf')\n    \n    # Use integer arithmetic to find the next perfect square greater than sqrt_N\n    next_sqrt_N = math.floor(sqrt_N) + 1\n    \n    # Return the square of the next perfect square\n    return next_sqrt_N * next_sqrt_N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        \"\"\"\n        Check if a given number is a perfect square.\n        \"\"\"\n        return int(math.sqrt(num)) ** 2 == num\n\n    def next_perfect_square(num):\n        \"\"\"\n        Find the next perfect square greater than a given number.\n        \"\"\"\n        while True:\n            x = num + 1\n            if is_perfect_square(x):\n                return x\n\n    if N % 2 == 0:\n        if N > 0:\n            return next_perfect_square(N)\n    else:\n        if N > 1:\n            return next_perfect_square(N - 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(num):\n        if num < 0:\n            return False\n        sqrt_num = int(math.sqrt(num))\n        return sqrt_num*sqrt_num == num\n\n    def next_square(n):\n        if n == 1:\n            return 2\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return i*i\n        return n*n\n\n    N = int(N)\n    if is_perfect_square(N):\n        return N + 1\n    else:\n        return next_square(N)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the max sum to the first element of the array\n    max_so_far = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is greater than the next element and the sum so far is less than the current element, update the max sum\n        if arr[i] > arr[i - 1] and max_so_far < arr[i]:\n            max_so_far = arr[i]\n\n    # Return the max sum\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Check if the array is increasing or decreasing\n    increasing = True\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n            break\n    if not increasing:\n        arr.reverse()\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    # Initialize variables for the direction of the current sum\n    curr_dir = 1\n\n    # Traverse the array\n    for i in range(1, n):\n        if curr_dir == 1:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_dir == 1 and curr_sum == arr[i]:\n            curr_dir = 2\n        elif curr_dir == 2 and curr_sum == arr[i]:\n            curr_dir = 1\n        elif curr_dir == 1 and curr_sum < arr[i]:\n            curr_dir = 2\n        elif curr_dir == 2 and curr_sum > arr[i]:\n            curr_dir = 1\n\n    # Reverse the array if it was initially decreasing\n    if not increasing:\n        arr.reverse()\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is empty or contains only one element\n    if len(arr) <= 1:\n        return 0\n    \n    # Initialize variables for the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if i == 0:\n            if arr[i] < arr[i+1]:\n                # If the current element is decreasing, set the current subsequence sum to 0 and move on to the next element\n                curr_sum = 0\n            elif arr[i] > arr[i+1]:\n                # If the current element is increasing, add the element to the current subsequence sum and check if it's greater than the current maximum sum\n                curr_sum += arr[i]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n        elif i == len(arr)-1:\n            if arr[i] > arr[i-1]:\n                # If the current element is increasing, set the current subsequence sum to 0 and move on to the next element\n                curr_sum = 0\n            elif arr[i] < arr[i-1]:\n                # If the current element is decreasing, add the element to the current subsequence sum and check if it's greater than the current maximum sum\n                curr_sum += arr[i]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n        else:\n            if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n                # If the current element is increasing and the next and previous elements are decreasing, add the current element to the current subsequence sum and check if it's greater than the current maximum sum\n                curr_sum += arr[i]\n                if curr_sum > max_sum:\n                    max_sum = curr_sum\n            elif arr[i] < arr[i-1] and arr[i] > arr[i+1]:\n                # If the current element is decreasing and the next and previous elements are increasing, set the current subsequence sum to 0 and move on to the next element\n                curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i - 1]:\n            # If increasing, add to the current sum and check if it's the new maximum\n            curr_sum += arr[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            # If decreasing, subtract from the current sum and check if it's the new maximum\n            curr_sum -= arr[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # first increasing subsequence\n    first_increasing = [False] * n\n    prev_increasing = False\n    curr_sum = 0\n    for i in range(n):\n        if arr[i] >= arr[i-1]:\n            curr_sum += arr[i]\n            first_increasing[i] = True\n        else:\n            curr_sum = 0\n            prev_increasing = True\n\n    # second increasing subsequence\n    second_increasing = [False] * n\n    prev_increasing = False\n    curr_sum = 0\n    for i in range(n-2, -1, -1):\n        if arr[i] >= arr[i+1]:\n            curr_sum += arr[i]\n            second_increasing[i] = True\n        else:\n            curr_sum = 0\n            prev_increasing = True\n\n    # find maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        if first_increasing[i] and second_increasing[i]:\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] < arr[-1]:\n        left = max_sum(arr[1:])\n        right = max_sum(arr[:-1])\n    else:\n        left = max_sum(arr[:-1])\n        right = max_sum(arr[1:])\n    return max(left, right) + arr[0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize max_sum as the first element of the array\n    max_sum = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current element is greater than the next element, add it to max_sum\n        if arr[i] > arr[i-1]:\n            max_sum += arr[i]\n        # If the current element is less than the next element, subtract the next element from max_sum\n        elif arr[i] < arr[i-1]:\n            max_sum -= arr[i-1]\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Helper function to check if the given sequence is bitonic\n    def is_bitonic(seq):\n        for i in range(len(seq)-1):\n            if seq[i] < seq[i+1]:\n                return False\n        return True\n\n    # Helper function to find the maximum subarray sum in a given sequence\n    def max_subarray_sum(seq):\n        max_sum = seq[0]\n        for i in range(1, len(seq)):\n            max_sum = max(max_sum, seq[i])\n        return max_sum\n\n    # Initialize variables to store the maximum sum of increasing subarrays and the maximum sum of decreasing subarrays\n    max_sum_increasing = float('-inf')\n    max_sum_decreasing = float('-inf')\n\n    # Iterate over the given array and calculate the maximum sum of increasing and decreasing subarrays\n    for i in range(len(arr)):\n        # Find the maximum subarray sum of increasing subarrays\n        max_sum_increasing = max(max_sum_increasing, max_subarray_sum([arr[j] for j in range(i) if arr[j] < arr[i]]))\n\n        # Find the maximum subarray sum of decreasing subarrays\n        max_sum_decreasing = max(max_sum_decreasing, max_subarray_sum([arr[j] for j in range(i, len(arr)) if arr[j] > arr[i]]))\n\n    # Return the maximum sum of increasing and decreasing subarrays\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3: \n        return arr[0]\n    else: \n        max_sum = arr[0]\n        for i in range(1, n-1): \n            if arr[i] > arr[i+1]: \n                max_sum += arr[i]\n            elif arr[i] < arr[i+1]: \n                max_sum -= arr[i+1]\n            else: \n                continue\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    n = len(arr)\n    max_sum_i = [float('-inf')] * n\n    max_sum_i[0] = arr[0]\n    max_sum_i[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        max_sum_i[i] = max(arr[i] + max_sum_i[i-2], max_sum_i[i-1])\n    return max_sum_i[-1]"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2\n    diff = 1\n\n    while diff > 0.00001:\n        # calculate the next guess\n        next_guess = guess - number / guess\n        # calculate the difference between the current guess and the target number\n        diff = abs(next_guess - number)\n        # update the guess\n        guess = next_guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    old_approximation = number\n    new_approximation = (old_approximation + number / old_approximation) / 2\n    while abs(old_approximation - new_approximation) >= 1e-6:\n        old_approximation = new_approximation\n        new_approximation = (old_approximation + number / old_approximation) / 2\n    return new_approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize a few variables\n    x = number / 2\n    y = number / x\n    \n    # keep reducing the range until the difference between x and y is less than a tolerance\n    while abs(x - y) > 1e-6:\n        x = (x + y) / 2\n        y = number / x\n    \n    # return the final value of x, which is the square root of the original number\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \n    Args:\n        number (float): the number to compute the square root of.\n        \n    Returns:\n        float: the square root of the input number.\n    \"\"\"\n    # initialize a few variables\n    x = 1\n    dx = 1\n    while dx > 0.001:\n        x = x - (number / x) * dx\n        dx = abs(x - number / x)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Use the babylonian method to compute the square root of a number\n    # The number must be greater than 0\n    i = 0\n    x = 1\n    while True:\n        i += 1\n        x = (1 / 2) * (x + (number / x))\n        if abs(x - i) < 0.0000001:\n            break\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # check if the input is a float\n    if not isinstance(number, (int, float)):\n        raise TypeError(\"Input must be a float\")\n\n    # check if the input is a positive number\n    if number <= 0:\n        raise ValueError(\"Input must be a positive number\")\n\n    # initialize variables\n    old_guess = 1\n    guess = 1\n    tolerance = 0.0001\n\n    # loop until the guess is within the desired tolerance\n    while abs(guess*guess - number) > tolerance:\n        old_guess = guess\n        guess = (number / guess) + guess / 2\n\n    # return the final guess as the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    i = 1\n    while abs(guess * guess - number) > 0.0001:\n        i += 1\n        guess = (guess + (number / guess)) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    i = 0\n    while abs(guess**2 - number) > 0.0001:\n        i += 1\n        guess = (number/guess + guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 1\n    b = number / 2\n    c = number / 3\n    d = number / 4\n    e = number / 5\n\n    while True:\n        y = a + b**2 + c**3 + d**4 + e**5\n        if abs(a - y) < 0.0000001:\n            break\n        a = y\n\n    return a"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x0 = 1.0\n    x1 = number/x0\n    i = 0\n    while abs(x1-x0) > 1e-10:\n        x0 = x1\n        x1 = (x0 + number/x0) / 2\n        i += 1\n    return x1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    if len(s) == 1:\n        return 1\n\n    n = len(s)\n    lps = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                lps[i] = lps[j] + 2\n            if lps[i] > lps[j] + 1:\n                lps[i] = lps[j] + 1\n\n    return lps[-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Returns True if the given string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef longest_palindromic_subsequence(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return n\n\n    max_len = 1\n    start = 0\n    for i in range(n):\n        if i > 0 and s[i] == s[i-1]:\n            start = i\n            while i < n-1 and s[i] == s[i+1]:\n                i += 1\n            max_len = max(max_len, i - start + 1)\n        if i + 1 < n and s[i] == s[i+1]:\n            max_len = max(max_len, 2)\n\n    return max_len\n\ndef lps(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return n\n\n    max_len = 1\n    start = 0\n    for i in range(n):\n        if is_palindrome(s[i:i+2]):\n            max_len = max(max_len, 2)\n        else:\n            while i > 0 and s[i] == s[i-1]:\n                i -= 1\n            while i + 1 < n and s[i] == s[i+1]:\n                i += 1\n            max_len = max(max_len, i - start + 1)\n            start = i\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Initialize a dictionary to store the length of longest palindromic subsequence ending at each index\n    length_dict = {}\n    \n    # Initialize a variable to store the length of the longest palindromic subsequence\n    max_length = 0\n    \n    # Loop through the given string\n    for i in range(len(str)):\n        \n        # If the current index is not in the dictionary, calculate the length of the longest palindromic subsequence ending at the previous index and the current index\n        if i not in length_dict:\n            length_dict[i] = max(1 + lps(str[:i]), 1 + lps(str[i+1:]))\n        \n        # If the current index is in the dictionary, use the stored length to calculate the length of the longest palindromic subsequence ending at the previous index and the current index\n        else:\n            length_dict[i] = length_dict[i-1] + 1\n        \n        # Update the maximum length if the length of the longest palindromic subsequence ending at the current index is greater than the current maximum length\n        if length_dict[i] > max_length:\n            max_length = length_dict[i]\n\n    # Return the maximum length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    # create a 2D array to store the length of the longest palindromic subsequence ending at each index\n    L = [[0] * n for _ in range(n)]\n    # initialize the length of the longest palindromic subsequence ending at each index to 1\n    for i in range(n):\n        L[i][i] = 1\n    # calculate the length of the longest palindromic subsequence ending at each index\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                L[start][end] = 2 + L[start + 1][end - 1]\n            else:\n                L[start][end] = max(L[start + 1][end], L[start][end - 1])\n    # find the length of the longest palindromic subsequence in the given string\n    max_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            max_length = max(max_length, L[i][j])\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n\n    # Initialize variables\n    longest = 1\n    start = 0\n    end = 0\n\n    # Iterate through characters\n    for i in range(n):\n        # Check if character is a palindrome\n        if is_palindrome(s[i:i+2]):\n            # If palindrome found, update longest subsequence length\n            if longest < i-start+1:\n                longest = i-start+1\n                start = i-longest+1\n                end = i\n\n    # Return longest palindromic subsequence length\n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Returns True if the given string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\ndef longest_palindromic_subsequence(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    if len(s) < 2:\n        return len(s)\n\n    longest = 1\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if is_palindrome(s[i:j]):\n                longest = max(longest, j-i)\n\n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize a list to store the lengths of subsequences\n    l = []\n\n    # Initialize two pointers, start and end, to the beginning and end of the string, respectively\n    start = 0\n    end = 0\n\n    # Loop through the string and calculate the length of the longest palindromic subsequence for each substring\n    for i in range(len(str)):\n        # If the current character is the same as the next character, extend the current subsequence by one character\n        if str[i] == str[i+1]:\n            end += 1\n        else:\n            # If the current character is not the same as the next character, reset the end pointer and calculate the length of the longest palindromic subsequence for the previous subsequence\n            while str[start]!= str[end]:\n                start += 1\n            l.append(end-start)\n            end = start + 1\n            start = end - 1\n\n    # Add the length of the longest palindromic subsequence for the last substring\n    while str[start]!= str[end]:\n        start += 1\n    l.append(end-start)\n\n    # Return the maximum length of the longest palindromic subsequence\n    return max(l)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n    # create a 2D table to store lengths of longest palindromic subsequences of \n    # all prefixes of length i \n    L = [[0] * n for i in range(n)] \n  \n    # fill the table in bottom up manner \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Find L[i-1][j-1] for all i, j in range(2, n) \n    for i in range(1, n): \n        for j in range(i): \n            if str[i] == str[j]: \n                L[i][j] = L[i-1][j-1] + 2\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # return the length of the longest palindromic subsequence \n    return L[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    # create a 2D array to store the length of longest palindromic subsequences\n    # for all prefixes of the input string\n    length = [[0] * len(str) for _ in range(len(str)+1)] \n\n    # base case: empty string is a palindrome and has length 1\n    length[0][0] = 1\n\n    # fill the 2D array using dynamic programming\n    for i in range(1, len(str)+1): \n        for j in range(1, len(str)+1): \n            if str[i-1] == str[j-1]: \n                length[i][j] = length[i-1][j-1] + 1\n            else: \n                length[i][j] = max(length[i-1][j], length[i][j-1])\n\n    # return the length of the longest palindromic subsequence\n    return length[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    # Creating a two-dimensional table to store the length of the longest palindromic subsequence\n    # for all possible substrings of the given string\n    dp = [[0]*len(str) for _ in range(len(str))]\n\n    # Initialize the first row and first column with 1, as there is only one character in a substring\n    for i in range(len(str)):\n        dp[i][i] = 1\n\n    # Fill in the remaining table values using dynamic programming\n    for length in range(3, len(str)+1):\n        for i in range(len(str)-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / (i + 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + (harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1.0 / sum(1.0 / i for i in range(1, n+1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n**2 + 1/n**3 +... + 1/n**n)/n**n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum([1/i for i in range(1, n+1)])"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the sum of 1/i for i in range(1, n)\n    sum_i = 0\n    for i in range(1, n+1):\n        sum_i += 1/i\n    return sum_i"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # calculate the harmonic sum of n-1\n    harmonic_sum_n1 = 1 / (2 * n - 1)\n    # return the harmonic sum of n-1\n    return harmonic_sum_n1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1 + 1/2 + 1/3 +... + 1/(n-1))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set from array_nums1\n    set1 = set(array_nums1)\n    # Create an empty list to store the intersection\n    intersection = []\n    # Loop through array_nums2\n    for num in array_nums2:\n        # If num is in the set, add it to the intersection list\n        if num in set1:\n            intersection.append(num)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the elements that are common to both arrays.\n    \"\"\"\n    # Create an empty dictionary to store the elements of both arrays\n    common_elements = {}\n    for num in array_nums1:\n        common_elements[num] = True\n    for num in array_nums2:\n        if num in common_elements:\n            common_elements[num] = True\n    # Create an empty list to store the common elements\n    common_elements_list = []\n    # Loop through the dictionary and add the common elements to the list\n    for num in common_elements:\n        if common_elements[num]:\n            common_elements_list.append(num)\n    # Return the common elements list\n    return common_elements_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create sets from both arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    - `array_nums1` (list): List of integers.\n    - `array_nums2` (list): List of integers.\n\n    Returns:\n    - A list containing the common elements of both arrays.\n    \"\"\"\n    # Create a set of the elements of array_nums2 to remove duplicates\n    unique_elements = set(array_nums2)\n    # Create a list to store the common elements\n    intersection = []\n    # Iterate over the elements of array_nums1 and add the ones that are in unique_elements to the intersection list\n    for num in array_nums1:\n        if num in unique_elements:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    intersection = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Convert both arrays into sets for faster lookup\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Create a set from array_nums2\n    set_nums2 = set(array_nums2)\n\n    # Iterate through each element in array_nums1\n    for num in array_nums1:\n        # If the element is in set_nums2, add it to the intersection list\n        if num in set_nums2:\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.insert(0, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result_list = []\n    for i in range(len(list)):\n        result_list.append(element)\n        result_list.append(list[i])\n    return result_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n\n    # create an empty list to hold the modified elements\n    modified_list = []\n\n    # loop through each element in the list\n    for item in list:\n\n        # insert the element before the current item in the list\n        modified_list.insert(0, item)\n\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the modified elements\n    result = []\n    \n    # Iterate through the list and insert the element at the beginning\n    for i in lst:\n        result.insert(0, element)\n        result.append(i)\n    \n    # Return the modified list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        if isinstance(num, complex):\n            polar_coordinates.append(cmath.polar(num))\n        else:\n            polar_coordinates.append('Invalid input:'+ str(num))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar_coordinates.append(cmath.polar(num))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(complex(num[0], num[1]))\n    polar_coordinates = []\n    for num in complex_numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        abs_num = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"{real} + {imag}j | {abs_num}\u00b0\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f\"{number} = ({real:.2f}, {imag:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # initialize variables for the polar coordinates\n    r = 0\n    phi = 0\n\n    # iterate over the complex numbers in the list\n    for number in numbers:\n        # extract the real and imaginary parts of the number\n        real = number.real\n        imag = number.imag\n\n        # calculate the magnitude of the complex number\n        mag = cmath.sqrt(real**2 + imag**2)\n\n        # calculate the phase of the complex number\n        if real == 0 and imag == 0:\n            # the complex number is a purely real number\n            phi = 0\n        else:\n            # calculate the phase of the complex number using arctan2() function\n            phi = cmath.phase(complex(real, imag))\n\n        # add the polar coordinates to the r and phi variables\n        r += mag\n        phi += phi\n\n    # return the polar coordinates as a list\n    return [r, phi]"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        polar_num = (real, imag)\n        polar_numbers.append(polar_num)\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            complex_num = complex(num)\n            real, imag = cmath.polar(complex_num)\n            print(\"{:.2f}\".format(real), \"+\" + \"{:.2f}\".format(imag) + \"i\")\n        except ValueError:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        ang = cmath.phase(num)\n        print(\"Polar coordinate:\", round(mag, 2), \"with angle\", round(ang, 2), \"degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, and returns a list of polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function counts the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use itertools.combinations_with_replacement to generate all combinations of length n with replacement\n    combinations = list(combinations_with_replacement(l, n))\n\n    # Convert each combination into a tuple and return as a list\n    return [tuple(combination) for combination in combinations]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of length n using combinations_with_replacement\n    colors = list(combinations_with_replacement(l, n))\n    # Convert each combination to a tuple\n    combinations = [(c,) for c in colors]\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generating all combinations of the elements of the list\n    comb = combinations_with_replacement(l, n)\n\n    # Converting the combinations into a list of tuples\n    comb_list = list(comb)\n\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = set()\n    for i in range(len(l)):\n        colors.add(l[i])\n    \n    # generate all possible combinations of colors\n    combinations = list(combinations_with_replacement(colors, n))\n    \n    # create a list of tuples with each combination of colors\n    result = []\n    for combo in combinations:\n        result.append(tuple(combo))\n    \n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations with replacement of length n using itertools.combinations_with_replacement\n    comb = list(combinations_with_replacement(l, n))\n    # Convert each combination to a tuple and return it as a list\n    return [tuple(combination) for combination in comb]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Use combinations_with_replacement to generate all combinations with repetition\n    combinations = list(combinations_with_replacement(l, n))\n\n    # Create a list of tuples for each combination\n    combined_list = []\n    for combination in combinations:\n        combined_list.append(tuple(combination))\n\n    return combined_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[:i]+l[i+1:], n-1):\n            color_combinations.append((l[i],) + j)\n    return color_combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Check for non-negative input\n    if n < 0:\n        raise ValueError(\"Input cannot be negative\")\n    \n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through numbers 2 to n-1\n    for i in range(2, n):\n        # Check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, increment count\n        if is_prime:\n            count += 1\n            \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        flag = True\n        for j in range(2, i):\n            if i % j == 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count\n\nn = int(input(\"Enter a non-negative number: \"))\nresult = count_Primes_nums(n)\nprint(\"The number of prime numbers less than\", n, \"is:\", result)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    # initialize count to zero\n    count = 0\n    \n    # loop through numbers from 2 to n\n    for i in range(2, n+1):\n        \n        # check if number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n            \n    # return count of primes\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    i = 2\n\n    while i <= n:\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 1\n\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        max1, max2 = max(zip(*test_tup1)), max(zip(*test_tup2))\n        max_zip = list(zip(max1, max2))\n        max_tup = tuple(max_zip)\n        return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create a list of tuples with the elements of the two input tuples\n    combined_list = [(x, y) for x in test_tup1 for y in test_tup2]\n\n    # sort the list of tuples in descending order based on the second element of each tuple\n    sorted_list = sorted(combined_list, key=lambda x: x[1], reverse=True)\n\n    # initialize the maximum value to the first element of the first tuple\n    max_value = test_tup1[0]\n\n    # iterate over the sorted list of tuples and update the maximum value if a larger element is found\n    for tup in sorted_list:\n        if tup[1] > max_value:\n            max_value = tup[1]\n\n    # return the maximum value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the first tuple is greater than the second tuple\n    if len(test_tup1) > len(test_tup2):\n        # If yes, maximize the first tuple\n        return test_tup1\n    else:\n        # If no, maximize the second tuple\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    # Determine if either of the tuples has the maximum value in a particular position\n    if max1 >= max2[0] and max1 >= max2[1]:\n        # If so, return the first tuple\n        return test_tup1\n    elif max2 >= max1[0] and max2 >= max1[1]:\n        # If so, return the second tuple\n        return test_tup2\n    # If neither tuple has the maximum value in a particular position, return the two tuples as they are\n    else:\n        return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the first tuple should be equal to the length of the second tuple.\")\n\n    # Initialize the maximum value to be the first tuple\n    max_val = test_tup1\n\n    # Iterate through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            # If the value in the first tuple is greater than the value in the second tuple, update the maximum value\n            max_val = test_tup1\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup = test_tup1\n        else:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_1 = max(test_tup1)\n    max_2 = max(test_tup2)\n\n    if max_1 > max_2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the sequence of primes\n    primes = [2]\n    for i in range(3, 2**31):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            primes.append(i)\n    # Find the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Check if the given input is a valid integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"The input must be a positive integer.\")\n\n    # Initialize a boolean variable to check if a number is prime\n    is_prime = True\n\n    # Iterate from 2 to n-1\n    for i in range(2, n):\n\n        # If the number is divisible by i, it is not prime\n        if n % i == 0:\n            is_prime = False\n            break\n\n    # If the number is prime, it is the nth newman-shanks-williams prime number\n    if is_prime:\n        print(\"The\", n, \"th newman-shanks-williams prime number is\", n)\n    else:\n        print(\"The\", n, \"th newman-shanks-williams prime number is not found.\")"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the count of primes to 0\n    count = 0\n    # Initialize the number of iterations to n\n    iterations = n\n    # Initialize the list of primes to [2]\n    primes = [2]\n    # Use a loop to iterate from 3 to sqrt(n)\n    for i in range(3, int(n ** 0.5) + 1):\n        # Check if i is a prime number\n        if n % i == 0:\n            # If it is, check if the remaining iterations can divide n by i\n            while n % i == 0:\n                # If it can, n is not a prime number, so decrement count and add i to the list of primes\n                count -= 1\n                n //= i\n                primes.append(i)\n        # If i is not a prime number, check if it is divisible by the sum of the previous primes\n        if i in primes:\n            for j in range(len(primes)):\n                if i * primes[j] == n:\n                    # If it is, check if the remaining iterations can divide n by i * j\n                    while n % (i * primes[j]) == 0:\n                        # If it can, n is not a prime number, so decrement count and add i * j to the list of primes\n                        count -= 1\n                        n //= i * primes[j]\n                        primes.append(i * primes[j])\n    # If n is not a prime number, check if it is divisible by the sum of the previous primes\n    for i in range(len(primes)):\n        if n == primes[i]:\n            # If it is, check if the remaining iterations can divide n by the sum of the previous primes\n            while n % primes[i] == 0:\n                # If it can, n is not a prime number, so decrement count and add the sum to the list of primes\n                count -= 1\n                n //= primes[i]\n                primes.append(sum(primes[:i]))\n    # If n is not a prime number, it is a newman-shanks-williams prime number\n    if n > 1:\n        primes.append(n)\n    # Return the list of primes and the count of primes found\n    return primes, count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return newman_prime(n-1) + 2*(n-1)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if all(p % i!= 0 for i in range(2, int(p ** 0.5) + 1)):\n            yield p\n            if len(set(range(2, n + 1))) == n:\n                return\n            p += 1\n        else:\n            p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the prime numbers\n    primes = []\n\n    # Define the function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define the function to find the nth newman\u2013shanks\u2013williams prime number\n    def nth_prime(n):\n        # Initialize a variable to store the count of primes found\n        count = 0\n        # Initialize a variable to store the nth newman\u2013shanks\u2013williams prime number\n        prime = 1\n\n        # Generate the first prime number\n        while not is_prime(prime):\n            prime += 1\n\n        # Check if the nth newman\u2013shanks\u2013williams prime number has been found\n        while count < n:\n            # Generate the next prime number\n            new_prime = prime + 2\n            # Check if the new prime number is prime\n            while not is_prime(new_prime):\n                new_prime += 2\n            # If the new prime number is prime, increment the count and add it to the list of primes\n            if new_prime == prime + 2:\n                count += 1\n                primes.append(new_prime)\n            # Move to the next prime number\n            prime = new_prime\n\n        # Return the nth newman\u2013shanks\u2013williams prime number\n        return primes[n-1]\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    i = 2\n    prime = True\n    \n    # check if n is 0 or 1\n    if n == 0 or n == 1:\n        return n\n    \n    # check if n is prime or not\n    while prime and count < n:\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            count += 1\n        i += 1\n    \n    # return the nth newman\u2013shanks\u2013williams prime number\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for counting the number of primes and the maximum prime number\n    count = 0\n    prime = 2\n    \n    # Loop through all integers starting from 3 up to the square root of n\n    while prime <= n ** 0.5:\n        # Check if the current prime number is a newman\u2013shanks\u2013williams prime\n        if is_newman_shanks_williams(prime):\n            count += 1\n            \n        # If the count is equal to n, return the prime number\n        if count == n:\n            return prime\n        \n        # Increment the prime number and reset the count\n        prime += 1\n        count = 0\n        \n    # If the loop completes without finding the nth newman\u2013shanks\u2013williams prime number, return None\n    return None\n\ndef is_newman_shanks_williams(prime):\n    '''\n    Write a function to check if a given number is a newman\u2013shanks\u2013williams prime.\n    '''\n    # Check if the prime is less than 2\n    if prime < 2:\n        return False\n    \n    # Initialize variables for counting the number of divisors and checking for the divisibility of prime by 2\n    count = 0\n    divisible = True\n    \n    # Loop through all integers starting from 2 up to the square root of the prime\n    for i in range(2, prime // 2 + 1):\n        # Check if the current number is divisible by the current divisor\n        if prime % i == 0:\n            count += 1\n            \n            # If the count reaches 2, return False\n            if count == 2:\n                return False\n            \n    # If the loop completes without finding a divisor, return True\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    a = 1\n    count = 0\n    is_prime = True\n\n    # Iterate until n-th newman-shanks-williams prime number is found\n    while count < n:\n        # Calculate the next number a\n        a += 2\n\n        # Check if a is prime\n        for i in range(2, int(a**0.5)+1):\n            if a % i == 0:\n                is_prime = False\n                break\n\n        # If a is prime, increment count and set is_prime to True\n        if is_prime:\n            count += 1\n            is_prime = True\n\n    # Return the n-th newman-shanks-williams prime number\n    return a"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n\n    return primes[-1]\n"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the first tuple should be equal to the length of the second tuple.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # Calculate the element-wise division of the tuples\n    result_tup = tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples do not have the same length!\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 or test_tup2[i] == 0:\n            print(\"Cannot perform division by zero!\")\n            return\n        \n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have the same length.'\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the input tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length\")\n    \n    # create an empty tuple to hold the result\n    result = ()\n    \n    # loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division operation\n        result += ((test_tup1[i] / test_tup2[i]),)\n    \n    # return the result tuple\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths do not match.\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            return None\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # check if the length of the list is greater than L\n    if len(list1) > L:\n        # create a new list with the first L elements of the original list\n        first_part = list1[:L]\n        # create a new list with the remaining elements of the original list\n        second_part = list1[L:]\n        # return the two parts as a tuple\n        return (first_part, second_part)\n    else:\n        # raise a ValueError if the length of the list is not greater than L\n        raise ValueError(\"The length of the list is not greater than L.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return ([x for x in list1[:L]], [x for x in list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = len(list1) // 2\n        return list1[:mid], list1[mid:]\n    else:\n        mid = len(list1) // 2\n        return list1[:mid], [list1[mid], list1[mid+1]]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Use the modulo operator to calculate the number of parts needed\n    n = len(list1) % L\n    # Use the division operator to calculate the number of elements in each part\n    m = n if n > 0 else L\n    # Use the slicing operator to split the list into two parts of length m\n    list2 = list1[:m]\n    list1 = list1[m:]\n    # Return the two parts of the list as a tuple\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    '''\n    \n    if len(lst) <= L:\n        return lst, []\n    \n    else:\n        return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return \"Error: The length of the input list is less than the desired length.\"\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is greater than or equal to L\n    if len(list1) >= L:\n        # Split the list into two parts with length L\n        part1 = list1[:L]\n        part2 = list1[L:]\n        # Return the resulting lists in a tuple\n        return (part1, part2)\n    else:\n        # Raise an error if the length of the list is less than L\n        raise ValueError(\"Length of the list must be greater than or equal to L.\")"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L < 1:\n        raise ValueError(\"L must be a positive integer.\")\n\n    # Check if the length of the list is greater than L\n    if len(list1) < L:\n        raise ValueError(\"The length of the list must be greater than or equal to L.\")\n\n    # Split the list into two parts using the first L elements\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the list must be greater than or equal to L.\")\n    half_L = L // 2\n    part1 = list1[:half_L]\n    part2 = list1[half_L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L should be a positive integer\")\n    \n    # Check if the given list is empty\n    if len(list1) == 0:\n        return ([], [])\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    #calculate the dog's age in dog years\n    dog_age_in_years = h_age * 7\n\n    #return the dog's age in dog years\n    return dog_age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * (h_age // 3)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert hours to years\n    years = h_age / 720\n    # return the dog's age in dog's years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Parameters:\n    h_age (int): the height of the dog in inches.\n\n    Returns:\n    int: the age in dog's years.\n    \"\"\"\n    # convert the height from inches to meters\n    height_meters = h_age / 0.0254\n\n    # calculate the age in dog's years\n    age_years = height_meters / 0.1667\n\n    # return the calculated age in years\n    return age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # converting human age to dog's age\n    dog_age = h_age * 7\n    # converting dog's age to dog's years\n    dog_years = dog_age / 7\n    return round(dog_years, 2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate the age in dog years of a dog given their height in inches.\n    \"\"\"\n    # convert height to centimeters\n    h_inch = h_age * 2.54\n    # calculate dog years\n    dog_years = h_inch / 30.48\n    # return the result\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    # Convert height from inches to centimeters\n    height_cm = h_age * 2.54\n    \n    # Calculate dog's age in dog's years\n    dog_age_years = height_cm / 2.58\n    \n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    :param h_age: the dog's height in inches\n    :type h_age: float\n    :return: the dog's age in dog's years\n    :rtype: float\n    \"\"\"\n    # calculate the dog's age in dog's years\n    dog_age_years = h_age / 72.7  # 72.7 inches to dog years\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(height):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \"\"\"\n    # Convert height from feet to meters\n    height_meters = height * 0.3048\n    \n    # Calculate age in dog's years\n    dog_years = height_meters / 500\n    \n    # Return the result\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = 0\n    for x in S:\n        if n % step == 0:\n            result.append([x])\n        else:\n            result[-1].append(x)\n        n += 1\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create an empty list to store the resulting lists\n    result = []\n    \n    # loop through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # create a new sublist of the original list with only the nth element\n        sublist = S[i:i+step]\n        \n        # add the sublist to the result list\n        result.append(sublist)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = S[:len(S) - step] # Trim the list to only include every nth element\n    \n    # Split the list into sublists\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    \n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    # Split the input list into sublists of length step\n    result = [S[i:i+step] for i in range(0, len(S), step)]\n    # Return the resulting lists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('Step must be a positive integer.')\n    if len(S) % step!= 0:\n        raise ValueError('The length of S must be a multiple of step.')\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n    # loop through each element of the input list\n    for i in range(0, len(S), step):\n        # create a new list containing only the nth element of the original list\n        new_list = S[i:i+step]\n        # add the new list to the result list\n        result.append(new_list)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    output = []\n    while len(S) > 0:\n        output.append(S[:n])\n        S = S[n:]\n    return output"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = l ** 2 * 6\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    print(\"The lateral surface area of a cube is\", surface_area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l * l * 6\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count**2\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initializing the sum of squares to 0\n    sum_of_squares = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1, 2):\n        # adding the square of the odd number to the sum of squares\n        sum_of_squares += i*i\n\n    # returning the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_sum = 0  \n    for i in range(1, n+1, 2):  \n        odd_sum += i*i  \n    return odd_sum  \n  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count**2\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    # initialize the sum to 0\n    sum = 0\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # if i is odd, add its square to the sum\n        if i % 2 == 1:\n            sum += i*i\n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # iterate over odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of the number to the sum\n        sum += i**2\n\n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    elif n == 2:\n        return '**'\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # loop through each row of the matrix\n    for i in range(n):\n        # loop through each column of the matrix\n        for j in range(n):\n            # print a star for each cell\n            print(\"*\", end=\" \")\n        # print a newline after each row\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the variable to store the current star number\n    current_star = 1\n    # Loop n-1 times to add stars to the left side of the number\n    for i in range(1, n):\n        # Add the current star number to the left side of the number\n        current_star = current_star * 2\n        # Print the left side of the number\n        print(''* (n-i), end='')\n        # Print the current star number on the right side of the number\n        print('*' * current_star)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n+1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Find the number of stars per line\n    num_stars = 5 * n\n\n    # Find the number of lines needed\n    num_lines = n\n\n    # Calculate the number of spaces needed to align the stars\n    spaces = (num_stars - num_lines) // 2\n\n    # Print the stars\n    print(''* spaces + '*' * num_stars)\n\n    # Print the spaces to align the stars\n    print(''* (num_stars // 2) + '|' +'' * (num_stars // 2))\n\n    # Print the stars\n    print(''* spaces + '*' * num_stars)\n\n    # Print the spaces to align the stars\n    print(''* (num_stars // 2) + '|' +'' * (num_stars // 2))\n\n    # Print the stars\n    print(''* spaces + '*' * num_stars)\n\n    # Print the spaces to align the stars\n    print(''* (num_stars // 2) + '|' +'' * (num_stars // 2))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        return str(5 * n * n) +'*'+ str(2 * n * n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    # Initialize the first two numbers to 1\n    first = 1\n    second = 1\n\n    # Loop n-1 times to calculate the next number\n    for i in range(1, n):\n        # Calculate the next number as the sum of the previous two numbers\n        next_num = first + second\n\n        # Update the previous two numbers for the next iteration\n        first = second\n        second = next_num\n\n    # Return the final value of the first number, which is the nth star number\n    return first"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return -1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    for i in range(ord('A'), ord('Z')+1):\n        if k == chr(i):\n            return i"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    # Convert the character to an integer\n    k = ord(k)\n    # Return the ascii value of the character\n    return k"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_of_even_and_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_of_even_and_even_index += arr[i]\n    return sum_of_even_and_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            even_sum += arr[i]\n            count += 1\n    print(\"Sum of even numbers at even positions:\", sum)\n    print(\"Number of even numbers at even positions:\", count)\n    if count == 0:\n        print(\"No even numbers found at even positions.\")\n    else:\n        print(\"Sum of even numbers:\", even_sum)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    even_index = []\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index.append(i)\n    \n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    # Initialize variables\n    even_sum = 0\n    even_index = 0\n    \n    # Iterate through the list\n    for i in range(len(arr)):\n        # Check if the current element is even\n        if arr[i] % 2 == 0:\n            # Check if the current index is even\n            if i % 2 == 0:\n                # Add the current element to the even_sum\n                even_sum += arr[i]\n                # Update the even_index\n                even_index = i\n                \n    # Return the sum and even_index\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n            \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            sum_even_index += i\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n                even_count += 1\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i ** 5\n        i += 2\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n\n    sum_of_even_numbers = sum([x**5 for x in even_numbers])\n\n    return sum_of_even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0 \n    for i in range(2, n+1): \n        if i**5 % 2 == 0: \n            sum += i \n    return sum "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    total = 0  # initialize the sum variable\n\n    # loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        total += i ** 5  # add the value of the current even number raised to the fifth power to the sum\n\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # iterate through first n even natural numbers\n    for i in range(n):\n        # calculate the power of the number\n        power = i**5\n        # check if the number is even\n        if i % 2 == 0:\n            # add the power to the sum if it is even\n            sum += power\n\n    # return the sum of the even powers\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    # initialize sum variable\n    sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the sum of i raised to the fifth power\n        sum += i ** 5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**(5)\n        if i % 2 == 0:\n            sum -= i**(5)\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_powers = 0\n    for i in range(1, n+1):\n        even_powers += i ** 5\n    return even_powers"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Create an empty list to hold the rear elements\n    rear_list = []\n\n    # Loop through each tuple in the input list\n    for item in test_list:\n        # Extract the rear element of the tuple and append it to the rear_list\n        rear_list.append(item[-1])\n\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        if len(i) == 2:\n            result.append(i[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the first tuple's element from the second tuple's element with the same index\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the number of elements in the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The number of elements in the two tuples are not equal.\")\n        return\n    \n    # loop through the tuples\n    for i in range(len(test_tup1)):\n        # check if the elements at the same index are equal\n        if test_tup1[i] == test_tup2[i]:\n            # subtract the elements from the tuple\n            test_tup1[i] = 0\n        # subtract the elements from the tuple\n        else:\n            test_tup1[i] -= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples must have the same length!\")\n        return\n    \n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtraction = []\n    for i in range(len(test_tup1)):\n        subtraction.append(test_tup1[i] - test_tup2[i])\n    return subtraction\n"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # loop through the two tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            # subtract the elements and store the result in a new tuple\n            result_tup = tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n            return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # compare the lengths of the input tuples\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the tuples\n    for i in range(len(test_tup1)):\n        # subtract the elements and append the result to the result list\n        result.append(test_tup1[i] - test_tup2[i])\n    \n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients of n.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Use the formula for binomial coefficients of the form (n)C(n-i)\n    # and substitute i=0 and n-1 for n and n-1 respectively\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += math.factorial(n-i) // math.factorial(i)\n    \n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients of n.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff_sum += math.comb(n, i) * 2**(-i)\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return (math.factorial(n // 2) * (n // 2)) // math.factorial(n // 2 - 2)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        for j in range(i, n+1, 2):\n            sum += math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum variable\n    sum = 0\n\n    # Iterate through each term in the series\n    for i in range(n):\n        # Calculate the even index binomial coefficient using math.comb() function\n        coefficient = math.comb(n, i)\n\n        # Check if the coefficient is even\n        if coefficient % 2 == 0:\n            # If even, add it to the sum variable\n            sum += coefficient\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the values of i from 0 to n-1\n    for i in range(0, n):\n\n        # Calculate the value of the binomial coefficient of i and n-i\n        binomial = math.comb(n, i)\n\n        # Add the value of the binomial coefficient to the sum variable if it is even\n        if i % 2 == 0:\n            sum += binomial\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeffs = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_binomial_coeffs.append(math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n\n    return sum(even_binomial_coeffs)\n\nn = 5\nprint(\"Sum of even index binomial coefficients of\", n, \"is:\", even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # check if n is positive\n    if n <= 0:\n        print(\"Error: n must be a positive integer\")\n        return\n    \n    # initialize variables\n    sum_even = 0\n    even_index = 0\n    \n    # loop over values of n\n    for i in range(1, n+1):\n        # calculate the even index binomial coefficient\n        even_coeff = math.comb(n, i)\n        \n        # check if the coefficient is even\n        if even_index % 2 == 0:\n            sum_even += even_coeff\n        \n        # increment the even index\n        even_index += 1\n        \n    # return the sum of even coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to zero\n    even_sum = 0\n    \n    # Calculate the first even term of the series\n    even_term = math.factorial(n) / (math.factorial(n-2) * math.factorial(2))\n    \n    # Loop through the even indices of the series\n    for i in range(2, n, 2):\n        # Calculate the i-th even term of the series\n        even_term *= i\n        \n        # Add the i-th term to the sum\n        even_sum += even_term\n    \n    return even_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * (3.14 * r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume of the cylinder using the formula: V = \u03c0r^2h\n    V = 3.14159265 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = (1/3) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2 * h) / 3\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for k, v in dict.items():\n        if v >= n:\n            result[k] = v\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    # filter the dictionary to only include entries with values greater than or equal to n\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # initialize the sum of the first n even numbers to 0\n    sum_of_even = 0\n    # loop through the first n even numbers\n    for i in range(2, n+1):\n        # add the even number to the sum of the even numbers\n        sum_of_even += i\n    \n    # add the sum of even numbers to the sum of the first n odd numbers\n    sum_of_odd = n*n*n // 2\n    \n    # return the sum of the two sums\n    return sum_of_even + sum_of_odd"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num = (decagonal_num * (2*i - 1)) // 2\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first two numbers of the sequence\n    first_num = 1\n    second_num = 1\n    \n    # Calculate the nth decagonal number\n    for i in range(2, n + 1):\n        # Calculate the next number in the sequence\n        next_num = first_num + second_num\n        \n        # Update the first number and second number\n        first_num = second_num\n        second_num = next_num\n    \n    # Return the nth decagonal number\n    return next_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 1\n    for i in range(1, n+1):\n        dec_num += 2 * i\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    if n <= 0:\n        return False\n\n    sum_of_squares = 0\n    num = 1\n\n    while num <= n:\n        sum_of_squares += num ** 2\n        num += 1\n\n    square_of_sum = sum_of_squares ** 0.5\n\n    return int(square_of_sum)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_num(n):\n        return (10 * n * n + 1) / 2\n\n    def nth_decagonal(n):\n        num = 0\n        for i in range(n):\n            num += decagonal_num(i)\n        return num\n\n    return nth_decagonal(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    num = 0\n    while i <= n:\n        num += i\n        i += 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n*(3*n-1)/2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return \"Input must be a positive integer.\"\n    \n    # Initialize variables to store the decagonal number and its sum\n    decagonal = 1\n    sum_decagonal = 1\n    \n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the decagonal number and add it to the sum\n        decagonal = (2*i - 1)**2\n        sum_decagonal += decagonal\n    \n    # Check if the sum is equal to the nth decagonal number\n    if sum_decagonal == n:\n        return f\"The {n}th decagonal number is {decagonal}.\"\n    else:\n        return f\"The {n}th decagonal number is not in the sequence.\""
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    # Initialize the variable to store the result\n    result = (-1, False)\n\n    # Loop through each element in the array\n    for i in range(len(dlist)):\n        # If the element is equal to the target, set the result to (i, True) and break out of the loop\n        if dlist[i] == item:\n            result = (i, True)\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = set(test_list)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = list(set(test_list))\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, else False.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique and False otherwise.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for element in test_list:\n        # check if the element is already in the dictionary\n        if element in count_dict:\n            # if it is, increment its count\n            count_dict[element] += 1\n        else:\n            # if it's not, add it with a count of 1\n            count_dict[element] = 1\n    # iterate through the dictionary to check if all the counts are 1\n    for count in count_dict.values():\n        if count!= 1:\n            return False\n    # if all the counts are 1, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts their element-wise values.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n    else:\n        for i in range(len(nums1)):\n            nums1[i] -= nums2[i]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists do not have the same length\")\n        return None\n    \n    # Subtract each element of the lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    \n    # count the frequency of each digit in n\n    for digit in str(n):\n        freq[int(digit)] += 1\n        \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > 0 and digit > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = set(str(n))\n    for digit in digits:\n        freq = str(n).count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq_list = [0] * 10\n    for digit in str(n):\n        freq_list[int(digit)] += 1\n    for i in range(10):\n        if freq_list[i] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # Increment the frequency count of the digit\n            freq[digit] += 1\n        else:\n            # Add the digit to the dictionary with a frequency count of 1\n            freq[digit] = 1\n\n    # Loop through each digit in the integer again and check if the frequency of that digit is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # If we get here, the frequency of each digit in the integer is less than or equal to itself, so the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # convert the input number to a string\n    s = str(n)\n    \n    # count the frequency of each digit in the string\n    freq = {}\n    for digit in s:\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # check if the frequency of each digit in the string is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    for digit in str(n):\n        freq = n.count(digit)\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    # split the string into individual characters\n    digits = list(s)\n    # initialize an empty list to store the frequency of each digit\n    freq = []\n    # loop through each character in the digits list and count its frequency\n    for digit in digits:\n        # check if the digit is already in the freq list and increment its count if it is\n        if digit in freq:\n            freq.index(digit) += 1\n        else:\n            freq.append(1)\n    # loop through each digit in the digits list and compare its frequency with the digit itself\n    for digit in digits:\n        # check if the digit frequency is less than or equal to the digit itself\n        if freq[digits.index(digit)] > digit:\n            return False\n    # if all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = []\n    while n > 0:\n        freq.append(n % 10)\n        n //= 10\n    for i in range(len(freq)):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    freq_dict = {}\n    for digit in str(n):\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    for key in freq_dict:\n        if freq_dict[key] > int(key):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = {}\n    for digit in str(n):\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n\n    for digit in digit_count:\n        if digit_count[digit] > n:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if len(list) == 1:\n        return list[0] == element\n    if list[0] == element:\n        return check_element(list[1:], element)\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Check whether all items in a list are equal to a given element.\n    \"\"\"\n    if len(lst) == 0:\n        return True\n    elif lst[0] == element:\n        return check_element(lst[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return True\n    if list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # if the list is empty or contains only one item, return True\n    if len(list) == 0 or len(list) == 1:\n        return True\n    # iterate through the list and check if each item is equal to the given element\n    for item in list:\n        if item!= element:\n            return False\n    # if all items are equal to the given element, return True\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains the pattern.\")\n    else:\n        print(\"The string does not contain the pattern.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a(b{2,3})\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3}){0,1}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab(b{2,3})?'\n    matches = re.findall(pattern, text)\n    return any(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b){2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    # Define the pattern for checking if the string contains the pattern\n    pattern = r'a.{2,3}b'\n    \n    # Use the re.search() method to search for the pattern in the string\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return True, otherwise, return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a{1}b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a modified array of size n*k\n    modified_array = [0] * (n*k)\n    \n    # Fill the modified array with the original array repeated k times\n    for i in range(n):\n        modified_array[i] = a[i]\n        for j in range(1, k):\n            modified_array[i+j] = a[i]\n    \n    # Initialize variables for the maximum subarray sum and its starting index\n    max_sum = float('-inf')\n    start_index = 0\n    \n    # Iterate through the modified array\n    for i in range(n*k):\n        # If the current element is negative, set it to zero\n        if modified_array[i] < 0:\n            modified_array[i] = 0\n        \n        # Calculate the current subarray sum\n        current_sum = sum(modified_array[start_index:i+1])\n        \n        # Update the maximum subarray sum and its starting index if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n    \n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Initialize the first k elements of the modified array\n    for i in range(k):\n        current_sum += a[i]\n    \n    # Update the max_sum and the current_sum if the current element is the maximum\n    max_sum = max(max_sum, current_sum)\n    \n    # Loop through the remaining elements of the array\n    for i in range(k, n):\n        # Update the current_sum with the difference between the current element and the previous k elements\n        current_sum = current_sum - a[i-k] + a[i]\n        \n        # Update the max_sum if the current_sum is greater\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum subarray sum using Kadane's algorithm\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    # If the sum is less than 0, it means the current subarray is negative.\n    # In this case, we can't form a valid repeated array of k elements.\n    if max_sum < 0:\n        return -1\n    # Find the maximum subarray sum of a repeated array of k elements\n    repeat_sum = 0\n    curr_sum = 0\n    for i in range(n):\n        repeat_sum += a[i]\n        if i >= k - 1:\n            repeat_sum -= a[i - k + 1]\n        curr_sum = max(curr_sum + repeat_sum, a[i])\n        max_sum = max(max_sum, curr_sum)\n    # If the sum of the repeated array is less than 0, it means the current subarray is negative.\n    # In this case, we can't form a valid repeated array of k elements.\n    if max_sum < 0:\n        return -1\n    # Return the maximum sum of a repeated array of k elements\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_arr = [a[0]] * n * k\n    max_sum = max(a[0], a[-1])\n    for i in range(n):\n        for j in range(k):\n            modified_arr[i*k+j] = a[i]\n    modified_arr[n*k] = a[-1]\n    for i in range(1, n*k):\n        modified_arr[i] += max_sum\n        max_sum = max(max_sum, modified_arr[i])\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    repeated_sum = 0\n\n    for i in range(n):\n        current_sum += a[i]\n\n        if i >= k:\n            current_sum -= a[i - k]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        repeated_sum = (current_sum % 1000000007)\n\n    return max_sum if max_sum!= float('-inf') else 0"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum and the current sum as 0\n    max_sum = 0\n    current_sum = 0\n    \n    # iterate through the array a k times\n    for _ in range(k):\n        # add each element of the array to the current sum\n        current_sum += a[n-1]\n        \n        # update the maximum sum if the current sum is greater than the maximum sum\n        max_sum = max(max_sum, current_sum)\n        \n        # remove the first element of the array to create a new subarray\n        del a[0]\n        \n        # add the last element of the subarray to the new subarray\n        a.append(a[n-1])\n    \n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        a: List of integers\n        n: Size of the array\n        k: Number of times the array is repeated\n\n    Returns:\n        The largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Create a new list by repeating the given array k times\n    repeated_array = [a[0]] * k\n    for i in range(1, n):\n        repeated_array.append(a[i])\n    repeated_array.append(a[0])\n\n    # Initialize variables to store the maximum sum of a contiguous array and its end index\n    max_sum = a[0]\n    max_sum_end = 0\n\n    # Iterate over the repeated array and calculate the sum of a contiguous array and its end index\n    for i in range(1, n - k + 1):\n        current_sum = a[i]\n        current_sum_end = i\n\n        # Iterate over the range of repeated array from i + 1 to i + k\n        for j in range(i + 1, i + k):\n            current_sum += a[j]\n\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_end = current_sum_end\n\n    return max_sum, max_sum_end"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array 'a_new' by repeating the input array 'a' k times\n    a_new = a * k\n\n    # initialize the maximum sum'max_sum' and the index of the maximum sum'max_sum_idx'\n    max_sum = float('-inf')\n    max_sum_idx = 0\n\n    # traverse the new array 'a_new'\n    for i in range(n):\n        # calculate the sum of the current window of 'n' elements starting from index 'i'\n        window_sum = sum(a_new[i:i+n])\n\n        # if the window sum is greater than the maximum sum so far, update the maximum sum and the index of the maximum sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n            max_sum_idx = i\n\n    # return the index of the maximum sum\n    return max_sum_idx"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a list to store the modified array\n    modified_arr = []\n\n    # Iterate through the array n times\n    for _ in range(n):\n        # Append the first element of the array\n        modified_arr.append(a[0])\n\n        # Iterate through the array from index 1 to n-k\n        for i in range(1, n - k + 1):\n            # Compute the sum of the first k elements and the last k-1 elements\n            temp_sum = sum(a[i:i+k])\n\n            # Update the modified array with the current sum and the elements in between\n            modified_arr[i] = temp_sum\n\n            # If the current sum is greater than the current maximum sum, update the maximum sum\n            if modified_arr[i] > modified_arr[max_sum_index]:\n                max_sum_index = i\n\n    # Return the maximum sum of the modified array\n    return max(modified_arr)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first k elements of the array\n    sum_first_k = sum(a[:k])\n    \n    # Calculate the maximum sum of the first k elements\n    max_sum_first_k = sum_first_k\n    \n    # Calculate the sum of the last k elements of the array\n    sum_last_k = sum(a[-k:])\n    \n    # Calculate the maximum sum of the last k elements\n    max_sum_last_k = sum_last_k\n    \n    # Calculate the sum of the array with k elements repeated\n    sum_array_k = sum_first_k + sum_last_k\n    \n    # Calculate the maximum sum of the array with k elements repeated\n    max_sum_array_k = sum_array_k\n    \n    # Initialize the maximum sum found so far\n    max_sum_found = max_sum_array_k\n    \n    # Loop through all possible starting indices for the array\n    for start in range(n - k + 1):\n        # Calculate the sum of the current subarray\n        subarray_sum = sum(a[start:start+k])\n        \n        # Update the maximum sum of the current subarray\n        if subarray_sum > max_sum_array_k:\n            max_sum_array_k = subarray_sum\n        \n        # Update the maximum sum of the current subarray formed by repeating the first k elements\n        if subarray_sum + sum_first_k > max_sum_array_k:\n            max_sum_array_k = subarray_sum + sum_first_k\n        \n        # Update the maximum sum of the current subarray formed by repeating the last k elements\n        if subarray_sum + sum_last_k > max_sum_array_k:\n            max_sum_array_k = subarray_sum + sum_last_k\n        \n        # Update the maximum sum found so far\n        if max_sum_array_k > max_sum_found:\n            max_sum_found = max_sum_array_k\n            \n    return max_sum_found"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    count = 0\n    total = 0\n    for i in range(2, n+1, 2):\n        count += 1\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count**2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(2, n+1, 2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(1, n+1):\n        if i%2 == 0:\n            even_numbers.append(i)\n    sum_of_squares = sum([x**2 for x in even_numbers])\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum_squares = 0\n    while count < n:\n        count += 1\n        num = 2 * count\n        sum_squares += num**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_squares = 0\n    count = 0\n\n    while count < n:\n        count += 1\n        square = count * count\n        sum_squares += square\n\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize maximum length to zero\n    max_len = 0\n    # loop through each sublist in the list\n    for sublist in list1:\n        # calculate the length of the sublist\n        length = len(sublist)\n        # check if the length is greater than the current maximum length\n        if length > max_len:\n            # update the maximum length to the new length\n            max_len = length\n    # return the maximum length\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for item in list1:\n        if len(item) > len(max_length_list):\n            max_length_list = item\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # Loop through the list of lists\n    for sublist in list1:\n        # Append the length of the sublist to the list of maximum lengths\n        max_lengths.append(len(sublist))\n    # Find the maximum length of the list of maximum lengths\n    max_length = max(max_lengths)\n    # Create a new list to store the sublists with the maximum length\n    max_sublists = []\n    # Loop through the list of lists again\n    for sublist in list1:\n        # If the length of the sublist is equal to the maximum length, append it to the list of maximum sublists\n        if len(sublist) == max_length:\n            max_sublists.append(sublist)\n    # Return the list of maximum sublists\n    return max_sublists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # initialize an empty list to store the maximum length list\n    max_length_list = []\n\n    # iterate through each list in the input list\n    for i in range(len(list1)):\n        # initialize a variable to store the length of the current list\n        current_list_length = len(list1[i])\n\n        # check if the current length is greater than the length of the current maximum length list\n        if current_list_length > len(max_length_list):\n            # if it is, replace the current maximum length list with the current list\n            max_length_list = list1[i]\n\n    # return the maximum length list\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_len):\n            max_len = list1[i]\n    return max_len"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a boolean 2D array to store the number of ways to paint the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base cases\n    ways[0][0] = 1\n    ways[1][0] = 1\n    ways[1][1] = 1\n\n    # Fill the 2D array using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(k + 1):\n            if j == 0:\n                ways[i][j] = ways[i - 1][j]\n            elif j == k:\n                ways[i][j] = ways[i - 1][j]\n            else:\n                ways[i][j] = ways[i - 1][j] + ways[i - 1][j - 1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a 2D matrix to store the number of ways for each combination of colors\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # base cases\n    dp[1][1] = 1 # 1 post\n    dp[1][2] = 2 # 2 posts\n    \n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if i == j:\n                dp[i][j] = dp[i-1][j-1]\n            elif i == j-1:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i][j-1]\n    \n    # return the number of ways\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize variables\n    ways = [0] * (n * k)\n    ways[0] = 1\n    \n    # Fill the array with the number of ways for each possible fence of size n and k colors\n    for i in range(1, n * k):\n        ways[i] = ways[i-1]\n        \n        # If the current post is the first post, all adjacent posts are the same color\n        if i % k == 0:\n            ways[i] += ways[i-k]\n        \n        # If the current post is the last post, all adjacent posts are the same color\n        if i == n * k - 1:\n            ways[i] += ways[i-k]\n        \n        # If the current post is neither the first nor the last post, check the adjacent posts for the same color\n        else:\n            for j in range(2, k):\n                if (i-j) % k == 0 and (i+j) % k == 0:\n                    ways[i] += ways[i-j] + ways[i+j]\n    \n    return ways[n * k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0] * n\n    visited = [False] * n\n\n    def backtrack(start):\n        if start == n:\n            ways += 1\n            return\n        for i in range(k):\n            if not visited[start] and fence[start]!= i:\n                fence[start] = i\n                visited[start] = True\n                backtrack(start + 1)\n                fence[start] = 0\n                visited[start] = False\n\n    ways = 0\n    backtrack(0)\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize count of ways to 1\n    count = 1\n\n    # Calculate the number of ways to paint the fence\n    for i in range(2, n + 1):\n        # Calculate the number of ways to paint the fence with i posts and k colors\n        ways = 0\n        for j in range(k + 1):\n            if j < i:\n                ways += count_no_of_ways(n - i, j)\n            else:\n                ways += count_no_of_ways(n - i, j - 1)\n        # Add the number of ways to paint the fence with i posts and k colors to the count\n        count *= ways\n\n    # Return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if n <= k:\n        return 1\n    # If more than 2 adjacent posts have same color, the number of ways is 0\n    if n - k > 2:\n        return 0\n    # If no adjacent posts have same color, the number of ways is n-2\n    if n - k == 2:\n        return n - 2\n    # If no adjacent posts have same color and n-2 is greater than 0, the number of ways is n-2\n    if n - k == 1 and n - 2 > 0:\n        return n - 2\n    # Recursive case\n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a 2D array to store the count of ways for each combination of colors\n    count_matrix = [[0 for _ in range(k)] for _ in range(2*n)]\n\n    # Base case: if there are 0 colors, there is only 1 way to paint the fence\n    if k == 0:\n        return 1\n\n    # Base case: if there are only 1 post, there is only 1 way to paint the fence\n    if n == 1:\n        return 1\n\n    # Initialize the count of ways for the first two posts to 1\n    count_matrix[0][0] = 1\n    count_matrix[1][0] = 1\n\n    # Iterate over the remaining n-1 posts and k colors\n    for i in range(2, 2*n):\n        for j in range(k):\n            # If the previous post has the same color as the current post, add 1 to the count\n            if j > 0 and count_matrix[i-1][j] > 0 and count_matrix[i-1][j-1] > 0:\n                count_matrix[i][j] = count_matrix[i-1][j] + count_matrix[i-1][j-1]\n\n    # Return the final count of ways\n    return count_matrix[2*n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # If there are less than 2 colors, there can be no ways to paint the fence\n    if k < 2:\n        return 0\n    \n    # Base case: if n is 0, there is only one way to paint the fence\n    if n == 0:\n        return 1\n    \n    # Initialize memoization dictionary\n    memo = {}\n    \n    # Helper function to count the number of ways to paint the fence\n    def count_ways(n, k, color1, color2):\n        # Base case: if there are no more colors to choose\n        if k == 0:\n            return 1\n        \n        # Check if the current combination has already been calculated\n        key = (n, k, color1, color2)\n        if key in memo:\n            return memo[key]\n        \n        # Calculate the number of ways to paint the fence\n        count = 0\n        for i in range(min(n, k)):\n            # Calculate the number of ways to paint the fence without the first i posts colored with color1\n            count += count_ways(n-i, k-1, color1, color2)\n        \n        # Add the number of ways to paint the fence with the first i posts colored with color1\n        count += count_ways(n-k, k-1, color1, color2)\n        \n        # Add the number of ways to paint the fence with the first i posts colored with color2\n        count += count_ways(n-k, k-1, color2, color1)\n        \n        # Store the calculated number of ways to paint the fence\n        memo[key] = count\n        \n        return count\n    \n    return count_ways(n, k, 0, 1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a matrix to store the number of ways of painting the fence for different arrangements of adjacent posts \n    count = [[0]*(k+1) for i in range(n+1)]\n    # Base case: if only one post exists, it can be painted with any color\n    count[1][1] = 1\n    # For all other possible arrangements of adjacent posts\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # If both adjacent posts have the same color, then we can paint one post with that color and the other post with the opposite color\n            if i-1 >= j-1:\n                count[i][j] = count[i-1][j] + count[i-1][j-1]\n            # If only one adjacent post has the same color, then we can paint one post with that color and the remaining post with the opposite color\n            else:\n                count[i][j] = count[i-1][j]\n    # Return the final count of ways of painting the fence\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Step 1: Calculate the number of ways of painting the fence with n posts and k colors using dynamic programming\n    num_ways = [0] * (n+1)\n    num_ways[0] = 1\n    for i in range(1, n+1):\n        num_ways[i] = 0\n        for j in range(1, min(i, k)+1):\n            num_ways[i] += num_ways[i-j]\n    \n    # Step 2: Find the number of ways of painting the fence with k colors using dynamic programming\n    count = 0\n    for i in range(1, n+1):\n        count += num_ways[i]\n    \n    # Step 3: Calculate the number of ways of painting the fence with at most 2 adjacent posts having the same color\n    if k <= 2:\n        count = 0\n        for i in range(n-1):\n            if num_ways[i] >= 2 and num_ways[i+2] >= 2:\n                count += num_ways[i]\n    \n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return (n-1) // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # check if m is zero\n    if m == 0:\n        return 0\n\n    # check if m is greater than n\n    if m > n:\n        return 0\n\n    # check if n is negative\n    if n < 0:\n        n = -n\n        m = -m\n\n    # find the quotient using the formula: quotient = (n+m-1)/m\n    quotient = (n+m-1) // m\n\n    # if the quotient is negative, round down to the nearest even number\n    if quotient < 0:\n        if (quotient * m) % 2 == 0:\n            quotient += 1\n        else:\n            quotient -= 1\n\n    # return the rounded quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # find quotient using integer division and truncate decimal to nearest integer\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    # check if m is zero\n    if m == 0:\n        raise ValueError(\"division by zero\")\n\n    # calculate the remainder and quotient using integer division\n    q = n // m\n\n    # check if the remainder is zero\n    if q * m == n:\n        return q\n    else:\n        # the quotient is too large\n        # round down to the nearest integer\n        return q - 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # check if both n and m are positive integers\n    if type(n)!= int or type(m)!= int or n <= 0 or m <= 0:\n        print(\"Both n and m must be positive integers.\")\n        return\n\n    # check if m is not zero\n    if m == 0:\n        print(\"m must be non-zero.\")\n        return\n\n    # calculate the quotient of n and m\n    q = n / m\n\n    # check if the quotient is a whole number\n    if q == int(q):\n        return q\n\n    # if the quotient is not a whole number, return the nearest whole number\n    if q < int(q):\n        return int(q)\n    else:\n        return int(q) + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n//m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # Check if m is 0\n    if m == 0:\n        print(\"Error: Division by zero is not allowed.\")\n        return 0\n\n    # Find the quotient using integer division\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the length of the two sides of a right angled triangle, and returns the third side.\n\n    Parameters:\n    w (float): length of the first side\n    h (float): length of the second side\n\n    Returns:\n    float: the third side of the right angled triangle\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the other side of the triangle using the Pythagorean theorem\n    o = math.sqrt(s**2 - w**2 - h**2)\n\n    # Return the other side of the triangle\n    return o"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # calculate the length of the perpendicular to the base\n    perpendicular_length = math.sqrt(w**2 + h**2)\n\n    # calculate the length of the hypotenuse of the right triangle\n    hypotenuse_length = math.sqrt(w**2 + perpendicular_length**2)\n\n    # calculate the length of the adjacent side of the right triangle\n    adjacent_length = math.sqrt(h**2 + perpendicular_length**2)\n\n    # calculate the angle of the base\n    angle_of_base = math.degrees(math.acos(perpendicular_length / hypotenuse_length))\n\n    # calculate the angle of the triangle\n    angle_of_triangle = 180 - angle_of_base\n\n    # calculate the third side of the right triangle\n    third_side = perpendicular_length * math.cos(math.radians(angle_of_triangle))\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the side of the triangle\n    s = math.sqrt(w**2 + h**2)\n    # Calculate the length of the hypotenuse\n    hyp = math.sqrt(w**2 + s**2)\n    # Calculate the length of the other side\n    oth = math.sqrt(h**2 + s**2)\n    # Return the third side\n    return oth"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula to find the semi-perimeter\n    s = (w + h) / 2\n    # Using the formula for the area of a right triangle\n    area = (math.sqrt(s * (s-w) * (s-h)))\n    # Using the law of cosines to find the cosine of the angle between the hypotenuse and the area\n    cos_angle = area / (s * h)\n    # Using the law of cosines to find the angle between the right and perpendicular sides\n    angle = math.acos(cos_angle)\n    # Using the formula for the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    # Using the formula for the length of the perpendicular side\n    perp_side = hypotenuse / math.sin(angle)\n    # Returning the third side of the right angled triangle\n    return perp_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt((w**2)+(h**2))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s ** 2 - w ** 2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(w**2 + (h/2)**2)\n\n    c = a + b\n\n    return c"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize a variable to store the maximum value\n    max_val = None\n    # loop through the list\n    for val in listval:\n        # if the value is greater than the current maximum value, update the maximum value\n        if val > max_val:\n            max_val = val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize max_val to the first element in the list\n    max_val = listval[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current element is greater than the current max_val\n        if listval[i] > max_val:\n            # If it is, update max_val to the current element\n            max_val = listval[i]\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value to the first element of the list\n    max_val = listval[0]\n    \n    # loop through the list starting from the second element\n    for i in range(1, len(listval)):\n        # check if the current element is greater than max value\n        if listval[i] > max_val:\n            # update max value if current element is greater\n            max_val = listval[i]\n    \n    # return the max value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return max(listval, key=lambda x: x)\n    elif isinstance(listval[0], float):\n        return max(listval, key=lambda x: x)\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    elif isinstance(listval[0], list):\n        return max_val(list(itertools.chain(*listval)))"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of any type as an argument and returns the maximum value in the list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum_div = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            sum_div += divisor\n        divisor += 1\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Function to check if a number is divisible by a given number\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    # Initialize the sum of divisors to 0\n    sum_div = 0\n\n    # Check if the given number is less than 2 (in which case it is not a divisor of any number)\n    if number < 2:\n        return 0\n\n    # Check all numbers from 1 to the square root of the given number (inclusive) and add those divisors to the sum\n    for i in range(1, int(number ** 0.5) + 1):\n        if is_divisible(number, i):\n            sum_div += i\n            if is_divisible(number, number // i):\n                sum_div += number // i\n\n    # Return the sum of divisors\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n\nprint(sum_div(12))"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Check if the array has less than 2 elements\n    if len(arr) < 2:\n        return 0\n\n    # Divide the array into two halves and count inversions in each half\n    inv_count = 0\n    mid = len(arr) // 2\n    left_inv_count = get_Inv_Count(arr[:mid])\n    right_inv_count = get_Inv_Count(arr[mid:])\n\n    # Calculate the number of inversions in the array\n    for i in range(mid):\n        for j in range(i + 1, mid):\n            if arr[i] > arr[j]:\n                inv_count += mid - i\n\n    # Add the inversions in the left and right halves\n    inv_count += left_inv_count + right_inv_count\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the count of inversions\n    count = 0\n\n    # Initialize two pointers i and j to the first and last indices of the array\n    i = 0\n    j = len(arr) - 1\n\n    # While i is less than j\n    while i < j:\n        # If the left element is greater than the right element\n        if arr[i] > arr[j]:\n            # Increment the count of inversions and swap the elements at i and j\n            count += j - i\n            arr[i], arr[j] = arr[j], arr[i]\n            # Move the left pointer one step to the right\n            i += 1\n            # Move the right pointer one step to the left\n            j -= 1\n        # If the left element is less than or equal to the right element\n        else:\n            # Move the left pointer one step to the right\n            i += 1\n            # Move the right pointer one step to the left\n            j -= 1\n\n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    n = len(arr)\n\n    # Sort the array in non-decreasing order \n    arr.sort()\n\n    # Traverse through the sorted array and count inversions \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += (j-i)\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        inv_count = 0\n        i = j = 0\n        result = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n            inv_count += len(right) - j\n        result += left[i:]\n        result += right[j:]\n        return result, inv_count\n\n    sorted_arr, inv_count = merge_sort(arr)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Base case: if array has less than 2 elements, return 0 inversions\n    if len(arr) <= 1:\n        return 0\n    \n    # Divide the array into two halves and count inversions in each half recursively\n    inv_left = get_Inv_Count(arr[:len(arr)//2])\n    inv_right = get_Inv_Count(arr[len(arr)//2:])\n    \n    # Create a new array to store the merged sorted array\n    merged = []\n    \n    # Merge the two halves and count inversions in the merged array\n    i = j = 0\n    while i < len(arr)//2 and j < len(arr)//2:\n        if arr[i] < arr[j]:\n            merged.append(arr[i])\n            i += 1\n        else:\n            merged.append(arr[j])\n            j += 1\n            \n        # Count inversions in the merged array\n        left = i\n        right = j\n        while left < right:\n            if arr[left] > arr[right]:\n                left += 1\n            else:\n                right -= 1\n            inv_count += (right - left)\n            \n    # Combine the two inversions in the left and right halves\n    inv_count += inv_left + inv_right\n    \n    # Reverse the merged array to get the original array in ascending order\n    merged.reverse()\n    \n    # Assign the merged array to the original array\n    arr[:] = merged\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef count_inv_merge(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n    i = 1\n    while i < len(sorted_arr):\n        if sorted_arr[i] < sorted_arr[i-1]:\n            inv_count += len(sorted_arr) - i\n        i += 1\n    return inv_count\n\ndef get_Inv_Count(arr):\n    return count_inv_merge(arr)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    Inversion count is defined as the number of pairs (i,j) such that a[i] > a[j] and a[j] > a[i].\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # assume i-th element is already sorted\n        for j in range(i+1, n):\n            # if i-th element is greater than j-th element then count inversion\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in it.\n    '''\n    n = len(arr)\n    inv_count = 0\n    inv_indices = []\n    \n    # Sort the array\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if i!= min_index:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n            inv_indices.append(i)\n            inv_indices.append(min_index)\n            inv_count += (min_index - i)\n    \n    # Count the number of inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Sort the array in O(nlogn) time complexity\n    arr.sort()\n\n    # Initialize the count of inversions\n    inv_count = 0\n\n    # Traverse the array from both ends\n    for i in range(len(arr)):\n        # If the left pointer is less than the right pointer\n        while i < len(arr) // 2:\n            # If the left element is greater than the current element\n            if arr[i] > arr[i + 1]:\n                # Increment the inversion count\n                inv_count += len(arr) // 2 - i\n                # Swap the left and right elements\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n            # Move the left pointer to the right\n            i += 1\n\n    # Return the final inversion count\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for i in list1:\n        if type(i) is list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Base case: if the list is empty, return an empty list\n    if not list1:\n        return []\n\n    # Recursive case: flatten each sublist and concatenate them to a new list\n    elif isinstance(list1[0], list):\n        flat_list = []\n        for sublist in list1:\n            flat_list.extend(flatten_list(sublist))\n        return flat_list\n    else:\n        return [list1]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list as input and returns a flattened version of the list.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list structure into a single list.\n\n    :param lst: the nested list to flatten\n    :return: the flattened list\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Creating a defaultdict to store the maximum aggregate value for each item\n    max_agg_dict = defaultdict(int)\n    \n    # Looping through the list of tuples\n    for item, price in stdata:\n        # Updating the max aggregate value for the current item\n        max_agg_dict[item] = max(max_agg_dict[item], price)\n    \n    # Returning the maximum aggregate value for each item\n    return max_agg_dict"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each item\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Calculate the maximum aggregate for the current item\n        max_aggr[item] = max(max_aggr[item], price)\n\n    # Find the maximum aggregate from the defaultdict\n    max_aggr = max(max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the aggregate for each transaction\n    aggregate_dict = defaultdict(int)\n\n    # iterate over the list of tuples and calculate the aggregate for each transaction\n    for transaction in stdata:\n        for item, quantity in transaction:\n            aggregate_dict[item] += quantity\n\n    # find the maximum aggregate from the dictionary\n    max_aggregate = max(aggregate_dict.values())\n\n    # return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_aggr = 0\n    \n    for st, amt in stdata:\n        max_dict[st] += amt\n        if max_dict[st] > max_aggr:\n            max_aggr = max_dict[st]\n    \n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples of the form (product, price) and returns the maximum aggregate.\n    The maximum aggregate is calculated by summing up all the prices of the products.\n    '''\n\n    # Create a defaultdict to store the aggregate of each product\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for product, price in stdata:\n\n        # Increment the aggregate of the current product by the current price\n        max_agg[product] += price\n\n    # Return the maximum aggregate calculated by summing up all the prices of the products\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n    '''\n    # Initialize a defaultdict to store the cumulative sum of each item\n    cum_sums = defaultdict(int)\n    max_sum = float('-inf')\n\n    # Iterate over the list of tuples\n    for item, price in stdata:\n        # Add the price to the cumulative sum for the current item\n        cum_sums[item] += price\n\n        # If the cumulative sum exceeds the current maximum sum, update the maximum sum\n        if cum_sums[item] > max_sum:\n            max_sum = cum_sums[item]\n\n    # Return the maximum aggregate\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for transaction in stdata:\n        for item in transaction:\n            max_dict[item] += transaction[item]\n    max_sum = 0\n    for key, value in max_dict.items():\n        max_sum = max(max_sum, value)\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key=lambda x: x[0])\n    max_agg = 0\n    agg = 0\n    for t in stdata:\n        agg += t[1]\n        if agg > max_agg:\n            max_agg = agg\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[1]] += item[0]\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    # Function to check if the first n bits and the last n bits sum up to n\n    def check_sum(n):\n        return (n*(n+1)) // 2\n\n    # Initialize count to zero\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n, 2**(2*n)+1):\n        # Check if the sum of the first n bits and the last n bits is equal to n\n        if check_sum(i) == n:\n            count += 1\n\n    # Return count of all binary sequences with sum of first n bits same as sum of last n bits\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n):\n        current_sum = 0\n        for j in range(n):\n            if i & (1 << j):\n                current_sum += 1\n        if current_sum == 2**n - current_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        current_sum = sum([int(digit) for digit in format(i, '0'+str(n)+'b')])\n        if current_sum == sum([int(digit) for digit in format(2**n-1, '0'+str(n)+'b')]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n+1)):\n        # Extract the last n bits and convert to binary\n        last_n_bits = bin(i)[2:]\n        # Extract the first n bits and convert to binary\n        first_n_bits = bin(i-2**n)[2:]\n        # Check if the sums are equal\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    for i in range(2, n+1):\n        first_sum = 0\n        last_sum = 0\n\n        for j in range(i):\n            first_sum += bin(j)[2:].zfill(n)\n            last_sum += bin(i-j-1)[2:].zfill(n)\n\n        if first_sum == last_sum:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary_seq = bin(i)[2:]\n        if sum(int(bit) for bit in binary_seq[:n]) == sum(int(bit) for bit in binary_seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # initialize a list to store the count of binary sequences\n    count = []\n    \n    # iterate over the range of possible binary sequences of length 2n\n    for i in range(2**n, 2**(n+1), 1):\n        \n        # extract the first n bits and the last n bits of the current sequence\n        first_n = i//(2**(n-1))\n        last_n = i % (2**(n-1))\n        \n        # check if the sum of first n bits is equal to the sum of last n bits\n        if sum(first_n) == sum(last_n):\n            \n            # if they are, add the count of the sequence to the count list\n            count.append(i)\n            \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1, 2**n): \n        for j in range(1, 2**n): \n            if i+j == 2**n-1 and sum(bin(i)[2:].zfill(n)) == sum(bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if (sum(int(digit) for digit in bin(i)[2:].zfill(n)[::-1]) == sum(int(digit) for digit in bin(i)[2:].zfill(n)[n::-1])):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**n, -1):\n        count += 1\n    for i in range(2**n, 2**2*n-1):\n        count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            if depth > 1:\n                break\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return depth\n    else:\n        for key, value in d.items():\n            if isinstance(value, dict):\n                depth = dict_depth(value, depth+1)\n            elif isinstance(value, list):\n                for item in value:\n                    if isinstance(item, dict):\n                        depth = dict_depth(item, depth+1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    \n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n            if new_depth > depth:\n                depth = new_depth\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize the depth variable to 1\n    depth = 1\n    # Loop through the dictionary and find the depth of each key\n    for key in d:\n        # If the value of the key is a dictionary, increment the depth by 1\n        if isinstance(d[key], dict):\n            depth += 1\n        # If the value of the key is not a dictionary, reset the depth to 1\n        else:\n            depth = 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the range for which the element must be in order to be at the given index\n    element_range = None\n    for i in range(len(ranges)):\n        if index in ranges[i]:\n            element_range = i\n            break\n\n    # Find the element in the range after the specified number of rotations\n    element = None\n    for i in range(rotations):\n        for j in range(element_range, len(arr)):\n            if arr[j] in arr[element_range:j]:\n                element = arr[j]\n                element_range = j + 1\n                break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Check if the index is within the bounds of the array\n    if index < 0 or index >= len(arr):\n        return None\n    \n    # Initialize variables to store the element and its index\n    element = arr[index]\n    element_index = index\n    \n    # Perform rotations and updates\n    for _ in range(rotations):\n        # Find the next index\n        next_index = (index + 1) % len(arr)\n        \n        # If the next index is within the bounds of the array, swap the elements\n        if next_index!= element_index:\n            arr[element_index], arr[next_index] = arr[next_index], arr[element_index]\n            element_index = next_index\n    \n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    # find the element at the given index after rotations\n    for i in range(len(ranges)):\n        if rotations[i] >= index:\n            element = arr[(index - rotations[i]) % len(arr)]\n            return element\n    # if the index is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at the given index after rotations.\n    It takes in the array, the ranges, number of rotations and the index of the element.\n\n    Args:\n        arr: a list of integers\n        ranges: a list of integers\n        rotations: an integer\n        index: an integer\n\n    Returns:\n        An integer representing the element at the given index after rotations.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    current_range = 0\n    result = 0\n\n    # Iterate through the array\n    for num in arr:\n        # Increment the count if the current number is in the current range\n        if num in ranges[current_range]:\n            count += 1\n        # If the current number is not in the current range, update the range\n        else:\n            current_range += 1\n\n        # If we have counted the required number of rotations, return the element\n        if count == rotations:\n            result = num\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at the given index after rotations.\n    \"\"\"\n    # Initialize variables\n    current_index = index\n    current_range = 0\n    current_range_size = len(ranges[current_range])\n\n    # Iterate over all the rotations and find the element\n    for rotation in range(rotations):\n        # Find the new range after rotation\n        current_range = (current_range + 1) % len(ranges)\n        current_range_size = len(ranges[current_range])\n\n        # Adjust the current index based on the new range and rotation\n        current_index = (current_index - current_range_size + rotations - 1) % len(arr)\n\n        # Update the current element and the range size\n        current_element = arr[current_index]\n        current_range_size = len(ranges[current_range])\n\n    # Return the final element at the given index\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges for the rotations,\n    and the number of rotations to perform, and returns the element at the given index after the rotations.\n    '''\n    # Check if the index is within the array bounds\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Initialize the current rotation and current range\n    current_rotation = 0\n    current_range = ranges[0]\n\n    # Perform the rotations until the index is found\n    while current_rotation < rotations:\n        current_range = ranges[current_rotation]\n        current_rotation += 1\n\n        # Calculate the index after the rotation\n        new_index = index - current_rotation\n        if new_index < 0 or new_index >= len(arr):\n            return None\n        index = new_index\n\n    # Return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges of rotations and index of element to find\n    after rotations. It returns the element at the given index after rotations.\n\n    :param arr: The array of numbers.\n    :param ranges: A list of tuples, where each tuple contains a range of rotations.\n    :param rotations: The number of rotations to apply.\n    :param index: The index of the element to find after rotations.\n    :return: The element at the given index after rotations.\n    '''\n\n    for r in ranges:\n        if index in r:\n            return arr[(index - r[0]) % len(arr)]\n\n    return arr[index % len(arr)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges of rotations, and an index as input and returns the element at the given index after rotations.\n\n    Args:\n    arr (list): List of numbers to be rotated.\n    ranges (list): List of lists containing the start and end of the rotations.\n    rotations (int): Number of rotations required.\n    index (int): Index of the element to be found after rotations.\n\n    Returns:\n    int: The element at the given index after rotations.\n\n    \"\"\"\n    def rotate(arr, start, end):\n        \"\"\"\n        This function rotates an array by the given range.\n\n        Args:\n        arr (list): List of numbers to be rotated.\n        start (int): Start of the range.\n        end (int): End of the range.\n\n        Returns:\n        list: Rotated array.\n        \"\"\"\n        temp = arr[start]\n        for i in range(start, end):\n            arr[i] = arr[i+1]\n        arr[end] = temp\n        return arr\n\n    def find_Element_recursive(arr, ranges, rotations, index, current_rotations=0, current_index=0):\n        \"\"\"\n        This function finds the element at the given index after rotations.\n\n        Args:\n        arr (list): List of numbers to be rotated.\n        ranges (list): List of lists containing the start and end of the rotations.\n        rotations (int): Number of rotations required.\n        index (int): Index of the element to be found after rotations.\n        current_rotations (int, optional): Current number of rotations. Defaults to 0.\n        current_index (int, optional): Current index. Defaults to 0.\n\n        Returns:\n        int: The element at the given index after rotations.\n        \"\"\"\n        if current_rotations == rotations:\n            return arr[index]\n        else:\n            for start, end in ranges:\n                if end > current_index:\n                    arr = rotate(arr, start, end)\n                else:\n                    break\n            return find_Element_recursive(arr, ranges, rotations, index, current_rotations+1, current_index)\n\n    return find_Element_recursive(arr, ranges, rotations, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    max_value = arr[0]\n    min_value = arr[0]\n    max_index = 0\n    min_index = 0\n\n    # Iterate over each element in the array\n    for i in range(1, len(arr)):\n        # Calculate the maximum and minimum values\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = i\n        if arr[i] < min_value:\n            min_value = arr[i]\n            min_index = i\n\n        # Calculate the maximum and minimum values after rotations\n        if i > 0 and i % rotations == 0:\n            if arr[i] > max_value:\n                max_value = arr[i]\n                max_index = i\n            if arr[i] < min_value:\n                min_value = arr[i]\n                min_index = i\n\n        # If the index matches the target index, return the element\n        if i == index:\n            return arr[i]\n\n    # If the target index is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Number of rotations\n    n = rotations\n\n    # Create a copy of the original array\n    arr_copy = arr.copy()\n\n    # Perform rotations\n    for i in range(n):\n        # Find the start and end indices of the current rotation\n        start = 0\n        end = len(arr_copy) - 1\n\n        # Find the mid point of the current rotation\n        mid = (start + end) // 2\n\n        # Find the pivot index for the current rotation\n        if ranges[i] == 'even':\n            pivot = mid\n        elif ranges[i] == 'odd':\n            pivot = mid - 1\n        else:\n            pivot = mid\n\n        # Swap the elements before and after the pivot index\n        arr_copy[start], arr_copy[pivot] = arr_copy[pivot], arr_copy[start]\n        arr_copy[end], arr_copy[pivot] = arr_copy[pivot], arr_copy[end]\n\n        # Find the start and end indices of the sub-array to be rotated\n        if pivot == index:\n            start = pivot + 1\n            end = len(arr_copy) - 1\n        else:\n            start = 0\n            end = pivot - 1\n\n        # Swap the pivot element with the first element of the sub-array to be rotated\n        arr_copy[pivot], arr_copy[start] = arr_copy[start], arr_copy[pivot]\n\n    # Return the element at the given index after rotations\n    return arr_copy[index]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the pattern to match words starting with letter 'p'\n    pattern = r'^p.*'\n\n    # Use the pattern to find words in the list\n    matches = re.findall(pattern, words)\n\n    # Return the two words that match the pattern\n    if len(matches) == 2:\n        return matches\n    else:\n        return \"There are not exactly two words starting with letter 'p'.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    for i in range(len(words)):\n        match = pattern.match(words[i])\n        if match:\n            return (words[i], words[i+1])"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-z]*$' # regular expression to match words starting with letter 'p'\n    result = re.findall(pattern, words) # find all words in the list that match the pattern\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words_list = [word for word in words if re.match(pattern, word)]\n    if len(words_list) == 2:\n        return words_list\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches\n    elif len(matches) == 1:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match the starting letter of the word 'p'\n    pattern = re.compile(\"^p\")\n\n    # Iterate over the list of words and check if the first letter of the word matches 'p'\n    for word in words:\n        if pattern.match(word):\n            # If the word starts with 'p', return the two words as a tuple\n            return (word, words[words.index(word)+1])\n\n    # If no words start with 'p', return an empty tuple\n    return ()"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p'\n\n    # Use the re.findall() function to find all words in the list that match the pattern\n    matches = re.findall(pattern,''.join(words))\n\n    # If there are exactly two matches, return them as a list of tuples\n    if len(matches) == 2:\n        return matches\n    # If there are not exactly two matches, return None\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Returns the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Create a list of lists to store the sum of increasing subsequences for each prefix\n    # The first element of each sublist corresponds to the sum of the prefix up to the ith index\n    # The second element of each sublist corresponds to the maximum sum of increasing subsequence from the prefix up to the ith index\n    dp = [[0] * (k + 1) for _ in range(n)]\n\n    # Initialize the first element of each sublist to 0\n    for i in range(n):\n        dp[i][0] = 0\n\n    # Fill the dp list using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            # If the current element is smaller than the kth element, include it in the increasing subsequence\n            if a[i] < a[index]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i])\n            # If the current element is greater than the kth element, exclude it from the increasing subsequence\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index\n    return dp[n - 1][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return float('-inf')\n\n    if index == k:\n        return a[k-1]\n\n    if a[index] > a[k-1]:\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[index]\n    elif index > k:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes an array a, its size n, an index i, and a value k as input and returns the maximum sum of increasing subsequence from prefix until i and also including kth element.\n    \"\"\"\n\n    # Initialize the maximum sum and the current sum of increasing subsequence\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # Traverse through the array\n    for j in range(index, n):\n        # If the element at j is greater than k\n        if a[j] > k:\n            # Calculate the maximum sum of increasing subsequence from prefix until j-1 and including kth element\n            max_sum = max(max_sum, cur_sum + a[j])\n            # Update the current sum of increasing subsequence\n            cur_sum = a[j]\n        else:\n            # Update the current sum of increasing subsequence\n            cur_sum += a[j]\n\n    # Return the maximum sum of increasing subsequence from prefix until i and including kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k == 0:\n        return max(a[0:index+1])\n    elif k == n:\n        return max(a[0:index+1])\n    else:\n        if k < index:\n            return max_sum_increasing_subseq(a, n, index, k-1)\n        else:\n            max_so_far = max(max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index, k-1)) + a[index]\n            return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    window_start = 0\n    window_end = index\n\n    # Iterate through the array from 0 to k-1\n    for i in range(k):\n        if i < index:\n            # If i is less than index, then we don't need to consider this element\n            continue\n\n        # Calculate the sum of the prefix of length i+1\n        prefix_sum = 0\n        for j in range(i, index):\n            prefix_sum += a[j]\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            window_start = i\n\n        # Update the current sum\n        curr_sum = max(a[i] + prefix_sum, curr_sum)\n\n    # If the last window starts before index, update the window_end and max_sum\n    if window_start < index:\n        window_end = index\n        curr_sum = a[index]\n\n    # Find the maximum sum of increasing subsequence from window_start to window_end\n    for i in range(window_start, window_end):\n        curr_sum = max(curr_sum - a[i], 0)\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum + curr_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize dp array to store maximum sum of increasing subsequence ending at each index\n    dp = [0] * (n+1)\n    # Initialize max_sum variable to store maximum sum of increasing subsequence ending at the last index\n    max_sum = 0\n    # Initialize i variable to start from 0\n    i = 0\n    # Iterate through all elements in the array\n    while i <= n:\n        # If the current index is less than or equal to k\n        if i <= k:\n            # Set the maximum sum to 0 as we can't include a kth element after i\n            dp[i] = 0\n        else:\n            # Iterate through all elements from index 0 to i-1\n            for j in range(i-1):\n                # If the sum of current element and the maximum sum of increasing subsequence ending at j is greater than the current maximum sum\n                if a[index] + dp[j] > dp[i]:\n                    # Update the current maximum sum\n                    dp[i] = a[index] + dp[j]\n        # If the current maximum sum is greater than the maximum sum so far\n        if dp[i] > max_sum:\n            # Update the maximum sum\n            max_sum = dp[i]\n        # Increment the index\n        i += 1\n    # Return the maximum sum of increasing subsequence ending at the last index\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n    a: list of integers\n    n: size of the list\n    index: index of the last element of the increasing subsequence\n    k: index of the kth element after index\n\n    Returns:\n    The maximum sum of increasing subsequence from prefix until ith index and also including the kth element.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n\n    # Iterate over the remaining elements of the list\n    for i in range(index + 1, n):\n\n        # Check if the current element is greater than k\n        if a[i] > a[k]:\n\n            # Update the prefix sum\n            prefix_sum += a[i]\n\n            # Update the maximum sum if the prefix sum is greater than the current maximum\n            if prefix_sum > max_sum:\n                max_sum = prefix_sum\n\n        # Reset the prefix sum if the current element is not greater than k\n        else:\n            prefix_sum = 0\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # If k is greater than or equal to n, then there is no increasing subsequence\n    if k >= n:\n        return 0\n\n    # Create a list to store the maximum sum of increasing subsequence of all prefixes until the ith index\n    max_sum = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence of the prefix until ith index to be the value of the current element\n    max_sum[index] = a[index]\n\n    # Loop through all previous indices and check if the maximum sum of increasing subsequence of any prefix until the current index is greater than or equal to the current element\n    for i in range(index):\n        if max_sum[i] >= a[index]:\n            # If the maximum sum of increasing subsequence of any prefix until the current index is greater than or equal to the current element,\n            # then add the sum of the maximum sum of increasing subsequence of all prefixes until the current index up to the current index to the maximum sum of increasing subsequence of the prefix until the current index\n            max_sum[index] += max_sum[i]\n\n    # Check if the maximum sum of increasing subsequence of the prefix until the ith index is greater than or equal to the value of the kth element\n    if max_sum[index] >= a[k]:\n        # If it is, then return the maximum sum of increasing subsequence of the prefix until the ith index\n        return max_sum[index]\n\n    # If the maximum sum of increasing subsequence of the prefix until the ith index is less than the value of the kth element,\n    # then return the sum of the maximum sum of increasing subsequence of the prefix until the ith index up to the kth element\n    return max_sum[index] + a[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum so far and the sum of the current subsequence\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate over all possible subsequences starting from index to n-1\n    for i in range(index, n):\n        # If the sum of the subsequence including the i-th element is less than or equal to the sum of the previous subsequence,\n        # then the maximum sum of increasing subsequence is the sum of the previous subsequence plus the value of the i-th element.\n        if current_sum + a[i] <= a[index-1] + max_sum + a[i]:\n            max_sum = max(max_sum, current_sum + a[i])\n        # Otherwise, the maximum sum of increasing subsequence is the sum of the current subsequence plus the value of the i-th element.\n        else:\n            max_sum = max(max_sum, current_sum + a[i])\n            # Update the current subsequence to exclude the i-th element\n            current_sum -= a[index-1]\n        \n        # If the i-th element is the kth element after index, then update the maximum sum of increasing subsequence\n        if a[i] >= a[k]:\n            max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(deepcopy(tuplex[i][j]))\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n\n    # Check if the length of the tuple is greater than or equal to the desired length\n    if length >= m*n:\n        # Create an empty list to hold the colon\n        colon = []\n\n        # Get the index of the first element in the colon\n        i = 0\n\n        # Loop through the tuple\n        while i < length:\n            # Get the index of the first element in the tuple for the current row\n            j = i % m\n\n            # Get the index of the first element in the tuple for the current column\n            k = i // m\n\n            # Add the current element to the colon\n            colon.append(tuplex_copy[i])\n\n            # Update the index for the next iteration\n            i += 1\n\n        # Return the colon as a tuple\n        return tuple(colon)\n    else:\n        # If the length of the tuple is less than the desired length, raise an exception\n        raise ValueError(\"The length of the input tuple must be greater than or equal to the desired length.\")"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): A tuple with elements (i,j), where i and j are integers.\n    m (int): An integer representing the size of the colon.\n    n (int): An integer representing the number of columns in the input tuple.\n\n    Returns:\n    tuple: A tuple containing elements (i, j) for every valid i, j in the colon.\n\n    '''\n    new_tuplex = deepcopy(tuplex)\n    colon = []\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if 1 <= i <= m and 1 <= j <= n:\n                colon.append((i,j))\n    new_tuplex = tuple(colon)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a new tuple by copying the input tuple\n    new_tup = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    num_el = len(new_tup)\n\n    # Calculate the number of columns in the colon\n    num_cols = num_el // m\n\n    # Calculate the number of rows in the colon\n    num_rows = (num_el + n - 1) // n\n\n    # Initialize the colon as an empty list\n    colon = []\n\n    # Iterate through each row in the colon\n    for i in range(num_rows):\n        # Get the starting index of the current row\n        start_idx = i * m\n\n        # Get the ending index of the current row\n        end_idx = start_idx + m\n\n        # Get the current row of the colon\n        row = new_tup[start_idx:end_idx]\n\n        # Append the current row to the colon\n        colon.append(row)\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = []\n    for j in range(m):\n        row.append(tuplex[j][n-1-j])\n    return tuple(row)\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        colon.append(deepcopy(tuplex[i]))\n    for i in range(m,n):\n        colon.append(deepcopy(tuplex[i]))\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tup = deepcopy(tuplex)\n    # Get the first m values\n    tup = tup[:m]\n    # Get the last n values\n    tup = tup[-n:]\n    # Join the values into a colon-separated string\n    colon_str = ':'.join(str(x) for x in tup)\n    return colon_str"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colontup = deepcopy(tuplex)\n    colontup += ':'\n    return colontup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    # Find the first index that is greater than or equal to m\n    index = max(0, m - 1)\n    # Initialize an empty list to store the colon\n    colon = []\n    # Loop through the indices from 0 to n-1\n    for i in range(m, n):\n        # Add the element at the current index to the colon\n        colon.append(tuplex_copy[index])\n        # Increment the index\n        index += 1\n        # If we have reached the end of the tuple, break out of the loop\n        if index >= length:\n            break\n    # Return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    col = col[:n]\n    return tuple(col)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    if N % 2 == 0:\n        raise ValueError(\"The number of products to find should be odd\")\n\n    if len(nums1) < N:\n        raise ValueError(\"The number of elements in nums1 should be greater than or equal to the number of products to find\")\n\n    if len(nums2) < N:\n        raise ValueError(\"The number of elements in nums2 should be greater than or equal to the number of products to find\")\n\n    products = []\n\n    # iterate over all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            product = 1\n            for k in range(len(nums1)):\n                if k == i or k == j-1:\n                    continue\n                product *= max(nums1[k], nums2[k])\n            products.append(product)\n\n    # sort the products in descending order\n    products.sort(reverse=True)\n\n    # return the top N products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    largest_products = []\n    for i in range(N):\n        largest_products.append(nums1[i] * nums2[i])\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    product1 = product2 = 1\n    largest_products = []\n    count = 0\n\n    # Loop through the lists and find the largest products\n    for i in range(N):\n        if i < len(nums1):\n            product1 *= max(nums1[i], nums2[i])\n        if i < len(nums2):\n            product2 *= max(nums1[i], nums2[i])\n        if count < N:\n            largest_products.append(max(product1, product2))\n            count += 1\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum length of the two lists\n    max_len = max(len(nums1), len(nums2))\n    # Create a list of tuples containing the products of each combination of elements from the two lists\n    products = [(nums1[i]*nums2[j], i, j) for i in range(max_len) for j in range(max_len)]\n    # Sort the list of products in descending order of their product\n    products.sort(key=lambda x: x[0], reverse=True)\n    # Return the first N products as a list\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the first list in descending order\n    nums1.sort(reverse=True)\n    \n    # initialize variables to store the largest products\n    largest1 = 0\n    largest2 = 0\n    \n    # iterate through the first list and find the largest N products\n    for i in range(N):\n        largest1 *= nums1[i]\n        if i < N-1:\n            largest1 = int(largest1)\n    \n    # iterate through the second list and find the largest N products\n    for j in range(N):\n        largest2 *= nums2[j]\n        if j < N-1:\n            largest2 = int(largest2)\n    \n    # return the maximum of the two largest products\n    return max(largest1, largest2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Check if the sum of the largest values is greater than the specified number N\n    if max1 + max2 > N:\n        # If so, find the index of the maximum value in each list\n        max_index1 = nums1.index(max1)\n        max_index2 = nums2.index(max2)\n\n        # Find the indices of the largest values from the selected lists\n        large_indices1 = [nums1.index(nums1[i]) for i in range(N)]\n        large_indices2 = [nums2.index(nums2[i]) for i in range(N)]\n\n        # Sort the indices of the largest values from each list in descending order\n        large_indices1.sort(reverse=True)\n        large_indices2.sort(reverse=True)\n\n        # Return the product of the largest values from the selected lists\n        return nums1[large_indices1[0]] * nums2[large_indices2[0]]\n    else:\n        # If not, return the product of the largest values from the original lists\n        return max(nums1) * max(nums2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order of the first factor\n    nums1 = sorted(nums1, key=lambda x: (-x[1], x[0]))\n    nums2 = sorted(nums2, key=lambda x: (-x[1], x[0]))\n\n    # Initialize the maximum product to be found\n    max_product = float('-inf')\n\n    # Iterate over the required number of products\n    for i in range(N):\n        # Calculate the product of the two largest factors\n        product = nums1[-i-1][1] * nums2[-i-1][1]\n        # Update the maximum product if the current one is larger\n        max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the two largest numbers from each list\n    large1 = nums1[-2] * nums1[-1]\n    large2 = nums2[-2] * nums2[-1]\n\n    # Calculate the product of the largest numbers from each list\n    product = max(large1, large2)\n\n    # Calculate the number of pairs of factors that we need to check\n    pairs = N // 2\n\n    # Initialize two variables to store the largest products we find\n    largest1 = 0\n    largest2 = 0\n\n    # Loop through the pairs of factors that we need to check\n    for i in range(pairs):\n        # Calculate the product of the next two largest numbers from each list\n        factor1 = nums1[i] * nums1[i+1]\n        factor2 = nums2[i] * nums2[i+1]\n\n        # Calculate the product of the next largest number from each list\n        next1 = nums1[-i-1] * nums1[-i]\n        next2 = nums2[-i-1] * nums2[-i]\n\n        # Calculate the maximum of the products we've found so far\n        max_product = max(factor1, factor2, next1, next2)\n\n        # If we've found a larger product than the current largest, update the variables\n        if max_product > largest1:\n            largest1 = max_product\n            largest2 = max(factor1 * factor2, factor2 * next1, factor1 * next2, factor2 * next2)\n\n    # Return the two largest products that we found\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize an empty list to store the products\n    products = []\n\n    # Iterate over the first list and select a factor from each list\n    for num1 in nums1:\n        # Initialize variables to store the maximum and minimum values\n        max_value = float('-inf')\n        min_value = float('inf')\n\n        # Iterate over the second list and calculate the product of the factor and the numbers in the list\n        for num2 in nums2:\n            # Calculate the product of the factor and the numbers in the list\n            product = num1 * num2\n\n            # Update the maximum and minimum values\n            max_value = max(max_value, product)\n            min_value = min(min_value, product)\n\n        # Calculate the sum of the products of the factor and the numbers in the list\n        sum_products = sum(num1 * num2 for num2 in nums2)\n\n        # If the sum of products is greater than the specified N, add the product to the list of products\n        if sum_products > N:\n            products.append(max_value)\n\n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the two largest numbers in each list\n    largest1 = max(nums1)\n    largest2 = max(nums2)\n\n    # Find the two smallest numbers in each list\n    smallest1 = min(nums1)\n    smallest2 = min(nums2)\n\n    # Calculate the factor of each number\n    factor1 = largest1 / smallest1\n    factor2 = largest2 / smallest2\n\n    # Multiply the largest products by the factors and sort them in descending order\n    product1 = largest1 * factor1\n    product2 = largest2 * factor2\n    sorted_products = sorted([product1, product2], reverse=True)\n\n    # Extract the first N largest products and return them as a list\n    return sorted_products[:N]"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the maximum of those two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple_str = tuple(str1)\n    return tuple_str"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n > 0:\n        count += 1\n        n &= (n - 1)\n    return count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the leftmost unset bit\n    leftmost_unset_bit = -1\n    \n    # Iterate through the bits of the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is 0, then it's an unset bit and we update the leftmost_unset_bit variable\n        if bit == '0':\n            leftmost_unset_bit = bit\n    \n    # Convert the leftmost_unset_bit to an integer and return it\n    return int(leftmost_unset_bit, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a number.\n    \"\"\"\n    # Loop through all the bits in the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the current bit is set to 1\n        if (n >> i) & 1 == 1:\n            # If it is, unset the bit by performing a bitwise AND with 1 shifted left by the current bit position\n            n &= ~(1 << i)\n            # Return the modified number\n            return n\n\n    # If no unset bits are found, return the original number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the leftmost unset bit\n    while n & 1 == 0:\n        n >>= 1\n    \n    # Set the leftmost unset bit to 1\n    n |= 1\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the rightmost set bit in n\n    last_set_bit = n.bit_length() - 1\n    \n    # set the leftmost unset bit to 1\n    n |= (1 << last_set_bit)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given integer n.\n\n    Input: An integer n.\n\n    Output: An integer n with the left most unset bit set to 1.\n\n    Algorithm:\n    - Initialize a variable mask of all 1's.\n    - Initialize a variable bit_pos of 0.\n    - Repeat until all bits of the mask are set to 0:\n        - If the least significant bit of n is 0, then set the least significant bit of mask to 0 and increment bit_pos by 1.\n        - If the least significant bit of n is 1, then break out of the loop since we have already found the left most unset bit.\n\n    Finally, return n with the left most unset bit set to 1.\n    '''\n\n    mask = 0b111111111111111111111111111111111111111111111111111111111111\n    bit_pos = 0\n\n    while mask!= 0:\n        if (n & 1) == 0:\n            mask = mask & ~(1 << bit_pos)\n            bit_pos += 1\n        else:\n            break\n\n    return n | (1 << bit_pos)\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the leftmost unset bit to the highest bit set to 1\n    bit = 31\n\n    # Iterate over the bits of n from right to left\n    while n & (1 << bit):\n        bit -= 1\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << bit)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a number n.\n    \"\"\"\n    # Initialize left_most_unset_bit to True\n    left_most_unset_bit = True\n\n    # Loop through each bit position in the binary representation of n\n    for i in range(31):\n        # Set the bit at the current position to 0 if the current bit is 1 and the left_most_unset_bit is True\n        if (n >> i) & 1 == 1 and left_most_unset_bit:\n            n = n & ~(1 << i)\n        # Set the left_most_unset_bit to False if all bits are set to 1\n        elif n == 0b1111111111111111111111111111111:\n            left_most_unset_bit = False\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert binary string to integer\n    n = int(n, 2)\n\n    # Set the leftmost unset bit to 1\n    if n & 1 == 0:\n        n |= 1\n\n    # Convert integer back to binary string\n    binary_string = bin(n)[2:]\n\n    # Pad the binary string with leading 0's\n    binary_string = '0' * (8 - len(binary_string)) + binary_string\n\n    # Convert binary string to integer\n    n = int(binary_string, 2)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone respectively.\n    The function returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2 # calculate area of cone\n    volume = area * h # calculate volume of cone\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    This function takes the radius and height of the cone as inputs and returns the volume of the cone.\n    '''\n    # Using the formula V = \u03c0r\u00b2h\n    volume = (math.pi * r**2 * h)\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters, radius and height, and returns the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, which represent the radius and height of the cone respectively.\n    It returns the volume of the cone.\n    '''\n    # Calculate the volume of the cone\n    volume = (1/3) * math.pi * r ** 2 * h\n    \n    # Return the volume of the cone\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while 2**i <= n:\n        i += 1\n    return 2**i - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while n > 1:\n        highest_power += 1\n        n >>= 1\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n\n    Args:\n    n (int): A positive integer\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        highest_pow_2 = 1\n        while highest_pow_2 < n:\n            highest_pow_2 <<= 1\n        return highest_pow_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to keep track of the highest power of 2 found\n    highest = 0\n    \n    # Loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        \n        # Check if the current number is a power of 2\n        if (i & (i-1)) == 0:\n            \n            # If it is, update the highest variable if necessary\n            if i > highest:\n                highest = i\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * highest_Power_of_2(n >> 1)\n\nprint(highest_Power_of_2(16))  # Output: 16\nprint(highest_Power_of_2(32))  # Output: 32\nprint(highest_Power_of_2(64))  # Output: 64\nprint(highest_Power_of_2(1024))  # Output: 1024"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    i = 1\n    while (2**i) <= n:\n        i += 1\n    return i-1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 1\n    while i <= n:\n        if i == 1 << i:\n            return i\n        i = i << 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Use binary search algorithm to find the highest power of 2 that is less than or equal to n\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if mid * mid > n:\n            right = mid\n        else:\n            left = mid + 1\n\n    # Return the highest power of 2 that is less than or equal to n\n    return left"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    This function will find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer argument `n` and returns the nth Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0: \n        return None\n    elif n == 1: \n        return 2\n    else: \n        prev_lucas = 2\n        lucas = 1\n        for i in range(2, n+1): \n            lucas = (4*lucas + prev_lucas) % 28223 \n            prev_lucas = lucas \n        return lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for lst in args:\n        for item in lst:\n            key, value = item.split(':')\n            if key not in result:\n                result[key] = [value]\n            else:\n                result[key].append(value)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes any number of lists and returns a nested dictionary.\n    \"\"\"\n    result = {}\n    for i, list_ in enumerate(lists):\n        for j, item in enumerate(list_):\n            if isinstance(item, list):\n                if j not in result:\n                    result[j] = []\n                result[j].append(convert_list_dictionary(*item))\n            else:\n                if i not in result:\n                    result[i] = {}\n                result[i][j] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create empty nested dictionary\n    nested_dict = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Create a nested dictionary for each list\n        nested_dict[i] = {}\n        # Loop through each key-value pair in the first list\n        for j in range(len(l1[i])):\n            # Create a key-value pair for the first list in the nested dictionary\n            nested_dict[i][l1[i][j]] = l2[i][j]\n            # Create a key-value pair for the second list in the nested dictionary\n            nested_dict[i][l1[i][j]] = l3[i][j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): A list containing dictionaries.\n        l2 (list): A list containing lists.\n        l3 (list): A list containing strings.\n\n    Returns:\n        list: A list containing nested dictionaries.\n\n    Example:\n        l1 = [{'name': 'John', 'age': 25}, {'name': 'Alice', 'age': 30}]\n        l2 = [['John', 'Mary', 'Bob'], ['Alice', 'Bob', 'Charlie']]\n        l3 = ['name', 'age']\n\n        nested_list = convert_list_dictionary(l1, l2, l3)\n\n        print(nested_list)\n    '''\n\n    nested_list = []\n\n    for i in range(len(l1)):\n        sub_dict = {}\n        for j in range(len(l2[i])):\n            sub_dict[l3[j]] = l2[i][j]\n        nested_list.append(sub_dict)\n\n    return nested_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = []\n    for item in l1:\n        dictionary = {}\n        for i, value in enumerate(item):\n            dictionary[l2[i]] = value\n        result.append(dictionary)\n    for item in l3:\n        dictionary = {}\n        for i, value in enumerate(item):\n            dictionary[l2[i]] = value\n        result.append(dictionary)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    :param l1: List of dictionaries.\n    :param l2: List of lists.\n    :param l3: List of tuples.\n    :return: Nested dictionary.\n    \"\"\"\n\n    # Initialize empty dictionary to store final result\n    result = {}\n\n    # Iterate through lists and convert each list to dictionary\n    for i in range(len(l1)):\n        # Use the first list as the keys and the second list as values for the dictionary\n        result[l1[i]] = l2[i]\n\n    # Iterate through tuples and convert each tuple to dictionary\n    for i in range(len(l3)):\n        # Use the first element of the tuple as the key and the second element as the value for the dictionary\n        result[l3[i][0]] = l3[i][1]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]] = l3[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Define a nested dictionary to store the data\n    data = {}\n\n    # Loop through each list and add its items to the nested dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        for j in range(len(l2)):\n            data[l1[i]][l2[j]] = l3[i][j]\n\n    # Return the nested dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # iterate through the first list\n    for i in range(len(l1)):\n        # create a sub-dictionary for each element\n        sub_dict = {}\n        \n        # iterate through the second list\n        for j in range(len(l2)):\n            # add key-value pairs to sub-dictionary\n            sub_dict[l2[j]] = l3[i][j]\n        \n        # add the sub-dictionary to the result dictionary\n        result[l1[i]] = sub_dict\n    \n    # return the result dictionary\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n\n    a = get_max_sum(n/2)\n    b = get_max_sum(n/3)\n    c = get_max_sum(n/4)\n    d = get_max_sum(n/5)\n    return max(a + b + c + d, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    \n    # Define the function to calculate the maximum sum\n    def f(n):\n        if n < 2:\n            return n\n        else:\n            return max((f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    \n    # Call the function and return the result\n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 45\n    elif n == 5:\n        return 120\n    \n    max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    \n    return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n\n    half_sum = get_max_sum(n//2)\n    third_sum = get_max_sum(n//3)\n    fourth_sum = get_max_sum(n//4)\n    fifth_sum = get_max_sum(n//5)\n    max_sum = max(half_sum + third_sum + fourth_sum + fifth_sum, n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Define the function to calculate the sum of the first n terms of Fibonacci sequence\n    def fibonacci_sum(n):\n        a, b = 0, 1\n        for i in range(n):\n            c = a + b\n            a = b\n            b = c\n        return a\n\n    # Calculate the sum of the first n terms of the Fibonacci sequence using the given equation\n    f_n = fibonacci_sum(n)\n    f_half = fibonacci_sum(n//2)\n    f_third = fibonacci_sum(n//3)\n    f_fourth = fibonacci_sum(n//4)\n    f_fifth = fibonacci_sum(n//5)\n    max_sum = max(f_half + f_third + f_fourth + f_fifth, f_n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n <= 1:\n        return n\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 4\n    \n    if n == 4:\n        return 7\n    \n    if n == 5:\n        return 11\n    \n    if n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    \n    if n % 2!= 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n + 1"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    # Initialize the maximum sum and sum of the last two terms\n    max_sum = 0\n    sum_last_two = 0\n\n    # Calculate the sum of the last two terms\n    if n > 2:\n        sum_last_two = n // 2 + n // 3 + n // 4 + n // 5\n\n    # Calculate the sum of the first two terms\n    if n > 3:\n        sum_first_two = n // 2 + n // 3 + n // 4 + n // 5\n\n    # Calculate the sum of all terms using the given equation\n    if n > 4:\n        sum_all_terms = sum_last_two + n\n\n    # Update the maximum sum\n    max_sum = max(max_sum, sum_first_two)\n    max_sum = max(max_sum, sum_all_terms)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(x):\n        if x == 1:\n            return x\n        else:\n            return max(f(x//2) + f(x//3) + f(x//4) + f(x//5), x)\n    \n    return f(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize maximum length and list with maximum length as None\n    max_len = 0\n    max_list = None\n    # Loop through the input list\n    for i in input_list:\n        # Check if the current length of the list is greater than the current maximum length\n        if len(i) > max_len:\n            # If it is, update the maximum length and list with the new values\n            max_len = len(i)\n            max_list = i\n    # Return the maximum length list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(item) for item in input_list]\n    max_length = max(lengths)\n    return [item for item in input_list if len(item) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set to remove duplicates\n    set_tup = set(test_tup)\n    # if set is empty, then all elements are unique\n    if not set_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # check if length of tuple is 0 or 1\n    if len(test_tup) <= 1:\n        return True\n    # loop through tuple and check if each element is a duplicate\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove any duplicates and then back to a list\n    test_set = list(set(test_tup))\n    # Check if the length of the list is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set and then back to a tuple to remove duplicates\n    unique_set = set(test_tup)\n    unique_tup = tuple(unique_set)\n    # Check if the length of the tuple is equal to the length of the set\n    if len(test_tup) == len(unique_set):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # Initialize two dictionaries to store the count of each character\n    char_count = {}\n    non_repeating_char = {}\n    \n    # Iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the string again and add the characters that appear only once to a new list\n    non_repeating_list = []\n    for char in str1:\n        if char_count[char] == 1:\n            non_repeating_list.append(char)\n    \n    # If there are no non-repeating characters, return None\n    if not non_repeating_list:\n        return None\n    \n    # If there is only one non-repeating character, return it\n    if len(non_repeating_list) == 1:\n        return non_repeating_list[0]\n    \n    # If there are multiple non-repeating characters, return the first one\n    return non_repeating_list[0]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to remove duplicates\n    str_set = set(str1)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(list(str_set))\n    \n    # If the length of the list is 0, there are no non-repeating characters in the string\n    if len(sorted_list) == 0:\n        return None\n    \n    # Return the first non-repeating character\n    return sorted_list[0]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n\n    Parameters:\n    str1 (str): A string containing all characters.\n\n    Returns:\n    The first non-repeated character in the string.\n\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string.\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the dictionary and find the first non-repeated character.\n    for char in freq:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None.\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to keep track of the frequency of each character in the string\n    freq_dict = {}\n\n    # iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize two variables to keep track of the last character and its frequency count\n    last_char = None\n    freq_count = 0\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is the same as the last character, increment the frequency count\n        if char == last_char:\n            freq_count += 1\n        else:\n            # Otherwise, reset the frequency count to 1\n            freq_count = 1\n            # Update the last character and its frequency count\n            last_char = char\n    \n    # If the loop completes without finding any non-repeating characters, return None\n    if freq_count == 0:\n        return None\n    \n    # Loop through the string again and find the first non-repeating character\n    for char in str1:\n        if char!= last_char and freq_count == 1:\n            return char\n    \n    # If the loop completes without finding any non-repeating characters, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first non-repeated character by iterating through the dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the dictionary and find the first non-repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # check if the string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return re.match(pattern, string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n\n    # Define the regular expression pattern\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n\n    # Use the re.match() function to match the pattern with the input string\n    match = re.match(pattern, string)\n\n    # Return True if the pattern matches, False otherwise\n    return bool(match)\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    a_sorted = sorted([a, b, c])\n\n    # Calculate the midpoint of the sorted numbers\n    midpoint = len(a_sorted) // 2\n\n    # If there are an even number of numbers, take the average of the two middle numbers\n    if len(a_sorted) % 2 == 0:\n        median = (a_sorted[midpoint - 1] + a_sorted[midpoint]) / 2\n    else:\n        median = a_sorted[midpoint]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    # Sort the three numbers\n    sorted_nums = sorted([a,b,c])\n\n    # Find the median\n    n = len(sorted_nums)\n    if n % 2 == 0:\n        median = (sorted_nums[n//2 - 1] + sorted_nums[n//2]) / 2\n    else:\n        median = sorted_nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the length of the sorted list\n    length = len(sorted_numbers)\n    # Find the middle index of the sorted list\n    middle_index = length // 2\n    # Return the middle number of the sorted list\n    if length % 2 == 0:\n        # If the length of the list is even, return the average of the two middle numbers\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        return sorted_numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import random\n\ndef partition(arr, low, high):\n    pivot_index = random.randint(low, high)\n    pivot = arr[pivot_index]\n    arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n    store_index = low\n    for i in range(low, high):\n        if arr[i] <= pivot:\n            arr[store_index], arr[i] = arr[i], arr[store_index]\n            store_index += 1\n    arr[store_index], arr[high] = arr[high], arr[store_index]\n    return store_index\n\ndef quick_select(arr, low, high, k):\n    if low == high:\n        return arr[low]\n    pivot_index = partition(arr, low, high)\n    if k == pivot_index:\n        return arr[k]\n    elif k < pivot_index:\n        return quick_select(arr, low, pivot_index-1, k)\n    else:\n        return quick_select(arr, pivot_index+1, high, k)\n\ndef median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    k = len(sorted_numbers) // 2\n    median = quick_select(sorted_numbers, 0, k-1, k)\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return numbers[len(numbers) // 2]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        return (sorted_numbers[n//2-1] + sorted_numbers[n//2])/2\n    else:\n        return sorted_numbers[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Find the length of the sorted list\n    length = len(sorted_list)\n\n    # Calculate the middle index\n    middle_index = length // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if length % 2 == 1:\n        median = sorted_list[middle_index]\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        middle_number_1 = sorted_list[middle_index]\n        middle_number_2 = sorted_list[middle_index - 1]\n        median = (middle_number_1 + middle_number_2) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Get the middle number of the three\n    middle_index = len(sorted_numbers) // 2\n    middle_number = sorted_numbers[middle_index]\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        return middle_number\n    \n    # If the length of the list is even, the median is the average of the middle two numbers\n    else:\n        # Get the two middle numbers\n        left_middle_number = sorted_numbers[middle_index - 1]\n        right_middle_number = sorted_numbers[middle_index + 1]\n        \n        # Return the average of the two middle numbers\n        return (left_middle_number + right_middle_number) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the input numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the length of the sorted array\n    n = len(sorted_numbers)\n\n    # Check if the length is odd or even\n    if n % 2 == 0:\n        # If it's even, return the average of the two middle numbers\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        # If it's odd, return the middle number\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of sums of the digits of each number in the input list.\n    \"\"\"\n    # iterate over each number in the input list\n    for num in nums:\n        # convert the number to a string and convert it to a list of digits\n        digits = [int(digit) for digit in str(num)]\n        # sum the digits and append it to a list of sums\n        sums.append(sum(digits))\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # loop over each number in the list\n    total = 0\n    for num in nums:\n        # convert the number to a string and loop over its digits\n        for digit in str(num):\n            total += int(digit)\n    # return the sum of all digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to string and then to list of digits\n        digits = list(str(num))\n        # add up all the digits in the list\n        digit_sum += sum(digits)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = list(str(num))\n        \n        # Loop through each digit and add it to the sum\n        for digit in digits:\n            total += int(digit)\n            \n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    return [sum(str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result += digit_sum\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        sum_of_digits = 0\n        for digit in str(num):\n            sum_of_digits += int(digit)\n        total_sum += sum_of_digits\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Iterate through both tuples and perform bitwise xor operation on each element\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple to the length of the longest tuple\n    result = (max(len(test_tup1), len(test_tup2))-1) * [0]\n    \n    # Iterate over each element of the result tuple\n    for i in range(len(result)):\n        # Perform bitwise xor on the corresponding elements of the input tuples\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in the tuples must be equal.\")\n\n    # initialize the result tuple with zeros\n    result_tup = (0,) * len(test_tup1)\n\n    # perform the bitwise xor operation for each element in the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Loop through the list and add each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    unique_tuple_count = len(unique_tuples)\n    return unique_tuple_count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            unique_tuples.add(tuple(sorted((test_list[i], test_list[j]))))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create a set to store unique tuples in the list\n    unique_tuples = set()\n    # Iterate through the list and add each tuple to the set\n    for item in test_list:\n        unique_tuples.add(item)\n    # Return the number of unique tuples in the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if tuple(item) not in unique_tuples:\n            unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            freq_dict[tup] += 1\n\n    # Create an empty list to store the unique tuples\n    unique_list = []\n\n    # Loop through the dictionary and add each tuple to the list if its count is 1\n    for tup in freq_dict:\n        if freq_dict[tup] == 1:\n            unique_list.append(tup)\n\n    # Return the number of unique tuples in the list\n    return len(unique_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total = []\n    for i in range(len(test_tup1)):\n        sub_total = []\n        for j in range(len(test_tup1[i])):\n            sub_total.append(test_tup1[i][j] + test_tup2[i][j])\n        total.append(sub_total)\n    return total"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # check if the input tuples are valid\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        print(\"Error: Invalid input tuples. Please provide two valid nested tuples.\")\n        return None\n\n    # check if the number of elements in the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples do not have the same number of elements.\")\n        return None\n\n    # iterate over the tuples and perform index wise addition\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            print(\"Error: Invalid input tuples. Please provide two valid nested tuples.\")\n            return None\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            print(\"Error: Input tuples do not have the same number of elements for the same index.\")\n            return None\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n\n    # return the updated tuples\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The number of elements in the two tuples should be equal')\n    return [(tup1[i] + tup2[i]) for tup1, tup2 in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if not (isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)):\n        raise TypeError(\"Both input tuples should be of type tuple\")\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                result.append([test_tup1[i][j] + test_tup2[i][j] for j in range(len(test_tup1[i]))])\n        elif isinstance(test_tup2[i], tuple):\n            result.append([test_tup1[j] + test_tup2[i][j] for j in range(len(test_tup2[i]))])\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a list to store the sum of the corresponding elements of the two tuples\n    result_list = []\n    \n    # loop through each element of the first tuple and add it to the result list\n    for i in range(len(test_tup1)):\n        # add the corresponding element of the first tuple and second tuple\n        sum_element = test_tup1[i] + test_tup2[i]\n        # add the sum of the elements to the result list\n        result_list.append(sum_element)\n        \n    # return the result list\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup2[0])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(sub_result)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # check whether the element exists in the tuple\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in {tuple1}\")\n    else: \n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples as arguments. The first tuple contains the elements we want to check and the second tuple contains the elements we want to search for in the first tuple.\n\n    The function returns True if the element exists within the first tuple, and False otherwise.\n\n    Example:\n    tuplex = ('apple', 'banana', 'cherry')\n    tuple1 = ('apple', 'banana', 'date')\n    if check_tuplex(tuplex, tuple1):\n        print('Element exists in tuple1')\n    else:\n        print('Element does not exist in tuple1')\n    '''\n\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"Element exists in the tuple\")\n    else:\n        print(\"Element does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for tuplex_element in tuplex:\n        if tuplex_element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer input x and returns True if the parity of x is odd and False otherwise.\n    '''\n    # Divide x by 2 and check the remainder\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The parity of the number is even.'\n    else:\n        return 'The parity of the number is odd.'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n    '''\n    parity = x % 2\n    if parity == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    This function takes in a number as an argument and returns True if the parity of the number is odd, and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the number is even or odd\n    if x % 2 == 0:\n        # If the number is even, the parity is odd\n        return \"Even number is odd.\"\n    else:\n        # If the number is odd, the parity is even\n        return \"Odd number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    \n    # check if x is even or odd\n    if x % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n        return \"even\"\n    else:\n        print(x, \"is odd.\")\n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2\n    if parity == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num = str(n)\n    # Initialize the result string\n    result = ''\n    # Loop through the digits of the input number in reverse order\n    for i in range(len(num)-1, -1, -1):\n        # If the digit is greater than 0, add it to the result string\n        if int(num[i]) > 0:\n            result += str(int(num[i])-1)\n        # If the digit is 0, add it to the result string\n        else:\n            result += '0'\n    # Convert the result string back to an integer\n    result = int(result)\n    # Add 1 to the result and return the number\n    return result + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Combine the digits back into a string and convert it back to an integer\n    next_bigger = int(''.join(map(str, digits)))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n >= 10:\n        n = sum(int(digit) for digit in str(n))\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    index = digits.index(max_digit)\n    digits.pop(index)\n    digits.append(0)\n    digits.sort(reverse=True)\n    next_bigger = int(''.join(map(str, digits)))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n\n    :param n: An integer representing a positive integer.\n    :return: The next bigger number by rearranging the digits of the input number.\n    \"\"\"\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Find the length of the input number\n    length = len(n_str)\n\n    # Create an empty list to store the digits of the input number\n    digits = []\n\n    # Loop through each digit of the input number\n    for digit in n_str:\n        # Append the digit to the list of digits\n        digits.append(digit)\n\n    # Loop through each digit of the input number from right to left\n    for i in range(length - 1, -1, -1):\n        # Swap the current digit with the next digit from the end of the list\n        digits[i], digits[-1] = digits[-1], digits[i]\n\n        # Convert the list of digits back to a string and compare it to the original number\n        n_str = ''.join(digits)\n        if int(n_str) >= int(n_str.replace(str(digits[i]), str(digits[i] + 1))):\n            # The new number is greater than or equal to the original number, so exit the loop\n            break\n\n    # Convert the list of digits back to an integer and return it\n    return int(n_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert number to string\n    n = str(n)\n\n    # find the index of the largest digit\n    max_index = n.find(max(n))\n\n    # find the largest digit and its position in the string\n    max_digit = n[max_index]\n    max_pos = max_index\n\n    # find the smallest digit and its position in the string\n    smallest_digit = n[n.find(min(n))]\n    smallest_pos = n.find(min(n))\n\n    # swap the digits at the positions of the largest and smallest digits\n    n = n[:max_pos] + max_digit + n[max_pos+1:smallest_pos] + smallest_digit + n[smallest_pos+1:]\n\n    # convert the string back to an integer\n    n = int(n)\n\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(map(int, str(n)))  # convert the number to a list of digits\n    length = len(digits)  # get the length of the list of digits\n    max_digit = max(digits)  # get the maximum digit in the list of digits\n    for i in range(length):\n        if digits[i] < max_digit:  # if the current digit is smaller than the maximum digit, swap it with the next bigger digit\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n    return int(''.join(map(str, digits)))  # convert the list of digits back to a number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Initialize variables for the next bigger number and the index of the first digit that needs to be swapped\n    next_bigger = 0\n    index = 0\n\n    # Loop through each digit of the number\n    for digit in num_str:\n        # If the digit is smaller than or equal to 9, add it to the next bigger number\n        if int(digit) <= 9:\n            next_bigger += int(digit)\n        # If the digit is larger than 9, subtract the next digit from the current number and add the next digit to the next bigger number\n        else:\n            temp = int(digit)\n            temp -= int(num_str[index+1])\n            next_bigger += temp\n            index += 1\n\n    # If the next bigger number is greater than 999999999, subtract 1 from it and add 999999999\n    if next_bigger > 999999999:\n        next_bigger -= 1000000000\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize variables to keep track of digits and their positions\n    digits = []\n    index = 0\n    \n    # Loop through each character in the string\n    for char in num_str:\n        # If the character is a digit, append it to the digits list\n        if char.isdigit():\n            digits.append(int(char))\n            index += 1\n    \n    # Sort the digits in non-decreasing order\n    digits.sort(reverse=True)\n    \n    # Rearrange the digits in reverse order\n    rearranged_digits = digits[index:] + digits[:index]\n    \n    # Convert the rearranged digits back to a string and return it as an integer\n    return int(''.join(map(str, rearranged_digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # check if the given number is negative or zero\n    if n < 0:\n        return \"The given number is negative or zero.\"\n\n    # convert the given number to a string\n    number_str = str(n)\n\n    # initialize a variable to store the next bigger number\n    next_bigger_number = \"\"\n\n    # loop through each digit of the given number and append it to the next_bigger_number\n    for digit in number_str:\n\n        # check if the digit is zero\n        if digit == '0':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += digit\n\n        # check if the digit is already a one\n        elif digit == '1':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += digit\n\n        # check if the digit is already a two\n        elif digit == '2':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '1'\n\n        # check if the digit is already a three\n        elif digit == '3':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '2'\n\n        # check if the digit is already a four\n        elif digit == '4':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '3'\n\n        # check if the digit is already a five\n        elif digit == '5':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '4'\n\n        # check if the digit is already a six\n        elif digit == '6':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '5'\n\n        # check if the digit is already a seven\n        elif digit == '7':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '6'\n\n        # check if the digit is already a eight\n        elif digit == '8':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '7'\n\n        # check if the digit is already a nine\n        elif digit == '9':\n\n            # check if the next bigger number is already full\n            if len(next_bigger_number) == len(number_str):\n                return \"There is no next bigger number.\"\n\n            # add a digit to the next bigger number\n            next_bigger_number += '8'\n\n        # check if the digit is a zero\n        else:\n\n            # add a digit to the next bigger number\n            next_bigger_number += '9'\n\n    # check if the next bigger number is already full\n    if len(next_bigger_number) == len(number_str):\n        return \"There is no next bigger number.\"\n\n    # return the next bigger number\n    return int(next_bigger_number)\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min-heap of size k\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, (num, float('-inf')))\n\n    # iterate through the second array\n    for num in nums2:\n        # find the smallest element in the min-heap\n        smallest_num, smallest_cost = heapq.heappop(min_heap)\n\n        # calculate the cost of adding this element to the current pair\n        cost = smallest_cost + num\n\n        # if the cost is less than or equal to k, add the element to the result\n        if cost <= k:\n            result.append((smallest_num, num, cost))\n\n        # add the current pair to the min-heap\n        heapq.heappush(min_heap, (num, cost))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap of size k\n    min_heap = []\n    # use a hashmap to store the indices of nums2\n    hashmap = {}\n    \n    # iterate through nums2 and insert elements into min_heap\n    for i in range(len(nums2)):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, nums2[i])\n        else:\n            # if the current element is smaller than the smallest element in min_heap, pop the smallest element from min_heap and push the current element onto min_heap\n            if nums2[i] < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, nums2[i])\n    \n    # iterate through nums1 and find pairs with elements in min_heap\n    result = []\n    for num1 in nums1:\n        if num1 in hashmap:\n            # check if the element already exists in the result\n            for i in range(hashmap[num1]):\n                if (num1, nums2[min_heap[0]]) not in result:\n                    result.append((num1, nums2[min_heap[0]]))\n        else:\n            hashmap[num1] = 0\n            # push the smallest element in min_heap onto the stack\n            heapq.heappush(min_heap, min_heap[0])\n        hashmap[num1] += 1\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, -num)\n    for num in nums2:\n        if len(heap) < k:\n            heapq.heappush(heap, -num)\n        else:\n            smallest = -heapq.heappop(heap)\n            if smallest + num > 0:\n                heapq.heappush(heap, -smallest - num)\n    return [(-x, -y) for x, y in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, -heapq.heappushpop(min_heap)))\n    for num2 in nums2:\n        if len(min_heap) == 0 or -min_heap[0][0] > num2:\n            heapq.heappush(min_heap, (num2, -heapq.heappushpop(min_heap)))\n        else:\n            result.append((-min_heap[0][0], -min_heap[0][1]))\n            if len(result) == k:\n                break\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: List of integers\n    nums2: List of integers\n    k: Integer\n\n    Returns:\n    List of tuples\n\n    \"\"\"\n\n    # Initialize an empty heap to store the pairs with their respective indices\n    pairs_heap = []\n\n    # Initialize two pointers for the two arrays\n    i, j = 0, 0\n\n    # Iterate until k pairs have been found\n    while k > 0:\n\n        # If the heap is empty or if the current element in nums1 is smaller than the current smallest element in the heap\n        if len(pairs_heap) == 0 or nums1[i] < pairs_heap[0][0]:\n\n            # Add a new pair to the heap with its index\n            heapq.heappush(pairs_heap, (nums1[i], j))\n\n            # If k pairs have been found, decrease the count\n            k -= 1\n\n        # If the heap is not empty and if the current element in nums1 is greater than the current smallest element in the heap\n        elif nums1[i] > pairs_heap[0][0]:\n\n            # If the length of the heap is equal to k, remove the smallest element from the heap and increment the index\n            if len(pairs_heap) == k:\n                heapq.heappop(pairs_heap)[1] += 1\n                j += 1\n\n            # If the length of the heap is less than k, decrease the count\n            else:\n                k -= 1\n\n        # If the current element in nums1 is equal to the current smallest element in the heap\n        else:\n\n            # If the length of the heap is equal to k, remove the smallest element from the heap and increment the index\n            if len(pairs_heap) == k:\n                heapq.heappop(pairs_heap)[1] += 1\n                j += 1\n\n            # If the length of the heap is less than k, add a new pair to the heap with its index\n            else:\n                heapq.heappush(pairs_heap, (nums1[i], j))\n                k -= 1\n\n        # Increment the index in the second array\n        i += 1\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the pairs_heap and add the pairs to the result list\n    for pair in pairs_heap:\n        result.append((nums1[pair[1]], nums2[pair[1]]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap to store the pairs of smallest elements\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Initialize the current smallest element\n        curr_min = float('inf')\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the pair\n            pair = (num1, num2)\n\n            # Check if the pair is smaller than the current smallest element in the heap\n            if pair[0] + pair[1] < curr_min:\n                # If yes, update the current smallest element\n                curr_min = pair[0] + pair[1]\n\n            # Check if the heap size is less than k\n            if len(min_heap) < k:\n                # If yes, add the pair to the heap\n                heapq.heappush(min_heap, curr_min)\n            else:\n                # If no, check if the pair is smaller than the smallest element in the heap\n                if curr_min < min_heap[0]:\n                    # If yes, remove the smallest element from the heap\n                    heapq.heappop(min_heap)\n                    # Add the pair to the heap\n                    heapq.heappush(min_heap, curr_min)\n\n    # Return the pairs of smallest elements\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap for finding the k smallest pairs\n    min_heap = []\n\n    # Iterate over the first array and add each element to the min heap\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        # If the number of elements in the min heap is greater than k, remove the smallest element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Create a second min heap for finding the k smallest pairs with the same smallest element from the first array\n    min_heap_with_same_min = []\n\n    # Iterate over the second array and add each element to the second min heap\n    for num in nums2:\n        # If the number of elements in the second min heap is greater than k, remove the smallest element from the heap\n        if len(min_heap_with_same_min) > k:\n            heapq.heappop(min_heap_with_same_min)\n        # Add the number to the second min heap\n        heapq.heappush(min_heap_with_same_min, num)\n\n    # Create a result list to store the k smallest pairs\n    result = []\n\n    # Iterate over the first min heap and pop the smallest element until it is greater than or equal to the second min heap\n    while min_heap:\n        num1 = heapq.heappop(min_heap)\n        while min_heap_with_same_min and min_heap_with_same_min[0] >= num1:\n            num2 = heapq.heappop(min_heap_with_same_min)\n            result.append([num1, num2])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through the first array and insert each element as a pair\n    for num1 in nums1:\n        pair = (num1, float('-inf'))\n        heapq.heappush(min_heap, pair)\n\n        # If the heap size is greater than k, remove the smallest pair\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Iterate through the second array and remove the smallest pair for each element\n    for num2 in nums2:\n        if not min_heap or min_heap[0][0] > num2:\n            break\n        min_heap[0] = (min_heap[0][0], num2)\n\n    # Return the k smallest pairs\n    return min_heap[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of elements from the first array\n    min_heap = []\n    # Create a dictionary to store the indices of the elements from the second array\n    index_dict = {}\n\n    # Iterate through the second array\n    for i in range(len(nums2)):\n        # If the number of elements in the min heap is less than k, add the current element to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (nums2[i], i))\n        # If the number of elements in the min heap is equal to k, compare the current element with the smallest element in the heap\n        elif nums2[i] < min_heap[0][0]:\n            # If the current element is smaller than the smallest element in the heap, replace the smallest element with the current element\n            heapq.heapreplace(min_heap, (nums2[i], i))\n        # If the number of elements in the min heap is greater than k, pop the smallest element from the heap\n        else:\n            # Pop the smallest element from the heap\n            smallest_element = heapq.heappop(min_heap)\n            # If the current element is equal to the smallest element, add the current element to the heap\n            if smallest_element[0] == nums2[i]:\n                heapq.heappush(min_heap, (nums2[i], i))\n            # If the current element is greater than the smallest element, add the current element to the heap\n            elif smallest_element[0] < nums2[i]:\n                heapq.heappush(min_heap, (nums2[i], i))\n\n    # Iterate through the first array\n    for i in range(len(nums1)):\n        # If the number of elements in the min heap is less than k, add the current element to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (nums1[i], index_dict[i]))\n        # If the number of elements in the min heap is equal to k, compare the current element with the smallest element in the heap\n        elif nums1[i] < min_heap[0][0]:\n            # If the current element is smaller than the smallest element in the heap, replace the smallest element with the current element\n            heapq.heapreplace(min_heap, (nums1[i], index_dict[i]))\n        # If the number of elements in the min heap is greater than k, pop the smallest element from the heap\n        else:\n            # Pop the smallest element from the heap\n            smallest_element = heapq.heappop(min_heap)\n            # If the current element is equal to the smallest element, add the current element to the heap\n            if smallest_element[0] == nums1[i]:\n                heapq.heappush(min_heap, (nums1[i], index_dict[i]))\n            # If the current element is greater than the smallest element, add the current element to the heap\n            elif smallest_element[0] < nums1[i]:\n                heapq.heappush(min_heap, (nums1[i], index_dict[i]))\n\n    # Create a list to store the pairs of elements from the first array and the elements from the second array\n    result = []\n    # Iterate through the min heap\n    while min_heap:\n        # Pop the smallest element from the heap\n        smallest_element = heapq.heappop(min_heap)\n        # Add the current element from the first array and the current element from the second array to the result list\n        result.append((smallest_element[0], nums2[smallest_element[1]]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a min heap to store the elements of the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n\n    result = []\n    while len(result) < k:\n        # If the min heap is empty, return the result\n        if not min_heap:\n            return result\n\n        # Remove the smallest element from the min heap\n        num1 = -heapq.heappop(min_heap)\n\n        # If the result list is not full, add the pair to the result list\n        if len(result) < k:\n            result.append((num1, nums2[0]))\n            heapq.heappush(min_heap, -nums2[0])\n            nums2.pop(0)\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0] * list1[j][1]\n            min_product = min(min_product, pair_product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    sorted_list = sorted(list1, key=lambda x: x[0])\n    # Initialize the minimum product variable and set it to the first element of the first tuple in the sorted list\n    min_product = sorted_list[0][0]\n    # Loop through the sorted list of tuples\n    for i in range(1, len(sorted_list)):\n        # Calculate the product of the minimum product and the second element of the current tuple in the sorted list\n        current_product = sorted_list[i][0] * sorted_list[i][1]\n        # Update the minimum product if the current product is smaller than the current minimum product\n        if current_product < min_product:\n            min_product = current_product\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) % 2!= 0:\n        print(\"List should have an even number of elements\")\n        return\n    \n    min_product = float('inf')\n    product_1 = float('inf')\n    product_2 = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product_1 = list1[i][0] * list1[j][1]\n            product_2 = list1[j][0] * list1[i][1]\n            \n            if product_1 < min_product:\n                min_product = product_1\n            if product_2 < min_product:\n                min_product = product_2\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            products.append(product)\n    return min(products)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    result = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                result = [(list1[i][0], list1[j][1])]\n            elif product == min_product:\n                result.append((list1[i][0], list1[j][1]))\n\n    return min_product, result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize variables\n    min_product = float('inf')\n    product = 1\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n            # update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the current product is less than the minimum product\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(lst):\n    '''\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples in the list.\n\n    Examples:\n        >>> min_product_tuple([(1, 2), (3, 4), (5, 6)])\n        12\n        >>> min_product_tuple([(2, 3), (4, 5), (6, 7)])\n        36\n    '''\n    product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = min(product, lst[i][0] * lst[j][1])\n    return product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes in a list of tuples and returns the minimum product of the pairs of tuples in the list.\n    '''\n    # Find the minimum product of the pairs of tuples in the list\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = list1[i][0] * list1[j][1]\n            if pair_product < min_product:\n                min_product = pair_product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    \n    min_value = listval[0]\n    for value in listval[1:]:\n        if value < min_value:\n            min_value = value\n    \n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value to first element of the list\n    min_value = listval[0]\n    \n    # Iterate through the list starting from the second element\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the minimum value\n        if listval[i] < min_value:\n            # If it is, update the minimum value\n            min_value = listval[i]\n    \n    # Return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # initialize the minimum value to the first value in the list\n    \n    for i in range(1, len(listval)):  # loop through the list starting from the second value\n        if listval[i] < min_val:  # check if the current value is smaller than the minimum value\n            min_val = listval[i]  # update the minimum value if it's smaller\n    \n    return min_val  # return the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Loop through the list and keep track of the minimum value\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize a variable to store the minimum value\n    min_val = listval[0]\n    # iterate through the list and update the minimum value if a smaller value is found\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n\n    Args:\n    - listval: a list of values\n\n    Returns:\n    - the minimum value in the list\n    \"\"\"\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # iterate over the rest of the list\n    for val in listval[1:]:\n        # if the current value is less than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    setval = set(listval)\n    # Convert the set back to a list and sort it\n    sortedval = sorted(list(setval))\n    # Return the minimum value\n    return sortedval[0]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Remove underscores from the word\n    word = re.sub(r'_', '', word)\n    # Capitalize the first letter of each word\n    words = re.findall(r'\\b\\w', word)\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert all words to lower case\n    word = word.lower()\n    # Split the string into words\n    words = word.split('_')\n    # Capitalize the first letter of each word except for the first word\n    camel_case_words = [words[0]]\n    for i in range(1, len(words)):\n        camel_case_words.append(words[i].capitalize())\n    # Join the words with camel case\n    camel_case_word = ''.join(camel_case_words)\n    # Return the camel case string\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    pattern = re.compile('_(.?)(?=_)')\n    sub = lambda match: match.group(1).upper()\n    return pattern.sub(sub, word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)', re.IGNORECASE)\n    return pattern.sub(lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake case to camel case\n    camel_case = re.sub(r'(?<=[a-z0-9])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z0-9])', r' ', word).strip()\n\n    # Remove leading and trailing spaces\n    return camel_case.strip()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Define regular expression pattern for snake case to camel case conversion\n    pattern = r'(?<!^)(?=[A-Z])'\n    # Replace the pattern in the given snake case string with capitalized first letter\n    camel_case = re.sub(pattern, lambda m: m.group(0).capitalize(), word)\n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first letter of each word to lowercase\n    words[0] = words[0].lower()\n    \n    # Convert all other letters to uppercase\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    \n    # Join the words back into a single string\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the input word to camel case\n    camel_case = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    # Remove the first and last underscores\n    camel_case = re.sub(r'__', '_', camel_case)\n    # Convert the first character to lower case\n    camel_case = camel_case[0].lower() + camel_case[1:]\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n    # Capitalize the first word and join the words together with underscores\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += '_' + words[i].lower()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove leading and trailing underscores\n    word = word.strip('_')\n    # split the word into words\n    words = word.split('_')\n    # capitalize the first letter of each word except for the first word\n    for i in range(len(words)):\n        if i!= 0:\n            words[i] = words[i].capitalize()\n    # join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list `l` as input and removes all odd numbers from it.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a list and return the new list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        print(\"The index provided is greater than the length of the list.\")\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # initialize a counter to keep track of the number of tuples processed\n    count = 0\n    # iterate through the list of tuples\n    for tup in list1:\n        # if the counter is equal to n, return the nth element of the tuple\n        if count == n - 1:\n            return tup[n - 1]\n        # increment the counter\n        count += 1"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list) and isinstance(n, int) and 1 <= n <= len(list1):\n            return list1[n-1]\n        else:\n            raise ValueError('Invalid input')\n    except IndexError:\n        raise IndexError('Invalid index')"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples and an integer n as input\n    and returns the nth element of the list. If the list has less than n\n    elements, the function will return None.\n    '''\n    if len(lst) < n:\n        return None\n    else:\n        return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # creating a list to store the extracted elements\n    extracted_list = []\n    # iterating over the list of tuples\n    for tup in list1:\n        # if the length of the current tuple is greater than or equal to n\n        if len(tup) >= n:\n            # appending the nth element of the tuple to the extracted_list\n            extracted_list.append(tup[n-1])\n    # returning the extracted_list\n    return extracted_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) > n:\n        return list1[n]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1) == list and type(n) == int:\n        if n >= 0 and n < len(list1):\n            return list1[n]\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    # Create a set from list2 to avoid duplicates in list1\n    set2 = set(list2)\n    # Iterate over list1 and check if any value exists in set2\n    for element in list1:\n        if element in set2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is a common value between them, and False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Loop through both lists\n    for item in list1:\n        # Check if the item exists in list2\n        if item in list2:\n            # If it does, return True\n            return True\n\n    # If no value exists in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list2 for x in list1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Use the set data structure to remove duplicates from the list1\n    list1 = list(set(list1))\n\n    # Loop through each value in list1\n    for value in list1:\n        # Check if value is in list2\n        if value in list2:\n            # If it is, return True\n            return True\n\n    # If we reach this point, no value in list1 was found in list2\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    # Sorting the array in descending order\n    arr.sort(reverse=True)\n    \n    # Getting the length of the array\n    n = len(arr)\n    \n    # Initializing variables for the maximum and minimum product\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    # Checking for the maximum product between the first two elements\n    for i in range(2, n):\n        max_product = max(arr[0] * arr[i], max_product)\n    \n    # Checking for the minimum product between the first two elements\n    for i in range(2, n):\n        min_product = min(arr[0] * arr[i], min_product)\n    \n    # Returning the pair with the highest product\n    return (arr[0], arr[1]) if max_product > min_product else (arr[1], arr[0])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    # Sort the array in descending order \n    arr.sort(reverse=True) \n\n    # Find the maximum product by multiplying the two largest numbers in the array \n    max_product = arr[0] * arr[1] \n\n    # Find the second maximum product by multiplying the third largest number and the maximum product \n    second_max_product = arr[2] * max_product \n\n    return second_max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize max_product_pair with first two elements\n    max_product_pair = (arr[0], arr[1])\n\n    # Iterate through the rest of the array\n    for i in range(2, len(arr)):\n        # Calculate the current product\n        product = arr[i] * max_product_pair[0]\n\n        # Update max_product_pair if the current product is greater\n        if product > max_product_pair[1]:\n            max_product_pair = (arr[i], product)\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[-1] * arr[-2]\n    second_max_product = arr[0] * arr[1]\n    \n    if max_product < second_max_product:\n        return max_product, second_max_product\n    else:\n        return second_max_product, max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1 * max2\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            elif product < min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the two indices of the pair with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    min_product = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (i, j)\n            elif current_product < min_product:\n                min_product = current_product\n                min_pair = (i, j)\n\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    max_pair = None\n    min_product = float('inf')\n    min_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n            elif arr[i] * arr[j] < min_product:\n                min_product = arr[i] * arr[j]\n                min_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    if len(arr) < 2: \n        return \"Array should have at least two elements\"\n\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n\n    for i in range(1, len(arr)): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        if arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n\n    return (max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Initialize two variables to store the maximum and minimum values in the array\n    max1 = arr[0]\n    max2 = 0\n    min1 = arr[0]\n    min2 = 0\n\n    # Loop through each element in the array\n    for i in range(1, len(arr)):\n        # Update the maximum values\n        max1 = max(arr[i], max1 * arr[i])\n        max2 = max(arr[i] * arr[i], max2)\n\n        # Update the minimum values\n        min1 = min(arr[i], min1 * arr[i])\n        min2 = min(arr[i] * arr[i], min2)\n\n    # Return the pair with the highest product\n    return (max1, min1) if max1 > max2 else (max2, min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_tuples = []\n\n    for tup in Input:\n        if tup[0] not in common_tuples:\n            common_tuples.append(tup[0])\n\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples\n    containing all the tuples where the first element of the tuple is the same\n    as the first element of the group.\n    '''\n\n    # Create an empty dictionary to store groups\n    groups = {}\n\n    # Iterate through the input list of tuples\n    for tup in Input:\n\n        # Extract the first element of the tuple\n        first_elem = tup[0]\n\n        # If the first element is already present in the groups dictionary,\n        # add the current tuple to the group\n        if first_elem in groups:\n            groups[first_elem].append(tup)\n        # If the first element is not present in the groups dictionary,\n        # add it to the dictionary with a list containing only the current tuple\n        else:\n            groups[first_elem] = [tup]\n\n    # Create an empty list to store the output tuples\n    output = []\n\n    # Iterate through the groups dictionary and add each group to the output list\n    for key, value in groups.items():\n        output.append(value)\n\n    # Return the output list\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    # Create a dictionary to store count of each element in the input list\n    count_dict = {}\n    for tup in Input:\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        else:\n            count_dict[tup[0]] = 1\n\n    # Create a set of keys from the dictionary to get unique common elements\n    common_elements = set(count_dict.keys())\n\n    # Create an empty set to store the common elements\n    common_elements_set = set()\n\n    # Iterate over each tuple in the input list\n    for tup in Input:\n        # If the first element is a common element, add it to the set\n        if tup[0] in common_elements:\n            common_elements_set.add(tup[0])\n\n    # Return the common elements in the set\n    return common_elements_set"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create a set to store unique first elements of tuples in the list\n    unique_elements = set()\n\n    # iterate over the list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        first_element = tup[0]\n        # add the first element to the set of unique elements\n        unique_elements.add(first_element)\n\n    # convert the set of unique elements to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if i[0] in common_elements:\n            pass\n        else:\n            common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Element = None\n    for x in Input:\n        if x[0] == Common_Element:\n            continue\n        if Common_Element is None:\n            Common_Element = x[0]\n            print(x[0])\n        elif x[0]!= Common_Element:\n            print(x[0])\n    if Common_Element is not None:\n        print(\"The common first element is\", Common_Element)\n    else:\n        print(\"There are no common elements in the list.\")\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the common elements\n    common_elements = {}\n    # loop through the input list of tuples\n    for i in Input: \n        # check if the first element of the tuple is already in the dictionary\n        if i[0] in common_elements: \n            # if it is, update the count of that element in the dictionary\n            common_elements[i[0]] += 1\n        # if the first element is not in the dictionary, add it with a count of 1\n        else: \n            common_elements[i[0]] = 1\n    # create a new list to store the tuples with common elements\n    result = []\n    # loop through the dictionary to find common elements\n    for key in common_elements: \n        # if the count of that element is greater than 1, add the tuple to the result list\n        if common_elements[key] > 1: \n            result.append((key, common_elements[key]))\n    # return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if len(i) > 1:\n            if i[0] == common_element:\n                return common_element\n            else:\n                common_element = i[0]\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_element = None\n\n    for tup in Input:\n        first_element = tup[0]\n        if common_element is None:\n            common_element = first_element\n        elif first_element == common_element:\n            common_element = None\n            break\n\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty list to store the common first elements \n    common_elements = []\n\n    # Iterate over the input list of tuples \n    for tuple in Input: \n\n        # Initialize a variable to store the current tuple's first element \n        current_element = tuple[0]\n\n        # Iterate over the common_elements list to find if current_element is already present there \n        for common_element in common_elements: \n\n            # If the current_element is already present in the common_elements list, append the current tuple to the output list \n            if current_element == common_element: \n                common_elements.append(tuple) \n\n    # Return the output list of tuples containing common first elements \n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element whose length is the maximum.\n    If there are multiple elements with the same maximum length, it returns the first element encountered.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    max_len = max(len(lst), key=len) # find the maximum length of the list\n    max_elem = [elem for elem in lst if len(elem) == max_len][0] # find the element with maximum length\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = None\n\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # create an empty list to store the elements with maximum length\n    max_lst = []\n    # loop through the list to check if each element has a longer length than the previous max element\n    for i in range(len(lst)):\n        if len(lst[i]) > len(max_lst[0]):\n            max_lst = [lst[i]]\n        elif len(lst[i]) == len(max_lst[0]):\n            max_lst.append(lst[i])\n    # return the maximum element in the list\n    return max_lst[0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initialize sum to zero and count of numbers to zero\n    sum_of_numbers = 0\n    count_of_numbers = 0\n    \n    # Loop through each number in the list\n    for num in list1:\n        # Round the number and add it to the sum\n        rounded_num = round(num)\n        sum_of_numbers += rounded_num\n        # Increment the count of numbers\n        count_of_numbers += 1\n        \n    # Print the total sum and the length of the list\n    print(\"The total sum of rounded numbers in the list is:\", sum_of_numbers)\n    print(\"The length of the list is:\", count_of_numbers)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        if isinstance(i, float):\n            total_sum += round(i)\n        elif isinstance(i, int):\n            total_sum += i\n        else:\n            print(\"Error: Invalid input type.\")\n            break\n    print(\"Total sum:\", total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum(round(num) for num in list1)\n    length = len(list1)\n    print(total * length)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize a variable to store the cube sum\n    cube_sum = 0\n\n    # Iterate from 2 to n (inclusive)\n    for i in range(2, n+1, 2):\n        # Calculate the cube of i\n        cube = i**3\n\n        # Add the cube to the cube sum\n        cube_sum += cube\n\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n        count += 1\n    return sum, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the even natural number and add it to the sum of cubes of even natural numbers\n        cube_sum += i**3\n    # Return the final sum of cubes of even natural numbers\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize the sum of cubes to 0\n    sum_of_cubes = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current even natural number\n        cube_num = i**3\n        \n        # Add the cube of the current even natural number to the sum of cubes\n        sum_of_cubes += cube_num\n    \n    # Return the sum of cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Args:\n        test_tup (tuple): The tuple to concatenate.\n        delimiter (str): The delimiter to use.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    concatenated_string = \"\"\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ',' # change this delimiter to any other string if you want to concatenate with a different delimiter\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for i in range(len(test_tup)):\n        concatenated_str += str(test_tup[i])\n        if i!= len(test_tup) - 1:\n            concatenated_str += delimiter\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += delimiter + str(elem)\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) +''\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    This function takes a tuple as input and concatenates each element of the tuple by the delimiter.\n    \"\"\"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n\n    # Initialize an empty string to store the concatenated string\n    concatenated_string = \"\"\n\n    # Loop through each element in the tuple\n    for element in test_tup:\n\n        # Convert the element to a string and concatenate it to the concatenated string\n        concatenated_string += str(element)\n\n    # Return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize variable for sum of cubes\n    sum_cubes = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Calculate cube of i\n        cube = i**3\n        # Add cube to sum of cubes\n        sum_cubes += cube\n\n    # Calculate average of cubes\n    average_cubes = sum_cubes / n\n\n    # Return average of cubes\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i*i*i\n        count += 1\n    avg_cube = sum_cubes/count\n    return avg_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cube += i ** 3\n        count += 1\n    average_cube = sum_cube / count\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function takes an integer argument n and returns the average of cubes of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n    average_of_cubes = sum_of_cubes / n  \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    '''\n    # initialize variable to store the sum of cubes\n    sum_cubes = 0\n    \n    # loop through first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of i and add it to the sum_cubes variable\n        sum_cubes += i ** 3\n    \n    # calculate the average of cubes and return it\n    average = sum_cubes / n\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    avg_of_cubes = sum_of_cubes / n\n    return avg_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    average = sum / n  \n    return average  "
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [str(x)[-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, string in enumerate(test_tuple):\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for element in test_tuple:\n        rear_list.append(element[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_elements.append(item[1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # match pattern in dt\n    match = re.match(pattern, dt)\n    # check if match found\n    if match:\n        # get groups of matched pattern\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # reverse order of month and day\n        new_date = '{}-{}-{}'.format(day, month, year)\n        # return new_date\n        return new_date\n    else:\n        # return original date if match not found\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = r'\\d{4}-\\d{2}-\\d{2}'\n    new_date_format = r'\\d{2}-\\d{2}-\\d{4}'\n    new_dt = re.sub(date_format, new_date_format, dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.sub() function to replace the year with the current year\n    new_dt = re.sub(pattern, lambda match: datetime.datetime.now().strftime('%d-%m-%Y'), dt)\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Match the pattern in the date string and return the converted string\n    return re.sub(pattern, r'\\g<3>', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the pattern to match the date in the input string\n    match = re.match(pattern, dt)\n    # if the date is found, extract the components and reformat them as required\n    if match:\n        year, month, day = match.groups()\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    # otherwise, return the original input string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # match the pattern in the input date string\n    match = re.match(pattern, dt)\n\n    # if the pattern is found, replace the groups with the desired format\n    if match:\n        # define the new format string\n        new_format = '%d-%m-%Y'\n        # use the datetime module to convert the date\n        new_dt = dt.replace(match.group(2), match.group(3), match.group(1))\n        # return the new date in the desired format\n        return new_dt.strftime(new_format)\n    # if the pattern is not found, return the input date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search the string for the pattern\n    match = re.search(pattern, dt)\n\n    # Check if the pattern was found\n    if match:\n        # Extract the year, month, and day from the match object\n        year, month, day = match.groups()\n\n        # Convert the year, month, and day to yyyy-mm-dd format and add a leading 0 if necessary\n        dt = f'{year}-{month.zfill(2)}-{day.zfill(2)}'\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = day + '-' + month + '-' + year\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return day + '-' + month + '-' + year\n    else:\n        return 'Invalid Date'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = my_list[i]\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest element in the list\n    max_element = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_element:\n            max_element = my_list[i]\n    # Set the gap to 1\n    gap = 1\n    # While gap is less than the length of the list\n    while gap < len(my_list):\n        # Start with a gap of 1 and then multiply it by 3 or 5 until it is less than the length of the list\n        while gap < len(my_list):\n            # Move the current element to the correct position in the sorted list\n            for i in range(gap, len(my_list)):\n                j = i - gap\n                # Swap the elements if the current element is greater than the next element\n                if my_list[i] > my_list[j]:\n                    my_list[i], my_list[j] = my_list[j], my_list[i]\n            # Move the gap to the next gap\n            gap *= 3\n        # Reduce the gap to 1\n        gap = 1\n    # Print the sorted list\n    print(\"Sorted list is:\", my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Insertion sort\n    for i in range(n//2):\n        for j in range(i, n):\n            key = my_list[j]\n            # Move elements of arr[0..i-1], that are\n            # greater than key, to one position ahead\n            # of their current position\n            j -= i\n            while j >= 0 and my_list[j] > key:\n                my_list[j + i] = my_list[j]\n                j -= i\n            my_list[j + i] = key\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    \n    # 1. Find the largest gap\n    gap = n // 2\n    while gap > 0:\n        # 2. Insertion sort\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        # 3. Reduce gap by one\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths!\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elements from the given tuples\n    tup1_elements = test_tup1[0]\n    tup2_elements = test_tup2[0]\n    \n    # Initialize the output tuple with the same length as the input tuples\n    and_tup = (None,) * len(tup1_elements)\n    \n    # Iterate over each element in the output tuple\n    for i in range(len(and_tup)):\n        # Extract the corresponding elements from the input tuples\n        elem1 = tup1_elements[i]\n        elem2 = tup2_elements[i]\n        \n        # Perform elementwise and and assign the result to the output tuple\n        and_tup[i] = elem1 and elem2\n    \n    # Return the output tuple\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from the two tuples and append the result to the result tuple\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Extract the elementwise and tuples from the two input tuples\n    and_tup = tuple(a and b for a, b in zip(test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Create an empty list to store the elementwise and tuples\n    result = []\n    # Loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        # If both elements are true, add them to the result list\n        if test_tup1[i] and test_tup2[i]:\n            result.append((test_tup1[i], test_tup2[i]))\n    # Return the result list\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Extract the elementwise and tuples from the given two tuples.\n    '''\n    # Create a new list to store the result tuples\n    result_list = []\n    \n    # Loop through each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the two elements at indices i and i+1 of the input tuples\n        a = test_tup1[i]\n        b = test_tup2[i]\n        \n        # Calculate the elementwise and of the two elements\n        and_val = a & b\n        \n        # Create a new tuple with the and_val and the original elements\n        result_tuple = (and_val, a, b)\n        \n        # Add the new tuple to the result list\n        result_list.append(result_tuple)\n    \n    # Return the result list as a tuple of tuples\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths!\")\n        return None\n    \n    # extract elementwise and tuples\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append((test_tup1[i] & test_tup2[i]))\n    \n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    discriminant = b**2 - 4*a*c\n\n    if discriminant > 0:\n        root1 = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        root2 = (-b - (b**2-4*a*c)**0.5)/(2*a)\n        print(\"The directrix is:\", root1, \"and\", root2)\n\n    elif discriminant == 0:\n        root = (-b + (b**2-4*a*c)**0.5)/(2*a)\n        print(\"The directrix is:\", root)\n\n    else:\n        print(\"No real roots of the equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n    \n    # Calculate the directrix\n    directrix = (-b + math.sqrt(discriminant)) / (2*a)\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + c**0.5) / (2*a)\n    x2 = (-b - c**0.5) / (2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n\n    # Calculate the determinant of the matrix\n    determinant = b**2 - 4*a*c\n    \n    # Check if the determinant is positive or negative\n    if determinant > 0:\n        # Calculate the second root of the determinant\n        root2 = determinant ** 0.5\n        \n        # Calculate the coordinates of the point where the parabola crosses the y=0 line\n        x0 = (-b + root2) / (2*a)\n        x1 = (-b - root2) / (2*a)\n        \n        # Calculate the coordinates of the point where the parabola crosses the x=0 line\n        y0 = a * x0**2 + b * x0 + c\n        \n        # Calculate the coordinates of the point where the parabola crosses the directrix\n        y1 = a * x1**2 + b * x1 + c\n        \n        # Find the coordinates of the directrix\n        directrix = (y1 - y0) / (x1 - x0)\n        \n        # Calculate the distance from the directrix to the two points where the parabola crosses the y=0 line\n        d0 = (a*x0**2 + b*x0) / a\n        d1 = (a*x1**2 + b*x1) / a\n        \n        # Calculate the distance from the directrix to the two points where the parabola crosses the x=0 line\n        e0 = (a*y0) / b\n        e1 = (a*y1) / b\n        \n        # Calculate the distance from the directrix to the two points where the parabola crosses the directrix\n        f = (directrix - y1) / (x1 - x0)\n        \n        # Calculate the distance from the directrix to the two points where the parabola crosses the directrix\n        g = (directrix - y0) / (x1 - x0)\n        \n        # Return the coordinates of the directrix and the distances from it to the two points where it crosses the y=0 and x=0 lines, respectively\n        return directrix, [d0, d1], [e0, e1], [f, g]\n    \n    # If the determinant is negative, the parabola is degenerate and has no directrix\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"The directrix of the parabola is:\", x2)\n    else:\n        print(\"The parabola has no real root\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    \n    if delta < 0:\n        return \"There are no real roots\"\n    elif delta == 0:\n        return \"The directrix is x = \" + str((-b)/(2*a))\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        return \"The directrix is x = \" + str(x1) + \" or x = \" + str(x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta > 0:\n        directrix = (-b + delta**0.5) / (2*a)\n        print(\"The directrix is:\", directrix)\n    elif delta == 0:\n        directrix = (-b) / (2*a)\n        print(\"The directrix is:\", directrix)\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The directrix does not exist.\"\n    else:\n        return (-b + (b**2 - 4*a*c)**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2 - 4*a*c)\n    if discriminant < 0:\n        return \"The equation does not have a real root.\"\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return f\"The directrix of the parabola is {root1} and {root2}.\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Use a set to store the common elements of both lists\n    common_set = set(list1) & set(list2)\n\n    # If the length of the common set is greater than 0, then there is at least one common element\n    if len(common_set) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check if either list is empty\n    if not list1 or not list2:\n        return False\n    \n    # sort both lists in ascending order\n    list1.sort()\n    list2.sort()\n    \n    # iterate through both lists and check for common elements\n    for item in list1:\n        if item in list2:\n            return True\n    \n    # if no common elements found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Loop through both lists and compare elements\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Set up a dictionary to store the frequency of each element in the first list\n    freq1 = {}\n    for elem in list1:\n        if elem in freq1:\n            freq1[elem] += 1\n        else:\n            freq1[elem] = 1\n    \n    # Check if there is at least one element in the second list that is also in the first list\n    for elem in list2:\n        if elem in freq1 and freq1[elem] > 0:\n            return True\n    \n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2\n    # Calculate the length of the shorter base\n    if base1 < base2:\n        shorter_base = base1\n        longer_base = base2\n    else:\n        shorter_base = base2\n        longer_base = base1\n    # Calculate the length of the longer base\n    long_base_length = longer_base - shorter_base\n    # Calculate the length of the trapezium base that is shorter than the longer base\n    base_shorter_length = (shorter_base * height) / (longer_base * height)\n    # Calculate the area of the shorter base\n    area_shorter_base = shorter_base * base_shorter_length\n    # Calculate the area of the trapezium that is longer than the shorter base\n    area_trapezium_longer_base = (longer_base + base_shorter_length) * height\n    # Calculate the area of the trapezium that is shorter than the longer base\n    area_trapezium_shorter_base = longer_base * height\n    # Calculate the area of the trapezium\n    area_trapezium = area_shorter_base + area_trapezium_longer_base + area_trapezium_shorter_base\n    # Calculate the length of the trapezium base that is shorter than the longer base\n    trapezium_base_shorter_length = area_trapezium / area\n    # Calculate the length of the shorter base\n    length_shorter_base = shorter_base + (long_base_length / 2)\n    # Calculate the length of the longer base\n    length_longer_base = longer_base + (long_base_length / 2)\n    # Calculate the length of the trapezium base that is shorter than the longer base\n    trapezium_base_shorter_length = (area_trapezium * trapezium_base_shorter_length) / area\n    # Calculate the length of the shorter base\n    length_shorter_base = shorter_base + (long_base_length / 2)\n    # Calculate the length of the longer base\n    length_longer_base = longer_base + (long_base_length / 2)\n    # Calculate the length of the trapezium base that is shorter than the longer base\n    trapezium_base_shorter_length = (area_trapezium * trapezium_base_shorter_length) / area\n    # Calculate the median length of the trapezium\n    median_length = (length_shorter_base + length_longer_base) / 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium using the trapezoidal rule.\n\n    :param base1: first base of the trapezium\n    :type base1: float\n    :param base2: second base of the trapezium\n    :type base2: float\n    :param height: height of the trapezium\n    :type height: float\n    :return: median length of the trapezium\n    :rtype: float\n    \"\"\"\n\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # calculate the midpoint of the trapezium\n    midpoint = 0.5 * (base1 + base2)\n\n    # calculate the length of the trapezium\n    trapezium_length = area / 2\n\n    # calculate the area of the base areas\n    base_area1 = 0.5 * base1 * (base1 + height)\n    base_area2 = 0.5 * base2 * (base2 + height)\n\n    # calculate the length of the base areas\n    base_length1 = 0.5 * base1 * (base1 + height)\n    base_length2 = 0.5 * base2 * (base2 + height)\n\n    # calculate the difference between the midpoint and the area\n    delta_x = trapezium_length - midpoint\n\n    # check which base area is the smaller one\n    if delta_x < 0:\n        smaller_area = base_area1\n        larger_area = base_area2\n    else:\n        smaller_area = base_area2\n        larger_area = base_area1\n\n    # calculate the difference between the smaller and larger areas\n    delta_area = larger_area - smaller_area\n\n    # calculate the length of the smaller base area\n    smaller_base_length = smaller_area / delta_area\n\n    # calculate the length of the larger base area\n    larger_base_length = larger_area / delta_area\n\n    # calculate the difference between the smaller and larger base areas\n    delta_base = smaller_base_length - larger_base_length\n\n    # calculate the distance between the two base areas\n    distance = delta_base / 2\n\n    # calculate the total length of the trapezium\n    total_length = distance + trapezium_length\n\n    # calculate the median length of the trapezium\n    median_length = 0.5 * (total_length + midpoint)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    median_length = 2 * area / (base1 + base2 + height)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height\n    trapezium_length = 0.5 * (area + base1 + base2)\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    This function takes in the base1, base2, and height of a trapezium, and calculates the length of the trapezium's median side.\n\n    The median of a trapezium is the length of the line separating the higher and lower halves of the trapezium, which is half the total length minus the shortest side of the trapezium.\n\n    The shortest side is the side with the smallest base. The longest side is the side with the larger base.\n\n    In a trapezium, the height is the difference between the two bases. The length of the shorter side is the difference between the two bases.\n\n    So, the median length of a trapezium is:\n\n    median = height - shortest_side\n\n    where shortest_side is the length of the shortest side of the trapezium.\n\n    To find the length of the shortest side of the trapezium, we can use the formula:\n\n    shortest_side = base1 + height\n\n    To find the length of the longest side of the trapezium, we can use the formula:\n\n    longest_side = base2 + height\n\n    Therefore, the formula for the median length of a trapezium is:\n\n    median = height - shortest_side\n\n    Using this formula, we can calculate the median length of a trapezium as follows:\n\n    '''\n\n    if base1 < base2:\n        shortest_side = base1 + height\n    else:\n        shortest_side = base2 + height\n\n    if base1 < base2:\n        longest_side = base2 + height\n    else:\n        longest_side = base1 + height\n\n    median = longest_side - shortest_side\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the areas of the smaller base\n    if base1 > base2:\n        area_smaller = area1\n        area_bigger = area2\n    else:\n        area_smaller = area2\n        area_bigger = area1\n    \n    # Calculate the length of the smaller base\n    length_smaller = 0.5 * (area_smaller / area_bigger) * (height + height)\n    \n    # Calculate the median length of the trapezium\n    median_length = 2 * length_smaller\n    \n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Find the midpoint of the base\n    midpoint = (base1 + base2) / 2\n    \n    # Find the lengths of the sides of the trapezium\n    side1 = midpoint * (1.0 - 0.5 * height)\n    side2 = midpoint * (1.0 + 0.5 * height)\n    \n    # Find the length of the trapezium\n    trapezium_length = 2 * side1 + 2 * side2\n    \n    # Sort the sides and trapezium length\n    sides = sorted([side1, side2, trapezium_length])\n    \n    # Calculate the median\n    median = sides[1]\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    :param base1: The length of the first base of the trapezium.\n    :type base1: float\n    :param base2: The length of the second base of the trapezium.\n    :type base2: float\n    :param height: The height of the trapezium.\n    :type height: float\n    :return: The median length of the trapezium.\n    :rtype: float\n    \"\"\"\n\n    half_height = height / 2\n    trapezium_area = 0.5 * base1 * base2 + 0.5 * base2 * base1 + height\n    median_trapezium_area = trapezium_area / 2\n\n    # Trapezium area = 0.5 * base1 * base2 + 0.5 * base2 * base1 + height\n    # Trapezium area / 2 = 0.5 * (base1^2 + base2^2 + height^2)\n    # Trapezium area = 0.5 * base1^2 + 0.5 * base2^2 + height^2\n    # Median trapezium area = Trapezium area / 2\n\n    if median_trapezium_area == 0:\n        return 0\n    else:\n        return (half_height / median_trapezium_area) * sqrt(trapezium_area)\n\n\ndef main():\n    base1 = float(input(\"Enter the length of the first base of the trapezium: \"))\n    base2 = float(input(\"Enter the length of the second base of the trapezium: \"))\n    height = float(input(\"Enter the height of the trapezium: \"))\n\n    median_length = median_trapezium(base1, base2, height)\n\n    print(\"The median length of the trapezium is:\", median_length)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # find the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2 + height)\n\n    # find the length of the base of the first half of the trapezium\n    base1_length = 0.5 * base1\n\n    # find the length of the base of the second half of the trapezium\n    base2_length = 0.5 * base2\n\n    # sort the lengths of the two halves of the trapezium\n    lengths = sorted([base1_length, base2_length, trapezium_length])\n\n    # find the index of the middle element\n    mid_index = len(lengths) // 2\n\n    # find the median length of the trapezium\n    median_length = lengths[mid_index]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    This function calculates the median length of a trapezium using the formula:\n\n    median = 0.5 * (base1 + base2 + height)\n\n    Args:\n        base1: the length of the first base of the trapezium\n        base2: the length of the second base of the trapezium\n        height: the height of the trapezium\n\n    Returns:\n        the median length of the trapezium\n    '''\n\n    # Calculate the length of the trapezium\n    length = base1 + base2 + height\n\n    # Calculate the sum of the bases\n    sum_of_bases = base1 + base2\n\n    # Calculate the sum of the heights\n    sum_of_heights = height\n\n    # Calculate the sum of the lengths\n    sum_of_lengths = sum_of_bases + sum_of_heights\n\n    # Calculate the median length using the formula\n    median = 0.5 * length\n\n    # Return the median length\n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for num in arr:\n        if num > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = True\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            greater = False\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Initialize a counter variable to keep track of the number of elements greater than the entered number\n    count = 0\n    # Loop through the array and compare each element with the entered number\n    for element in arr:\n        if element > number:\n            count += 1\n    # Return the count of elements greater than the entered number\n    return count"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    for i in arr:\n        if i > number:\n            print(f\"{i} is greater than {number}\")\n            break"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(b)+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=[b]*b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    return re.search(pattern, text)\n\ntext = \"aabababaabababaababab\"\nresult = text_match_one(text)\nif result:\n    print(\"Match found!\")\nelse:\n    print(\"Match not found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w+b\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba.*b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found.\""
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    \n    # Convert the number to a string\n    num = str(n)\n    \n    # Find the length of the string\n    length = len(num)\n    \n    # Return the last digit of the number\n    return num[length-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    n = str(n)\n    # Get the last character of the string\n    last_char = n[-1]\n    # Convert the last character to an integer\n    last_digit = int(last_char)\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Check if the input is a valid integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input is not a valid integer\")\n\n    # Get the last digit of the number using integer division\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit.\n    \"\"\"\n    # extract the last digit from the given number\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with all the negative numbers of the input list.\n    '''\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the original list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty string to store the result\n    result = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2 == 0:\n            # if it is odd, add it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_list = []\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_list.append(char)\n    return ''.join(odd_list)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += char\n        elif char in [\" \", \",\", \".\", \"!\", \"?\"]:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    \n    # Initialize an empty string to store the even characters\n    even_chars = ''\n    \n    # Loop through the list of characters\n    for char in char_list:\n        # If the character is even, append it to the even_chars string\n        if char % 2 == 0:\n            even_chars += char\n    \n    # Return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the original string\n    for char in str1:\n        # If the character is even, append it to the new string\n        if char % 2 == 0:\n            new_str += char\n    # Return the new string without the odd characters\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = []\n    for char in str1:\n        if char.isalnum():\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and (test_list[i] + test_list[j]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_counts = {}\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                if tuple(sorted(test_list[j])) in bidirectional_counts:\n                    bidirectional_counts[tuple(sorted(test_list[j]))] += 1\n                else:\n                    bidirectional_counts[tuple(sorted(test_list[j]))] = 1\n    \n    return bidirectional_counts"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i:-1] or (test_list[j], test_list[i]) in test_list[j:i:-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n\n    Parameters:\n    test_list (list): A list of tuples, where each tuple contains two elements.\n\n    Returns:\n    int: The count of bidirectional tuple pairs in the given list.\n    '''\n\n    # create a set to store unique elements in the list\n    unique_elements = set()\n\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # add the tuple elements to the set\n        unique_elements.add(tup[0])\n        unique_elements.add(tup[1])\n\n    # count the number of elements in the set\n    count = len(unique_elements)\n\n    # return the count of unique elements\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Args:\n    test_list (list): A list of tuples of any length.\n\n    Returns:\n    int: The number of bidirectional tuple pairs in the list.\n    \"\"\"\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0:i] or \\\n               (test_list[j][0], test_list[i][1]) in test_list[i][0:j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][1]) in test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Define a function to check if a number is a multiple of a given number\n    def is_multiple(num, multiple):\n        return num % multiple == 0\n\n    # Define a variable to store the result\n    result = 0\n\n    # Loop through each number in the list\n    for num in L:\n        # Check if the number is a multiple of 3\n        if is_multiple(num, 3):\n            # If it is, add 3 to the result\n            result += 3\n        elif is_multiple(num, 5):\n            # If it is not a multiple of 3, check if it is a multiple of 5\n            result += 5\n        else:\n            # If the number is not a multiple of 3 or 5, it must be a multiple of 7\n            result += 7\n\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num < 0:\n            result = result + num\n        else:\n            result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 1\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 1\n    for num in L:\n        total = total * num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for i in L:\n        total = total * i\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        for i in range(len(L)):\n            if L[i] % 10!= 0:\n                return None\n        total = 0\n        for num in L:\n            total += num\n        return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern for adverbs\n    pattern = r'\\b(really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really|really"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern for finding adverbs\n    pattern = r'\\b(?:in|on|at|by|for|in|to|with|on|about|over|under)\\b'\n\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # initialize a dictionary to store the adverb and its positions\n    adverbs_dict = {}\n\n    # iterate over all matches and store the adverb and its position in the dictionary\n    for i, match in enumerate(matches):\n        adverbs_dict[match] = i\n\n    # return the dictionary\n    return adverbs_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the adverb and their positions in the given sentence.\n    '''\n\n    # Regular expression pattern to match adverbs\n    pattern = r'\\b(really|actually|amazing|brilliant|awesome|awesomeness|fantastic|fantastical|fascinating|fascinatingly|fantastically|fun|funny|funnier|funniest|funnily|funniness|funnier|funnies|funnies|funnily|frightening|frighteningly|frightenings|frustrating|frustratingly|frustrations|glorious|gloriously|gorgeous|great|greatest|greatly|gripping|grippingly|gorgeously|gorgeousness|hilarious|hilariously|hilarity|hilariously|hooray|hooray|impressed|impressive|incredible|incredibly|joyful|joyfully|joyous|joyously|jolly|jolly|jolly|kudos|kudos|kudos|laughable|laughably|literally|magical|magical|magical|magical|magical|magically|marvelous|marvelously|marvelousness|amazingly|marvelously|marvelousness|mighty|mightily|mightiness|mighty|mightiness|mightier|mightiest|mightily|mightiness|mightiest|mightily|mightiest|mightily|mightiest|mightiest|mightiest|most|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|most|mostly|mostly|mostly|mostly|most|mostly|mostly|mostly|mostly|most|mostly|mostly|mostly|mostly|most|mostly|mostly|mostly|most|mostly|most|mostly|most|mostly|mostly|mostly|most|mostly|mostly|mostly|mostly|mostly|most|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|mostly|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w+ly\\b|\\b\\w+edly\\b|\\b\\w+lys\\b|\\b\\w+lysly\\b', text)\n    \n    # sort the adverbs by position in the sentence\n    adverbs.sort(key=lambda x: text.find(x))\n    \n    # create a dictionary with adverb and position\n    adverb_positions = {}\n    for i, adverb in enumerate(adverbs):\n        adverb_positions[adverb] = i + 1\n    \n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function finds the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern for adverb\n    pattern = r'\\b(after|before|beside|besides|between|behind|below|below|beneath|beside|between|behind|below|beneath|beneath|below)\\b'\n\n    # Search for pattern in text\n    match = re.search(pattern, text)\n\n    # If pattern is found, return list of positions and adverb\n    if match:\n        adverb = match.group()\n        positions = [match.start(), match.end()]\n        return positions, adverb\n    # If pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'\\b(?:to|from|against|along|around|at|before|behind|below|between|beyond|down|during|during|except|for|from|in|inside|into|less|more|near|off|out|over|past|round|since|through|to|toward|under|underneath|up|upon|with|within|without)\\b'\n    # Find all occurrences of adverbs in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Loop through all the matches and extract the adverb and its position\n    for match in matches:\n        # Extract the adverb and its position\n        adverb = match\n        pos = text.find(adverb)\n        # Add the adverb and its position to the adverbs list\n        adverbs.append((adverb, pos))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b[A-Z][a-z]*\\b', text)\n\n    # Iterate over the adverbs and store their positions\n    for i, adv in enumerate(adverbs):\n        # Get the position of the current adverb in the sentence\n        pos = text.find(adv)\n\n        # Print the adverb and its position in the sentence\n        print(adv, ':', pos)\n\n    # If no adverbs are found, print a message\n    if len(adverbs) == 0:\n        print('No adverbs found in the sentence')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Compile a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(?:no|not|only|so|very)\\b')\n\n    # Find all the occurrences of adverbs in the text\n    matches = pattern.finditer(text)\n\n    # Iterate over the matches and print the adverbs and their positions in the sentence\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        print(f'{adverb} found at position {position}')\n\n    # If no adverbs are found, print a message\n    if not matches:\n        print('No adverbs found.')\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Split the text into words\n    words = text.split()\n\n    # Initialize an empty list to store the positions of adverbs\n    adverb_positions = []\n\n    # Iterate over the words in the sentence\n    for i in range(len(words)):\n\n        # Check if the current word is an adverb\n        if re.search(r'\\b(?:a|an|the)d', words[i], re.IGNORECASE):\n\n            # If it is, add its position to the list of adverb positions\n            adverb_positions.append(i)\n\n    # If there are no adverbs in the sentence, return None\n    if not adverb_positions:\n        return None\n\n    # Find the first adverb and its position\n    first_adverb = words[adverb_positions[0]]\n    first_adverb_position = adverb_positions[0]\n\n    # Find the last adverb and its position\n    last_adverb = words[adverb_positions[-1]]\n    last_adverb_position = adverb_positions[-1]\n\n    # Return a string with the adverbs and their positions\n    return f\"The first adverb is '{first_adverb}' at position {first_adverb_position}. The last adverb is '{last_adverb}' at position {last_adverb_position}.\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to match adverbs\n    pattern = r'\\b(?:adv|adv\\.?|adv\\.?)\\b'\n    \n    # Use the re.findall() function to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # Sort the adverbs by their positions in the sentence\n    adverbs.sort(key=lambda x: text.find(x))\n    \n    # Print the adverbs and their positions\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv}: {text.find(adv)}')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l * l\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    print(\"The surface area of a cube of length\", l, \"is\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = l*l*l\n    surface_area = 6*s\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    This function calculates the surface area of a cube of given length l.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i')\n    neg_count = array('i')\n    zero_count = array('i')\n\n    for num in nums:\n        if num > 0:\n            pos_count.append(1)\n        elif num < 0:\n            neg_count.append(1)\n        else:\n            zero_count.append(1)\n\n    pos_ratio = pos_count.sum() / len(nums)\n    neg_ratio = neg_count.sum() / len(nums)\n    zero_ratio = zero_count.sum() / len(nums)\n\n    return pos_ratio, neg_ratio, zero_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize two empty arrays to store positive and negative numbers\n    pos_arr = array('i')\n    neg_arr = array('i')\n\n    # iterate through the array and count the positive and negative numbers\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    # calculate the ratio of positive numbers to all numbers in the array\n    pos_ratio = pos_arr.count(0) / len(nums)\n\n    # return the ratio of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert array to list\n    nums_list = list(nums)\n    \n    # Initialize variables to count positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n    \n    # Loop through the list and count the number of positive and negative numbers\n    for num in nums_list:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n            \n    # Calculate the ration of positive numbers\n    pos_ratio = pos_count / len(nums_list)\n    \n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    return (pos_count / (pos_count + neg_count + zero_count)) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negatives = array('i')\n    zeros = array('i')\n    \n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        elif num < 0:\n            negatives.append(abs(num))\n        else:\n            zeros.append(num)\n    \n    positive_count = len(positives) / (len(positives) + len(negatives) + len(zeros))\n    print(\"The ration of positive numbers is:\", positive_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')  # create an empty array of integers\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)  # append positive numbers to the array\n    positive_ratio = len(positive_nums) / len(nums)  # calculate the ration of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = array('i')\n    negative = array('i')\n    zero = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        elif num < 0:\n            negative.append(1)\n        else:\n            zero.append(1)\n\n    positive_count = len(positive) / len(nums)\n    negative_count = len(negative) / len(nums)\n    zero_count = len(zero) / len(nums)\n\n    return positive_count, negative_count, zero_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create a new array to store the positive numbers\n    positive = array('i')\n    # loop through the input array\n    for num in nums:\n        if num > 0:\n            # add the positive number to the new array\n            positive.append(num)\n    # calculate the total number of positive numbers\n    total_positive = len(positive)\n    # calculate the ratio of positive numbers\n    positive_ratio = total_positive / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    positive_ratio = positive_count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0] \n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # Initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -float('inf') # initialize max_num to negative infinity\n    \n    for num in list1:\n        if num < 0:\n            if num > max_num:\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Find the largest negative number in a list.\n\n    Parameters:\n    list1 (list): List of numbers.\n\n    Returns:\n    int: Largest negative number in the list.\n    \"\"\"\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Trim each tuple by k\n        trimmed_tuple = tuple([x for x in test_list[i] if len(x) > K])\n        # Replace the original tuple with the trimmed tuple\n        test_list[i] = trimmed_tuple\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x[i:i+K]) for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        test_list.remove(tup)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # Get the first K elements of the tuple\n        first_k = tup[:K]\n        # Append the first_k to the trimmed_list\n        trimmed_list.append(first_k)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            tup = tup[:K]\n        trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for tup in test_list:\n        tup = tup[K:]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = test_list[i][:-j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for t in test_list:\n        trimmed_tuple = tuple([e for e in t if e in set(t)])[:K]\n        if len(trimmed_tuple) == K:\n            trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    trimmed_list = []\n\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple([x for x in tup if x!= K])\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new tuple of length max(len(test_tup1), len(test_tup2))\n    result_tup = (0,) * max(len(test_tup1), len(test_tup2))\n    # loop through both tuples\n    for i in range(len(test_tup1)):\n        # multiply the elements at indices i and i+1 of each tuple\n        result_tup[i] = test_tup1[i] * test_tup2[i+1]\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the length of the two tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        return \"The length of the two tuples should be same.\"\n\n    result = [0] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] * test_tup2[i]\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths must be equal.\"\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the tuple elements using zip() function\n    for i in range(len(test_tup1)):\n        # Multiply the corresponding elements of the two tuples and append the result to the list\n        result.append(test_tup1[i] * test_tup2[i])\n\n    # Return the list of result\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    count_dict = {} \n    for i in tup: \n        if i in count_dict: \n            count_dict[i] += 1 \n        else: \n            count_dict[i] = 1 \n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in lst:\n        count_dict[i] = tup.count(i)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict.update(tup)\n    count_dict.subtract(tup)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the list to set to remove duplicates and then back to list\n    lst = list(set(lst))\n\n    # Count the occurrence of each element of the list in the tuple\n    count = Counter(tup)\n\n    # Find the elements that have a count greater than 1\n    count_greater_than_1 = [key for key, value in count.items() if value > 1]\n\n    # Find the elements that have a count equal to 1\n    count_equal_to_1 = [key for key, value in count.items() if value == 1]\n\n    # Print the result\n    print(\"Elements in tuple that have a count greater than 1:\", count_greater_than_1)\n    print(\"Elements in tuple that have a count equal to 1:\", count_equal_to_1)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    result = {} \n    for key, value in count.items(): \n        if key in tup: \n            result[key] = value \n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Counter() function is used to count the occurence of all elements in a list in a tuple.\n    count = Counter(tup)\n\n    # Dictionary comprehension is used to count the elements of the list in the tuple.\n    count_dict = {x: count[x] for x in lst}\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(tup)\n    count_lst = list(count.items())\n    \n    for i in range(len(lst)):\n        for j in range(len(count_lst)):\n            if lst[i] == count_lst[j][0]:\n                count_lst[j][1] += 1\n                break\n    \n    return count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst)\n    count = {}\n    for x in cnt:\n        count[x] = tup.count(x)\n    return count"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Calculate the cube of the element and store it back in the list\n        nums[nums.index(num)] = num ** 3\n    return nums"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through each number in the list\n    for num in nums:\n        # Cube the number and append the result to a new list\n        cubes.append(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]\n    sum_perrin_numbers = 0\n    for perrin_number in perrin_numbers:\n        if perrin_number <= n:\n            sum_perrin_numbers += perrin_number\n    return sum_perrin_numbers"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = 1\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += perrin\n        perrin += 1\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    Args:\n    n (int): The number of terms to calculate the sum for.\n\n    Returns:\n    int: The sum of the first n perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += (i ** 2 + 1) // 2\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize the sum of perrin numbers to 0\n    psum = 0\n    # iterate through the perrin numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the current number is a perrin number\n        if i % 2 == 0:\n            # if it is, add it to the sum\n            psum += i\n    # return the sum of perrin numbers\n    return psum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize variables to store sum and current number\n    sum_of_perrin = 0\n    num = 1\n\n    # iterate through numbers from 1 to n\n    while num <= n:\n        # add current number to sum of perrin numbers\n        sum_of_perrin += num\n        # increment current number by 1\n        num += 1\n\n    # return the sum of perrin numbers\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_sum = 0\n    perrin_number = 1\n\n    while perrin_number <= n:\n        perrin_sum += perrin_number\n        perrin_number += 4\n\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    sum_perrin = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            sum_perrin += i\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nsum = cal_sum(n)\nprint(\"The sum of Perrin numbers up to\", n, \"is\", sum)"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        result.append(i[:l[str]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(l)):\n        extracted_str.append(l[i][:l[i].index(str) + len(str)])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and a size as input and returns a list of strings of the specified size.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function takes a list of string values and an integer representing the desired length of each string.\n    It returns a list of the extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:length])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a target size and returns a list of the extracted strings.\n    \"\"\"\n    extracted_list = []\n    for string in str_list:\n        if len(string) <= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes in a list of strings and a desired length for the extracted strings.\n    It returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= l:\n            extracted_strings.append(string[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(l) < l:\n        raise ValueError('List should have at least {} elements.'.format(l))\n    elif len(str) > l:\n        raise ValueError('String should not be longer than {} characters.'.format(l))\n    else:\n        return [s[:l] for s in l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): list of string values\n    size (int): size of strings to extract\n\n    Returns:\n    list: list of extracted strings\n    '''\n\n    extracted_list = []\n\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function extracts the specified size of strings from the given list of string values.\n    \n    Parameters:\n    str_list (list): A list of string values.\n    size (int): The size of strings to be extracted.\n    \n    Returns:\n    list: A list of strings of size size extracted from the given list of string values.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            string_list.append(str_list[i][0:size])\n    return string_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string\n    text1 = re.sub('\\s+','', text1)\n    # Remove all whitespaces from the beginning of the given string\n    text1 = re.sub('^\\s+', '', text1)\n    # Remove all whitespaces from the end of the given string\n    text1 = re.sub('\\s+$', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    pattern = re.compile(r'\\s+')\n    text1 = pattern.sub('', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # define the regular expression pattern to match whitespaces\n    pattern = r'\\s+'\n    # use the re.sub() function to remove whitespaces from the string\n    text2 = re.sub(pattern, '', text1)\n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text)\n\ntext = \"  This is a test string with multiple whitespaces and special characters!  \"\nprint(remove_whitespaces(text))"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    # Using regular expressions to remove whitespaces\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    # Removing leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Removing all whitespaces from the string using regex\n    text1 = re.sub('\\s+', '', text1)\n    # Removing leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        loss = actual_cost - sale_amount \n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        loss = sale_amount - actual_cost\n        return loss\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    sum = 0\n    \n    # loop through the factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            # if i is even and n is divisible by 2i, add i to the sum\n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n = n // i\n        else:\n            i += 1\n    if n > 1:\n        if n % 2 == 0:\n            sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function takes an integer as input and returns the sum of even factors of the number.\n    '''\n    even_factors = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                even_factors += i \n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # initialize the sum of even factors to zero\n    sum_even_factors = 0\n\n    # iterate through all possible factors up to the square root of the input number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            # add the even factor to the sum\n            sum_even_factors += i\n    \n    # add the remaining odd factor (if any) to the sum\n    if n % 2 == 1:\n        sum_even_factors += n\n    \n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, n+1):\n        if n%i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of that number.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Loop through each number from 1 to the square root of the input number\n    for i in range(1, int(math.sqrt(n))+1):\n\n        # Check if the input number is evenly divisible by i\n        if n % i == 0 and i % 2 == 0:\n\n            # If yes, add i to sum\n            sum += i\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize variables to store the sum and the factors\n    total = 0\n    factors = []\n    \n    # Loop through the range of numbers from 1 to n-1\n    for i in range(1, n):\n        # If the number is even, add it to the sum and the list of factors\n        if i % 2 == 0:\n            total += i\n            factors.append(i)\n    \n    # Return the sum of even factors\n    return total, factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (i+2) == 0:\n            sum += i + n//i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n//i!= i:\n                sum += n//i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[zZ][a-z]+\\b'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*[zZ]\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b\\s*\\w*z\\b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define regular expression pattern for finding words containing 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    # use re.findall() method to find all occurrences of the pattern in the given text\n    result = re.findall(pattern, text)\n    # return the list of matched words\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b\\w*[zZ]\\w*\\b'\n    words_found = re.findall(word_pattern, text)\n    return words_found"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern to match word containing 'z'\n    pattern = r'\\w+z\\w+'\n    # Find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return \"31 days\"\n        else:\n            return \"28 or 29 days\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2%100 == 0:\n        if monthnum2%400 == 0:\n            return True\n        else:\n            return False\n    elif monthnum2%100!= 0 and monthnum2%4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in range(1,13):\n        if monthnum2 % 2 == 0:\n            if monthnum2 == 2:\n                return True\n            elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 in [1,3,5,7,8,10,12]:\n                return True\n            else:\n                return False\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    '''\n\n    if monthnum2 == 2: # February has 28 or 29 days\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0): # leap year\n            days = 29\n        else:\n            days = 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11: # April, June, September, and November have 30 days\n        days = 30\n    else: # all other months have 31 days\n        days = 31\n\n    if days == 31 and (daynum2 < 1 or daynum2 > days): # the given day number is greater than or equal to 1 and less than or equal to the number of days in the given month\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days = 29\n        else:\n            days = 28\n    elif monthnum in [4, 6, 9, 11]:\n        days = 30\n    else:\n        days = 31\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    This function checks whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and checks whether it contains 31 days or not.\n    If it does, it returns True, otherwise, it returns False.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns a boolean value indicating whether it contains 31 days or not.\n    \"\"\"\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # check if the month number is in range (1 to 12)\n    if monthnum < 1 or monthnum > 12:\n        return False\n\n    # check if the month number has 31 days\n    if monthnum in [2, 4, 6, 9, 11]:\n        return True\n\n    # check if the month number has 30 days\n    if monthnum in [3, 5, 7, 8, 10, 12]:\n        return True\n\n    # check if the month number has 28 or 29 days (depending on whether it's a leap year or not)\n    if monthnum == 2:\n        year = int(input(\"Enter the year: \"))\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return days_in_month[monthnum] == 29\n        else:\n            return days_in_month[monthnum] == 28\n\n    # if the month number is not in the list of valid months, return False\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for string in stringlist:\n        newlist.append(string[::-1])\n    return newlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist that has the minimum length.\n    '''\n    # initialize a variable to store the minimum length found so far\n    min_length = float('inf')\n    # initialize an empty list to store the sublists with minimum length\n    min_sublist = []\n    # iterate through the list of sublists\n    for sublist in lst:\n        # find the length of the sublist\n        length = len(sublist)\n        # check if the current sublist has a minimum length\n        if length < min_length:\n            # if it does, update the minimum length and the sublist with minimum length\n            min_length = length\n            min_sublist = sublist\n    # return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_min = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub = lst[i:j+1]\n            if min(len(sub), len(sub_min)) == len(sub):\n                sub_min = sub\n    return sub_min"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    This function will find the sublist that has minimum length in the given list.\n    \"\"\"\n    min_length = len(lst[0])\n    min_list = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = [sublist]\n        elif len(sublist) == min_length:\n            min_list.append(sublist)\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having \n    minimum length from the input list.\n    '''\n    # Initialize minimum length and current sublist\n    min_length = float('inf')\n    current_sublist = []\n\n    # Loop through each element of the input list\n    for i in range(len(lst)): \n        # If the current element is smaller than the minimum length, \n        # update the minimum length and the current sublist\n        if lst[i] < min_length: \n            min_length = lst[i]\n            current_sublist = [lst[i]]\n        # If the current element is equal to the minimum length, append it to the current sublist\n        elif lst[i] == min_length: \n            current_sublist.append(lst[i])\n\n    # Return the current sublist with minimum length\n    return current_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    # creating a dictionary to store lengths and indexes of sublists\n    lengths = {}\n    # initializing a variable to store the minimum length\n    min_len = float('inf')\n    \n    # iterating through the list\n    for i in range(len(lst)):\n        # getting the length of the current sublist\n        curr_len = len(lst[i])\n        # checking if the length is less than the minimum length\n        if curr_len < min_len:\n            # updating the minimum length and storing its index\n            min_len = curr_len\n            min_index = i\n        # updating the dictionary with the current sublist's length and index\n        lengths[curr_len] = i\n    \n    # iterating through the dictionary to find the sublist with minimum length\n    for i in range(min_len):\n        # getting the current length of the sublist with minimum length\n        curr_len = min_len\n        # checking if the current length is in the dictionary\n        if curr_len in lengths.values():\n            # getting the index of the current sublist with minimum length\n            curr_index = lengths[curr_len]\n            # creating a new list to store the sublist with minimum length\n            min_sublist = lst[curr_index:curr_index+curr_len]\n            # returning the new list\n            return min_sublist\n    \n    # returning an empty list if the sublist with minimum length is not found\n    return []"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    # Initialize min_len and min_sublist to the largest possible value\n    min_len = float('inf')\n    min_sublist = []\n    \n    # Loop through each sublist of lst and check if its length is smaller than min_len\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = 10000\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return lst if lst[0] < lst[1] else [lst[1], lst[0]]\n    else:\n        mid = len(lst) // 2\n        left_min = Find_Min(lst[:mid])\n        right_min = Find_Min(lst[mid:])\n        return [min(left_min, right_min)] + left_min if len(left_min) < len(right_min) else [min(right_min, left_min)] + right_min"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n\n    # find the length of all sublists\n    sublist_lengths = [len(sublist) for sublist in lst]\n\n    # find the index of the minimum length\n    min_index = sublist_lengths.index(min(sublist_lengths))\n\n    # return the sublist with the minimum length\n    return lst[min_index]"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings from the string\n    str1 = re.sub('([A-Z]+)', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'(?i)[A-Z]+', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile('[A-Z]+', re.IGNORECASE)\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # define the regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)\\b[A-Z]\\w+\\b')\n\n    # find all uppercase substrings in the input string\n    upper_substrings = pattern.findall(string)\n\n    # remove all uppercase substrings from the input string\n    new_string = re.sub(pattern, '', string)\n\n    # return the new string with uppercase substrings removed\n    return new_string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][A-Z0-9]*\\b'\n    # Use the re.sub() method to replace the uppercase substrings with an empty string\n    str2 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Replace uppercase substrings with an empty string\n    str1 = re.sub('(?i)[A-Z][a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z]{1,}\\b', '', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublists = []\n    for item in lst:\n        sublists.append(item[0])\n    return sublists"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing\n    the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_case = 0\n    for i in str:\n        if i.isupper():\n            upper_case += 1\n    return upper_case"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # initialize variables for length of list and number of combinations to be generated\n    n = len(list1)\n    k = len(list1)\n\n    # initialize list to hold combinations\n    combinations = []\n\n    # loop through all possible combinations of length k\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            combinations.append(list1[j:j+i])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Create an empty list to store all combinations\n    combinations = []\n\n    # Find all possible permutations of the elements in the list\n    for i in range(len(list1)):\n        if i == 0:\n            combinations.append([list1[i]])\n        elif i == 1:\n            combinations.append([list1[0], list1[1]])\n            combinations.append([list1[1], list1[0]])\n        elif i == 2:\n            combinations.append([list1[0], list1[1], list1[2]])\n            combinations.append([list1[0], list1[2], list1[1]])\n            combinations.append([list1[1], list1[0], list1[2]])\n            combinations.append([list1[1], list1[2], list1[0]])\n            combinations.append([list1[2], list1[0], list1[1]])\n            combinations.append([list1[2], list1[1], list1[0]])\n        else:\n            for j in range(i):\n                combinations.append([list1[i]] + combinations[j][1:])\n                combinations.append(combinations[j][1:] + [list1[i]])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort() # Sort the list in ascending order\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # find the length of the list\n    n = len(list1)\n    # create a list of lists to store the combinations\n    combinations = []\n    # loop through all possible combinations of length n\n    for i in range(1, n+1):\n        # loop through all possible starting indices for the combinations\n        for j in range(n-i+1):\n            # create a list with the current combination of elements\n            combination = list1[j:j+i]\n            # add the combination to the list of combinations\n            combinations.append(combination)\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            res.append(lst[i:j+1])\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            new_list = list1[:i] + list1[i+1:]\n            for comb in combinations_list(new_list):\n                result.append([list1[i]] + comb)\n        return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1, output=[]):\n    if not list1:  # base case: empty list\n        return output\n    else:\n        combinations_list(list1[1:], output + [list1[0]])  # recursive case: add first element to output and call function recursively with rest of list\n        return combinations_list(list1[1:], output)  # backtrack and try next element"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n\n    for num in arr:\n        curr_product = max(curr_product * num, num)\n        max_product = max(max_product, curr_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(arr[0], arr[0] * arr[1])\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], arr[i] * max_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    # Initialize variables to keep track of the current maximum subarray product and its starting and ending indices\n    max_product = arr[0]\n    current_product = arr[0]\n    start_index = 0\n    end_index = 0\n    \n    # Loop through the array and update the variables as needed\n    for i in range(1, len(arr)):\n        if current_product > 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            start_index = i - len(current_product) + 1\n            end_index = i\n            \n    # Return the maximum product subarray\n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(arr[0], max_ending_here * arr[0])\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            min_ending_here = 1\n            max_ending_here = 1\n        else:\n            max_product = max(max_product, max_ending_here * arr[i])\n            min_ending_here = min(min_ending_here * arr[i], max_ending_here * arr[i])\n            max_ending_here = max(max_ending_here * arr[i], min_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    end = 0\n\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = arr[i]\n            start = i\n        else:\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n            end = i\n\n    return arr[start:end+1]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n    \n    # Get the first key and value of the dictionary\n    key, value = next(iter(dict.items()))\n    \n    # Iterate over the remaining items in the dictionary\n    for key, value in dict.items():\n        # Check if the value is not equal to the first value\n        if value!= value:\n            return False\n    \n    # If all values are equal, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    for i in range(len(dict)):\n        if n == dict[i]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the count of occurrences of the first value in the dictionary\n    count = 0\n    # Loop through all the keys in the dictionary\n    for key in dict:\n        # If the count is zero, initialize it to 1\n        if count == 0:\n            count = 1\n        # If the value in the current key is not the same as the first value in the dictionary, return False\n        elif dict[key]!= dict[n]:\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            count += 1\n            if value == dict[value]:\n                return True\n        else:\n            if value!= dict[value]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if value!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = None\n    for key in dict:\n        if value is None:\n            value = dict[key]\n        else:\n            if value!= dict[key]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    first_value = next(iter(dict.values()))\n    return all(value == first_value for value in dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the dictionary is empty\n    if not dict:\n        return True\n\n    # Get the first key and value\n    key = next(iter(dict))\n    value = dict[key]\n\n    # Loop through the dictionary and check if all values are same\n    for k, v in dict.items():\n        if v!= value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if value is None or value == \"\":\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v is not None and len(str(v).strip()) > 0}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n\n    max_product_here = float('-inf')\n    min_product_here = float('inf')\n    max_product_so_far = float('-inf')\n    min_product_so_far = float('inf')\n\n    for i in range(n):\n        if arr[i] > max_product_here:\n            max_product_here = arr[i]\n            min_product_here = arr[i]\n        elif arr[i] < min_product_here:\n            min_product_here = arr[i]\n        else:\n            pass\n        max_product_here = max(max_product_here, min_product_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables for the maximum product and the current maximum product\n    max_product = float('-inf')\n    current_max_product = float('-inf')\n\n    # Loop through each number in the array\n    for i in range(len(arr)):\n        # Initialize variables for the current product and the product of the current number with the previous maximum product\n        current_product = float('-inf')\n        product_with_previous_max = float('-inf')\n\n        # Loop through each number in the subsequence from i to the end of the array\n        for j in range(i, len(arr)):\n            # Calculate the product of the current number with the previous maximum product and the current number\n            product = arr[i] * arr[j]\n\n            # Update the current product if the product is greater than the current product\n            if product > current_product:\n                current_product = product\n\n            # Update the product of the current number with the previous maximum product if the product is greater than the previous product\n            if product > product_with_previous_max:\n                product_with_previous_max = product\n\n            # Update the maximum product if the product of the current number with the previous maximum product is greater than the current maximum product\n            if product_with_previous_max > max_product:\n                max_product = product_with_previous_max\n\n        # Update the current maximum product if the product of the current number with the previous maximum product is greater than the current maximum product\n        if current_product > current_max_product:\n            current_max_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    increasing_subsequence = [float('-inf')]\n    \n    # Loop through the array\n    for num in arr:\n        # If the number is smaller than the current minimum, update the minimum and reset the increasing subsequence\n        if num < increasing_subsequence[-1]:\n            increasing_subsequence = [num]\n        # Otherwise, add the number to the increasing subsequence\n        else:\n            increasing_subsequence.append(num)\n        \n        # Compute the product of the increasing subsequence\n        current_product = 1\n        for i in range(len(increasing_subsequence)):\n            current_product *= increasing_subsequence[i]\n        \n        # Update the maximum product if necessary\n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    def max_product_of_subsequence(arr, start, end):\n        if start == end:\n            return arr[start]\n        elif end - start == 1:\n            return max(arr[start], arr[end])\n        else:\n            mid = (start + end) // 2\n            left_max = max(max_product_of_subsequence(arr, start, mid),\n                          max_product_of_subsequence(arr, mid + 1, end))\n            right_max = max(max_product_of_subsequence(arr, start, mid),\n                           max_product_of_subsequence(arr, mid + 1, end))\n            return arr[start] * max(left_max, right_max)\n\n    return max_product_of_subsequence(arr, 0, len(arr) - 1)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # Initialize variables for max product and subsequence length\n    max_product = float('-inf')\n    subseq_len = 1\n\n    # Iterate through the array and calculate the subsequence length and maximum product\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            subseq_len += 1\n        else:\n            subseq_len = 1\n\n        # Update maximum product if current subsequence length is greater\n        max_product = max(max_product, subseq_len * arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n\n    # Initialize the maximum product and the current subsequence product\n    max_product_so_far = float('-inf')\n    curr_subseq_product = 1\n\n    # Loop through each element of the array\n    for i in range(n):\n        # Check if the element is the first element of the subsequence\n        if i == 0:\n            curr_subseq_product = arr[i]\n        # Check if the element is the last element of the subsequence\n        elif i == n - 1:\n            curr_subseq_product = arr[i]\n        # Check if the element is not the first or the last element of the subsequence\n        else:\n            curr_subseq_product = max(arr[i], arr[i] * curr_subseq_product)\n\n        # Update the maximum product if necessary\n        max_product_so_far = max(max_product_so_far, curr_subseq_product)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize a variable to store the maximum product found so far\n    max_product = float('-inf')\n    # Initialize an array to store the products of the numbers in the subsequence\n    product_array = [0] * n\n    # Iterate through all possible increasing subsequences\n    for i in range(n):\n        for j in range(i+1, n):\n            # Multiply the numbers in the subsequence and update the maximum product if the result is greater\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # initialize the maximum product and maximum subsequence length\n    max_product = arr[0]\n    max_length = 1\n\n    # iterate through the array from the second element to the end\n    for i in range(1, n):\n        # calculate the length of the maximum subsequence that ends at index i\n        length = 1\n        while i + length < n and arr[i + length] <= arr[i]:\n            length += 1\n\n        # update the maximum product if the length of the maximum subsequence is greater than the current maximum\n        if length > max_length:\n            max_product = arr[i] * arr[i + length - 1]\n            max_length = length\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    # Step 1: Sort the array in non-decreasing order\n    arr.sort()\n\n    # Step 2: Initialize max_product and max_subsequence to negative infinity\n    max_product = max_subsequence = -float('inf')\n\n    # Step 3: Traverse the array from the first element to the second last element\n    for i in range(1, len(arr)-1):\n\n        # Step 4: Calculate the product of the current element and the maximum subsequence\n        subsequence_product = arr[i] * max_subsequence\n\n        # Step 5: Update the maximum subsequence to the current element\n        max_subsequence = max(arr[i], max_subsequence)\n\n        # Step 6: Calculate the product of the current element and the current maximum subsequence\n        current_product = arr[i] * max_subsequence\n\n        # Step 7: Update the maximum_product to the maximum of the previous maximum_product and the current product\n        max_product = max(max_product, current_product)\n\n    # Step 8: Return the maximum_product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n):\n        if i == n-1:\n            result += test_tup[0]\n        else:\n            result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Define the length of the tuple\n    tup_length = len(test_tup)\n    \n    # Initialize the sum of pairwise additions\n    pairwise_sum = 0\n    \n    # Iterate through the tuple and add the neighboring elements pairwise\n    for i in range(1, tup_length):\n        pairwise_sum += test_tup[i] - test_tup[i-1]\n    \n    # Return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    total = 0\n    for i in range(n-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"The given tuple must have at least two elements.\"\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # unpack the tuple\n    a, b, c = test_tup\n    # find the sum of the first and last elements\n    s1 = a + c\n    # find the sum of the second and second last elements\n    s2 = b + b\n    # return the sum of these two sums\n    return s1 + s2"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2 == 1:\n        return None\n    else:\n        result = []\n        for i in range(n-1):\n            result.append(test_tup[i] + test_tup[i+1])\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The tuple must have at least two elements\"\n    else:\n        result = 0\n        for i in range(len(test_tup)-1):\n            result += test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    num_elements = len(test_tup)\n    if num_elements <= 1:\n        return test_tup\n\n    result = []\n    for i in range(num_elements):\n        for j in range(i+1, num_elements):\n            result.append(test_tup[i] + test_tup[j])\n\n    return tuple(result)"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Compute the product of the array multiplication modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array arr and an integer n as input.\n    The function returns the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n\n    for i in arr: \n        product = (product * i) % n\n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Calculate the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    # Initialize variables to store the product and the remainder\n    product = 1\n    remainder = 0\n    \n    # Iterate over the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n    \n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return True\n    \n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    prev = l[0]\n    for num in l[1:]:\n        if num!= prev + 1:\n            return False\n        prev = num\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Check if the list is empty\n    if not l:\n        return False\n\n    # Set the first element as the previous element\n    prev = l[0]\n\n    # Loop through the list\n    for i in range(1, len(l)):\n\n        # If the current element is greater than the previous element, return True\n        if l[i] > prev:\n            return True\n\n        # Update the previous element\n        prev = l[i]\n\n    # If the list is fully traversed, return False\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty list to store the common tuples\n    common_tuples = []\n    # loop through each tuple in the first list\n    for tuple1 in test_list1:\n        # loop through each tuple in the second list\n        for tuple2 in test_list2:\n            # check if the tuples are equal\n            if tuple1 == tuple2:\n                # if they are equal, add them to the common_tuples list\n                common_tuples.append(tuple1)\n    # return the common_tuples list\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1 & set2"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return set1.intersection(set2)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Creating a set from the first tuple list and converting it to a list\n    set1 = list(set(test_list1))\n\n    # Creating a set from the second tuple list and converting it to a list\n    set2 = list(set(test_list2))\n\n    # Creating a set from the intersection of the two sets\n    set_intersection = list(set1 & set2)\n\n    return set_intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the intersection of the two lists\n    intersection = set()\n    \n    # Iterate through both lists\n    for item in test_list1:\n        # Check if the item is present in the second list\n        if item in test_list2:\n            # If it is, add it to the set of intersection\n            intersection.add(item)\n\n    # Return the set of intersection\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the given tuple lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets using the intersection method\n    intersect = set1.intersection(set2)\n\n    # Convert the intersection set back to tuple and return it\n    return tuple(intersect)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of the elements in test_list1\n    set1 = set(test_list1)\n    # Create a set of the elements in test_list2\n    set2 = set(test_list2)\n    # Find the intersection of the sets using the & operator\n    intersection = set1 & set2\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of elements in the first list\n    set1 = set(test_list1)\n    # create a set of elements in the second list\n    set2 = set(test_list2)\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    common_elements = []\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    for item in set1:\n        if item in set2:\n            common_elements.append(item)\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns the tuple intersection of their elements. \n    The elements of the tuple lists are compared in the same order as they appear in the input lists.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection_list.append(test_list1[i])\n    return intersection_list"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string to store the modified string\n    new_str = \"\"\n    \n    # loop through each character in the original string\n    for char in str1:\n        # if the character matches the search character, replace it with the new character\n        if char == ch:\n            new_str += newch\n        # if the character does not match the search character, add it to the new string unchanged\n        else:\n            new_str += char\n    \n    # return the new string with all occurrences of the search character replaced with the new character\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n\n    Parameters:\n    str1: string - the string to replace characters in\n    ch: char - the character to be replaced\n    newch: char - the new character to replace the old character with\n\n    Returns:\n    str2: string - the modified string with the character replaced\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # initialize an empty string to store the modified string\n    new_str = \"\"\n    # loop through each character in the input string\n    for i in str1:\n        # if the current character is equal to the character to be replaced, add the new character\n        if i == ch:\n            new_str += newch\n        # otherwise, add the current character to the new string\n        else:\n            new_str += i\n    # return the modified string\n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary into a Counter object\n    counter = Counter(dict1)\n    # Sort the counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Args:\n    nums (list): The list of numbers to find the sum of the largest and smallest values for.\n\n    Returns:\n    int: The sum of the largest and smallest value in the given array.\n    \"\"\"\n    # Sort the array in ascending order\n    nums.sort()\n    # Return the sum of the first and last elements\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns their sum of the largest and smallest values.\n    \"\"\"\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the sum of the largest and smallest value\n    largest = nums[-1]\n    smallest = nums[0]\n    result = largest + smallest\n\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # find the largest and smallest value in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # calculate the sum of the largest and smallest value\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of integers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.lower() == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use the re.sub() function to remove all lowercase substrings from the string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w+\\b')\n    \n    # Find all lowercase substrings in the string using the pattern\n    matches = pattern.findall(str1)\n    \n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Use a regular expression to find all lowercase substrings\n    pattern = r'[a-z]+'\n    matches = re.findall(pattern, str1)\n    \n    # Iterate over each match and remove it from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for finding lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the pattern to find all lowercase substrings in the string\n    lowercase_substrings = pattern.findall(str1)\n    # Loop through each lowercase substring and append it to a new list\n    new_list = []\n    for substring in lowercase_substrings:\n        new_list.append(substring)\n    # Convert the list of lowercase substrings to a string and return it\n    return ''.join(new_list)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert string to lowercase\n    string = string.lower()\n    # Find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'\\b\\w*\\b', string)\n    # Remove the lowercase substrings from the string\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Split the input string into substrings\n    substrings = re.findall(r'[a-z]+', str1)\n    # Concatenate the substrings with uppercase letters\n    new_str = ''.join([c.upper() if c.isalpha() else c for c in str1])\n    # Replace the lowercase substrings with uppercase letters in the original string\n    new_str = re.sub(r'[a-z]+', lambda m: m.group(0).upper(), new_str)\n    # Return the new string without lowercase substrings\n    return new_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # find all the matches of lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # loop through each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to find all lowercase substrings\n    pattern = re.compile('[a-z]+')\n    matches = pattern.findall(str1)\n\n    # Iterate through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all matches of the pattern in the string\n    matches = pattern.findall(string)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n    \"\"\"\n    # Finding the length of the number\n    length = len(str(n))\n    # If the number has only one digit, it is the first digit\n    if length == 1:\n        return n\n    # If the number has more than one digit, the first digit is the last digit of the number\n    else:\n        last_digit = int(str(n)[-1])\n        return last_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    first_digit = n // 10**len(str(n))\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the first digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    # Check if the input is positive\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    # Convert the integer to a string\n    str_num = str(n)\n    # Check if the length of the string is greater than 1\n    if len(str_num) > 1:\n        raise ValueError(\"Input must be a single digit integer.\")\n    # Return the first character of the string\n    return str_num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    first_digit = n % 10  # take the last digit (0-9) of n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the first digit of the string\n    first_digit = num_str[0]\n\n    # Return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n    \n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_cubes(n) - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Using nested loops to calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    # Using a for loop to calculate the sum of first n natural numbers\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_numbers += i\n\n    # Returning the difference\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Difference between the two sums\n    diff = sum_natural - sum_of_cubes\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Initialize variables to keep track of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    sum_cubes = 0\n    sum_natural = 0\n    \n    # Loop over the first n natural numbers\n    for i in range(n+1):\n        # Calculate the cube of i\n        cube = i ** 3\n        # Add the cube to the sum of cubes\n        sum_cubes += cube\n        # Add i to the sum of the first n natural numbers\n        sum_natural += i\n    \n    # Calculate the difference between the sum of cubes and the sum of the first n natural numbers\n    difference = sum_cubes - sum_natural\n    \n    # Return the difference as a float\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n\n    # calculate the sum of first n natural numbers\n    sum_of_numbers = sum(range(1,n+1))\n\n    # find the difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Compute the sum of the cubes of the first n natural numbers\n    sum_cubes_n = n * (n * (n + 1) // 2) // 2\n\n    # Compute the difference between the two sums\n    diff = sum_cubes_n - sum_n\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(n):\n        sum_cubes += i**3\n    \n    # Calculate the sum of the first n natural numbers\n    sum_numbers = 0\n    for i in range(n):\n        sum_numbers += i\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in a list A of length N and returns the count of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N+1):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes two lists A and N, where A contains N integers and N is the length of the lists.\n    It counts the number of pairs whose xor value is odd and returns the count.\n    \"\"\"\n    # XOR operation\n    xor = lambda x, y: x ^ y\n    # Iterate through the list A and count the number of pairs whose xor value is odd\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if xor(A[i], A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the toggled string\n    toggled_string = \"\"\n    \n    # Iterate through each character in the original string\n    for char in string:\n        # Check if the character is uppercase or lowercase\n        if char.isupper():\n            # Convert the character to lowercase and append to the toggled string\n            toggled_string += char.lower()\n        else:\n            # Convert the character to uppercase and append to the toggled string\n            toggled_string += char.upper()\n            \n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is a lowercase letter\n        if string[i].islower():\n            # convert it to uppercase\n            string = string.replace(string[i], string[i].upper())\n        # if the character is an uppercase letter\n        elif string[i].isupper():\n            # convert it to lowercase\n            string = string.replace(string[i], string[i].lower())\n    # return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    difference = abs(n1 - n2)\n    total_sum = 0\n\n    while difference > 0:\n        digit = difference % 10\n        total_sum += digit * digit\n        difference //= 10\n\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n    return sum(abs(n1_list[i] - n2_list[i]) for i in range(len(n1_list)))"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to a list of digits\n    num1_list = [int(digit) for digit in str(n1)]\n    num2_list = [int(digit) for digit in str(n2)]\n\n    # Calculate the absolute difference between the two numbers\n    difference = abs(num1_list[0] - num2_list[0])\n\n    # Calculate the sum of the differences between each digit pair\n    sum_of_differences = 0\n    for i in range(len(num1_list)):\n        sum_of_differences += abs(num1_list[i] - num2_list[i])\n\n    # Return the sum of differences\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n\n    Args:\n        n1: An integer.\n        n2: An integer.\n\n    Returns:\n        An integer.\n    \"\"\"\n    # Convert the integers to lists of digits\n    n1_list = [int(digit) for digit in str(n1)]\n    n2_list = [int(digit) for digit in str(n2)]\n    \n    # Find the difference between the two integers\n    diff = [abs(n1 - n2)]\n    \n    # Iterate over the digits in the lists and calculate the sum of the per-digit differences\n    for i in range(len(n1_list)):\n        diff.append(abs(n1_list[i] - n2_list[i]))\n    \n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integer parameters and returns the sum of the per-digit difference between them.\n    '''\n    # Initialize variables\n    result = 0\n    # Convert both integers to strings and split them into individual characters\n    str1 = str(n1)\n    str2 = str(n2)\n    # Iterate through each character in the strings\n    for i in range(len(str1)):\n        # Subtract the character at index i in str1 from the character at index i in str2\n        diff = int(str1[i]) - int(str2[i])\n        # Add the absolute value of the difference to the result\n        result += abs(diff)\n    # Return the result\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert both numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize a list to store the differences between each digit of each number\n    diff_list = []\n\n    # Loop through each digit of the two numbers\n    for i in range(len(n1_str)):\n        # Convert each digit to an integer and add it to the diff_list\n        diff_list.append(abs(int(n1_str[i]) - int(n2_str[i])))\n\n    # Calculate the sum of the differences\n    sum_diff = sum(diff_list)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    while n1!= 0 or n2!= 0:\n        if n1 == 0 or n2 == 0:\n            break\n        diff = abs(n1 - n2)\n        sum += diff\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the two lists\n    per_digit_diff = [abs(digit1 - digit2) for digit1, digit2 in zip(digit_list1, digit_list2)]\n\n    # Calculate the sum of the differences\n    total_diff = sum(per_digit_diff)\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    \n    # Initialize a variable to store the sum of differences\n    total_diff = 0\n    \n    # Loop through each digit in the first integer\n    for i in range(len(digits1)):\n        # Calculate the difference between the corresponding digits in the two integers\n        diff = digits1[i] - digits2[i]\n        \n        # Add the difference to the running total\n        total_diff += diff\n    \n    # Return the total difference\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of per-digit difference\n    diff = 0\n    # Convert both integers to strings so that we can perform string manipulation on them\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Loop through each digit of the two numbers and calculate the difference between them\n    for i in range(len(n1_str)):\n        diff += int(n1_str[i]) - int(n2_str[i])\n    # Return the sum of per-digit difference\n    return diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum and the starting and ending indices of the subarray\n    max_sum = float('-inf')\n    start = 0\n    end = 0\n    \n    # Iterate through the list from the beginning to the end\n    for i in range(len(a)):\n        # Add the current element to the sum and update the maximum sum if necessary\n        sum_so_far = a[i] + sum_so_far\n        if sum_so_far > max_sum:\n            max_sum = sum_so_far\n            start = i\n            end = i\n        \n        # If the sum exceeds the size, move the starting index to the next position\n        while sum_so_far > size:\n            sum_so_far -= a[start]\n            start += 1\n        \n        # If the sum is less than the size, move the ending index to the next position\n        while sum_so_far < size:\n            sum_so_far += a[end]\n            end += 1\n    \n    # Return the sum of the largest contiguous subarray\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Returns the sum of the largest contiguous sublist of size `size` in the given list `arr`.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(arr)):\n        if i + size <= len(arr):\n            current_sum += arr[i + size - 1]\n        else:\n            current_sum += arr[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    max_end = 0\n    curr_sum = 0\n    for i in range(len(a)):\n        if i < size:\n            curr_sum += a[i]\n        else:\n            curr_sum -= a[max_end]\n            curr_sum += a[i]\n            max_end = i\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n\n    max_ending_here = a[0]\n    max_so_far = max_ending_here\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i\n            \n    return max_sum, start_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the input tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # combine the two sets and convert back to a list\n    union_set = list(set1.union(set2))\n    # sort the list and return it\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set to store unique elements of both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # convert set to list and sort it\n    union_list = sorted(list(union_set))\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set |= set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = set(test_tup1 + test_tup2)\n    # Sort the union in ascending order\n    union = sorted(union)\n    # Convert the sorted union to a list and return it\n    return list(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # Sort the combined tuple\n    sorted_tup = sorted(combined_tup)\n\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    \n    # Sort the union in ascending order\n    union_sorted = sorted(union)\n    \n    # Output the sorted union\n    print(union_sorted)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Find the union of the two tuples by adding their elements\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the list and output it\n    return sorted(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates from the combined tuple\n    unique_tup = list(set(combined_tup))\n    \n    # Sort the unique tuple in ascending order\n    sorted_tup = sorted(unique_tup)\n    \n    # Print the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one and then sort it\n    combined_tup = sorted(test_tup1 + test_tup2)\n    # Loop through the sorted tuple and output each element\n    for element in combined_tup:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the input tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the union of the lists\n    union_list = list(set(list1 + list2))\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Convert the sorted list back to a tuple and return it\n    return tuple(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_len = max(max_len, len(lst[j]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        current_length = 0\n        for j in range(i, len(lst)):\n            current_length += 1\n            if j == len(lst)-1:\n                max_length = max(max_length, current_length)\n            else:\n                max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function finds the length of the longest sublists in a list.\n    '''\n\n    # Initialize the longest sublist length to zero\n    longest_sublist_length = 0\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # Initialize the current sublist length to zero\n        current_sublist_length = 0\n\n        # Loop through each element in the current sublist\n        for j in range(i, len(lst)):\n            # Add 1 to the current sublist length\n            current_sublist_length += 1\n\n            # Update the longest sublist length if the current sublist is longer\n            if current_sublist_length > longest_sublist_length:\n                longest_sublist_length = current_sublist_length\n\n    # Return the longest sublist length\n    return longest_sublist_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if lst[j] > lst[j-1]:  \n                max_length = max(max_length, j-i+1)  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    sublist_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, sublist_length)\n            sublist_length = current_length\n            current_length = 1\n    max_length = max(max_length, sublist_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1,len(lst)+1):  \n            sublist = lst[i:j]  \n            max_len = max(max_len, len(sublist))  \n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    max_length = 0  \n    current_length = 0  \n    for i in range(len(lst)):  \n        current_length += 1  \n        if current_length > max_length:  \n            max_length = current_length  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        max_length = max(max_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    temp = []\n    \n    for i in lst:\n        if i not in temp:\n            temp.append(i)\n            if len(temp) > max_length:\n                max_length = len(temp)\n        else:\n            temp.pop(temp.index(i))\n                \n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\"(.*?)\"') # regular expression pattern to match quotes\n    matches = pattern.findall(text) # find all matches of the pattern in the text\n    return matches # return a list of all the matched values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match any pair of quotes\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the values\n    values = []\n\n    # Loop through all matches and extract the values between quotes\n    for match in matches:\n        # Extract the value between the quotes\n        value = match.strip('\"')\n\n        # Add the extracted value to the values list\n        values.append(value)\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    # define regex pattern to extract values between quotation marks\n    pattern = re.compile(r'\"[^\"]+\"')\n\n    # find all matches using regex pattern\n    matches = pattern.findall(text)\n\n    # create a list to store extracted values\n    values = []\n\n    # loop through all matches and append their values to the values list\n    for match in matches:\n        value = match.replace('\"', '')\n        values.append(value)\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # Use the re.findall() method to find all matches of the pattern in the string\n    values = re.findall(pattern, text)\n    # Return a list of all extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")' # find all values between quotation marks\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")\\w+(?:(?=[,])\\s+(?=\\w+))*(?<!\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"|'[^']*|'[^']*[^\\\\]'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern for matching quotation marks\n    pattern = r'\".*?\"'\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Extract the values between the quotation marks and store them in a list\n    values = [match.strip('\"') for match in matches]\n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")([\\w ]+)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r\"(?<=\\\")(.*?)(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Count the number of pairs where both elements are equal\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize a variable to store the count of unordered pairs\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is equal to the next one\n        if arr[i] == arr[i+1]:\n            # If it is, increment the count of unordered pairs\n            count += 1\n\n    # Return the count of unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through the list of integers\n    for i in range(len(arr)):\n        # Iterate through the remaining list of integers\n        for j in range(i+1, len(arr)):\n            # Check if the current pair is not equal\n            if arr[i]!= arr[j]:\n                # Increment count variable\n                count += 1\n\n    # Return the count of unordered pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty list to store the characters\n    characters = []\n    # loop through each character in the string\n    for char in word:\n        # add the character to the list\n        characters.append(char)\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as an input and splits it into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n    # Iterate through each digit of the integer\n    for digit in str(n):\n        # Convert each digit to an integer\n        digit = int(digit)\n        # Add each integer to the sum of digits\n        digit_sum += digit\n    # Return the sum of digits\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through each digit in the integer and add it to the sum\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # loop through each character in the string\n    for digit in num_str:\n        # convert the character to an integer and add it to the sum of digits\n        sum_of_digits += int(digit)\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    # check if all elements are the same\n    if list1[0] == list1[-1]:\n        return True\n    # check if the list is sorted\n    for i in range(1, len(list1)-1):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # check if the first element is smaller than the last element\n    if list1[0] >= list1[-1]:\n        return False\n    \n    # recursively check if the list is sorted\n    return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the length of the list is less than or equal to 1\n    if len(list1) <= 1:\n        return True\n\n    # check if the first element is greater than or equal to the second element\n    if list1[0] >= list1[1]:\n        return False\n    \n    # recursively check the rest of the list\n    for i in range(1, len(list1)-1):\n        if list1[i] >= list1[i+1]:\n            return False\n        elif list1[i] <= list1[i+1]:\n            return False\n\n    # if no element is greater than the second element, the list is sorted\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n == 0 or n == 1:\n        return True\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Iterate through the list\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # If the loop completes without finding any inversions, the list is sorted\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Loop over each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in sort() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates from each list\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    # Remove duplicates from the entire list\n    unique_nums = list(set(unique_nums))\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    result = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in result:\n                result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert the list into a set to remove duplicates\n    unique_nums = set(nums)\n    # convert the set back into a list\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and removes duplicate numbers from each sublist.\n    '''\n    # initialize an empty list to store unique numbers\n    unique_nums = []\n\n    # iterate through each sublist in the original list\n    for sublist in nums:\n        # remove duplicates from the sublist using the set() method\n        unique_sublist = list(set(sublist))\n        # append the unique sublist to the list of unique numbers\n        unique_nums.append(unique_sublist)\n\n    # return the list of unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a list of lists where each inner list contains only two unique numbers.\n    \"\"\"\n    # Create a set to store unique numbers from the outer list\n    unique_nums = set(nums[0])\n    \n    # Iterate over the inner lists and remove duplicates from each inner list\n    for i in range(1, len(nums)):\n        unique_nums = unique_nums.intersection(set(nums[i]))\n    \n    # Convert the set back to a list of lists and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data)) # create a set of unique numbers from the input list\n    unique_product = 1 # initialize the product to 1\n    \n    # iterate over the unique numbers and multiply them together to get the product\n    for num in unique_list:\n        unique_product *= num\n    \n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Create a set of the unique numbers in the list\n    unique_set = set(list_data)\n\n    # Use the product() method of the set to calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of numbers and returns the product of the unique numbers.\n    \"\"\"\n    unique_numbers = sorted(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # convert the list to a set to remove duplicates\n    unique_list = set(list_data)\n\n    # calculate the product of the unique numbers in the set\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))  # convert the list to a set and back to a list to get the unique elements\n    unique_list.sort()  # sort the unique elements in ascending order\n    product = 1  # initialize the product variable to 1\n    \n    for num in unique_list:\n        product *= num  # multiply the product by each unique element\n    \n    return product  # return the product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and calculates the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data) # convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set of unique numbers in the list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Use the formula for the surface area of a cylinder\n    surface_area = 2 * (r**2) * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using the formula:\n    # A = \u03c0r^2 + 2\u03c0rh\n    return 2*math.pi*r**2 + 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area using the formula:\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * math.pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculating the surface area of the cylinder\n    surface_area = 2*pi*r*h + 2*pi*r**2\n    print(\"The surface area of the cylinder is:\", surface_area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h\n\ndef main():\n    r = float(input(\"Enter the radius of the cylinder: \"))\n    h = float(input(\"Enter the height of the cylinder: \"))\n    surface_area = surfacearea_cylinder(r,h)\n    print(\"The surface area of the cylinder is\", surface_area)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r**2 + 2 * 3.14 * h * r + 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2 * 3.14159 * r * r) + (2 * 3.14159 * r * h) + (2 * 3.14159 * h * h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \n    Args:\n        r (float): radius of the cylinder.\n        h (float): height of the cylinder.\n        \n    Returns:\n        float: the surface area of the cylinder.\n    \"\"\"\n    return 2*math.pi*r*r + 2*math.pi*r*h + 2*math.pi*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the surface area of the cylinder.\n    '''\n\n    area = 2 * 3.14159 * r * h  # Formula to calculate the surface area of a cylinder\n\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n\n    Args:\n        A: A list.\n        B: Another list.\n\n    Returns:\n        True if A is a sublist of B, else False.\n\n    '''\n\n    if len(A) >= len(B): \n\n        for i in range(len(B)): \n\n            if A[i] == B[i]: \n\n                if i == len(B)-1: \n\n                    return True \n\n                else: \n\n                    if A[i+1:] == B[i+1:]: \n\n                        return True \n                    else: \n\n                        return False \n\n    else: \n\n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    # Step 1\n    if not B:\n        return False\n    # Step 2\n    for a in A:\n        if a not in B:\n            return False\n        B.remove(a)\n    # Step 3\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the length of A is greater than or equal to B\n    if len(A) < len(B):\n        return \"False\"\n\n    # Initialize two pointers i and j, which will be used to traverse A and B\n    i = 0\n    j = 0\n\n    # Traverse A and B until i reaches the length of B\n    while i < len(A):\n\n        # If A[i] matches B[j], move j pointer ahead by one and increment i pointer by one\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n\n        # If j reaches the length of B, return True\n        elif j == len(B):\n            return \"True\"\n\n        # If A[i] does not match B[j], move j pointer back to the beginning of B and decrement i pointer by one\n        else:\n            j = 0\n            i -= 1\n\n    # If the loop completes without returning True, return False\n    return \"False\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n\n    return i == len(A)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B:\n        return True\n    if A[0] in B:\n        return is_Sub_Array(A[1:], B)\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check whether A is sublist of B or not\n    if len(B) > len(A): \n        return False \n\n    # Traverse through both lists\n    i = j = 0 \n    while i < len(A) and j < len(B): \n        if A[i] == B[j]: \n            i += 1 \n        j += 1 \n\n    # If all the elements of A are present in B then it is a sublist\n    if i == len(A): \n        return True \n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): \n        return False\n    else: \n        for i in range(len(A)): \n            if A[i] not in B: \n                return False\n        return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number n as input and returns the last digit of its factorial.\n    '''\n    # Check if n is positive or not\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    # Initialize factorial variable\n    factorial = 1\n    # Loop through n-1 digits\n    for i in range(n-1):\n        factorial *= 10\n    # Extract the last digit of factorial\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the number to a string\n    n = str(n)\n    \n    # Calculate the factorial of the number\n    fact = 1\n    for i in range(1, len(n)+1):\n        fact *= int(n[-i])\n    \n    # Find the last digit of the factorial\n    last_digit = fact % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Check if the input is a positive integer\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    \n    # Compute factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find the last digit of the factorial\n    last_digit = int(factorial % 10)\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial*n\n        n = n-1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # create an empty string to store the factorial digits\n    factorial_digits = \"\"\n    \n    # find the factorial of n and store its digits in a string\n    factorial_str = str(factorial(n))\n    \n    # extract the last digit of the factorial string and add it to the factorial_digits string\n    last_digit = int(factorial_str[-1])\n    factorial_digits += str(last_digit)\n    \n    return factorial_digits\n\ndef factorial(n):\n    \"\"\"\n    Calculate factorial of a given number n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert number to string and get last digit\n    last_digit = str(n)[-1]\n    # convert last digit to integer and find factorial\n    factorial = 1\n    for i in range(1, int(last_digit)+1):\n        factorial *= i\n    # return factorial\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string to find the last digit\n    factorial_str = str(n)\n    last_digit = int(factorial_str[-1])\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of n \n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i\n    \n    # Extract the last digit of the factorial \n    last_digit = factorial % 10\n    \n    # Return the last digit \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit in the factorial of the number.\n    '''\n    # converting the number to a string\n    num_str = str(n)\n    # finding the length of the string\n    length = len(num_str)\n    # finding the last digit of the factorial\n    last_digit_factorial = int(num_str[length-1])\n    # returning the last digit of the factorial\n    return last_digit_factorial\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the maximum length of all three lists\n    max_length = max(len(list1), len(list2), len(list3))\n\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Loop through the maximum length of all three lists\n    for i in range(max_length):\n        # Append the value from the first list\n        interleaved_list.append(list1[i] if i < len(list1) else None)\n        # Append the value from the second list\n        interleaved_list.append(list2[i] if i < len(list2) else None)\n        # Append the value from the third list\n        interleaved_list.append(list3[i] if i < len(list3) else None)\n\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if the lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        return None\n    \n    # Initialize an empty list to store the interleaved values\n    interleaved_list = []\n    \n    # Iterate through the lists and append their values to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the maximum length of the input lists\n    max_length = max(len(list1), len(list2), len(list3))\n    \n    # Initialize an empty list to store the interleaved result\n    result = []\n    \n    # Loop through the lists and append the elements to the result\n    for i in range(max_length):\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    \n    # Return the interleaved result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the final interleaved list\n    interleaved_list = []\n\n    # loop through each list and add the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # return the final interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # initialize a variable to keep track of the index of the first list\n    index1 = 0\n    # initialize a variable to keep track of the index of the second list\n    index2 = 0\n    # initialize a variable to keep track of the index of the third list\n    index3 = 0\n    # loop through each element in the first list\n    while index1 < len(list1):\n        # add the element at the current index of the first list to the interleaved list\n        interleaved_list.append(list1[index1])\n        # increment the index of the first list\n        index1 += 1\n        # if the index of the first list is equal to the length of the second list,\n        # move on to the next element in the second list\n        if index1 == len(list1):\n            # add the element at the current index of the second list to the interleaved list\n            interleaved_list.append(list2[index2])\n            # increment the index of the second list\n            index2 += 1\n            # if the index of the second list is equal to the length of the third list,\n            # move on to the next element in the third list\n            if index2 == len(list2):\n                # add the element at the current index of the third list to the interleaved list\n                interleaved_list.append(list3[index3])\n                # increment the index of the third list\n                index3 += 1\n                # reset the indices to 0 for the next iteration\n                index1 = 0\n                index2 = 0\n                index3 = 0\n    # return the interleaved list\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Concatenate the three lists into a single list\n    interleaved_list = list1 + list2 + list3\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"The given tuples have different lengths.\"\n    \n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Check if the elements are equal\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    # If there are no dissimilar elements, return an empty list\n    if len(dissimilar_elements) == 0:\n        return []\n    \n    # Otherwise, return the list of dissimilar elements\n    else:\n        return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # Loop through the first tuple and check if each element is present in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            # If it's not, add it to the dissimilar list\n            dissimilar_elements.append(element)\n    # Return the dissimilar list\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_set = set(test_tup1) ^ set(test_tup2)\n    return diff_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar_list.append(item)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it's not, append it to the list of dissimilar elements\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i, item in enumerate(test_tup1):\n        if item!= test_tup2[i]:\n            dissimilar_elements.append(item)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Create a dictionary to store the number of occurrences of each element in the first tuple\n    num_occurrences = {}\n    for elem in test_tup1:\n        if elem in num_occurrences:\n            num_occurrences[elem] += 1\n        else:\n            num_occurrences[elem] = 1\n    \n    # Create another dictionary to store the number of occurrences of each element in the second tuple\n    num_occurrences_2 = {}\n    for elem in test_tup2:\n        if elem in num_occurrences_2:\n            num_occurrences_2[elem] += 1\n        else:\n            num_occurrences_2[elem] = 1\n    \n    # Find the elements in the first tuple that are not present in the second tuple\n    for elem in test_tup1:\n        if elem not in num_occurrences_2:\n            return elem\n    \n    # Find the elements in the second tuple that are not present in the first tuple\n    for elem in test_tup2:\n        if elem not in num_occurrences:\n            return elem\n    \n    # If both dictionaries are empty, there are no dissimilar elements\n    return None"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        even_list = []\n        for item in test_tuple:\n            if isinstance(item, tuple):\n                even_list.extend(even_ele(item, even_fnc))\n            elif even_fnc(item):\n                even_list.append(item)\n        return even_list\n    else:\n        return [test_tuple]\n\ndef is_even(x):\n    return x % 2 == 0\n\nmixed_tuple = (1, (2, (3, (4, 5))), 6, 7, 8)\n\nresult = even_ele(mixed_tuple, is_even)\n\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for sub_tuple in test_tuple:\n        for item in sub_tuple:\n            if even_fnc(item):\n                result_tuple.append(item)\n    return result_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(elem) for elem in test_tuple if even_fnc(elem)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # loop through each element in the tuple\n    for elem in test_tuple:\n        # check if the element is a tuple, list, or set\n        if isinstance(elem, (tuple, list, set)):\n            # if it is, recursively call the function with the nested element\n            even_ele(elem, even_fnc)\n        else:\n            # if it's not, check if it's even using the provided function\n            if even_fnc(elem):\n                # if it is, add it to a new list of even elements\n                even_list.append(elem)\n    # return the new list of even elements\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    This function takes a nested mixed tuple as input, and returns a new tuple with only the even elements.\n    The even_fnc argument is a function that takes a single element from the tuple and returns True if it's even,\n    and False otherwise.\n    '''\n    even_tuple = []\n    for sub_tuple in test_tuple:\n        for elem in sub_tuple:\n            if even_fnc(elem):\n                even_tuple.append(elem)\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x):\n        return x % 2 == 0\n\n    def flatten(x):\n        return [y for y in x if isinstance(y, (list, tuple))]\n\n    def is_nested(x):\n        return any(isinstance(y, (list, tuple)) for y in x)\n\n    flattened_tuple = flatten(test_tuple)\n\n    if is_nested(flattened_tuple):\n        nested_list = []\n        for x in flattened_tuple:\n            nested_list.extend(even_ele(x, even_fnc))\n        return flatten(nested_list)\n    else:\n        return [even_fnc(x) for x in flattened_tuple if is_even(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = [even_fnc(t) for t in test_tuple] # apply even_fnc to each tuple element and store in a new list\n    return tuple(filter(lambda x: type(x) == tuple, even_tuple)) # filter out uneven tuples and return as a tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(x) for x in test_tuple if even_fnc(x)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for sublist in test_tuple:\n        for item in sublist:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            filtered_tuple.extend(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            filtered_tuple.append(elem)\n    return filtered_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of each side of the pyramid\n    side1 = b*s\n    side2 = b*s\n    side3 = (b*s)**2\n    # calculate the surface area of the base of the pyramid\n    base = 2*b*s\n    # calculate the surface area of the pyramid\n    surface_area = (side1+side2+side3)/2 + base\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + b*b + s*s + s*b \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid with the given base and height.\n\n    Args:\n        base (float): the length of the base of the pyramid.\n        height (float): the height of the pyramid.\n\n    Returns:\n        float: the surface area of the pyramid.\n    \"\"\"\n    # Calculate the area of the base\n    area_base = 0.5 * base * height\n    # Calculate the area of the pyramid\n    area_pyramid = 0.5 * base * (height * height + base * base)\n    # Calculate the total surface area\n    surface_area = area_base + area_pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2*b*s + 2*(b*s)**2 + 2*b**2*s + b**2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s**2 \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    This function takes in two parameters, base and height, which represent the length and height of a square pyramid respectively.\n    It then returns the surface area of the pyramid as a floating point number.\n    \"\"\"\n    area = (base * height) + (base * (height ** 2)) + (height * (base ** 2))\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 6 * b * s + 2 * (b * s + s * b)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s * s\n    print(\"The surface area of the pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in two arguments:\n    b: base edge of the square pyramid\n    s: height of the square pyramid\n    \n    The function returns the surface area of the square pyramid.\n    \n    The formula for the surface area of a square pyramid is:\n    surface area = 2 * (b^2 + s^2)\n    '''\n    surface_area = 2 * (b**2 + s**2)\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n\n    Args:\n        n: An integer. The value of n.\n\n    Returns:\n        The nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n\n    The Catalan number is a number related to the binomial coefficient. It is equal to the sum of the binomial coefficients of all possible arrangements of n items from a set of k items.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    c = 1\n    for i in range(1, n+1):\n        c = (c * i) // (i - 1)\n    return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize a list to store the catalan numbers\n    catalan_numbers = []\n    \n    # Calculate the first catalan number\n    catalan_numbers.append(1)\n    \n    # Calculate the remaining catalan numbers\n    for i in range(1, n+1):\n        catalan_numbers.append(catalan_numbers[i-1] + catalan_numbers[i-2])\n        \n    # Return the nth catalan number\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c += catalan_number(i) * catalan_number(n-i-1)\n        return c"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Catalan numbers do not exist for negative integers.\")\n\n    catalan = [1]\n    for i in range(1, n+1):\n        total = 0\n        for j in range(i):\n            total += catalan[j] * catalan[i-j-1]\n        catalan.append(total)\n    return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [0] * (n+1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n    for i in range(2, n+1):\n        catalan_numbers[i] = 0\n        for j in range(i):\n            catalan_numbers[i] += catalan_numbers[j] * catalan_numbers[i-j-1]\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += i * catalan_number(n-i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(1, num+1):\n        catalan.append(sum([catalan[j] * (2*j-1) / (i+j) for j in range(i)]))\n    return catalan[num]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'(\\b)(ly)(\\b)'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None\n\ntext = \"The quick brown fox jumped over the lazy dog. The dog slept all day.\"\nresult = find_adverbs(text)\nif result:\n    print(\"The first adverb ending with 'ly' is:\", result[0])\n    print(\"It occurs at position:\", result[1])\nelse:\n    print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w*ly\\b'\n    \n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # If there are matches, return a list of tuples containing the matched adverb and its positions\n    if matches:\n        return [(match, text.find(match)) for match in matches]\n    else:\n        return []"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    # matches all occurrences of pattern in text and returns a list of tuples\n    matches = re.findall(pattern, text)\n    # iterate through matches and return a list of tuples with positions and values of matches\n    return [(match.start(), match.group()) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression to match adverbs ending with 'ly'\n    pattern = r'\\b[a-z]+ly\\b'\n    # Use re.findall() to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Loop over the matches and return a list of their positions\n    result = []\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((start, end))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[aeiou]\\w*ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n    # Loop through each match found and add the adverb and its position to the adverbs list\n    for match in matches:\n        # Use the start() and end() methods of the match object to get the start and end positions of the match\n        start = match.start()\n        end = match.end()\n        # Append the adverb and its positions to the adverbs list\n        adverbs.append((text[start:end], (start, end)))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]+ly\\b'\n    # Use re.finditer() to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Initialize a list to store the positions of the matches\n    positions = []\n    # Loop through the matches and store their positions in the list\n    for match in matches:\n        positions.append(match.start())\n    # Return the list of positions of the matches\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # find all the adverbs ending with \"ly\"\n    adverbs = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    # initialize an empty list to store their positions\n    positions = []\n    # iterate over the adverbs and find their positions in the text\n    for i, adv in enumerate(adverbs):\n        positions.append((adv, text.find(adv)))\n    # sort the positions list by their positions in the text\n    positions.sort(key=lambda x: x[1])\n    # return the sorted list of adverbs and their positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regex pattern to match adverbs ending with ly\n    pattern = r'\\b\\w*ly\\b'\n\n    # Find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb and its positions in the text\n    return [(m, text.index(m)) for m in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\b\\w+ly\\b\"\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start = text.find(match)\n            end = start + len(match)\n            print(f\"{match} found at positions {start} and {end}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order based on their cost\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Create a max heap of size n\n    max_heap = []\n\n    # Iterate through the sorted items and add the cheapest n items to the max heap\n    for item in sorted_items[:n]:\n        heapq.heappush(max_heap, item[0])\n\n    # Extract the n most expensive items from the max heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n\n    # Add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Iterate over the remaining items and add them to the heap, maintaining the heap property\n    for item in items[n:]:\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    max_heap = [(-x[1], x[0]) for x in items]  # create a max heap with negative prices\n    heapq.heapify(max_heap)  # convert the max heap into a heap\n\n    for i in range(n):\n        # heapq.heappop() returns the smallest item in the heap, so we can use it to get the n-th highest price\n        heapq.heappop(max_heap)  # remove the smallest item from the heap\n\n    return [x[1] for x in max_heap]  # convert the max heap back into a list of items and return it\n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a max heap of size n to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    # return the n most expensive items in the dataset\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of items to be sorted and sliced.\n        n (int): The number of items to find.\n\n    Returns:\n        list: The n most expensive items in the dataset.\n    \"\"\"\n    # Use heapq to sort the dataset in descending order\n    heapq.heapify(items)\n    # Remove the top n items from the heap\n    return heapq.nsmallest(n, items)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n.\n    It returns a list of the n most expensive items in the dataset.\n    '''\n    # Initialize a min heap with a maximum heap of size n\n    min_heap = [-price for price in items][:n]\n    heapq.heapify(min_heap)\n\n    # Pop the n smallest items from the heap\n    top_items = [heapq.heappop(min_heap) for _ in range(n)]\n\n    # Return the top items in descending order\n    return sorted(top_items, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, -item)\n\n    # Return the n most expensive items\n    return [-heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of the n items with the lowest prices\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item[1])\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n items with the highest prices from the min heap\n    result = [items[i] for i in min_heap]\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n and returns a list of the n most expensive items in the list.\n\n    Args:\n        items: A list of items to search for the most expensive items.\n        n: An integer specifying the number of items to return.\n\n    Returns:\n        A list of the n most expensive items in the input list.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # Add each item to the heap with its corresponding price\n        heapq.heappush(min_heap, (-item[1], item))\n        # If the heap is full, remove the least expensive item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        # Extract the least expensive item from the heap and add it to the result list\n        result.append(heapq.heappop(min_heap)[1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l + split_Arr(l, n+1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return None\n    \n    first = l[:n]\n    last = l[n:]\n    \n    return first + last"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"List must contain at least {} elements\".format(n)\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = len(l) // 2\n    if mid < n:\n        return \"Error: The element to be added is not present in the list.\"\n    else:\n        first_part = l[:mid]\n        second_part = l[mid:]\n        new_list = first_part + [n] + second_part\n        return new_list\n"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < len(l):\n        return [l[n]] + l[:n]\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if isinstance(l, list):\n        mid = len(l) // 2\n        if n == mid:\n            return l + [l[:n]]\n        elif n < mid:\n            return split_Arr(l[:n], n)\n        else:\n            return split_Arr(l[n:], n-mid)\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    last_part = l[n:]\n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 0:\n        return [l]\n    else:\n        mid = len(l) // 2\n        left = split_Arr(l[:mid], n-1)\n        right = split_Arr(l[mid:], n-1)\n        return left + right"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between max and min\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    elif len(nums) == 2:\n        return abs(nums[0] - nums[1])\n    else:\n        min_num = min(nums)\n        max_num = max(nums)\n        return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(int(a**0.5) + 1):\n        for j in range(int(b**0.5) + 1):\n            square = i**2 + j**2\n            if square == a and i**2 + j**2 == b:\n                perfect_squares.append([i, j])\n            elif square == b and i**2 + j**2 == a:\n                perfect_squares.append([i, j])\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of perfect squares between a and b\n    squares = []\n    for num in range(int(a**0.5)+1, int(b**0.5)+1):\n        if num**2 == a or num**2 == b:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return [a]\n    \n    squares = []\n    for i in range(int(a**0.5)+1):\n        if a**2 - i**2 == b:\n            squares.append(i**2)\n        elif a**2 - i**2 > b:\n            break\n    \n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function finds all the perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a:\n            print(f'{i} is a perfect square.')\n        elif i**2 == b:\n            print(f'{i} is a perfect square.')\n        else:\n            print(f'{i} is not a perfect square.')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    # Loop through the range of values between a and b\n    for i in range(int(a), int(b) + 1):\n        # Calculate the square root of the current number\n        square = int(i**(0.5))\n        # Check if the square is a perfect square\n        if i == square**2:\n            # Append the perfect square to the list of perfect squares\n            squares.append(square)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == i: # check if square is an integer\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize variables\n    low = min(a, b)\n    high = max(a, b)\n    perfect_square_numbers = []\n\n    # loop through numbers between low and high\n    while low <= high:\n        # check if number is perfect square\n        num = low * low\n        if num == low:\n            perfect_square_numbers.append(num)\n        elif num == high:\n            perfect_square_numbers.append(num)\n        else:\n            # check if number is divisible by low or high\n            if num % low == 0 or num % high == 0:\n                perfect_square_numbers.append(num)\n        # increment low and high\n        low += 1\n        high -= 1\n\n    # return perfect square numbers\n    return perfect_square_numbers"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Use binary search to find the smallest perfect square larger than a\n    left, right = 0, b\n    while left <= right:\n        mid = (left + right) // 2\n        # Check if the mid value is a perfect square\n        if mid * mid == mid:\n            # If it is, check if it's greater than a\n            if mid > a:\n                # If it is, return mid\n                return mid\n            # If it's not, move the right boundary to mid - 1\n            else:\n                right = mid - 1\n        # If the mid value is not a perfect square, move the left boundary to mid + 1\n        else:\n            left = mid + 1\n    # If no perfect square is found, return None\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a dictionary to store perfect squares\n    squares = {}\n    # loop through all the numbers between a and b\n    for num in range(a, b+1):\n        # check if the square of the number is between a and b\n        square = num*num\n        if square <= b and square >= a:\n            # if the square is between a and b, add it to the dictionary\n            squares[num] = square\n    # print the perfect squares between a and b\n    print(\"Perfect squares between\", a, \"and\", b, \"are:\", squares)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert the polar coordinate to rectangular coordinate using the formula:\n    # x = r*cos(theta)\n    # y = r*sin(theta)\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    # Return the rectangular coordinate as a tuple\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): The distance from the origin in the radial coordinate system.\n        theta (float): The angle in the polar coordinate system.\n\n    Returns:\n        A tuple (x, y) representing the rectangular coordinates of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n        x (float): The radius of the point.\n        y (float): The angle of the point in radians.\n\n    Returns:\n        tuple: A tuple containing the x-coordinate and y-coordinate of the point in rectangular coordinates.\n    \"\"\"\n    rect_x = x * cmath.cos(y)\n    rect_y = x * cmath.sin(y)\n    return (rect_x.real, rect_y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates\n    \n    Parameters:\n    r (float): The magnitude of the complex number\n    theta (float): The angle of the complex number in radians\n    \n    Returns:\n    complex: The complex number in rectangular coordinates\n    \n    \"\"\"\n    \n    return r*cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the radius and angle (in radians) of a point in the polar coordinate system \n    and returns the corresponding x and y coordinates in the rectangular coordinate system.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    \n    Parameters:\n    x (float): The radius of the circle\n    y (float): The angle of the point in the circle\n    \n    Returns:\n    tuple: The rectangular coordinates (x,y)\n    '''\n    return (x*cmath.cos(y), x*cmath.sin(y))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is of length 1 or less\n    if len(newList) <= 1:\n        return newList\n    else:\n        # Interchange the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # first and last index of the list\n    first_index = 0\n    last_index = len(newList) - 1\n\n    # swap the first and last elements\n    temp = newList[first_index]\n    newList[first_index] = newList[last_index]\n    newList[last_index] = temp\n\n    # print the list\n    print(\"After swapping the first and last elements:\")\n    print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # Swap the first and last elements in the list\n    first_last = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = first_last\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n    for i in range(k,n+1):\n        coeff *= i\n        sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the sum to 0\n    sum = 0\n\n    # iterate from k to n\n    for i in range(k, n+1):\n        # calculate the binomial coefficient of i and k\n        coeff = factorial(i) // (factorial(k) * factorial(i-k))\n\n        # add the coefficient to the sum\n        sum += coeff\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    sum_coeff = 0\n    for i in range(1, n+1):\n        coeff *= i\n        if i >= k:\n            sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + n*binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize variables to store the sum and product of binomial coefficients\n    sum_coefficients = 0\n    product_coefficients = 1\n\n    # Loop through the first k terms of the sum and product\n    for i in range(k):\n        # Calculate the next binomial coefficient\n        next_coefficient = (n + 1) // 2 * (k - i) // i * (2 * i + 1) // (i + 1)\n\n        # Add the next binomial coefficient to the sum and product\n        sum_coefficients += next_coefficient\n        product_coefficients *= next_coefficient\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return sum_coefficients"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        print(\"Error: k must be less than or equal to n.\")\n        return\n    \n    sum_prod = 0\n    for i in range(k, n+1):\n        sum_prod += i * binomial_Coeff(n-i+1, k-1)\n    \n    return sum_prod\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables for sum of consecutive products and count of consecutive products\n    sum_consecutive_products = 0\n    count_consecutive_products = 0\n\n    # Loop through all possible combinations of consecutive binomial coefficients\n    for i in range(n - k + 1):\n        # Calculate the binomial coefficient for the current combination\n        binomial_coeff = (n - i + 1) * binomial_Coeff(n - 1, k - 1) // (k - 1)\n\n        # Add the binomial coefficient to the sum of consecutive products\n        sum_consecutive_products += binomial_coeff\n\n        # Increment the count of consecutive products\n        count_consecutive_products += 1\n\n    # Return the sum of consecutive products divided by the count of consecutive products\n    return sum_consecutive_products / count_consecutive_products"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match all ip addresses\n    ip_regex = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    \n    # Check if the input is valid ip address\n    if not re.match(ip_regex, ip):\n        return None\n    \n    # Remove leading zeroes from each octet of the ip address\n    ip = re.sub(r'^\\d*[0].*?\\.', '', ip)\n    \n    # Remove leading zeroes from the ip address\n    return re.sub(r'^\\d*[0].*?\\.', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    if pattern.match(ip):\n        ip_split = ip.split('.')\n        ip_no_zero = []\n        for i in ip_split:\n            if i!= '0':\n                ip_no_zero.append(i)\n        return '.'.join(ip_no_zero)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'(\\d)\\1{2,}'\n    return re.sub(pattern, r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'[0-9]+', ip)\n    ip_list.reverse()\n    ip = ''\n    for num in ip_list:\n        ip = ip + num\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define a regular expression pattern to match leading zeroes in an ip address\n    pattern = r'^(0){3}(.*)$'\n    # use re.match() function to match the pattern in the ip address\n    match = re.match(pattern, ip)\n    # if match is not None, then there is a match and we can extract the non-zero characters\n    if match:\n        non_zero_chars = match.group(2)\n        # return the non-zero characters without the leading zeroes\n        return non_zero_chars\n    # if no match is found, return the original ip address as it is\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from ip address using regular expressions\n    ip_no_zero = re.sub('^0+', '', ip)\n    return ip_no_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d+\\.){3}\\d+$'\n    if re.match(pattern, ip):\n        return re.sub(r'^(0+)', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n\n    # Loop through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n\n    # If both even and odd numbers are present, find the difference\n    if even is not None and odd is not None:\n        diff = even - odd\n        return diff\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    for i in range(len(list1)):\n        if i == 0:\n            if list1[i] % 2 == 0:\n                print(\"The first even number is:\", list1[i])\n            else:\n                print(\"The first odd number is:\", list1[i])\n        else:\n            if list1[i] % 2 == 0:\n                if list1[i] % 2 == list1[i-1] % 2:\n                    print(\"The difference between the first even and the second even number is:\", abs(list1[i]-list1[i-1]))\n                else:\n                    print(\"The difference between the first even and the first odd number is:\", abs(list1[i]-list1[i-1]))\n            else:\n                if list1[i] % 2 == list1[i-1] % 2:\n                    print(\"The difference between the first odd and the second even number is:\", abs(list1[i]-list1[i-1]))\n                else:\n                    print(\"The difference between the first odd and the first odd number is:\", abs(list1[i]-list1[i-1]))"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize even and odd variables\n    even = 0\n    odd = 0\n    # iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    # return the difference of even and odd numbers\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        diff = even_num - odd_num\n    else:\n        diff = odd_num - even_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return \"The list is empty\"\n    \n    first_even = list1[0]\n    first_odd = list1[1]\n    \n    if first_even % 2 == 0 and first_odd % 2 == 1:\n        return first_even - first_odd\n    elif first_even % 2 == 1 and first_odd % 2 == 0:\n        return first_even - first_odd\n    else:\n        return \"No even and odd numbers found\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # find the first even number\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n    \n    # find the first odd number\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n    \n    # find the difference of the two numbers\n    diff = list1[even_index] - list1[odd_index]\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n            else:\n                return first_even - num\n        elif first_odd is None:\n            first_odd = num\n        else:\n            return first_odd - num\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0 and count == 0:\n            even_num = list1[i]\n            count += 1\n        elif list1[i] % 2 == 1 and count == 1:\n            odd_num = list1[i]\n            break\n    return odd_num - even_num\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize two variables to store the even and odd numbers, respectively\n    even = None\n    odd = None\n    # Iterate over the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2!= 0 and odd is None:\n            odd = num\n    # If the list has no even or odd numbers, return None\n    if even is None or odd is None:\n        return None\n    # Return the difference between the even and odd numbers\n    return abs(even - odd)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of digits\n    digit_list1 = [int(i) for i in list(str1)]\n    digit_list2 = [int(i) for i in list(str2)]\n    \n    # Initialize counters for digits that match and digits that don't match\n    match_count = 0\n    no_match_count = 0\n    \n    # Compare each digit in the binary strings\n    for i in range(len(digit_list1)):\n        if digit_list1[i] == digit_list2[i]:\n            match_count += 1\n        else:\n            no_match_count += 1\n    \n    # Return the minimum number of swaps required\n    return min(match_count, no_match_count)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to the other.\n    \"\"\"\n\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of bits in each binary number\n    num1_bits = len(bin(num1)[2:])\n    num2_bits = len(bin(num2)[2:])\n\n    # Calculate the minimum number of swaps required to convert num1 to num2\n    min_swaps = 0\n    for i in range(max(num1_bits, num2_bits)):\n        if num1 & (1 << i)!= num2 & (1 << i):\n            min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to lists\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # compare the lists\n    i = 0\n    j = 0\n    count = 0\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            i += 1\n            count += 1\n        elif list1[i] > list2[j]:\n            j += 1\n            count += 1\n        else:\n            i += 1\n            j += 1\n\n    # return the minimum number of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the input strings to binary strings\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # create a table to store the minimum number of swaps required to convert each binary string to another\n    table = [[0] * (len(binary2) + 1) for _ in range(len(binary1) + 1)]\n\n    # fill the table using dynamic programming approach\n    for i in range(1, len(binary1) + 1):\n        for j in range(1, len(binary2) + 1):\n            if binary1[i - 1] == binary2[j - 1]:\n                table[i][j] = table[i - 1][j - 1]\n            else:\n                table[i][j] = min(table[i - 1][j], table[i][j - 1]) + 1\n\n    # find the minimum number of swaps required\n    min_swaps = table[-1][-1]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert binary numbers to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize variables for swap count and swapping steps\n    count = 0\n    swaps = 0\n\n    # Compare binary numbers from right to left\n    while int1!= int2:\n        # If there is a swap\n        if int1 > int2:\n            # Swap bits of int1 and int2\n            int1 = int1 ^ int2\n            int2 = int1 ^ int2\n            int1 = int1 ^ int2\n\n            # Increment swap count\n            count += 1\n\n            # Increment swapping steps\n            swaps += 1\n\n        # If there is no swap\n        else:\n            # Increment int1\n            int1 = int1 << 1\n\n    # Return minimum number of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Check if both strings are of same length\n    if len(str1)!= len(str2):\n        return \"Both strings must have same length.\"\n\n    # Initialize a dictionary to store the count of each character in str1\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a dictionary to store the count of each character in str2\n    char_count_2 = {}\n    for char in str2:\n        if char in char_count_2:\n            char_count_2[char] += 1\n        else:\n            char_count_2[char] = 1\n\n    # Loop through each character in the dictionary of str1 and str2 and count the number of swaps required\n    swaps = 0\n    for char in char_count:\n        if char not in char_count_2 or char_count[char] > char_count_2[char]:\n            swaps += char_count[char] - char_count_2[char]\n        elif char_count[char] < char_count_2[char]:\n            swaps += char_count_2[char] - char_count[char]\n\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    arr1 = [0] * n\n    arr2 = [0] * n\n\n    # Convert the binary strings to arrays\n    for i in range(n):\n        arr1[i] = int(str1[i])\n        arr2[i] = int(str2[i])\n\n    # Initialize two pointers for swapping\n    i = 0\n    j = 0\n\n    # Initialize minimum swaps\n    min_swaps = n\n\n    # Initialize a variable to keep track of the maximum possible value of arr1\n    max_value = 1\n\n    # Iterate through the binary strings and swap values if they are not equal\n    while i < n and j < n:\n        if arr1[i]!= arr2[j]:\n            # If arr1[i] is greater than arr2[j], swap them\n            if arr1[i] > arr2[j]:\n                if i == j:\n                    # If i and j are equal, we cannot swap them\n                    min_swaps = min(min_swaps, n - i)\n                else:\n                    # If i and j are not equal, swap them\n                    arr1[i], arr1[j] = arr1[j], arr1[i]\n                    arr2[i], arr2[j] = arr2[j], arr2[i]\n                    min_swaps = min(min_swaps, n - i)\n                    min_swaps = min(min_swaps, n - j)\n                    i += 1\n                    j += 1\n            # If arr1[i] is less than arr2[j], swap them\n            else:\n                if i == j:\n                    # If i and j are equal, we cannot swap them\n                    min_swaps = min(min_swaps, n - i)\n                else:\n                    # If i and j are not equal, swap them\n                    arr1[i], arr1[j] = arr1[j], arr1[i]\n                    arr2[i], arr2[j] = arr2[j], arr2[i]\n                    min_swaps = min(min_swaps, n - i)\n                    min_swaps = min(min_swaps, n - j)\n                    i += 1\n                    j += 1\n        else:\n            i += 1\n            j += 1\n\n    # If the strings are not equal, swap the remaining values\n    while i < n:\n        if arr1[i]!= arr2[j]:\n            if arr1[i] > arr2[j]:\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                min_swaps = min(min_swaps, n - i)\n                min_swaps = min(min_swaps, n - j)\n                i += 1\n                j += 1\n            else:\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                min_swaps = min(min_swaps, n - i)\n                min_swaps = min(min_swaps, n - j)\n                i += 1\n                j += 1\n        else:\n            i += 1\n            j += 1\n\n    # If there is a remaining value in arr1, swap it with the last value in arr2\n    while i < n:\n        if arr1[i]!= arr2[j]:\n            if arr1[i] > arr2[j]:\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                min_swaps = min(min_swaps, n - i)\n                min_swaps = min(min_swaps, n - j)\n                i += 1\n                j += 1\n            else:\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                min_swaps = min(min_swaps, n - i)\n                min_swaps = min(min_swaps, n - j)\n                i +="
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    str1 = str1.replace(\" \", \"\") # removing space from string\n    str2 = str2.replace(\" \", \"\") # removing space from string\n    n = len(str1)\n    m = len(str2)\n\n    if n!= m:\n        print(\"Both strings should have same length\")\n        return\n\n    if str1[0] == str2[0]:\n        return 1\n    elif str1[0] == \"0\":\n        return min_Swaps(str1[1:], str2) + 1\n    else:\n        return min_Swaps(str1, str2[1:]) + 1"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize variables\n    size = 0\n\n    # Loop through each tuple in the list\n    for tup in tuple_list:\n        # Calculate the size of the tuple in bytes\n        tup_size = sys.getsizeof(tup)\n\n        # Add the size of the tuple to the total size\n        size += tup_size\n\n    # Return the total size in bytes of all tuples\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a byte string\n    byte_string = bytearray(tuple(tuple_list))\n    # Get the length of the byte string\n    length = len(byte_string)\n    # Return the size in bytes\n    return length"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size\n\nif __name__ == '__main__':\n    # Example usage:\n    tuple_list = (1, 2, 3, (4, 5, 6), 7, 8, 9)\n    size = tuple_size(tuple_list)\n    print(f'Size of the given tuple: {size} bytes')"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for elem in tuple_list:\n        size += sys.getsizeof(elem)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if not isinstance(tuple_list, tuple):\n        raise TypeError('The input must be a tuple.')\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to bytes object\n    bytes_object = sys.getsizeof(tuple_list)\n    return bytes_object"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    n1, n2 = len(arr1), len(arr2)\n\n    # find the position of kth element in arr1\n    while i < n1 and j < n2 and k > 0:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        k -= 1\n\n    # check if kth element is present in arr1\n    if i == n1 and k == 0:\n        return arr1[i-1]\n\n    # check if kth element is present in arr2\n    if j == n2 and k == 0:\n        return arr2[j-1]\n\n    # if kth element is not present, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            elif k < 0:\n                return find_kth(arr1[:i], arr2[j:], k)\n            else:\n                return find_kth(arr1[i+1:], arr2, k)\n\n    if k < 0:\n        return find_kth(arr1[:i], arr2[j:], k)\n    else:\n        return find_kth(arr1[i:], arr2, k)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    # find the length of the smallest array\n    n1 = len(arr1)\n    n2 = len(arr2)\n    n = n1 if n1 < n2 else n2\n\n    # merge the two arrays\n    merged_arr = []\n    i = j = 0\n\n    while i < n1 and j < n2:\n        if arr1[i] <= arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n\n    # add the remaining elements from arr1 or arr2\n    while i < n1:\n        merged_arr.append(arr1[i])\n        i += 1\n    while j < n2:\n        merged_arr.append(arr2[j])\n        j += 1\n\n    # if k is greater than or equal to the length of the merged array, return None\n    if k >= len(merged_arr):\n        return None\n\n    # return the kth element from the merged array\n    return merged_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < k or len(arr2) < k:\n        return None\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    return None if i == len(arr1) else arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three arguments:\n    arr1: a list of integers\n    arr2: a list of integers\n    k: an integer representing the position of the kth element in the two sorted arrays\n\n    This function returns the kth element from the two sorted arrays.\n    \"\"\"\n    # Check if the two arrays are already sorted\n    if arr1[len(arr1)-1] >= arr2[len(arr2)-1]:\n        arr1.reverse()\n    else:\n        arr2.reverse()\n    \n    # Find the kth element in the two sorted arrays\n    for i in range(len(arr1)):\n        if arr1[i] == k:\n            return arr1[i]\n        elif arr1[i] < k:\n            if i == len(arr1) - 1:\n                return None\n            elif arr1[i+1] == k:\n                return arr1[i+1]\n    \n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both arrays must have the same length.\")\n    elif k < 1 or k > len(arr1):\n        raise ValueError(\"K must be between 1 and the length of the array.\")\n    else:\n        # Initialize two pointers for each array\n        i = j = 0\n\n        # Traverse the arrays until one pointer reaches the end\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] <= arr2[j]:\n                i += 1\n            else:\n                j += 1\n\n        # Return the element at index k - 1 in the first array\n        return arr1[i - 1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the given number to a string\n    number = str(number)\n    # initialize the sum to zero\n    sum = 0\n    # convert the number to a list of digits\n    digits = [int(d) for d in number]\n    # loop through the digits of the number\n    for digit in digits:\n        # calculate the power of the digit and add it to the sum\n        power = 1\n        while power <= digit:\n            sum += power**digit\n            power += 1\n    # check if the sum of the digits of the number is equal to the original number\n    if sum == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        if number == sum:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    '''\n    Helper function to check whether a number is armstrong or not.\n    '''\n    # Convert the number to a string to avoid integer division issues\n    number_str = str(number)\n    # Calculate the sum of the squares of the digits\n    sum_of_squares = sum(int(digit) ** len(number_str) for digit in number_str)\n    # Check if the sum of the squares is equal to the original number\n    return sum_of_squares == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function checks whether a number is armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    n = len(num_str)\n    sum_of_cubes = 0\n    for i in range(n):\n        power = len(num_str) - i - 1\n        cube = num_str[i]**power\n        sum_of_cubes += cube\n    if sum_of_cubes == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    num = n\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return n == sum\n\nprint(is_armstrong(153)) # True\nprint(is_armstrong(370)) # False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize variables to store the number's digits and the sum of the digits raised to the power of the number of digits\n    digits = [int(digit) for digit in str(number)]\n    power = len(digits)\n\n    # calculate the sum of the digits raised to the power of the number of digits\n    armstrong_sum = sum([digit ** power for digit in digits])\n\n    # compare the sum with the original number\n    if armstrong_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(number)]\n\n    # calculate the sum of the digits raised to the power of the number of digits\n    total = sum(digit**len(digits) for digit in digits)\n\n    # check if the total is equal to the original number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is Armstrong or not.\n    \"\"\"\n    sum = 0\n    temp_num = number\n    \n    while temp_num > 0:\n        digit = temp_num % 10\n        sum += digit ** 3\n        temp_num //= 10\n    \n    if sum == number:\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    A function to check whether a number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([int(d)**3 for d in num_str])\n    \n    # Check if the sum of cubes equals the original number\n    if num == sum_of_cubes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string and check its length\n    if len(str(number))!= len(str(number)[::-1]):\n        return False\n    \n    # Initialize the sum variable\n    sum_of_powers = 0\n    \n    # Loop through each digit of the number and add its power to the sum\n    for digit in str(number):\n        digit = int(digit)\n        sum_of_powers += digit ** len(str(number))\n        \n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_natural_numbers = 0\n    n = number\n    if n == 0:\n        print(\"Please enter a positive integer greater than 0.\")\n    elif n == 1:\n        print(\"The sum of the first\", n, \"natural numbers is\", 1)\n        print(\"The average of the first\", n, \"natural numbers is\", 1)\n    else:\n        for i in range(1, n+1):\n            sum_of_natural_numbers += i\n        average = sum_of_natural_numbers/n\n        print(\"The sum of the first\", n, \"natural numbers is\", sum_of_natural_numbers)\n        print(\"The average of the first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_val = 0\n    count = 0\n    for i in range(number + 1):\n        sum_val += i\n        count += 1\n    average = sum_val / count\n    return sum_val, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(f\"The sum of the first {n} natural numbers is {sum}.\")\n    print(f\"The average of the first {n} natural numbers is {average}.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and average variables\n    sum_ = 0\n    average = 0\n\n    # Iterate through the first n numbers and calculate sum and average\n    for i in range(1, number+1):\n        sum_ += i\n    average = sum_/number\n\n    # Return the sum and average\n    return sum_, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # Initialize sum and count variables to 0\n    sum_val = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Add the number to the sum\n        sum_val += i\n        # Increment the count variable\n        count += 1\n\n    # Calculate the average by dividing the sum by the count\n    average = sum_val / count\n\n    return (sum_val, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer input n and returns True if n is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is Even\")\n    else:\n        print(n, \"is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq_dict:\n            freq_dict[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[char] += 1\n    \n    # Find the first character with a frequency greater than 1\n    for char, freq in freq_dict.items():\n        if freq > 1:\n            return char\n    \n    # If no character has a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return 'None'"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string as input and returns the first repeated character in the string.\n    If no repeated character is found, it returns None.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 2:\n            return char\n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character with a count of 2 or more\n    for char, count in char_count.items():\n        if count >= 2:\n            return char\n    \n    # If no character has a count of 2 or more, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char = str1[0]\n    count = 1\n    for i in range(1, len(str1)):\n        if str1[i] == first_char:\n            count += 1\n        else:\n            count = 1\n            first_char = str1[i]\n        if count == 2:\n            return first_char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize an empty list to store the repeated characters\n    repeated_chars = []\n\n    # Iterate through the dictionary and check if the frequency of each character is greater than 1\n    for char in freq:\n        if freq[char] > 1:\n            repeated_chars.append(char)\n\n    # If there are no repeated characters, return None\n    if not repeated_chars:\n        return None\n\n    # If there are repeated characters, return the first character in the list\n    return repeated_chars[0]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    num = 1\n    while num <= n:\n        if all(int(i) == i for i in str(num)):\n            lucid.append(num)\n        num += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            ludic_numbers.append(i)\n        else:\n            ludic_numbers.append(3*i + 1)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if lucid_numbers:\n            last_lucid_number = lucid_numbers[-1]\n            if n % last_lucid_number == 0:\n                break\n            elif n // last_lucid_number > 1:\n                i = last_lucid_number + 1\n        lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i > 1 and all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = [2]\n    for i in range(3, n):\n        is_lucid = True\n        for j in range(2, i//2+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if i % 2!= 0 and i % 3!= 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    num = 1\n\n    while num <= n:\n        if sum([int(digit)**2 for digit in str(num)]) == num:\n            ludic_numbers.append(num)\n        num += 1\n\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_list = []\n\n    # Iterate from 1 to n-1 and check if each number is a lucid number\n    for i in range(1, n):\n        # Check if i is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            # If i is a lucid number, add it to the list\n            lucid_list.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words = words[::-1]\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    result =''.join(reversed_words)\n    # Return the result\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n\n    # Reverse the words\n    words = words[::-1]\n\n    # Join the words with spaces\n    s =''.join(words)\n\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the words back together with spaces\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list and join it back into a string\n    reversed_words =''.join(words[::-1])\n    # Return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # check if the given integer is less than 2\n    if num < 2:\n        return False\n\n    # check if the given integer is 2\n    elif num == 2:\n        return True\n\n    # check if the given integer is 3\n    elif num == 3:\n        return True\n\n    # check if the given integer is 4\n    elif num == 4:\n        return False\n\n    # check if the given integer is divisible by 2\n    elif num % 2 == 0:\n        return False\n\n    # check if the given integer is divisible by 3\n    elif num % 3 == 0:\n        return False\n\n    # check if the given integer is greater than 3\n    else:\n        for i in range(5, int(num**0.5)+1, 6):\n            if num % i == 0 or num % (i+2) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function checks if the given integer is a prime number or not. If it is a prime number, it returns True,\n    else it returns False.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    A wrapper function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi / 180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as input and returns the matching substrings as a list.\n    '''\n    # Convert the pattern string to a regex pattern\n    pattern = re.compile(pattern)\n    \n    # Find all the matches of the pattern in the text\n    matches = pattern.findall(text)\n    \n    # Return the matches as a list of tuples containing the substring, start index and end index\n    return [(match, text.index(match), text.index(match)+len(match)) for match in matches]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    # Use regex search method to find all matches of pattern in text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize empty list to store matches\n    literals = []\n    \n    # Loop through matches and append start and end indices to literals list\n    for match in matches:\n        literals.append((match.start(), match.end()))\n    \n    # Return empty list if no literals found\n    if not literals:\n        return None\n    \n    # Sort literals list by start index\n    literals.sort()\n    \n    # Return list of literals as tuples of (start, end) indices\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\npattern = r'\\b[a-z]+\\b'\nresult = find_literals(text, pattern)\nprint(result)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n\n    start = matches[0].start()\n    end = matches[-1].end()\n    literal = matches[0]\n\n    return literal, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    # Use the re.search function to find the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return the match object, its start index and end index\n    if match:\n        return match.group(), match.start(), match.end()\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(f\"Match: {match}, Start index: {start_index}, End index: {end_index}\")\n\ntext = \"The quick brown fox jumps over the lazy dog. The lazy dog is a good dog.\"\npattern = r'(\\w+)\\s+\\w+\\s+\\w+'\nfind_literals(text, pattern)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # Initialize the first term of the sequence\n    sequence = [0]\n    \n    # Initialize the first two terms of the sequence\n    sequence.append(1)\n    sequence.append(1)\n    \n    # Loop through the remaining terms\n    for i in range(2, n+1):\n        # Add the previous two terms to the sequence\n        sequence.append(sequence[i-1] + sequence[i-2])\n    \n    # Return the nth term of the sequence\n    return sequence[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = []\n    for i in range(n+1):\n        bell_seq.append(bell_number(i))\n    return bell_seq"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    a = [1]\n    for i in range(1, n+1):\n        a.append(2*a[i-1])\n    return a[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * bell_Number(n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initializing the list to store the bell numbers\n    bell_numbers = []\n    # iterating from 0 to n\n    for i in range(n+1):\n        # finding the bell number at each iteration\n        bell_number = i*(1-0.5**(i-1))\n        # appending the bell number to the list\n        bell_numbers.append(bell_number)\n    # returning the last element in the list (which is the nth bell number)\n    return bell_numbers[-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n-2) * bell_Number(n-2)\n    else:\n        return bell_Number(n-1) * bell_Number(n-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L // 2\n    # splitting the list into two halves\n    list1_left = list1[:k]\n    list1_right = list1[k:]\n    # creating a new list with the same elements as the original list, but excluding the k'th element\n    new_list = [list1_left[0]] + list1_right\n    # combining the new list with the elements from the original list\n    new_list = new_list + list1_left[1:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # return list1[:L-1] + list1[L:]\n    return list1[:L-1] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Args:\n    list1: A list of integers.\n    L: An integer, representing the value of k.\n\n    Returns:\n    A list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a copy of the list to avoid modifying the original\n    list2 = list1.copy()\n    # find the index of the k'th element\n    kth = L - 1\n    for i in range(len(list2)):\n        if list2[i] == kth:\n            kth = i\n            break\n    # remove the k'th element and return the modified list\n    del list2[kth]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and removes the kth element from it.\n    \"\"\"\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # First, create a copy of the list to avoid modifying the original list\n    new_list = list1.copy()\n    # Then, iterate over the list and remove the k'th element\n    if L == 1:\n        new_list.pop()\n    else:\n        new_list = new_list[:L-1] + new_list[L:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and removes the kth element from it.\n    '''\n    list2 = list1.copy() # Create a copy of the list\n    del list2[k-1] # Delete the kth element from the list\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)):\n        if i == k:\n            list1.pop(i)\n        elif i < k:\n            list1[i] = list1[i + 1]\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    # Check if the input is a list of lists or not\n    if not isinstance(test_list, list) or isinstance(test_list[0], list):\n        return None\n    \n    # Find the length of the first row of the matrix\n    row_len = len(test_list[0])\n    \n    # Check if N is a valid value for the matrix\n    if N > row_len or N < 1:\n        return None\n    \n    # Initialize the maximum value\n    max_val = None\n    \n    # Loop through all the rows of the matrix\n    for i in range(len(test_list)):\n        \n        # Find then'th column value\n        col_val = test_list[i][N-1]\n        \n        # Check if the current value is greater than the maximum value\n        if max_val is None or col_val > max_val:\n            max_val = col_val\n    \n    # Return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Get the length of the first row of the matrix\n    first_row_length = len(test_list[0])\n    # Check if the n value is valid\n    if N > first_row_length:\n        raise ValueError(\"N value is greater than the number of columns in the matrix.\")\n    # Initialize a variable to store the max value\n    max_value = float('-inf')\n    # Loop through the rows of the matrix\n    for row in test_list:\n        # Get the value of then'th column in the current row\n        current_value = row[N-1]\n        # Update the max value if necessary\n        if current_value > max_value:\n            max_value = current_value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the length of the matrix\n    m = len(test_list)\n    \n    # Check if N is a valid input\n    if N > m or N <= 0:\n        return None\n    \n    # Find then'th column\n    col = [row[N-1] for row in test_list]\n    \n    # Find the maximum value in the column\n    max_val = max(col)\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError('Input is not a valid matrix.')\n    \n    # check if the length of the first row is greater than N\n    if len(test_list[0]) <= N:\n        raise ValueError('N is out of range.')\n    \n    # get then'th column of the matrix\n    nth_column = [row[N-1] for row in test_list]\n    \n    # return the max value of the nth column\n    return max(nth_column)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize max value to None\n    max_val = None\n    \n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if the current value in the nth column is greater than the current max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Initialize the max value to zero\n    max_val = 0\n\n    # Loop through each row of the matrix\n    for row in test_list:\n        # If the nth column is greater than the current max value, update max_val\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = -1\n    for row in test_list:\n        if N > len(row):\n            continue\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the matrix\n    length = len(test_list)\n    # Check if the length of the matrix is greater than zero\n    if length == 0:\n        return None\n    # Check if the length of the matrix is greater than then'th column\n    if N >= length:\n        return None\n    # Initialize the maximum value for then'th column to zero\n    max_val = 0\n    # Loop through each row in the matrix\n    for i in range(length):\n        # Check if the value at then'th column is greater than the current maximum value\n        if test_list[i][N] > max_val:\n            # Update the maximum value\n            max_val = test_list[i][N]\n    # Return the maximum value for then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) >= N:\n            max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element\n    of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        first_element, second_element = sublist\n        merged_list.append([first_element, second_element])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged_list = []\n    for i in range(0, len(lst), 2):\n        merged_list.append([lst[i][0], lst[i+1][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        new_list = [first, second]\n        result.append(new_list)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to hold the cumulative sum\n    cum_sum = 0\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # extract the values from the tuple and add them to the cumulative sum\n        cum_sum += tup\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = [sum(x) for x in test_list]\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize variables to keep track of sum and current sum\n    current_sum = 0\n    cumulative_sum = 0\n\n    # loop through each tuple in the list\n    for item in test_list:\n        # if the item is an integer, add it to the current sum\n        if isinstance(item, int):\n            current_sum += item\n        # if the item is a tuple, recursively call the function with that tuple\n        elif isinstance(item, tuple):\n            cumulative_sum += cummulative_sum(item)\n        # if the item is not an integer or tuple, skip it\n        else:\n            continue\n\n        # if the current sum is greater than the cumulative sum, update the cumulative sum to be the current sum\n        if current_sum > cumulative_sum:\n            cumulative_sum = current_sum\n\n        # reset the current sum to 0 for the next iteration\n        current_sum = 0\n\n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = []\n    for i in range(len(test_list)):\n        cumsum.append(sum(test_list[:i+1]))\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num)/len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        if isinstance(nums[i], tuple):\n            total = 0\n            count = 0\n            for j in range(len(nums[i])):\n                total += nums[i][j]\n                count += 1\n            average_list.append(total/count)\n        else:\n            average_list.append(nums[i])\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        sum_of_nums = sum(num_tuple)\n        avg_value = sum_of_nums / len(num_tuple)\n        averages.append(avg_value)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        avg = total / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        for num in tup:\n            sum += num\n        result.append(sum/len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for t in nums:\n        for n in t:\n            total += n\n            count += 1\n    return [total / count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create a list to hold the average values for each tuple\n    avg_list = []\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple elements\n        avg = sum(tup) / len(tup)\n        # Append the average value to the avg_list\n        avg_list.append(avg)\n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # Perform element wise modulo operation\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Create an empty list to store the modulo values\n    modulo_list = []\n    # Loop through the tuple and perform modulo operation\n    for i in range(len(test_tup1)):\n        # Perform modulo operation and append to list\n        modulo_list.append(test_tup1[i] % test_tup2[i])\n    # Return the list as a tuple\n    return tuple(modulo_list)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    left = 0\n    right = steps\n    count = 0\n    \n    # Iterate while right is less than or equal to the number of steps\n    while right <= steps:\n        \n        # Check if the target is reached\n        if (left + d, 0) == (right, 0):\n            count += 1\n            right += 1\n            left += d\n        else:\n            right += 1\n            \n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    current_height = 0\n    current_position = 0\n    max_height = d\n\n    # Traverse the array of steps and check for possible jumps\n    while current_position < len(steps):\n        # Check if we can move to the next position\n        if steps[current_position] <= current_height:\n            current_height += steps[current_position]\n            current_position += 1\n            jumps += 1\n        else:\n            current_height -= steps[current_position]\n            current_position += 1\n    \n    # Check if we reached the destination\n    if current_height == max_height:\n        return jumps\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    count = 0\n    step = 0\n\n    # check if the starting point is (0, d) or (d, 0)\n    if steps[0] == 0 or steps[1] == d:\n        return 0\n\n    # iterate over the steps\n    while step < len(steps):\n        # if the point is at (0, d) or (d, 0)\n        if steps[step] == 0 or steps[step] == d:\n            # increment the count and move to the next step\n            count += 1\n            step += 1\n        else:\n            # decrement the step count by 1 and move to the next step\n            count -= 1\n            if count < 0:\n                break\n            step += 1\n\n    return count + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return steps // 2\n    elif d > 0:\n        return 1 + min_Jumps(steps - 1, d - 1)\n    else:\n        return 0"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return \"Invalid Input: d must be less than or equal to steps.\"\n    elif d == 0:\n        return \"Invalid Input: d cannot be 0.\"\n    else:\n        count = 0\n        i = 0\n        while i < steps:\n            if d >= 0:\n                d -= 1\n            else:\n                d += 1\n            i += 1\n            count += 1\n        return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    end = steps - d\n    # Check for each possible step size from 1 to end\n    for step in range(1, end+1):\n        # If the current step is smaller than the step size, continue to next step\n        if step < step_size:\n            continue\n        # If the current step is equal to the step size, count the jump and continue to next step\n        elif step == step_size:\n            count += 1\n            continue\n        # If the current step is greater than the step size, calculate the number of jumps required to reach the origin in the remaining distance\n        else:\n            remaining_distance = (end - step_size) / step_size\n            jump_count = int(remaining_distance) + 1\n            count += jump_count\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    end_point = (0, d)\n    \n    # Check for the end point\n    while end_point!= (steps, 0):\n        jumps += 1\n        # Calculate the next step\n        end_point = (end_point[0] + end_point[1], 0)\n        \n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    n = len(steps)\n    jumps = 0\n    \n    # Calculate the number of jumps required\n    for i in range(n):\n        if steps[i] <= d:\n            jumps += 1\n        else:\n            break\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    n = 0  # number of steps\n    jump = 0  # number of jumps\n    \n    # iterate through the steps\n    for i in range(len(steps)):\n        # if the current step is d, increment the jump count\n        if steps[i] == d:\n            jump += 1\n        # if the current step is not d, increment the step count\n        else:\n            n += 1\n            \n    # return the number of jumps needed\n    return jump + n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the distances from origin\n    distances = []\n    # Initialize the step count to 0\n    stepCount = 0\n\n    # Start from the origin\n    distances.append([0, 0])\n    # Move the step count by 1\n    stepCount += 1\n\n    # Loop until the distance from origin is greater than or equal to d\n    while distances[-1][0] < d:\n        # Get the maximum distance from the current point\n        maxDistance = max([abs(distances[-1][1] - d), abs(distances[-1][0] - d)])\n\n        # Loop through the distances to find the minimum jump\n        minJump = float('inf')\n        for distance in distances:\n            # If the distance is less than the max distance, add 1 to the step count\n            if distance[0] < maxDistance:\n                stepCount += 1\n                minJump = min(minJump, stepCount)\n\n        # Add the minimum jump to the list of distances\n        distances.append([distances[-1][0] + maxDistance, distances[-1][1] + maxDistance])\n        # Move the step count by the minimum jump\n        stepCount += minJump\n\n    return minJump"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length.\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The two lists should have the same length.\")\n        return\n    \n    # initialize an empty list to store the result\n    result = []\n    \n    # loop through each element of the first list\n    for i in range(len(nums1)):\n        # check if the element of the second list is zero\n        if nums2[i] == 0:\n            print(\"Cannot divide by zero!\")\n            return\n        \n        # divide the element of the first list by the element of the second list and store the result in the result list\n        result.append(nums1[i] / nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"The length of the lists are not equal\")\n        return\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through the two lists\n    for i in range(len(nums1)):\n        # Perform element-wise division\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the two lists are same\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of same length\")\n        return None\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate through the lists and calculate the result\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the element-wise division of the two lists.\n    \"\"\"\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    # Create a new list to store the element-wise division\n    result = []\n    # Loop through each pair of elements in the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # Return the new list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize a variable to store the result string\n    result = ''\n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, add it to the result string\n        if char.isdigit():\n            result += char\n        # Otherwise, add it to the end of the result string\n        else:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    if numbers:\n        return ''.join(numbers) + test_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    return ''.join(numbers) + test_str.replace(''.join(numbers), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_count = 0\n    digit_count = 0\n    number = \"\"\n\n    # Iterate through each character in the string\n    for char in test_str:\n        if char.isdigit():\n            digit_count += 1\n            number += char\n        else:\n            if digit_count > 0:\n                # Move the number to the end of the string\n                test_str = test_str[:digit_count] + number + test_str[digit_count:]\n                num_count += 1\n                digit_count = 0\n                number = \"\"\n\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    # Separate the string into characters and numbers\n    char_list = list(test_str)\n    num_list = [char for char in char_list if char.isdigit()]\n\n    # Move the numbers to the end of the string\n    for i in range(len(char_list)-len(num_list), len(char_list)):\n        char_list.insert(i, num_list.pop(0))\n\n    # Join the characters back into a string\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = \"\"\n    for i in test_str:\n        if i.isdigit():\n            numbers += i\n    for i in range(len(test_str) - len(numbers)):\n        test_str = test_str.replace(numbers[0], \"\", 1)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n    \"\"\"\n    num_pattern = r'\\d+'\n    nums = re.findall(num_pattern, test_str)\n    return ''.join([num for num in test_str if num not in nums]) + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort()\n    nums.reverse()\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    num_str = ''\n    \n    # Loop through each character in the input string\n    for char in test_str:\n        # If the character is a number, append it to the num_str\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, append it to the end of the input string\n        else:\n            test_str += char\n    \n    # Return the modified input string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n\n    # Iterate through the characters in the list\n    for i in range(len(char_list)):\n        # Check if the current character is a number\n        if char_list[i].isdigit():\n            # If it is, move it to the end of the list\n            char_list.insert(i, char_list.pop(char_list.index(char_list[i])))\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    # Sort the list in non-decreasing order\n    a.sort()\n\n    # Initialize variables\n    max_size = 0\n    max_subset = []\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # If the element is divisible by the current element, add it to the current subset\n        if a[i] % a[i-1] == 0:\n            max_subset.append(a[i])\n\n            # If the size of the current subset is greater than the maximum size so far, update the maximum size and the maximum subset\n            if len(max_subset) > max_size:\n                max_size = len(max_subset)\n                max_subset = [a[i]]\n        # If the element is not divisible by the current element, reset the subset and move on to the next one\n        else:\n            max_subset = []\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the maximum subset size to zero\n    max_size = 0\n\n    # Initialize the left pointer and the right pointer\n    left = 0\n    right = 0\n\n    # Iterate over the list\n    while right < len(a):\n        # Increment the right pointer until a pair is divisible\n        while right < len(a) - 1 and a[right] % a[right+1]!= 0:\n            right += 1\n\n        # Update the maximum subset size if a larger subset is found\n        if right - left + 1 > max_size:\n            max_size = right - left + 1\n\n        # Move the right pointer to the next pair of numbers\n        right += 1\n\n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return 1\n\n    # Initialize max_size to 0\n    max_size = 0\n\n    # Initialize all possible subsets of size i as 0\n    subset_size = [0] * n\n\n    # Initialize all possible subsets as empty\n    subset = [[0] * n for _ in range(n)]\n\n    # Iterate over all possible subsets of size i\n    for i in range(1, n):\n        # Iterate over all possible subsets of size j such that j >= i\n        for j in range(i):\n            # If the number at index i is divisible by the number at index j,\n            # add 1 to the subset_size and add i and j to the subset\n            if a[i] % a[j] == 0:\n                subset_size[i] = max(subset_size[i], subset_size[j] + 1)\n                subset[i] = [subset[i][k] for k in range(n) if k!= j] + [i]\n\n    # Update max_size with the maximum value of subset_size\n    for i in range(1, n):\n        max_size = max(max_size, subset_size[i])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in ascending order\n    a.sort()\n\n    # initialize variables for current subset size and maximum subset size\n    curr_size = 1\n    max_size = 1\n\n    # loop through the list\n    for i in range(1, len(a)):\n        # if the current number is divisible by the next number in the list, increment the current subset size\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n        else:\n            # if the current number is not divisible by the previous number in the list, update the maximum subset size if necessary\n            if curr_size > max_size:\n                max_size = curr_size\n            # reset the current subset size\n            curr_size = 1\n\n    # if the last number is not divisible by the first number in the list, update the maximum subset size if necessary\n    if curr_size > max_size:\n        max_size = curr_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    count = [0] * n\n\n    for i in range(n):\n        count[i] = 1\n        j = i + 1\n        while j < n and a[i] % a[j] == 0:\n            count[j] += count[i]\n            j += 1\n\n    max_count = 0\n    max_len = 0\n    for i in range(n):\n        if count[i] > max_count:\n            max_count = count[i]\n            max_len = i + 1\n\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # First, sort the list in descending order\n    a.sort(reverse=True)\n    # Then, iterate through the list and find the largest subset of pairs that are divisible by each other\n    max_subset_size = 0\n    current_subset_size = 0\n    for num in a:\n        if num % 2 == 0:\n            current_subset_size += 1\n        else:\n            max_subset_size = max(max_subset_size, current_subset_size)\n            current_subset_size = 0\n    max_subset_size = max(max_subset_size, current_subset_size)\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[0]*n for _ in range(n)]\n    max_size = 0\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if end == n-1:\n                dp[start][end] = 1\n                max_size = max(max_size, length)\n            else:\n                dp[start][end] = (a[end+1] - a[start]) // (a[end+1] - a[start-length+1])\n                max_size = max(max_size, dp[start][end])\n                if length == 2 and (end == n-2 or (end == n-3 and a[end+2] - a[end+1] > a[end] - a[start-length+2])):\n                    dp[start][end] = 1\n                    max_size = max(max_size, length)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a = sorted(a)\n\n    # Initialize variables\n    size = 0\n    start = 0\n\n    # Loop through the sorted list\n    for i in range(1, len(a)):\n        # If the difference between the current element and the next element is divisible by 2, update the start and size variables\n        if a[i] - a[start] % 2 == 0:\n            start = i\n            size += 1\n        # Otherwise, update the start variable and reset the size variable\n        else:\n            start = i\n            size = 1\n\n    # Return the size of the largest subset\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize two variables to keep track of the largest and second largest subsets found so far\n    largest_subset_size = 0\n    second_largest_subset_size = 0\n    # Loop through the sorted list\n    for i in range(len(a)):\n        # Check if the current element is divisible by the element at the next index\n        if a[i] % a[i+1] == 0:\n            # If it is, update the largest and second largest subsets\n            if len(a) - i - 1 > largest_subset_size:\n                second_largest_subset_size = largest_subset_size\n                largest_subset_size = len(a) - i - 1\n            elif len(a) - i - 1 > second_largest_subset_size:\n                second_largest_subset_size = len(a) - i - 1\n    # Return the largest subset size\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize two variables to keep track of the largest subsets found\n    subset1 = []\n    subset2 = []\n\n    # Iterate through the sorted list\n    for i in range(len(a)):\n        # Check if the current number is divisible by both the first and second subsets\n        if a[i] % subset1[-1] == 0 and a[i] % subset2[-1] == 0:\n            # If it is, add it to the second subset and update the largest subsets found so far\n            subset2.append(a[i])\n            if len(subset1) < len(subset2):\n                subset1 = subset2.copy()\n        else:\n            # If it's not divisible, add it to the first subset and update the largest subsets found so far\n            subset1.append(a[i])\n            if len(subset1) > len(subset2):\n                subset2 = subset1.copy()\n\n    # Return the length of the largest subset found\n    return len(subset2)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create two temporary arrays to store the sorted lists\n    temp1 = [float('inf')] * n\n    temp2 = [float('inf')] * n\n\n    # Copy the elements from the input arrays to temp arrays\n    for i in range(n):\n        temp1[i] = arr1[i]\n        temp2[i] = arr2[i]\n\n    # Sort the temporary arrays\n    temp1.sort()\n    temp2.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the array is even, return the average of the two middle elements\n        median = (temp1[n//2 - 1] + temp1[n//2] + temp2[n//2 - 1] + temp2[n//2]) / 4\n    else:\n        # If the length of the array is odd, return the middle element\n        median = temp1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 1:\n        # If the list size is odd, return the middle element\n        return sorted(arr1 + arr2)[n // 2]\n    else:\n        # If the list size is even, return the average of the two middle elements\n        mid1 = n // 2\n        mid2 = mid1 + 1\n        return (sorted(arr1)[mid1 - 1] + sorted(arr2)[mid2 - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    \n    # Sort the concatenated array\n    arr.sort()\n    \n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n    # sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # get the median index\n    median_index = n // 2\n\n    # check if the length of the sorted list is odd or even\n    if n % 2 == 0:\n        # if it's even, get the median of the two middle elements\n        median = (sorted_list[median_index - 1] + sorted_list[median_index]) / 2\n    else:\n        # if it's odd, get the median of the middle element\n        median = sorted_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged = arr1 + arr2\n    # Sort the merged list\n    sorted_arr = sorted(merged)\n    # Calculate the median based on the length of the list\n    if len(sorted_arr) % 2 == 0:\n        # If the length is even, return the average of the middle two elements\n        return (sorted_arr[len(sorted_arr)//2 - 1] + sorted_arr[len(sorted_arr)//2]) / 2\n    else:\n        # If the length is odd, return the middle element\n        return sorted_arr[len(sorted_arr)//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    arr = sorted(arr1 + arr2)\n\n    # Calculate the length of the array\n    length = len(arr)\n\n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # If even, return the average of the two middle elements\n        return (arr[length // 2 - 1] + arr[length // 2]) / 2\n    else:\n        # If odd, return the middle element\n        return arr[length // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists\n    combined = arr1 + arr2\n    # sort the combined list\n    combined.sort()\n    # find the length of the list\n    length = len(combined)\n    # find the median\n    if length % 2 == 0:\n        # if the length is even, return the average of the middle two elements\n        median = (combined[length//2 - 1] + combined[length//2]) / 2\n    else:\n        # if the length is odd, return the middle element\n        median = combined[length//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two sorted lists\n    sorted_list = arr1 + arr2\n    # Sort the concatenated list\n    sorted_list.sort()\n    # Calculate the length of the sorted list\n    length = len(sorted_list)\n    # Calculate the median\n    if length % 2 == 0:\n        # Calculate the middle two elements and take the average\n        median = (sorted_list[length//2 - 1] + sorted_list[length//2]) / 2\n    else:\n        # Take the middle element\n        median = sorted_list[length//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into one list\n    merged_list = arr1 + arr2\n    \n    # Calculate the length of the merged list\n    merged_length = len(merged_list)\n    \n    # Calculate the median index\n    if merged_length % 2 == 0:\n        median_index = merged_length // 2\n    else:\n        median_index = (merged_length + 1) // 2\n    \n    # Find the median element\n    median_element = merged_list[median_index]\n    \n    # Return the median element\n    return median_element"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Check if the input string is empty or not\n    if not string:\n        return string\n\n    # Convert the string to uppercase\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the string in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    for char in string:\n        if char.isupper():\n            return True\n    return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the given string to uppercase\n    uppercase_string = string.upper()\n    # Return the uppercase string\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return ''.join([char.upper() if char.isalpha() else char for char in string])"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # if the list has less than two elements, return the list as is\n    if len(newList) < 2:\n        return newList\n    \n    # swap the first and last elements\n    first, last = newList[0], newList[-1]\n    newList = newList[1:-1]\n    newList.insert(0, last)\n    newList.append(first)\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # check if list has less than two elements\n        return newList\n    else:\n        # swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the length of the list is less than 2\n    if length < 2:\n        return newList\n    # check if the first and last element of the list are equal\n    if newList[0] == newList[-1]:\n        return newList\n    # swap the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swap the first and last elements of the given list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # print the original list\n    print(\"Original list:\", newList)\n\n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    # print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    # Check if the input list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Swap the first and last element in the list\n    first = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # check if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n    \n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Find the index of the first and last elements in the list\n    index1 = 0\n    index2 = len(newList) - 1\n    \n    # Swap the first and last elements\n    newList[index1], newList[index2] = newList[index2], newList[index1]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1: \n        newList[0], newList[-1] = newList[-1], newList[0] \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the semi-perimeter of the triangle\n    s = 2 * r\n\n    # calculate the area of a triangle that has side s and height sqrt(3)/2\n    area = math.sqrt(3) / 4 * s ** 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n    # Calculate the area of the triangle with sides of length sqrt(semi-perimeter)\n    area = (1/2) * math.sqrt(semi_perimeter)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the triangle with sides of length 1\n    semi_perimeter = 2 * r\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = (semi_perimeter * (semi_perimeter - r)) / (semi_perimeter + r)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.1415926535897932384626433832795\n    s = 2*pi*r\n    a = (s**2)/(4*pi)\n    area = 1/3*a\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    # Find the semi-perimeter of the largest triangle that can be inscribed in a semicircle with the given radius\n    perimeter = 2*r + 2*pi*r*r\n    # Calculate the area of this triangle\n    area = math.sqrt(perimeter*perimeter/4)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # compute the area of the largest triangle that can be inscribed in the semicircle\n    # using Heron's formula\n    s = (2 * r * math.sqrt(2))\n    area = (s * (s - r) * (s - 2 * r)) / 4\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Find the semi-perimeter of the triangle\n    s = 2 * r\n\n    # Find the area of the triangle using Heron's formula\n    area = (s * (s - r) * (s - r + r)) ** 0.5\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = 2 * area\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * math.pi * r\n\n    # Calculate the area of each triangle with sides of length 1 and opposite side of length 2\n    a = 1\n    b = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = max(a, b) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    s = 2 * math.asin(r / 2)\n    area = math.sqrt(3) * r * s\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = 2 * r * r * (1 - 0.5*r**2)\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < end and array[mid] + 1 == array[mid + 1]:\n            start = mid + 1\n        elif mid > start and array[mid] - 1 == array[mid - 1]:\n            end = mid - 1\n        else:\n            return array[mid]\n\n    return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = max(array)\n\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers as input and returns the smallest missing number.\n    If the end argument is not specified, the function will find the missing number from the first element of the array.\n    If the start argument is not specified, the function will start the search from the first element of the array.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i == i - array[i]:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    \n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1\n    return end+2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    even = []\n    odd = []\n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return even, odd "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a list of even numbers from the list.\n    '''\n    even_list = []\n    for i in lst:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of even numbers in the original list.\n    \"\"\"\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        ele (tuple): A tuple of coordinates.\n        sub (list, optional): A list of sub-elements to be considered. Defaults to [].\n\n    Returns:\n        list: A list of adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    adj = []\n\n    if y == 0:\n        adj.append((x, y+1))\n    elif y == len(sub) - 1:\n        adj.append((x, y-1))\n    elif x == 0:\n        adj.append((x+1, y))\n    elif x == len(sub[0]) - 1:\n        adj.append((x-1, y))\n    elif x == len(sub) - 1 and y == 0:\n        adj.append((x-1, y))\n        adj.append((x+1, y))\n    elif x == 0 and y == 0:\n        adj.append((x, y+1))\n        adj.append((x, y-1))\n    elif x == 0 and y == len(sub) - 1:\n        adj.append((x, y+1))\n        adj.append((x, y-1))\n    elif x == len(sub) - 1 and y == len(sub) - 1:\n        adj.append((x, y+1))\n        adj.append((x, y-1))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # unpack the coordinate tuple\n    x, y = ele\n\n    # create a list to store the adjacent coordinates\n    adj = []\n\n    # iterate through the adjacent cells\n    for i in range(max(0, x-1), min(x+2, 9)): \n        for j in range(max(0, y-1), min(y+2, 9)): \n            if (i!= x or j!= y) and (i, j) not in sub: \n                adj.append((i, j))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # if sub is None, initialize it to an empty list\n    if sub is None:\n        sub = []\n\n    # append the current element to the sublist\n    sub.append(ele)\n\n    # if the element is a tuple, recursively call the function on each of its elements\n    if isinstance(ele, tuple):\n        for i in ele:\n            adjac(i, sub)\n\n    # return the sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    return [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx!= 0 or dy!= 0) and (x+dx, y+dy)!= ele] + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    adj = [tuple(ele) for ele in adj if 0 <= ele[0] < 3 and 0 <= ele[1] < 3]\n    adj += sub\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i!= 0 or j!= 0:\n                if 0 <= x+i < len(sub) and 0 <= y+j < len(sub[0]):\n                    adj.append((x+i, y+j))\n                elif 0 <= x+i < len(sub) and 0 <= y+j == len(sub[0])-1:\n                    adj.append((x+i, y+j))\n                elif 0 <= x+i == len(sub)-1 and 0 <= y+j < len(sub[0]):\n                    adj.append((x+i, y+j))\n                elif 0 <= x+i == len(sub)-1 and 0 <= y+j == len(sub[0])-1:\n                    adj.append((x+i, y+j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    ele: tuple\n        A coordinate tuple of the format (x, y)\n\n    sub: list, optional\n        A list of sub-lists containing adjacent coordinates, by default []\n\n    Returns:\n    list\n        A list of adjacent coordinates.\n    \"\"\"\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+i, y+j) for i in [-1, 0, 1] for j in [-1, 0, 1] if abs(i)+abs(j) <= 1]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # unpack the coordinate tuple\n    x, y = ele\n    \n    # get the adjacent coordinates\n    adj_x = [x-1, x+1]\n    adj_y = [y-1, y, y+1]\n    \n    # extract the coordinates from the adjacent lists\n    adj = [(x, y) for x in adj_x for y in adj_y]\n    \n    # add the sublist to the tuple if it exists\n    if sub:\n        adj = [e for e in adj if e in sub]\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        elif char == '_':\n            new_text +=''\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the text to lowercase and split it into words\n    words = text.lower().split()\n    # Loop through the words and replace spaces with underscores\n    for i in range(len(words)):\n        if words[i] =='':\n            words[i] = '_'\n    # Join the words back together into a single string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Loop through each word and replace spaces with underscores\n    for i in range(len(words)):\n        words[i] = words[i].replace(' ', '_')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Initialize variables to hold the original and modified strings\n    original_string = text\n    modified_string = ''\n\n    # Iterate through the characters in the original string\n    for char in original_string:\n        # If the character is a space, replace it with an underscore\n        if char =='':\n            modified_string += '_'\n        # Otherwise, append the character to the modified string\n        else:\n            modified_string += char\n\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert text to lowercase\n    text = text.lower()\n    # initialize empty string to store the result\n    result = \"\"\n    # iterate through each character in the string\n    for char in text:\n        # if the character is a whitespace, replace it with an underscore\n        if char in [' ', '\\t', '\\n', '\\r']:\n            result += \"_\"\n        # otherwise, add the character to the result string\n        else:\n            result += char\n    # return the final result\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            num_list.pop()\n            len(num_list) -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            j = i + 1\n            while j < len(num_list) and num_list[j] == 0:\n                j += 1\n            if j < len(num_list):\n                temp = num_list[i]\n                num_list[i] = num_list[j]\n                num_list[j] = temp\n                i = j\n            else:\n                i += 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers, one for the first non-zero element and one for the last element\n    i = 0\n    j = len(num_list) - 1\n    \n    # loop through the list and move all non-zero elements to the end of the list\n    while i < j:\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    \n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            num_list.pop(i)\n        elif num_list[i]!= 0:\n            break\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers, one at the beginning and the other at the end of the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # Move all non-zero elements to the end of the list\n    while i < j:\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            j -= 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    # Initialize variables to keep track of the index of the first non-zero element and the length of the list\n    first_nonzero_index = 0\n    nonzero_count = 0\n\n    # Iterate through the list and move non-zero elements to the end of the list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[first_nonzero_index] = num_list[first_nonzero_index], num_list[i]\n            first_nonzero_index += 1\n            nonzero_count += 1\n\n    # If there were no non-zero elements in the list, the first_nonzero_index will be equal to the length of the list\n    if first_nonzero_index == len(num_list):\n        return \"List contains all zeroes.\"\n    else:\n        return \"List contains {} non-zero elements after moving all zeroes to the end of the list.\".format(nonzero_count)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            j = i + 1\n            while j < len(num_list):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n                j += 1\n            len_list = len(num_list)\n            num_list.pop()\n            i = 0\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize two pointers, one at the start of the list and the other at the end of the list\n    start = 0\n    end = len(num_list) - 1\n\n    # Traverse the list and swap elements if they are non-zero and not already at the end of the list\n    while start < end:\n        if num_list[start]!= 0 and num_list[start]!= num_list[end]:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            start += 1\n            end -= 1\n\n    # Return the list with all zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros_index = []\n    for i, num in enumerate(num_list):\n        if num == 0:\n            zeros_index.append(i)\n    zeros_index.sort(reverse=True)\n    for i in zeros_index:\n        num_list.pop(i)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum to zero\n    xor_sum = 0\n\n    # Loop through the list and for each number, calculate the XOR of all previous numbers\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    # Return the xor sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 2:\n        return 0\n\n    # Initialize variables\n    sum_xor = 0\n    xor_arr = []\n\n    # Iterate over the list\n    for i in range(len(arr)):\n        xor_num = arr[i] ^ arr[i + 1]\n        sum_xor += xor_num\n        xor_arr.append(xor_num)\n\n    # Find the sum of xor of all pairs\n    sum_xor_sum = sum_xor * (n * (n - 1)) // 2\n\n    # Calculate the sum of xor of all pairs using another method\n    # sum_xor_sum = sum(arr[i] ^ arr[i + 1] for i in range(len(arr) - 1))\n\n    # Return the sum of xor of all pairs\n    return sum_xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[(i+1)%n]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements of the list\n    xor_sum = sum(x^y for x,y in zip(arr,arr[1:]))\n    # XOR of all pairs of elements of the list\n    xor_sum = xor_sum ^ sum(arr[i] ^ arr[j] for i in range(n-1) for j in range(i+1,n))\n    # Return the XOR of all elements and XOR of all pairs of elements\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and a number n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n): \n    \"\"\"\n    This function takes a list of integers and a number n as input. \n    It then returns the sum of the XOR of all pairs of numbers in the list.\n    \n    Example:\n    >>> pair_xor_Sum([1, 2, 3, 4, 5], 2)\n    6\n    \n    \"\"\"\n    sum_pair = 0\n    for i in range(0, n): \n        for j in range(i+1, n): \n            sum_pair += arr[i] ^ arr[j]\n    return sum_pair"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    hq.heapify(iterable)\n    # extract the maximum element from the heap and store it at the end of the list\n    sorted_list = [hq.heappop(iterable)]\n    # repeat the above steps until the list is sorted\n    while iterable:\n        # extract the maximum element from the heap\n        max_element = hq.heappop(iterable)\n        # add the max element to the sorted list\n        sorted_list.append(max_element)\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for element in iterable:\n        hq.heappush(heap, element)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using the heap sort algorithm.\n    '''\n    # Create a max heap from the given iterable\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # Extract elements from the max heap and append them to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list into a heap\n    heap = iterable\n    hq.heapify(heap)\n    \n    # Extract the elements from the heap one by one and append them to the result list\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Pop the maximum element from the heap\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given list using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list to be able to use heapify()\n    arr = list(iterable)\n    heapq.heapify(arr)\n\n    # Remove the smallest element from the heap and add it to the end of the sorted list\n    sorted_list = []\n    while arr:\n        sorted_list.append(heapq.heappop(arr))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    # extract items from the heap and append them to a new list in reverse order\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    # reverse the sorted list and return it\n    return sorted_list[::-1]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a max-heap\n    hq.heapify(iterable)\n    \n    # Remove elements from the heap and return them in sorted order\n    return [hq.heappop(iterable) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Create a max heap from the iterable\n    hq.heapify(iterable)\n\n    # Extract elements from the heap and add them to a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    \n    Returns True if the amount has no profit and no loss, False otherwise.\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function will check if the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check if profit is positive and loss is negative\n    if profit > 0 and loss < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        profit = sale_amount - actual_cost\n        loss = actual_cost - sale_amount\n        if profit > loss:\n            return False\n        else:\n            return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss of the sale\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if the profit and loss are both zero or both negative\n    if profit == 0 and loss == 0:\n        print(\"The sale has no profit and no loss\")\n    elif profit > 0 and loss > 0:\n        print(\"The sale has no profit but has a loss\")\n    elif profit < 0 and loss < 0:\n        print(\"The sale has a profit but no loss\")\n    else:\n        print(\"The sale has a profit and a loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost == sale_amount: # if actual cost and sale amount are equal, it has no profit and no loss\n        print(\"No profit or no loss\")\n    else: # if actual cost and sale amount are not equal, it has a profit or loss\n        if actual_cost > sale_amount: # if actual cost is greater than sale amount, it has a profit\n            profit = actual_cost - sale_amount\n            print(\"Profit: \", profit)\n        else: # if actual cost is not greater than sale amount, it has a loss\n            loss = sale_amount - actual_cost\n            print(\"Loss: \", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t > 0:\n        return round((237.3 - (0.6215 * v) + (13.397 * t) + (0.168 * t**2) - (0.00035 * t**3)) / (7.557 * t))\n    else:\n        return None"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t >= -10 and t <= 25:\n        if v >= 0 and v < 15:\n            return round((13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*math.log(v)**2) / 10)\n        elif v >= 15 and v < 25:\n            return round((4.79 + 0.6215*t - 11.37*math.log(v) + 0.3965*math.log(v)**2) / 10)\n        else:\n            return round((8.16 + 0.6215*t - 11.37*math.log(v) + 0.3965*math.log(v)**2) / 10)\n    else:\n        print(\"Invalid temperature input. Temperature should be between -10 and 25.\")\n        return None"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = (t + 273.15) * (9/5) + 32\n    \n    # Calculate the wind chill index\n    wc = 2 * v / (k - 273.15)\n    \n    # Round the wind chill index to the nearest integer\n    wc_rounded = int(math.ceil(wc))\n    \n    # Return the rounded wind chill index\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 13.12 + 0.6215 * t - 11.37 * math.exp(-0.14 * t)\n    k = math.exp((17.625 * v / c) - ((v / c) ** 2) / (2 * c ** 2))\n    wci = round(k)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n    \n    # Calculate the relative humidity\n    r = 0.622 * (1 - 0.0065 * t)\n    \n    # Calculate the wind chill temperature\n    wc = v / (r * 6.11 * math.exp((17.67 * t) / (t_k + 243.5)))\n    \n    # Convert wind chill temperature to integer\n    wc_int = int(wc + 0.5)\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill formula\n    c = 0.062197 # degree Celsius to Kelvin constant\n    t_k = t + 273.15 # convert temperature to Kelvin\n    chill_k = 13.12 + 0.6215 * v**0.16 + 11.37 * math.exp(-(t_k - 273.15)/10.3)\n    # convert from Kelvin to Celsius and round to the nearest integer\n    chill_c = int(round(chill_k - 273.15))\n    return chill_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function takes the wind velocity in km/h and a temperature in celsius as inputs, and returns the wind chill index rounded to the next integer.\n\n    If the wind chill index is below -20, the function returns -20.\n    If the wind chill index is above 40, the function returns 40.\n\n    If the wind velocity is below 0, the function returns a message indicating that the wind velocity is below 0.\n\n    If the temperature is below 0, the function returns a message indicating that the temperature is below 0.\n    '''\n\n    if v < 0:\n        return \"Error: Wind velocity is below 0.\"\n    if t < 0:\n        return \"Error: Temperature is below 0.\"\n\n    w = v * math.sin(t * (math.pi / 180))\n    wc = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * w\n    wc = round(wc)\n\n    if wc < -20:\n        return -20\n    elif wc > 40:\n        return 40\n    else:\n        return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 0.5555555555555555  # constant for calculating the temperature difference\n    k = 1.3  # constant for calculating the wind chill index\n    wind_speed = v * 1.60934  # convert km/h to m/s\n\n    # calculate temperature difference\n    delta_T = (t - 273.15) * (9 / 5) + 32\n\n    # calculate wind chill index\n    index = k * wind_speed / (delta_T + c * wind_speed)\n\n    # round the wind chill index to the nearest integer\n    rounded_index = round(index)\n\n    return rounded_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934 # convert km/h to m/s\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * math.log(t) - 35.75 * math.exp(17.625 * wind_speed / (t + 237.3)) + 0.4275 * math.exp(17.625 * wind_speed / (t + 237.3) * t)\n    # round to the nearest integer\n    wc_rounded = int(round(wc))\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the dew point temperature using the method of formulas\n    rho = 1.225 # Dry air density in kg/m^3\n    dew_point = 237.3 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n\n    # Calculate the wind chill index using the method of formulas\n    wc_index = (dew_point - 32) * (5/9) + 32\n    wc_index = round(wc_index)\n\n    # Return the wind chill index rounded to the next integer\n    return wc_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if not name[0].islower():\n            names.append(name)\n    total_length = sum(len(name) for name in names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if not name[0].islower()]\n    sum_lengths = sum(len(name) for name in filtered_names)\n    return sum_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():  # check if the first character is lowercase\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name.startswith('a'):\n            continue\n        if name.startswith('b'):\n            continue\n        if name.startswith('c'):\n            continue\n        if name.startswith('d'):\n            continue\n        if name.startswith('e'):\n            continue\n        if name.startswith('f'):\n            continue\n        if name.startswith('g'):\n            continue\n        if name.startswith('h'):\n            continue\n        if name.startswith('i'):\n            continue\n        if name.startswith('j'):\n            continue\n        if name.startswith('k'):\n            continue\n        if name.startswith('l'):\n            continue\n        if name.startswith('m'):\n            continue\n        if name.startswith('n'):\n            continue\n        if name.startswith('o'):\n            continue\n        if name.startswith('p'):\n            continue\n        if name.startswith('q'):\n            continue\n        if name.startswith('r'):\n            continue\n        if name.startswith('s'):\n            continue\n        if name.startswith('t'):\n            continue\n        if name.startswith('u'):\n            continue\n        if name.startswith('v'):\n            continue\n        if name.startswith('w'):\n            continue\n        if name.startswith('x'):\n            continue\n        if name.startswith('y'):\n            continue\n        if name.startswith('z'):\n            continue\n        sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names with no lowercase letters\n    clean_names = []\n    for name in sample_names:\n        # check if the first character is lowercase\n        if name[0].islower():\n            # if it is, add it to the clean_names list\n            clean_names.append(name)\n    # sum the lengths of the clean_names list\n    total_length = sum(len(name) for name in clean_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name[0].isupper():\n            valid_names.append(name)\n    return sum(len(name) for name in valid_names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create an empty list to store the names that do not start with a lowercase letter\n    no_lower_names = []\n    # Iterate over the names in the input list\n    for name in sample_names:\n        # Check if the first character of the name is lowercase\n        if name[0].islower():\n            # If it is, add it to the list of names that do not start with a lowercase letter\n            no_lower_names.append(name)\n    # Sum the lengths of the names in the list of names that do not start with a lowercase letter\n    sum_length = sum([len(name) for name in no_lower_names])\n    # Return the sum of the lengths of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum to 0\n    total_length = 0\n\n    # Loop through the list of names\n    for name in sample_names:\n        # Remove any names that start with a lowercase letter\n        if name[0].isupper():\n            continue\n\n        # Add the length of the remaining names to the sum\n        total_length += len(name)\n\n    # Return the sum of the lengths of the remaining names\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\((.*?)\\)', r'\\1', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define regular expression to match parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n\n    # Find all parenthesis in the string\n    paren_list = pattern.findall(items)\n\n    # Loop through parenthesis and replace with empty string\n    for paren in paren_list:\n        items = items.replace(paren, '')\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)' #regular expression pattern to match any parenthesis\n    return re.sub(pattern, '', items) #replace the parenthesis with an empty string using the regular expression replace function"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # define a regular expression to match parenthesis\n    pattern = r'\\(.*?\\)'\n\n    # loop through each item in the list\n    for item in items:\n        # replace all occurrences of the pattern in the item with an empty string\n        item = re.sub(pattern, '', item)\n        # append the modified item to the new list\n        new_list.append(item)\n\n    return new_list"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)' # regex pattern to match parenthesis\n    matches = re.findall(pattern, items) # find all matches in the string\n    for match in matches:\n        items = items.replace(match, match.strip('()')) # remove parenthesis from the string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\((.*?)\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(([^)]+)\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first and second nonagonal numbers\n    a = 1\n    b = 2\n\n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n+1):\n        # Calculate the nth nonagonal number\n        c = a + b\n\n        # Check if the nth nonagonal number is equal to the current value of n\n        if c == n:\n            return True\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # If the loop completes without finding the nth nonagonal number, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return \"Invalid input!\" \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 2 \n    else: \n        nonagonal = 2 * (n - 1) - 2 * (n - 2) + 1\n        return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n - 1)) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first row and the second row\n    row1 = 1\n    row2 = 1\n    \n    # Loop n-1 times to fill the matrix\n    for i in range(n-1):\n        # Fill the first row by adding the previous row\n        row1 = row1 + row2\n        # Fill the second row by adding the first row and the second row\n        row2 = row1 + row2\n    \n    # Return the nth nonagonal number\n    return row2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    nonagonal = 1\n    num = 1\n\n    # Iterate through the number of rows required\n    for i in range(n):\n        nonagonal *= num\n        num += 1\n\n    # Return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: \n        return None \n    elif n == 1: \n        return 1 \n    else: \n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the first two nonagonal numbers\n    num1 = 1\n    num2 = 4\n    \n    # Loop through the remaining nonagonal numbers\n    for i in range(2, n+1):\n        # Calculate the next nonagonal number\n        num = (num1 + num2) * (2*i - 1)\n        \n        # Check if the next nonagonal number is even or odd\n        if num % 2 == 0:\n            # Even, so increment the first nonagonal number\n            num1 += 1\n        else:\n            # Odd, so increment the second nonagonal number\n            num2 += 1\n    \n    # Return the last nonagonal number\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Determines whether the given positive integer is a nonagonal number.\n\n    A nonagonal number is a positive integer that is equal to the sum of the squares of its adjacent nonagonal numbers.\n    The first nonagonal number is 1^2 + 2^2 = 5, the second is 2^2 + 3^2 = 17, and so on.\n\n    Args:\n        n (int): The positive integer to check.\n\n    Returns:\n        bool: True if the given integer is a nonagonal number, False otherwise.\n    \"\"\"\n    if n < 1:\n        return False\n\n    squares = [0] * (n // 2 + 1)\n    squares[0] = 1\n    squares[1] = 4\n\n    for i in range(2, n // 2 + 1):\n        squares[i] = squares[i - 1] + squares[i - 2]\n\n    for i in range(n // 2, -1, -1):\n        if squares[i] == 1 + 4 * (i + 1):\n            return True\n\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    nonagonal = 0\n    while i <= n:\n        nonagonal += i\n        i += 2\n    return nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # iterate over the words and check if there's a 'z' in the middle\n    for i in range(len(words)-1):\n        if 'z' in words[i] and 'z' in words[i+1]:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = re.compile(r'\\b[a-z]*\\w*[z][a-z]*\\b')\n    return word_pattern.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # iterate over the words and check if they contain 'z'\n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            return True\n\n    # if we got here, the text didn't contain 'z' at the middle of a word\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z0-9]*z[a-zA-Z0-9]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Iterate over the words and check if 'z' is in the middle of the word\n    for i in range(len(words)):\n        if words[i][0] == 'z' and words[i][-1] == 'z':\n            # If 'z' is in the middle of the word, return True\n            return True\n    # If 'z' is not in the middle of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Replace all non-letter characters with spaces\n    cleaned_text = re.sub('[^a-zA-Z]','', text)\n    # Split the cleaned text into words\n    words = cleaned_text.split()\n    # Loop through the words and check if they contain 'z' at the start or end\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    # If no words contain 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-word characters from the string\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n\n    # Split the string into words\n    words = text.split()\n\n    # Loop through each word and check if 'z' is at the start or end\n    for i in range(len(words)):\n        if words[i] == 'z' and (i == 0 or i == len(words) - 1):\n            return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?=.*z)(?=.*?[^z])z(?!.*z)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-z]\\w{4}[zZ]\\w{3,}\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from index 0 to k-1\n    input[0:k] = input[0:k][::-1]\n    \n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Make a copy of the input array\n    array = input[:]\n    \n    # Reverse the array from the first position to k-1\n    for i in range(k-1, len(array)//2):\n        array[i], array[len(array)-i-1] = array[len(array)-i-1], array[i]\n    \n    # Reverse the array from k to the end\n    for i in range(k, len(array)//2):\n        array[i], array[len(array)-i-1] = array[len(array)-i-1], array[i]\n        \n    # Return the reversed array\n    return array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return input\n    reversed_array = []\n    for i in range(n-k, n):\n        reversed_array.append(input[i])\n    return reversed_array + input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initializing the output array\n    output = []\n    \n    # Checking if the given position is greater than the length of the input array\n    if k > len(input):\n        return \"Invalid position\"\n    \n    # Looping through the input array from the given position to the end\n    for i in range(k-1, len(input)):\n        # Adding each element of the input array to the output array in reverse order\n        output.append(input[i])\n    \n    # Looping through the input array from the beginning to the given position\n    for i in range(0, k-1):\n        # Adding each element of the input array to the output array in reverse order\n        output.append(input[i])\n    \n    # Returning the output array\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start, end = 0, k-1\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n        \n    return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize a variable to store the reversed array\n    reversed_array = []\n\n    # loop through the input array from index 0 to k-1\n    for i in range(k):\n        # append the current element of the input array to the reversed array\n        reversed_array.append(input[i])\n\n    # loop through the input array from index k to n-1\n    for i in range(k, len(input)):\n        # append the current element of the input array to the reversed array\n        reversed_array.append(input[i])\n\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # Reverse the array from 0 to k-1\n    for i in range(k): \n        input[i], input[k-i-1] = input[k-i-1], input[i]\n        \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the array\n    n = len(input)\n\n    # Check if k is valid index\n    if k < 0 or k >= n:\n        return \"Invalid index\"\n    \n    # Create a temporary array to store the elements of the array upto k\n    temp = input[:k]\n    \n    # Reverse the array from k to n-1\n    input[k:n] = input[k:n][::-1]\n    \n    # Reverse the temporary array from 0 to k-1\n    temp[k:n] = temp[k:n][::-1]\n    \n    # Merge the two arrays\n    for i in range(k, n):\n        input[i] = temp[i-k]\n        \n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup + [test_dict])"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_tup = new_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create a new dictionary with the keys from the test_dict and the values from the test_tup\n    new_dict = {**test_dict, **test_tup}\n    # convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the same keys as the original dictionary and values of 0\n    new_dict = {k:0 for k in test_dict}\n    # Add the new dictionary to the tuple\n    updated_tuple = test_tup + (new_dict,)\n    return updated_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs from the original dictionary and the tuple\n    new_dict = {**test_dict, **test_tup}\n    # convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Iterate through the dictionary and add its key-value pairs to the tuple\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. \n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. \n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    visited = [0]*N # initialize visited list with all 0's\n    \n    def dfs(i, j, total_cost):\n        \"\"\"\n        Recursive function that computes the average cost of the visited cells and updates the maximum average found so far.\n        \"\"\"\n        if i == N-1 and j == N-1: # base case\n            max_avg = total_cost/4 # average of a square is 2/4 of the sum of its sides\n            global max_avg_path\n            max_avg_path = path[:] # make a copy of the path to store the maximum path found so far\n            return max_avg\n        \n        visited[i*N+j] = 1 # mark the cell as visited\n        \n        # move right\n        if j < N-1 and not visited[i*N+j+1]:\n            dfs(i, j+1, total_cost+cost[i][j+1])\n        \n        # move down\n        if i < N-1 and not visited[(i+1)*N+j]:\n            dfs(i+1, j, total_cost+cost[i+1][j])\n        \n        visited[i*N+j] = 0 # unmark the cell as visited\n    \n    max_avg = 0\n    max_avg_path = []\n    dfs(0, 0, 0) # start the dfs at the top-left cell\n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n\n    # Initialize variables\n    N = len(cost)\n    max_avg = 0\n    max_path = []\n\n    # Loop through each cell\n    for i in range(N):\n        for j in range(N):\n            # If current cell is not visited, compute the path and its average\n            if cost[i][j] == 0:\n                path = []\n                visited_cells = 0\n                current_i = i\n                current_j = j\n                while current_i >= 0 and current_j < N and current_i < N and cost[current_i][current_j] == 0:\n                    path.append((current_i, current_j))\n                    visited_cells += 1\n                    current_i -= 1\n                    current_j += 1\n                while current_i < N and current_j >= 0 and current_i < N and cost[current_i][current_j] == 0:\n                    path.append((current_i, current_j))\n                    visited_cells += 1\n                    current_i += 1\n                    current_j -= 1\n                while current_i < N and current_j < N and current_i < N and cost[current_i][current_j] == 0:\n                    path.append((current_i, current_j))\n                    visited_cells += 1\n                    current_i += 1\n                    current_j += 1\n                while current_i >= 0 and current_j >= 0 and current_i < N and cost[current_i][current_j] == 0:\n                    path.append((current_i, current_j))\n                    visited_cells += 1\n                    current_i -= 1\n                    current_j -= 1\n\n                # Compute average and check if it is greater than max_avg\n                total_cost = sum([cost[i][j] for i, j in path])\n                avg_cost = total_cost / visited_cells\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = path\n\n    # Return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    max_path = []\n\n    def helper(i, j, path):\n        nonlocal max_avg, max_path\n        if i == N-1 and j == N-1:\n            dp[i][j] = cost[i][j]\n            avg = sum(dp[i][j:]) / (j+1)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path + [i, j]\n        else:\n            if i < N-1:\n                helper(i+1, j, path + [i])\n            if j < N-1:\n                helper(i, j+1, path + [j])\n            dp[i][j] = max(dp[i][j], dp[i][j+1])\n            avg = sum(dp[i][j:]) / (j+1)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path + [i, j]\n\n    helper(0, 0, [])\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_cost = float('-inf')\n\n    # initialize the first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        max_cost = max(max_cost, cost[0][i])\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        max_cost = max(max_cost, cost[i][0])\n\n    # fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i-1][j] > cost[i][j-1]:\n                dp[i][j] = dp[i-1][j] + cost[i-1][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j-1]\n            max_cost = max(max_cost, dp[i][j])\n\n    # find the maximum average in the matrix\n    total_cost = 0\n    total_cells = 0\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] == max_cost:\n                total_cost += dp[i][j]\n                total_cells += 1\n\n    return total_cost / total_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_avg = float('-inf')\n    curr_avg = 0\n    path_length = 0\n    start_cell = (0, 0)\n    end_cell = (len(cost) - 1, len(cost[0]) - 1)\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if current cell is part of the path\n            if (i, j)!= start_cell and (i, j)!= end_cell:\n                # Update current path length and average\n                curr_avg += cost[i][j]\n                path_length += 1\n                # Check if current path has a higher average\n                if curr_avg > max_avg:\n                    max_avg = curr_avg\n                    max_path = [(i, j)]\n                # Check if the current path has the same average as the previous one\n                elif curr_avg == max_avg:\n                    max_path.append((i, j))\n\n    # Compute the average of the maximum path\n    if max_path:\n        max_avg = sum(cost[cell[0]][cell[1]] for cell in max_path) / len(max_path)\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    dp[0][0] = cost[0][0]\n    max_avg = dp[0][0]\n    \n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    \n    # Find the maximum average path\n    max_path = []\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if dp[i][j] == max_avg:\n                max_path.append([i, j])\n                max_avg = dp[i][j-1] if j>0 else dp[i-1][j]\n    \n    # Compute the average cost of the maximum path\n    avg_cost = sum(cost[i][j] for i,j in max_path) / len(max_path)\n    \n    return avg_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    def dfs(i, j, path_cost, visited):\n        visited[i][j] = True\n        if i == n - 1 and j == m - 1:\n            path_cost[i][j] = cost[i][j]\n            return 0\n\n        path_cost[i][j] = min(path_cost[i][j], cost[i][j])\n        if i < n - 1:\n            left_cost = dfs(i + 1, j, path_cost, visited) + path_cost[i + 1][j]\n            path_cost[i][j] = max(path_cost[i][j], left_cost)\n        if j < m - 1:\n            down_cost = dfs(i, j + 1, path_cost, visited) + path_cost[i][j + 1]\n            path_cost[i][j] = max(path_cost[i][j], down_cost)\n\n        return path_cost[i][j]\n\n    n, m = len(cost), len(cost[0])\n    path_cost = [[0] * m for _ in range(n)]\n    visited = [[False] * m for _ in range(n)]\n    max_average = float('-inf')\n\n    for i in range(n):\n        for j in range(m):\n            if not visited[i][j]:\n                path_cost[i][j] = cost[i][j]\n                dfs(i, j, path_cost, visited)\n                max_average = max(max_average, path_cost[i][j])\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    max_path_cost = 0\n    max_path_length = 1\n    max_path_avg = 0\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n\n            # Check if current cell is valid\n            if cost[i][j] == 0:\n                continue\n\n            # If current cell is valid, expand the current path\n            path_cost = 0\n            path_length = 1\n            path_avg = 0\n            current_cell = (i, j)\n\n            # Check if we can move right\n            if j < len(cost[0])-1 and cost[i][j+1]!= 0:\n                path_cost += cost[i][j+1]\n                path_length += 1\n                path_avg += cost[i][j+1]\n                current_cell = (i, j+1)\n\n            # Check if we can move down\n            if i < len(cost)-1 and cost[i+1][j]!= 0:\n                path_cost += cost[i+1][j]\n                path_length += 1\n                path_avg += cost[i+1][j]\n                current_cell = (i+1, j)\n\n            # Update max path variables if we have found a better path\n            if path_cost > max_path_cost or (path_cost == max_path_cost and path_length > max_path_length):\n                max_path_cost = path_cost\n                max_path_length = path_length\n                max_path_avg = path_avg\n\n    # Return the maximum average\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables\n    max_avg = float('-inf')\n    start_cell = (0, 0)\n    path = [(0, 0)]\n    # Initialize the queue with the start cell\n    queue = [(0, 0, 0)]\n    while queue:\n        # Extract the next cell from the queue\n        (i, j, path_cost) = queue.pop(0)\n        # If the cell is the end cell, update the maximum average\n        if (i, j) == (N-1, N-1):\n            if path_cost > max_avg:\n                max_avg = path_cost\n        # Add the neighboring cells to the queue with the correct cost\n        for di, dj in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            new_i = i + di\n            new_j = j + dj\n            # Check if the neighbor is within bounds and not already in the path\n            if 0 <= new_i < N and 0 <= new_j < N and (new_i, new_j) not in path:\n                new_path_cost = path_cost + cost[new_i][new_j]\n                queue.append((new_i, new_j, new_path_cost))\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n\n    # iterate over all possible paths from the top-left to bottom-right cell\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                # for the first cell, we don't have a previous cell, so we can't consider it\n                continue\n            if i == 0:\n                # we start from the top row and move down to the next cell\n                next_i = i\n                next_j = j + 1\n            elif j == 0:\n                # we start from the left column and move right to the next cell\n                next_i = i + 1\n                next_j = j\n            else:\n                # we start from any cell in the middle of the matrix and move either right or down to the next cell\n                next_i = i + 1 if i < N - 1 else i\n                next_j = j + 1 if j < N - 1 else j\n\n            # compute the average of the current path and compare it with the maximum average seen so far\n            avg = sum(cost[i][j:next_j+1]) + sum(cost[i:next_i+1][j]) - sum(cost[i][j:next_j+1]) - sum(cost[i:next_i+1][j])\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [i, j] + [next_i, next_j]\n\n    # for the last cell, we don't have a previous cell, so we can't consider it\n    if max_path[-1] == [N-1, N-1]:\n        max_path = max_path[:-1]\n\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            new_students[name] = details\n    return new_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_data in students.items():\n        height, weight = student_data\n        if height > h and weight > w:\n            filtered_students[name] = student_data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        if details[0] > h and details[1] > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[student] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_same_pair(nums1, nums2):\n    # Initialize a dictionary to store the count of each value in the first list\n    counts = {nums1[i]: 0 for i in range(len(nums1))}\n    \n    # Loop through the second list and increment the count of each value in the counts dictionary\n    for num in nums2:\n        if num in counts:\n            counts[num] += 1\n    \n    # Count the number of indices where the counts dictionary has the same value for each key\n    same_count = 0\n    for count in counts.values():\n        if count == len(nums1):\n            same_count += 1\n    \n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Use the built-in eq() function to compare the values of the lists\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    \n    # Iterate through the first list and update the count of each number in the dictionary\n    for i in range(len(nums1)):\n        if nums1[i] not in count_dict:\n            count_dict[nums1[i]] = 1\n        else:\n            count_dict[nums1[i]] += 1\n    \n    # Iterate through the second list and check if the counts are the same for each number in the first list\n    count_match = True\n    for i in range(len(nums2)):\n        if nums2[i] not in count_dict:\n            count_match = False\n            break\n        elif count_dict[nums2[i]] == 0:\n            count_match = False\n            break\n        else:\n            count_dict[nums2[i]] -= 1\n    \n    # If the counts match for all numbers, return the indices of the numbers in the first list\n    if count_match:\n        indices = []\n        for i in range(len(nums1)):\n            if nums1[i] == nums2[i]:\n                indices.append(i)\n        return indices\n    \n    # If the counts don't match, return an empty list\n    else:\n        return []"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    same_pair_count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_pair_count += 1\n    return same_pair_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_int = int(power)\n    total = 0\n    for digit in base_str:\n        total += int(digit) ** power_int\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        digit_int = int(digit)\n        sum += digit_int ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize the sum of digits to 0\n    sum_digits = 0\n\n    # Iterate through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Add the integer value of the digit to the sum of digits\n        sum_digits += digit_int\n\n    # Calculate the sum of digits raised to the specified power\n    result = sum_digits ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # initialize sum to 0\n    total = 0\n    \n    # loop through each digit of the base and add the corresponding power to the sum\n    while base > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n    \n    # return the total sum of all digits raised to the specified power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = []\n    while base > 0:\n        digits.append(base % 10)\n        base //= 10\n    sum_of_digits = 0\n    for digit in digits:\n        sum_of_digits += digit ** power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through the digits of the base string and add them to the sum\n    for digit in base_str:\n        sum += int(digit)\n    # Calculate the sum of all digits raised to the specified power\n    result = sum ** power\n    # Return the result\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<=\\s)\"([^\"]*)\"(?=\\s)')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result = []\n    for i in range(N-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty tuple to store the results\n    results_tup = ()\n    # Loop through the input tuple\n    for i in range(len(test_tup) - 1):\n        # Append the product of the current element and the next element to the results tuple\n        results_tup += (test_tup[i] * test_tup[i+1],)\n    # Append the last element to the results tuple\n    results_tup += (test_tup[-1],)\n    # Return the results tuple\n    return results_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = (test_tup[0],) * N\n    for i in range(N):\n        result = (result[0] * result[i+1],) + result[i+1:]\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    new_tup.append(test_tup[-1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    return tuple([x * test_tup[i+1] for i in range(N-1)])"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = [test_tup[0]]\n    for i in range(1, N+1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns the list [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    def remove_duplicates(nums):\n        \"\"\"\n        Remove consecutive duplicates of a given list.\n        \"\"\"\n        return list(set(nums))\n\n    def group_consecutive_duplicates(nums):\n        \"\"\"\n        Group consecutive duplicates of a given list.\n        \"\"\"\n        return groupby(nums)\n\n    # Call the remove_duplicates function to remove duplicates\n    nums = remove_duplicates(nums)\n\n    # Call the group_consecutive_duplicates function to group duplicates\n    grouped_nums = group_consecutive_duplicates(nums)\n\n    # Iterate through the grouped_nums and remove them from the nums list\n    for _, group in grouped_nums:\n        nums = [num for num in nums if num!= group[0]]\n\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for num, group in groupby(nums):\n        result.extend(list(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return nums\n    return [k for k, g in groupby(enumerate(nums), lambda x: x[0] == x[1] - 1)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list with consecutive duplicates removed.\n    '''\n    return [item for key, group in groupby(sorted(nums)) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g) for k, g in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use itertools.groupby to group the list by consecutive duplicates\n    grouped_nums = groupby(iter(nums))\n    # Iterate over the grouped_nums and remove duplicates by taking the last element of each group\n    return [next(g[-1]) for g in grouped_nums]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 3:\n        return nums\n    \n    # Use groupby() to group the numbers by their common prefix\n    grouped = groupby(nums)\n    \n    # Create a new list to store the unique consecutive duplicates\n    unique_consecutive = []\n    \n    # Iterate over the grouped numbers\n    for prefix, group in grouped:\n        # If the next number in the group is different from the previous number in the group, add it to the unique_consecutive list\n        if next(group, None)!= prefix:\n            unique_consecutive.append(prefix)\n    \n    # Return the unique consecutive duplicates\n    return unique_consecutive"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(g[1]) for k, g in groupby(enumerate(nums), lambda x: x[1] == x[0])]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by consecutive duplicates and count the number of duplicates\n    grouped = groupby(nums)\n    count = 0\n    for group in grouped:\n        if len(list(group)) > 1:\n            count += len(list(group)) - 1\n    return count"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3*math.pi*r**2)/4\n    return s*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n    lateral_area = math.pi * r ** 2 * h / 3  # Formula for lateral surface area of a cone\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Using the formula for the lateral surface area of a cone:\n    lateral_surface_area = math.pi*r**2*(h/3)\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * r * h / 3\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * r  # Lateral surface area of a cone is pi * r^2\n    lateral_area = area * h  # Lateral surface area of the cone on the h axis\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2)\n    lateral_surface_area = area * h / 2\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    print(\"The lateral surface area of a cone is\",area)\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    area = math.pi*(r**2)*(h/3)\n    \n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (3/4)*(math.pi*r*r) + (math.pi*r*math.sqrt(3)/2)*(h/2)\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Compute the half-angle of the cone\n    theta = math.acos((r**2 + h**2 - r**2*h) / (2*r*h))\n    \n    # Compute the lateral surface area of the cone\n    LSA = math.pi*r**2*h*theta\n    \n    return LSA"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[^a-zA-Z0-9\\s]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^a-zA-Z0-9]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression to match all special characters\n    pattern = r'[^a-zA-Z0-9\\s]+'\n    # Use the re.sub() method to replace all matches with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    new_text = re.sub(pattern, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'([.,])', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_char = r\"[\\s,\\.]\"\n    text = re.sub(special_char, \":\", text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left pointer and the right pointer to the beginning of the array\n    left, right = 0, len(A) - 1\n\n    # Loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Compute the middle index of the array\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the target element, return its index\n        if A[mid] == x:\n            return mid\n\n        # If the middle element is greater than the target element, search in the left subarray\n        elif A[mid] > x:\n            right = mid - 1\n\n        # If the middle element is less than the target element, search in the right subarray\n        else:\n            left = mid + 1\n\n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1  # x is not in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    n = len(A)\n    left = 0\n    right = n - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            return mid\n\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n    # Iterate through the array and check if the current element is equal to the search element\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the element is found, update the index variable to the current index\n            index = i\n            break\n    # Return the index of the first occurrence of the search element\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1 # x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Binary search to find the first occurrence\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result and a list to store the products of each sublist\n    result = 0\n    sublist_prod = []\n    for i in range(1, n):\n        sublist_prod.append(arr[i]*arr[i-1])\n    # Traverse through the list to find the sum of products of all possible sublists\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the sublist is non-empty and contains at least one element\n            if j-i+1 > 0 and sublist_prod[j-i+1] > 0:\n                result += sublist_prod[j-i+1]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize a list to store the products of each subarray\n    prod_list = []\n\n    # Calculate the products of all subarrays and store them in the list\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n        prod_list.append(prod)\n\n    # Initialize a variable to store the sum of products of subarrays\n    sum_prod = 0\n\n    # Calculate the sum of products of all subarrays and store it in the variable\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sum_prod += prod_list[j-1] * prod_list[i]\n\n    # Return the sum of products of all subarrays\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        curr_sum = arr[i]\n        for j in range(i, n):\n            total_sum += curr_sum * arr[j]\n            curr_sum *= arr[j]\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # creating list of powers of arr\n    powers = [1] * n\n    for i in range(1, n):\n        powers[i] = powers[i-1] * arr[i]\n    \n    # finding sum of products of all subarrays\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i, n):\n            sum_prod += powers[j] * powers[n-1] - powers[i-1] * powers[j-1]\n    \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix = [0] * (n+1)\n    prefix[0] = 1\n    for i in range(1, n+1):\n        prefix[i] = prefix[i-1] * arr[i-1]\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += prefix[j+1] * prefix[n] - prefix[i] * prefix[j]\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find the total sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the product of the first element in the array\n    product = arr[0]\n\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_sum = 0\n\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_product = 1\n\n    # Calculate the sum of products of all possible subarrays\n    for i in range(len(arr)):\n        subarray_sum += arr[i]\n\n        # Calculate the product of the current element\n        subarray_product *= arr[i]\n\n        # Check if the subarray product is greater than the previous maximum\n        if subarray_product > total_sum:\n            total_sum = subarray_product\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] = (dp[i] % (10**9 + 7)) * (arr[i]*arr[j] % (10**9 + 7)) % (10**9 + 7)\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_arr = arr[i:j]\n            prod = 1\n            for x in sub_arr:\n                prod *= x\n            result += prod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Define an empty dictionary to store the products of sublists\n    subarray_products = {}\n    \n    # Define a function to calculate the product of subarrays\n    def product_of_subarray(arr, left, right):\n        return reduce(lambda x, y: x*y, arr[left:right+1])\n    \n    # Calculate the product of subarrays for all possible sublists\n    for left in range(len(arr)):\n        for right in range(left, len(arr)):\n            subarray_products[(left, right)] = product_of_subarray(arr, left, right)\n    \n    # Calculate the sum of products of subarrays\n    subarray_product_sum = sum(subarray_products.values())\n    \n    # Return the sum of products of subarrays\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        # Initialize a temporary variable to store the product of elements from i to n-1\n        product = 1\n\n        # Check if i is the last element of the list\n        if i == n-1:\n            # If i is the last element, the product will be 1\n            product *= arr[i]\n        else:\n            # If i is not the last element, the product will be the product of all elements from i to n-1\n            product *= arr[i] * sum_Of_Subarray_Prod(arr[:i+1])\n\n        # Add the product of the current sublist to the result\n        res += product\n\n    return res"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    # toggle the middle bits\n    middle_bits = (n >> 1) & ((1 << (n.bit_length() - 2)) - 1)\n    # combine the first, last, and middle bits\n    new_n = first_bit | middle_bits | last_bit\n    # return the new number\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = (1 << 63) - 1   # Get the bitwise representation of all 1's in a 64-bit integer\n    first_bit = n & mask   # Get the first bit\n    last_bit = n >> 63      # Get the last bit\n    new_first_bit = not (first_bit ^ mask)   # Toggle the first bit\n    new_last_bit = not last_bit   # Toggle the last bit\n    new_n = (new_first_bit | new_last_bit) << 1   # Set the new first and last bits to 1 and the rest to 0\n    return new_n & mask   # Only return the first and last bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the input number\n    binary_str = bin(n)[2:]\n    \n    # Check if the first and last bits are 0 or 1\n    if binary_str[0] == '0' and binary_str[-1] == '0':\n        # If first and last bits are 0, toggle the middle bit\n        middle_bit = int(binary_str[len(binary_str)//2], 2)\n        if middle_bit == 0:\n            n = n ^ 1 << len(binary_str)//2\n        else:\n            n = n ^ 0 << len(binary_str)//2\n    elif binary_str[0] == '1' and binary_str[-1] == '1':\n        # If first and last bits are 1, toggle the middle bit\n        middle_bit = int(binary_str[len(binary_str)//2], 2)\n        if middle_bit == 0:\n            n = n ^ 0 << len(binary_str)//2\n        else:\n            n = n ^ 1 << len(binary_str)//2\n    else:\n        # If first and last bits are 0 or 1, do nothing\n        n = n\n    \n    # Convert the resulting binary number to integer and return it\n    return int(n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert the binary number to a list of bits\n    binary_list = bin(n)[2:].split('b')\n    bits = [int(x) for x in binary_list]\n    \n    # Toggle the middle bits and join the list back to binary number\n    middle_bits = [1-bit for bit in bits[1:-1]]\n    binary_result = '0b'+str(middle_bits[0])+'b'.join(map(str,middle_bits[1:-1]))+'0b'+str(middle_bits[-1])\n    \n    # Convert the binary result back to decimal number\n    return int(binary_result,2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Toggle the first and last bits\n    n = n ^ (1 << 31)\n    \n    # Toggle middle bits\n    n = (n ^ (n >> 1)) & 0xFFFFFFFF\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert the integer to binary representation\n    bin_str = bin(n)[2:]\n\n    # Toggle middle bits\n    middle_bits = bin_str[1:-1]\n    for i in range(0, len(middle_bits), 2):\n        if middle_bits[i] == '0':\n            middle_bits[i] = '1'\n        else:\n            middle_bits[i] = '0'\n\n    # Convert the binary string back to integer\n    new_int = int(middle_bits, 2)\n\n    # Return the modified integer\n    return new_int"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Set the middle bits to 0\n    middle_bits = n & ~(1 << 1) & ~(1 << (n.bit_length() - 2))\n\n    # Set the first and last bits to opposite values\n    first_bit = 1 if n & 1 else 0\n    last_bit = 1 if n >> 1 & 1 else 0\n\n    return n ^ middle_bits ^ (first_bit << 1) ^ (last_bit << (n.bit_length() - 2))"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits of n\n    first_bit = n & 1\n    last_bit = n >> 31\n    # Toggle the middle bits except for the first and last bits\n    toggled_middle_bits = n ^ (first_bit | last_bit)\n    # Combine the toggled middle bits with the first and last bits\n    result = (toggled_middle_bits << 1) | first_bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # Calculate the number of bits to toggle\n    num_toggle_bits = num_bits - 2\n    \n    # Calculate the index of the first and last bits to toggle\n    toggle_index = 1 + (num_bits - 2)\n    \n    # Create a string with all bits set to 1 except the first and last bits\n    middle_bits = '1' * num_toggle_bits + '0' * (num_bits - 2 - num_toggle_bits)\n    \n    # Create a string with all bits set to 0 except the first and last bits\n    first_bits = '0' * num_toggle_bits + '1' * (num_bits - 2 - num_toggle_bits)\n    \n    # Combine the two strings to form the final number\n    final_number = middle_bits + n[toggle_index:] + first_bits\n    \n    # Convert the final number to an integer\n    final_int = int(final_number, 2)\n    \n    return final_int"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Reverse the binary representation of n\n    n = bin(n)[2:][::-1]\n    # Get the length of n\n    length = len(n)\n    # Initialize an empty string to store the modified number\n    modified_num = ''\n    # Initialize the indexes for the first and last bits\n    first_bit = 0\n    last_bit = length - 1\n    # Toggle the middle bits\n    for i in range(length - 2):\n        if n[i] == '0':\n            modified_num += '1'\n        else:\n            modified_num += '0'\n        if i == first_bit:\n            first_bit += 1\n        else:\n            first_bit -= 1\n        if i == last_bit:\n            last_bit -= 1\n        else:\n            last_bit += 1\n    # Convert the modified number from string to integer and return it\n    return int(modified_num, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index!= 0 and a[index-1]!= x:\n        return index-1\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)  # find the left insertion point using binary search\n    if i == 0:  # if x is less than the first element, i will be 0, so return i\n        return i\n    elif a[i-1] < x:  # if x is greater than the element at i-1, return i\n        return i\n    else:  # if x is equal to the element at i-1, return i-1\n        return i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i!= 0 and a[i - 1] == x:\n        return i - 1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i + 1\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        print(f'{string} is starting with a vowel')\n    else:\n        print(f'{string} is not starting with a vowel')"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_str(string):\n    print(\"The string starts with a vowel.\")\nelse:\n    print(\"The string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_numbers = [0]\n    for i in range(1, n+1):\n        triangular_numbers.append(i*i*i)\n    index_of_smallest_triangular_number = math.ceil(math.log10(min(triangular_numbers)))\n    return index_of_smallest_triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def find_triangular_number(n):\n        triangular_number = 0\n        for i in range(1, n+1):\n            triangular_number += i\n        return triangular_number\n\n    def get_index(n):\n        triangular_number = find_triangular_number(n)\n        return triangular_number - n\n\n    return get_index(n)\n\nn = int(input(\"Enter the number of digits for the smallest triangular number: \"))\nprint(\"Index of smallest triangular number with\", n, \"digits is:\", find_Index(n))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to check if a number is triangular or not\n    def is_triangular(n):\n        triangular_number = 1\n        for i in range(2, int(math.sqrt(n))+1):\n            triangular_number += i\n        return triangular_number == n\n    \n    # Function to find the smallest triangular number with n digits\n    def find_smallest_triangular(n):\n        triangular_number = 1\n        while True:\n            if is_triangular(triangular_number):\n                return triangular_number\n            triangular_number += 1\n    \n    # Find the index of the smallest triangular number with n digits\n    smallest_triangular = find_smallest_triangular(n)\n    index = n-1\n    while True:\n        if index % 2 == 1:\n            smallest_triangular *= (2 * index - 1)\n        index //= 2\n        if smallest_triangular == triangular_number:\n            return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def triangular_number(n):\n        if is_prime(n):\n            return n\n        else:\n            return 3*n + 1\n    \n    def find_sum(n):\n        sum_of_digits = 0\n        for i in range(n):\n            sum_of_digits += int(math.log10(triangular_number(i+1)))\n        return sum_of_digits\n    \n    index_of_smallest_triangular_number = triangular_number(10**n-1)\n    \n    return index_of_smallest_triangular_number - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    def is_triangular(num):\n        \"\"\"\n        A function to check if a number is triangular or not.\n        \"\"\"\n        if num == 0:\n            return True\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def smallest_triangular_number(n):\n        \"\"\"\n        A function to find the smallest triangular number with n digits.\n        \"\"\"\n        # Initialize the smallest triangular number to be n-digit\n        smallest = 10**(n-1)\n        # Keep adding digits to the smallest triangular number until it is a triangular number\n        while not is_triangular(smallest):\n            smallest *= 10\n        return smallest\n\n    # Find the smallest triangular number with n digits\n    smallest = smallest_triangular_number(n)\n\n    # Find the index of the smallest triangular number\n    index = 10**(n-1)\n    while index <= smallest:\n        if is_triangular(index):\n            return index-smallest\n        index *= 10\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Helper function to check if a number is a triangular number\n    def is_triangular(num):\n        return num == sum(int(i) for i in str(num))\n\n    # Initialize the smallest triangular number and the smallest index\n    smallest_num = 10**(n-1)\n    smallest_index = 1\n\n    # Check if the smallest triangular number is a triangular number\n    if is_triangular(smallest_num):\n        return smallest_index\n\n    # Initialize the current triangular number and the current index\n    current_num = smallest_num\n    current_index = smallest_index\n\n    # Iterate until the current triangular number becomes a triangular number\n    while not is_triangular(current_num):\n        # Check if the next triangular number is smaller than the current one\n        next_num = current_num + smallest_num\n        if next_num < smallest_num:\n            # If it's smaller, update the smallest triangular number and its index\n            smallest_num = next_num\n            smallest_index = current_index + 1\n\n        # Update the current triangular number and its index\n        current_num = next_num\n        current_index = current_index + 1\n\n    # Return the index of the smallest triangular number\n    return current_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = 10**(n-1)\n    count = 1\n    while True:\n        if triangular_number == 0:\n            return count\n        triangular_number += math.sqrt(triangular_number)\n        count += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "There is no specific problem statement mentioned in the prompt. Please provide more details."
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n <= 0:\n        return None\n    \n    # Initialize the smallest triangular number\n    t = 1\n    \n    # Iterate n-1 times\n    for i in range(n-1):\n        # Compute the next triangular number\n        t += i\n        \n        # Check if the current triangular number is the smallest\n        if t <= 10**(n-1-i) and t > t_smallest:\n            t_smallest = t\n    \n    # Return the index of the smallest triangular number\n    return math.ceil(t_smallest**0.5)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Initialize variables\n    i = 1\n    min_tri = 1\n\n    # Loop to find the index of smallest triangular number with n digits\n    while True:\n        tri = i * (i + 1)\n        if tri >= 10 ** n:\n            break\n        i += 1\n\n    # Return the index of smallest triangular number with n digits\n    return i - 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a list of tuples\n    test_list = list(test_tup)\n    \n    # Create an empty dictionary\n    dictionary = {}\n    \n    # Loop through the list of tuples\n    for i in range(0, len(test_list), 2):\n        # Add the key-value pair to the dictionary\n        dictionary[test_list[i]] = test_list[i+1]\n        \n    # Return the dictionary\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            d[test_tup[i]] = test_tup[i+1]\n        else:\n            d[test_tup[i]] = test_tup[i-1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the tuple and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # create an empty dictionary\n    d = {}\n    # iterate over the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # initialize empty dictionary\n    my_dict = {}\n    \n    # loop through tuple elements\n    for i in range(0, len(test_tup), 2):\n        # add key-value pair to dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n        \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dictionary[key] = value\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(*test_tup))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are same or not.\n    \"\"\"\n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Loop through all the characters in the string\n    for char in s:\n        # If the character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        first_char = s[0]\n        for char in s:\n            if char!= first_char:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and checks whether all the characters are same or not.\n    '''\n    # converting the string into a list\n    str_list = list(s)\n\n    # taking the first character of the string as the first character of the list\n    first_char = str_list[0]\n\n    # iterating over the rest of the characters in the string and comparing them with the first character\n    for char in str_list[1:]:\n        if char!= first_char:\n            return False\n\n    # if all the characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char = s[0]\n    for i in range(len(s)):\n        if s[i]!= char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters are same or not in a given string.\n    \"\"\"\n    # Checking the length of the string to make sure it is not empty\n    if len(s) == 0:\n        return True\n    # Checking if all the characters in the string are same\n    elif all(s[0] == s[i] for i in range(len(s))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to list\n    lst = list(s)\n    # check if the list is empty or not\n    if len(lst) == 0:\n        return True\n    # check if all the characters in the list are same or not\n    else:\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[0]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # converting the string to lowercase and removing all spaces\n    s = s.lower().replace(' ', '')\n\n    # initializing a variable to store the first character of the string\n    first_char = s[0]\n\n    # looping through the string\n    for i in range(len(s)):\n        # checking if the current character is the same as the first character\n        if s[i]!= first_char:\n            # if the characters are not the same, the function returns False\n            return False\n\n    # if all the characters in the string are the same, the function returns True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n\n    # calculate the area using Heron's formula\n    area = (s ** 2 + side ** 2 + side ** 2 + side ** 2) / (4 * math.tan(math.pi / 6))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    return (1/6) * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    return math.sqrt(s * (s - 1) * (s - 2) * (s - 3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the area using Heron's formula\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** (1/2)\n    area = math.sqrt(s * (s - side) * (s - 2 * side) * (s - side))\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side**2 * (math.sqrt(2) + 1)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    perimeter = side * (1 + math.sqrt(2) / 2)\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(perimeter ** 3)\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m == 0:\n        return list\n    \n    # Reverse the first half of the list\n    for i in range(m//2):\n        temp = list[i]\n        list[i] = list[n-i-1]\n        list[n-i-1] = temp\n    \n    # Reverse the remaining half of the list\n    for i in range(m//2, n//2):\n        temp = list[i]\n        list[i] = list[m-i-1]\n        list[m-i-1] = temp\n    \n    # Reverse the entire list\n    for i in range(n//2, m//2):\n        temp = list[i]\n        list[i] = list[n-i-1]\n        list[n-i-1] = temp\n        \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If m is greater than or equal to n, no rotation is required\n    if m >= n:\n        return list\n    \n    # Find the rightmost element of the list\n    right_most = list[n-1]\n    \n    # Reverse the list from m to n-1\n    for i in range(m, n):\n        list[i-m] = list[i]\n    \n    # Reverse the entire list\n    for i in range(0, m):\n        list[n-i-1] = list[m+i]\n    \n    # Insert the rightmost element in the first position\n    list[0] = right_most\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if the input list is not empty\n    if not list:\n        return list\n    \n    # Calculate the length of the list\n    length = len(list)\n    \n    # Check if the input list has length greater than 1\n    if length <= 1:\n        return list\n    \n    # If the specified number of items is greater than or equal to the length of the list,\n    # rotate all the items to the left direction\n    if m >= length:\n        return list[m:] + list[:m]\n    \n    # If the specified number of items is less than or equal to the length of the list,\n    # rotate only the required number of items to the right direction\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # calculate the length of the list\n    length = len(list)\n    \n    # check if the specified number of items is greater than the length of the list\n    if m > length:\n        return list\n    \n    # calculate the number of items to be rotated\n    n = m % length\n    \n    # rotate the list by n items to the right\n    for i in range(n):\n        # shift all the items to the right by 1\n        list.append(list.pop(0))\n    \n    # add the last n items to the front of the list\n    for i in range(n):\n        list.append(list.pop(0))\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns the rotated list.\n    The list is rotated n items to the right direction.\n    \"\"\"\n    # if n is greater than or equal to the length of the list\n    if n >= len(lst):\n        # then return the list as is\n        return lst\n    \n    # create a new empty list to store the rotated elements\n    rotated_lst = []\n    \n    # loop through the original list from the last element to the second last element\n    for i in range(len(lst)-1, n-1, -1):\n        # append the current element to the rotated_lst\n        rotated_lst.append(lst[i])\n    \n    # append the first element of the original list to the rotated_lst\n    rotated_lst.append(lst[0])\n    \n    # return the rotated_lst\n    return rotated_lst\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # if m is greater than n, just return the original list\n    if m > n:\n        return list\n    # if m is zero, just return the original list\n    if m == 0:\n        return list\n    # create a new list with first m items of the original list\n    temp = list[:m]\n    # create a new list with last n-m items of the original list\n    left = list[m:]\n    # concatenate the new list with the last m items of the original list\n    return temp + left"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    n = len(list)\n    # Check if the number of rotation items is less than 0 or greater than list size\n    if m < 0 or m >= n:\n        return list\n    # Reverse the first m elements of the list\n    list = list[m:] + list[:m]\n    # Reverse the remaining elements of the list\n    list = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Check if list is not empty\n    if not list:\n        return list\n    \n    # Calculate the new length of the list\n    n = len(list)\n    \n    # Calculate the number of rotations to perform\n    rotations = m % n\n    \n    # Check if rotations is positive or negative\n    if rotations < 0:\n        rotations += n\n    \n    # Perform the rotations\n    for i in range(rotations):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Initialize the new list with empty slots\n    new_list = [None] * (len(list) + m)\n    # Copy the items from the old list to the new list\n    for i in range(len(list)):\n        new_list[(i + m) % len(list)] = list[i]\n    # Return the new list with the items rotated to the right\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Check if list is empty\n    if n == 0:\n        return []\n    # Check if m is negative or greater than or equal to n\n    elif m < 0 or m >= n:\n        return list\n    # Store the first m elements of the list in a new list\n    temp = list[:m]\n    # Append the last n-m elements of the list to the new list\n    for i in range(m, n):\n        temp.append(list[i])\n    # Return the new list\n    return temp"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for item in test_tup:\n        if item is None:\n            none_count += 1\n    return none_count == len(test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    return any(None in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for element in test_tup:\n        if element is None:\n            none_count += 1\n    if none_count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible(num):\n        '''\n        Check if a number is divisible by every digit it contains.\n        '''\n        digit_sum = sum(int(d) for d in str(num))\n        return digit_sum % 10 == 0\n\n    return list(filter(lambda x: startnum <= x <= endnum, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: x % 10 == 0 and all(int(d) % 10 == 0 for d in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit!= 0 and num % digit!= 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda x: all(d in str(x) for d in str(startnum) if x % int(d) == 0)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(num):\n        return all(int(digit) % num == 0 for digit in str(num))\n    \n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda n: all(int(digit) % 2 == 0 for digit in str(n)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(d) % int(str(x)[i]) == 0 for i, d in enumerate(str(x))), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(d in str(x) for d in str(startnum)) and all(d in str(x) for d in str(endnum))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area using formula for a sector\n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # convert angle to radians\n    angle = a*math.pi/180\n    if angle > 360:\n        return None\n    # calculate area of sector\n    area = r*r*angle/360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n    # Calculate area of sector using Heron's formula\n    s = 2 * r * math.sin(math.radians(a/2))\n    return math.pi * r**2 * s"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360:\n        print(\"Invalid angle\")\n        return None\n    \n    # Calculate area of sector\n    area = r * a * (math.sin(math.radians(a))) / 360\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: Angle cannot be greater than 360 degrees.\")\n        return None\n    else:\n        return math.pi * (r**2) * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    dp = [[0] * (o+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i][j-1], dp[i-1][j], dp[i-1][k-1])\n\n    return dp[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize variables to store length of LCS, LCS itself, and\n    # lengths of three strings\n    lcs_length = 0\n    lcs = \"\"\n    len_X = len(X)\n    len_Y = len(Y)\n    len_Z = len(Z)\n\n    # Traverse through all possible combinations of prefixes of three strings\n    for i in range(len_X + 1):\n        for j in range(len_Y + 1):\n            for k in range(len_Z + 1):\n                # If current combination is a LCS, update LCS length and string\n                if i == 0 or j == 0 or k == 0:\n                    continue\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs_length = max(lcs_length, i, j, k)\n                    lcs = X[i-1]\n                # If current combination is longer than previous longest LCS, update it\n                elif i >= j and i >= k and i > lcs_length:\n                    lcs_length = i\n                elif j >= i and j >= k and j > lcs_length:\n                    lcs_length = j\n                elif k >= i and k >= j and k > lcs_length:\n                    lcs_length = k\n\n    # Return the longest common subsequence as a string\n    return lcs[:lcs_length]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Step 1\n    T = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Step 2\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    T[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    T[i][j][k] = T[i - 1][j - 1][k - 1] + 1\n                else:\n                    T[i][j][k] = max(T[i - 1][j][k], T[i][j - 1][k], T[i - 1][j - 1][k - 1])\n\n    # Step 3\n    i = m\n    j = n\n    k = o\n\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif T[i - 1][j][k] == T[i - 1][j][k - 1]:\n            i -= 1\n        elif T[i][j - 1][k] == T[i - 1][j - 1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    #creating a dictionary to store the lengths of the longest common subsequences for each string\n    #key: length of the longest common subsequence\n    #value: dictionary of all common subsequences with that length\n    lcs_dict = {}\n    #finding the length of the longest common subsequence for each string using dynamic programming\n    for i in range(len(X) + 1):\n        lcs_dict[i] = {}\n        for j in range(len(Y) + 1):\n            lcs_dict[i][j] = 0\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            if i == 0 or j == 0:\n                lcs_dict[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                lcs_dict[i][j] = lcs_dict[i - 1][j - 1] + 1\n            else:\n                lcs_dict[i][j] = max(lcs_dict[i - 1][j], lcs_dict[i][j - 1])\n    #finding the length of the longest common subsequence for the given three string sequence\n    max_lcs = lcs_dict[len(X)][len(Y)]\n    #finding all common subsequences with the length of the longest common subsequence\n    lcs_list = []\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            if i == 0 or j == 0:\n                continue\n            elif X[i - 1] == Y[j - 1] and lcs_dict[i][j] == max_lcs:\n                lcs_list.append((X[i - 1], Y[j - 1]))\n    #sorting the common subsequences in descending order of length\n    lcs_list = sorted(lcs_list, key=lambda x: (-len(x[0]), x[1]))\n    #constructing the longest common subsequence string\n    lcs_str = \"\"\n    for i in range(len(lcs_list)):\n        lcs_str += lcs_list[i][0]\n    return lcs_str"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find length of each string\n    m, n, l = len(X), len(Y), len(Z)\n\n    # Create a table to store LCS length of substrings\n    dp = [[0] * (l + 1) for i in range(m + 1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Return the length of the longest common subsequence\n    return dp[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    # create a table to store lengths of longest common suffixes of all prefixes of X, Y and Z\n    L = [[0]*(p+1) for i in range(m+1)] \n    # base cases\n    for i in range(m+1):\n        L[i][0] = 0\n    for j in range(n+1):\n        L[0][j] = 0\n    # fill the table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][k-1])\n    # print the length of the LCS\n    lcs = \"\"\n    i = m\n    j = n\n    k = p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] > L[i][j-1] and L[i-1][j] > L[i][k-1]:\n            i -= 1\n        elif L[i][j-1] > L[i][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    This function finds the longest common subsequence for the given three string sequence.\n    '''\n    # Get length of strings\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store LCS lengths\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill the 3D table using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # Find the longest common subsequence using backtracking\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        elif X[i-1] == Z[k-1]:\n            i -= 1\n            k -= 1\n        else:\n            j -= 1\n            k -= 1\n\n    # Reverse the lcs and return it\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0]*(p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize a dictionary to store the length of longest common subsequence ending at each index\n    dp = {}\n\n    # Traverse through all possible starting indices of the three strings\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n\n                # Check if the current combination of indices is already in the dictionary\n                if (i, j, k) in dp:\n                    continue\n\n                # If the current combination of indices is not in the dictionary, check if it's a valid LCS\n                if X[i:j+1] == Y[j:k+1] == Z[k:]:\n                    dp[(i, j, k)] = 1 + max(dp.get((i, j, k-1), 0), dp.get((i, j-1, k), 0), dp.get((i-1, j, k), 0))\n\n                # If the current combination of indices is not a valid LCS, continue to the next combination\n                else:\n                    dp[(i, j, k)] = 0\n\n    # Traverse through all possible starting indices of the three strings to find the length of the longest common subsequence\n    lcs_length = 0\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            for k in range(len(Z)):\n                if dp[(i, j, k)] > lcs_length:\n                    lcs_length = dp[(i, j, k)]\n\n    # Return the longest common subsequence\n    return X[lcs_length-1:lcs_length]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store LCS of all subproblems\n    table = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:  # base cases\n                    table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:  # if the characters match\n                    table[i][j][k] = 1 + table[i-1][j-1][k-1]\n                else:  # if the characters don't match, the LCS of the 3 subproblems is the maximum of the LCS of the 2 subproblems\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # return the LCS of the 3 subproblems\n    return table[m][n][p]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # create a regular expression pattern to match words starting with capital letters\n    pattern = r'[A-Z][a-z]+'\n\n    # replace all the words starting with capital letters with a space and return the modified string\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b([A-Z][a-z]+)\\b', r'\\1 ', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert all characters to lower case\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Loop through each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        word = words[i]\n        # Check if the first letter is uppercase\n        if word[0].isupper():\n            # Add a space before the first letter and join the rest of the word\n            words[i] = word[0] +'' + word[1:]\n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # Use regex to find capital letters and split the string into words\n    words = re.findall(r'\\b\\w+', string.lower())\n    \n    # Create a list of words with spaces between them\n    space_separated_words = []\n    for word in words:\n        if len(word) > 1 and word[0].isupper():\n            space_separated_words.append(word +'')\n        else:\n            space_separated_words.append(word)\n    \n    # Join the list of words with spaces to form a string with spaces between them\n    return ''.join(space_separated_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r'\\1\\ ', string)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # define a regular expression to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    \n    # use the regular expression to find all words starting with capital letters in the given string\n    matches = re.findall(pattern, str1)\n    \n    # loop through each match and replace it with a space\n    for match in matches:\n        str1 = str1.replace(match, match.replace(match[0],'' + match[0]))\n    \n    # return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = r'\\b\\w'\n    words = re.findall(pattern, str1)\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(''+ word)\n        else:\n            new_words.append(word)\n    return ''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b\\w', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    words_capitalized = [word.capitalize() for word in words]\n    return''.join(words_capitalized)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Function to split the string into words\n    words = re.findall(r'\\b[A-Z]\\w+\\b', str1)\n    \n    # Iterate over the words and check if the first character is capital\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # If it is, add a space before the word\n            words[i] ='' + words[i]\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert the list of strings to a list of integers\n    nums = [int(n) for n in nums_str]\n    # Sort the list of integers\n    nums.sort()\n    # Convert the sorted list of integers back to a list of strings\n    nums_str = [str(n) for n in nums]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all strings of numbers to float and sort them in ascending order\n    nums_float = [float(n) for n in nums_str]\n    nums_float.sort()\n    \n    # Convert the sorted float list back to string and return it\n    return [str(n) for n in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    \n    Args:\n    nums_str (list): A list of strings of numbers.\n    \n    Returns:\n    A list of strings of numbers sorted in ascending order.\n    '''\n    \n    # Split the strings into integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the integers in ascending order\n    nums.sort()\n    \n    # Convert the sorted integers back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # sort the integers in ascending order\n    nums.sort()\n    \n    # convert the sorted integers back to strings and return the list of strings\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str (list): A list of strings of numbers.\n\n    Returns:\n        list: A list of strings of numbers sorted numerically.\n    \"\"\"\n    # Convert all strings to float to ensure that they can be compared numerically\n    nums_float = [float(num_str) for num_str in nums_str]\n\n    # Sort the list of floats numerically\n    nums_float.sort()\n\n    # Convert the sorted floats back to strings and return the sorted list\n    return [str(num_float) for num_float in nums_float]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to numeric values\n    nums = [int(num) for num in nums_str]\n    # Sort the numeric values in ascending order\n    nums.sort()\n    # Convert the sorted numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # sort the list of integers using the sorted() function\n    nums.sort()\n    # convert the list of integers back to a list of strings\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.remove(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for elem in test_list:\n        for item in test_tup:\n            test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for i in test_list:\n        test_list.append(i)\n    for i in test_tup:\n        test_list.append(i)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item in test_tup:\n            test_list.remove(item)\n            test_list.append(test_tup)\n            break\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    \n    # check if the left child is smaller than the current node\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    \n    # check if the right child is smaller than the current node\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    # check if the parent is smaller than the current node\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    elif i == 0:\n        return arr[i] <= arr[2 * i + 1]\n    elif i == len(arr) // 2:\n        return arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2]\n    else:\n        return arr[i] <= arr[2 * i + 1] and arr[i] <= arr[2 * i + 2] and arr[2 * i + 1] <= arr[2 * i + 2]\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2 == 0:\n        return check_min_heap_helper(arr, len(arr) // 2 - 1)\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    # Base case\n    if i == 0:\n        return True\n    \n    # If the parent node is greater than or equal to its children nodes, it is a min heap\n    if arr[i] >= arr[2*i] and arr[i] >= arr[2*i+1]:\n        return False\n    else:\n        # Recursively check the children nodes\n        return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    left = 2 * i\n    right = 2 * i + 1\n    if arr[i] > arr[left] and arr[i] > arr[right]:\n        return False\n    elif arr[i] > arr[left]:\n        return check_min_heap_helper(arr, left)\n    else:\n        return check_min_heap_helper(arr, right)\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_idx = i\n\n    # If left child is smaller than root\n    if left < len(arr) and arr[left] < arr[min_idx]:\n        min_idx = left\n\n    # If right child is smaller than root or both children are present\n    if right < len(arr) and arr[right] < arr[min_idx]:\n        min_idx = right\n\n    # If root is not smaller than its children, return False\n    if min_idx!= i:\n        return False\n\n    # If root is smaller than its children, return True\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Traverse array from the second element\n    for i in range(1, n):\n        # If the current element is smaller than its parent, return False\n        if arr[i] < arr[i // 2]:\n            return False\n\n    # If the array contains all the elements of a min heap, return True\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n\n    parent = (i - 1) // 2\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if arr[parent] > arr[i]:\n        return False\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, parent)\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i < 0:\n        return True\n    \n    if arr[i] <= arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, len(arr)//2-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    # Helper function to check if a given array represents a min heap or not\n    def check_min_heap_helper(arr, i):\n        # Base case: if the array is empty or the root is greater than its children, return False\n        if i > len(arr) // 2:\n            return True\n        \n        # Check if the root is greater than its children\n        if arr[i] > min(arr[2*i], arr[2*i+1]):\n            return False\n        \n        # Recursively check if the root is greater than its children\n        return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\n    # Helper function to count the number of nodes in the given array\n    def count_nodes(arr):\n        # Base case: if the array is empty, return 0\n        if len(arr) == 0:\n            return 0\n        \n        # Recursively count the nodes in the left subtree\n        left_nodes = count_nodes(arr[:len(arr)//2])\n        \n        # Recursively count the nodes in the right subtree\n        right_nodes = count_nodes(arr[len(arr)//2:])\n        \n        # Return the sum of left and right nodes\n        return left_nodes + right_nodes\n\n    # Check if the given array represents a min heap or not\n    if len(arr) == count_nodes(arr):\n        # If the array represents a min heap, return True\n        return True\n    else:\n        # If the array does not represent a min heap, return False\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[parent] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        return False\n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacob_num = 0\n    for i in range(n):\n        jacob_num = (jacob_num * (2*i+1)) // (i+1)\n    return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    jacobsthal_number = 0\n    for i in range(n):\n        jacobsthal_number += b\n        a, b = b, a + b\n    return jacobsthal_number"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n + 1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i - 1] + jacobsthal_numbers[i - 2])\n    return jacobsthal_numbers[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        # even\n        return 2 * (n + 1)\n    else:\n        # odd\n        a = 2\n        b = 1\n        for i in range(2, n):\n            a, b = b, a + b\n        return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    j = 0\n    l = 1\n    # Calculate the nth jacobsthal number\n    while j < n:\n        # Check if the number is even or odd\n        if j % 2 == 0:\n            j += 1\n            l += 1\n        else:\n            l += 2\n        j += 1\n    return l"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (jacobsthal_num(n-1) + jacobsthal_num(n-2))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    a = 1\n    b = 1\n    while n > 0:\n        if n % 2 == 0:\n            j += 1\n            a, b = b, a + b\n        n //= 2\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return (2*jacobsthal_num(n-1) - jacobsthal_num(n-3))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 21\n    elif n == 7:\n        return 43\n    elif n == 8:\n        return 85\n    elif n == 9:\n        return 171\n    elif n == 10:\n        return 341\n    elif n == 11:\n        return 683\n    elif n == 12:\n        return 1365\n    elif n == 13:\n        return 2731\n    else:\n        return 0"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[0]) # sort by the first element of each tuple\n    min_val = float('inf')\n    count = 0\n    for i in range(K):\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n            count = 1\n        elif test_list[i][0] == min_val:\n            count += 1\n        if count == K:\n            break\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    if len(test_list) < K:\n        return None\n    \n    left = 0\n    right = 1\n    min_kth = float('inf')\n    min_kth_index = -1\n    \n    while right < len(test_list):\n        if right - left + 1 == K:\n            if test_list[right][0] < min_kth:\n                min_kth = test_list[right][0]\n                min_kth_index = right\n                \n        elif right - left + 1 > K:\n            if test_list[right][0] < min_kth:\n                min_kth = test_list[right][0]\n                min_kth_index = right\n                \n            left = right\n            \n        right += 1\n    \n    if min_kth_index!= -1:\n        return min_kth_index\n    else:\n        return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and returns the minimum K records from the list.\n    If there are less than K records in the list, the function will return all the records.\n    '''\n    min_records = sorted(test_list, key=lambda x: x[0])[:K]\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # sort the list of tuples by the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # initialize the minimum k as infinity\n    min_k_val = float('inf')\n    \n    # initialize the minimum k index as -1\n    min_k_index = -1\n    \n    # iterate over the sorted list and check if the current index value is less than K\n    for i in range(len(test_list)):\n        if i+1 <= K:\n            # if the current index value is less than K, update the minimum k value and index\n            if test_list[i][1] < min_k_val:\n                min_k_val = test_list[i][1]\n                min_k_index = i\n    \n    # return the minimum k value and index\n    return min_k_val, min_k_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Initialize minimum k value\n    min_val = float('inf')\n\n    # Iterate through the tuple list and compare each element with minimum k value\n    for tup in test_list:\n        if len(tup) >= K:\n            if min_val > tup[K-1]:\n                min_val = tup[K-1]\n\n    # Return the minimum k value\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by the first element of each tuple\n    test_list.sort()\n\n    # Initialize a variable to store the minimum value of k\n    min_value = float('inf')\n\n    # Initialize a variable to store the index of the minimum value\n    min_index = 0\n\n    # Initialize a variable to store the count of k\n    count = 0\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # If the count is less than or equal to k and the first element of the current tuple is less than the minimum value, update the minimum value and index\n        if count <= K and test_list[i][0] < min_value:\n            min_value = test_list[i][0]\n            min_index = i\n\n        # If the count is less than or equal to k and the first element of the current tuple is equal to the minimum value, increment the count\n        if count <= K and test_list[i][0] == min_value:\n            count += 1\n\n    # Return the minimum value and index of the list\n    return min_value, min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for item in test_list:\n        if item[0] in freq:\n            freq[item[0]] += 1\n        else:\n            freq[item[0]] = 1\n    \n    # Sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Find the first K elements and return them\n    result = []\n    for i in range(K):\n        result.append(sorted_freq[i][0])\n    \n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    # Create a dictionary to store the count of each item\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Find the minimum k records by sorting the dictionary by the values in descending order\n    sorted_count_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n\n    # Create a list of tuples containing the items and their count\n    min_k_records = []\n    for item, count in sorted_count_dict.items():\n        if count >= K:\n            min_k_records.append((item, count))\n\n    # Return the list of tuples\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # sort the list of tuples in ascending order based on second element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # initialize the minimum k count to zero\n    min_count = 0\n    \n    # initialize the minimum count to infinity\n    min_sum = float('inf')\n    \n    # initialize the count to zero\n    count = 0\n    \n    # initialize the sum to zero\n    sum = 0\n    \n    # iterate over the sorted list of tuples\n    for i in range(len(sorted_list)):\n        # if the count is less than K, increment the count and add the second element of the current tuple to the sum\n        if count < K:\n            count += 1\n            sum += sorted_list[i][1]\n        # else, check if the sum is less than the current minimum sum\n        elif sum < min_sum:\n            min_sum = sum\n            min_count = count\n        \n        # reset the count and sum to zero for the next iteration\n        count = 0\n        sum = 0\n    \n    # return the minimum k count and minimum sum\n    return min_count, min_sum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    # Sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize minimum value and its index\n    min_val = sorted_list[0][1]\n    min_idx = 0\n\n    # Iterate over the sorted list\n    for i in range(1, len(sorted_list)):\n        # If the current value is smaller than the minimum value, update the minimum value and index\n        if sorted_list[i][1] < min_val:\n            min_val = sorted_list[i][1]\n            min_idx = i\n\n        # If we have found K records, break the loop\n        if i == K - 1:\n            break\n\n    # Return the minimum value and index\n    return (min_val, min_idx)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common.append(l3[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Initialize an empty list to store common elements\n    common_elements = []\n\n    # Loop through each index of the first list\n    for i in range(len(l1)):\n        # If the element at that index is in both lists and not in the third list, add it to the common elements list\n        if l1[i] in l2 and l1[i] not in l3:\n            common_elements.append(l1[i])\n\n    # Return the common elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    # Create a set of unique elements in all lists\n    set1 = set(l1)\n    set2 = set(l2)\n    set3 = set(l3)\n    # Find the common elements in all lists\n    for elem in set1:\n        if elem in set2 and elem in set3:\n            common.append(elem)\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    # Create an empty dictionary to store the common elements\n    common = {}\n\n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # If the element at the current index is present in l2 and l3, add it to the common dictionary\n        if l1[i] in l2 and l1[i] in l3:\n            common[l1[i]] = True\n\n    # Return the list of common elements\n    return list(common.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # loop through the indices of the lists\n    for i in range(len(l1)):\n        # check if the element at the current index is also in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second smallest number in the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # sort the list in ascending order\n    numbers.sort()\n    # find the second smallest number and return it\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    return min(numbers) if min(numbers) < max(numbers) else max(numbers)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = len(numbers)\n    if n <= 1:\n        return None\n\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # sort the list in ascending order\n    return numbers[-2] # return the second smallest number"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b)*')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"abcabcbb\"\nprint(text_match_zero_one(text)) # Output: ['abcabcbb']"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b*)')\n    result = pattern.search(text)\n    if result:\n        print(result.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found:'+ match.group())\n    else:\n        print('No match found')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    result = re.search(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'a[b]+'\n    \n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*?b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of characters in the given string list\n    freq = {}\n\n    for string in test_list:\n        # Iterate over each character in the string and update the frequency count for each character\n        for char in string:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n\n    # Iterate over each pair of characters and check if their frequency count is greater than 1\n    count = 0\n    for key in freq:\n        if freq[key] > 1:\n            for i in range(1, freq[key]):\n                # Iterate over the characters starting with the current character and check if the reverse string starts with the same characters\n                for j in range(1, freq[key]):\n                    if i == j:\n                        continue\n                    reverse_string = key * i + key * j\n                    if reverse_string in freq:\n                        count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] in test_list[j+1:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:])\n        if sublist in list2:\n            count[sublist] += 1\n        else:\n            list2.append(sublist)\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 0\n        sublist_count[sublist_tuple] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in list1_count:\n            list1_count[sublist_tuple] += 1\n        else:\n            list1_count[sublist_tuple] = 1\n    return list1_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in unique_sublists:\n                unique_sublists[sublist] = 1\n            else:\n                unique_sublists[sublist] += 1\n    return unique_sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the unique sublists\n    unique_dict = {}\n    \n    # iterate over each list in the input list\n    for sublist in list1:\n        # convert the list to a tuple using tuple() function\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple is already present in the dictionary\n        if sublist_tuple in unique_dict:\n            # increment the count of the tuple\n            unique_dict[sublist_tuple] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            unique_dict[sublist_tuple] = 1\n            \n    # return the dictionary containing the unique sublists and their counts\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count:\n            count[sublist_tuple] = 1\n        else:\n            count[sublist_tuple] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            item_tuple = tuple(item)\n            if item_tuple in count_dict:\n                count_dict[item_tuple] += 1\n            else:\n                count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the counts of unique sublists\n    counts = {}\n\n    # loop through the original list\n    for item in list1:\n        # convert the list to a tuple and check if it's already in the dictionary\n        if item in counts:\n            # increment the count of the tuple in the dictionary\n            counts[item] += 1\n        else:\n            # if the tuple is not already in the dictionary, add it with a count of 1\n            counts[item] = 1\n\n    # return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count = {}\n    for i in list1:\n        if tuple(i) in count:\n            count[tuple(i)] += 1\n        else:\n            count[tuple(i)] = 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        if num.split('.')[1].startswith('0'):\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?[0-9]*\\.[0-9]{2}$'\n    return bool(re.match(decimal_pattern, num))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n    for char in num:\n        if char not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            return False\n    if len(num.split('.')[1])!= 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' in num and '.' not in num.replace('.', '', 1):\n        # check if there are more than one decimal points\n        if '.' in num:\n            num_list = num.split('.')\n            # check if the number contains more than one decimal point\n            if len(num_list) > 2:\n                return False\n            # check if the number contains more than one digit after the decimal point\n            for i in range(len(num_list[1])):\n                if num_list[1][i].isdigit():\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove all non-numeric characters from the string\n    num = ''.join(c for c in num if c.isdigit() or c == '.')\n\n    # Check if the string only contains one decimal point\n    if '.' not in num:\n        return False\n\n    # Split the string into integer and decimal parts\n    integer_part, decimal_part = num.split('.')\n\n    # Check if the integer part has more than 9 digits\n    if len(integer_part) > 9:\n        return False\n\n    # Check if the decimal part has more than 2 digits\n    if len(decimal_part) > 2:\n        return False\n\n    # Convert the integer and decimal parts to integers and floats, respectively\n    integer_part = int(integer_part)\n    decimal_part = float(decimal_part)\n\n    # Check if the decimal part has exactly 2 digits\n    if len(str(decimal_part).split('.')[1])!= 2:\n        return False\n\n    # Check if the decimal part is a valid floating-point number\n    if '.' in str(decimal_part) and str(decimal_part)[-1] in ['0', '1']:\n        return False\n\n    # Check if the integer part and decimal part are within the range of valid decimal numbers\n    if integer_part < -2**31 or integer_part > 2**31 - 1 or decimal_part < -2**31 or decimal_part > 2**31 - 1:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num.replace('.', '', 1).isdigit():\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-digit characters from the string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the number of characters is less than 2\n    if len(num) < 2:\n        return False\n    # Check if the string starts with a negative sign\n    if num[0] == '-':\n        # Remove the negative sign from the number\n        num = num[1:]\n        # Check if the number of characters is less than 2\n        if len(num) < 2:\n            return False\n    # Check if the number has more than 2 decimal places\n    if '.' in num:\n        decimal_places = num.split('.')[1]\n        if len(decimal_places) > 2:\n            return False\n    # Check if the number is an integer or a decimal number\n    if '.' in num:\n        # Convert the decimal number to an integer\n        int_part = int(num.split('.')[0])\n        # Check if the number of digits in the integer part is less than 2\n        if len(str(int_part)) < 2:\n            return False\n    else:\n        # Check if the number of digits is less than 2\n        if len(str(num)) < 2:\n            return False\n    # If all checks pass, the number is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    else:\n        fractional_part = num.split('.')[-1]\n        if len(fractional_part) > 2:\n            return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num = str(num)\n    for digit in num:\n        if not digit.isdigit():\n            return False\n    if len(num) > 2:\n        return False\n    if num[0] == '0' and len(num) > 1:\n        return False\n    if '.' in num:\n        if num.index('.') > 1:\n            return False\n        if len(num) - num.index('.') - 1 > 2:\n            return False\n        for digit in num[num.index('.') + 1:]:\n            if not digit.isdigit():\n                return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as an argument and returns True if there is only one distinct element in the list, False otherwise.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_arr = set(arr)\n    # Check if the length of the set is equal to 1 (i.e. there is only one distinct element in the list)\n    return len(set_arr) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            unique_count += 1\n        else:\n            break\n    if unique_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if i == len(arr) - 1:\n                if len(set([arr[i]])) == 1:\n                    return True\n                else:\n                    return False\n            else:\n                if len(set([arr[i], arr[i+1]])) == 1:\n                    return False\n                else:\n                    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    unique = True\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            unique = False\n            break\n    if unique:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # loop through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # check if the length of the set is one or not\n    if len(unique_set) == 1:\n        # if it's one, the list contains only one distinct element\n        return True\n    else:\n        # if it's not one, the list contains multiple distinct elements\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    \n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n        \n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Remove duplicates from the list\n    arr = list(set(arr))\n    # Check if the list has only one element or not\n    if len(arr) == 1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr) == 1:\n        return True\n    else:\n        if arr.count(arr[0]) == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        return days[monthnum3-1] == 30\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 in [2,4,6,9,11]:\n            return True\n        else:\n            return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 > 12 or monthnum3 < 1:\n        print(\"Invalid month number!\")\n        return\n    if monthnum3 == 2:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and year % 100 == 0 and year % 400!= 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        days_in_month[monthnum3] = 31\n    if monthnum3 in [4, 6, 9, 11]:\n        days_in_month[monthnum3] = 30\n    if days_in_month[monthnum3] == 29:\n        print(monthnum3, \"contains 29 days.\")\n    else:\n        print(monthnum3, \"contains\", days_in_month[monthnum3], \"days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check whether the month number is within range\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    else:\n        # check whether the month contains 30 days\n        if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return True\n        elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n            return False\n        else:\n            return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 10 == 0 and monthnum3 % 4 == 0 or monthnum3 % 100 == 0 and monthnum3 % 400 == 0:\n        return True\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"does not contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    diff = float('inf')  # Initialize the minimum difference to infinity\n    \n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    \n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #Sort the array in ascending order\n    arr.sort()\n    #Initialize min_diff to be infinity\n    min_diff = float('inf')\n    #Iterate through the array\n    for i in range(n-1):\n        #Calculate the difference between the current element and the next element\n        diff = abs(arr[i]-arr[i+1])\n        #Update min_diff if the current difference is smaller than the previous one\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    :param arr: A list of integers representing the given array\n    :param n: An integer representing the size of the given array\n    :return: An integer representing the minimum difference between any two elements in the given array\n    \"\"\"\n\n    # Sort the given array\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Loop through the array\n    for i in range(n-1):\n\n        # Calculate the difference between the i-th and (i+1)-th elements in the array\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is less than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and its size n and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return \"Array should have at least two elements.\"\n\n    min_diff = float('inf')\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = abs(arr[i] - arr[j])\n            min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "Let's write the Python code for the same."
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize min_diff and min_index\n    min_diff = float('inf')\n    min_index = 0\n\n    # Iterate over all elements in the array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n\n        # Update the min_diff and min_index if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i - 1\n\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize variables to store the minimum and maximum elements\n    min_diff = float('inf')\n    max_elem = arr[n-1]\n\n    # Traverse through the array and find the minimum difference between any two elements\n    for i in range(n-1):\n        diff = max_elem - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the first polite number\n    polite_num = 1\n\n    # Use the Sieve of Eratosthenes algorithm to find the nth polite number\n    for i in range(2, n+1):\n        if is_prime(i):\n            polite_num += 1\n            if polite_num == n:\n                break\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        # Initialize the list to store the values of the nth polite number\n        polite_list = []\n        # Start with 1 as the first polite number\n        polite_list.append(1)\n        # Keep adding 2 to the list until we reach n\n        i = 1\n        while i <= n:\n            # Check if the current number is a polite number\n            if (is_prime(i) and is_prime(i+2)) or (is_prime(i+2) and is_prime(i-2)):\n                polite_list.append(i+2)\n            else:\n                polite_list.append(i+1)\n            i += 1\n        # Return the value of the nth polite number\n        return polite_list[n-1]\n\ndef is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return \"I am the polite one\"\n    elif n == 2:\n        return \"You are the polite one\"\n    else:\n        num = 1\n        for i in range(2, n):\n            num += 1\n            if num == n:\n                return \"I am the polite one\"\n            elif num % 2 == 0:\n                if num >= 13:\n                    return \"You are the polite one\"\n                else:\n                    return \"I am the polite one\"\n            else:\n                if num >= 13:\n                    return \"I am the polite one\"\n                else:\n                    return \"You are the polite one\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_num = 1\n    count = 1\n    divisor = 2\n    while count <= n: \n        if count % 2 == 0: \n            polite_num += divisor\n        divisor += 2\n        count += 1\n    return polite_num "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Helper function to generate nth polite number\n    def nth_polite_helper(n):\n        def is_polite_helper(num):\n            return num == 1 or (is_prime(num) and num % 2 == 1)\n\n        i = 1\n        while True:\n            i += 1\n            if is_polite_helper(i):\n                return i\n\n    # Calculate nth polite number\n    nth_polite = nth_polite_helper(n)\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef nth_polite_number(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    if n <= len(primes):\n        return sum(int(digit) for digit in str(primes[n-1]))\n    else:\n        return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n and returns the nth polite number. \n    A polite number is a number that is divisible by 5 and the sum of digits is odd. \n    The nth polite number is the number that is 1 more than the nth regular number.\n    '''\n\n    # Regular numbers\n    regular_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n\n    # Check if n is a regular number\n    if n in regular_numbers:\n        return n + 1\n\n    # Check if n is a polite number\n    polite_numbers = [x for x in regular_numbers if x % 5 == 0 and sum(int(digit) for digit in str(x)) % 2 == 1]\n\n    # Find the nth polite number\n    nth_polite = sum(polite_numbers[:n])\n\n    return nth_polite + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    i = 1\n    polite_number = 0\n    while i <= n:\n        if is_prime(i) and is_prime(i - 1) and (i % 2 == 0 or (i % 3 == 0 and i!= 3)):\n            polite_number += 1\n        i += 2\n    return polite_number\n\ndef is_prime(num):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def digits(n):\n        digits = []\n        while n > 0:\n            digits.append(n % 10)\n            n //= 10\n        return digits\n\n    def sum_of_powers(digits, power):\n        return sum(digit ** power for digit in digits)\n\n    polite_numbers = []\n    for i in range(1, 10):\n        digits_i = digits(i)\n        if sum_of_powers(digits_i, len(digits_i)) == 1:\n            polite_numbers.append(i)\n\n    return polite_numbers[n - 1]\n\nn = 5\nprint(\"The\", n, \"th polite number is\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables\n    i = 0\n    j = 0\n    k = 1\n    polite = 0\n\n    # Loop until nth polite number is found\n    while i <= n:\n\n        # Calculate the value of j in each iteration\n        j = int(math.sqrt(k)) + 1\n\n        # Check if j is a prime number\n        is_prime = True\n        for p in range(2, j):\n            if k % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            polite += 1\n            if polite == n:\n                return k\n\n        # Increment k\n        k += 1\n        i += 1\n\n    # If no nth polite number is found, return -1\n    return -1"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    if n < 2:\n        return result\n    for i in range(n-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i], l1[i+1]])\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize an empty list to store the pairs\n    pairs = []\n    # loop through the list\n    for i in range(len(l1)-1):\n        # if there are two more items left, add the pair to the list\n        if i < len(l1)-2:\n            pairs.append((l1[i], l1[i+1]))\n    # return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n\n    # Create a set of unique elements in list 1\n    set1 = set(li1)\n\n    # Create a set of unique elements in list 2\n    set2 = set(li2)\n\n    # Use the symmetric difference (difference of two sets) to get the difference between the two lists\n    diff_set = set1.symmetric_difference(set2)\n\n    # Convert the set to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements that are in li1 but not in li2.\n    \"\"\"\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create an empty list to store the difference\n    diff_list = []\n    # iterate over each element in the first list\n    for i in li1:\n        # check if the element exists in the second list\n        if i in li2:\n            # if the element exists, remove it from the second list\n            li2.remove(i)\n        else:\n            # if the element does not exist, append it to the diff_list\n            diff_list.append(i)\n    # return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns their difference.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all elements that are present in the first list\n    but not in the second list.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum variable\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(n, 0, -1):\n        # calculate the fourth power of the number\n        power = i ** 4\n        # add the fourth power to the sum variable\n        sum += power\n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate fourth power of i\n        power_four = i**4\n        # add fourth power to sum\n        sum += power_four\n\n    # return the sum of fourth power of odd natural numbers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize variables to store the sum of odd numbers and fourth power of odd numbers\n    sum_odd = 0\n    pow_odd = 1\n    \n    # Loop through the first n odd numbers\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add the number to the sum of odd numbers and fourth power of odd numbers\n            sum_odd += i\n            pow_odd = pow_odd * i\n    \n    # Return the sum of fourth power of odd numbers\n    return pow_odd"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number\n        fourth_power = i ** 4\n\n        # Add the fourth power to the sum\n        sum += fourth_power\n\n    # Return the sum of fourth powers\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 3  # the first odd natural number\n    total = 0  # the sum of the fourth powers of odd natural numbers\n\n    for i in range(n):\n        total += num ** 4\n        num += 2  # next odd natural number\n\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the fourth power of the odd number\n        power = i**4\n        # add the fourth power to the sum\n        sum += power\n    # return the sum\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            elif stack.pop()!= open_brackets[close_brackets[char]]:\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_chars = {'(', '[', '{'}\n    closing_chars = {')', ']', '}'}\n    for char in exp:\n        if char in opening_chars:\n            stack.append(char)\n        elif char in closing_chars:\n            if not stack:\n                return \"Not Balanced\"\n            last_char = stack.pop()\n            if char!= closing_chars[opening_chars.index(last_char)]:\n                return \"Not Balanced\"\n    if stack:\n        return \"Not Balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n\n    if len(stack) > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening = set(\"([{\")\n    closing = set(\")]}\")\n    for char in exp:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() not in opening.union(closing):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] in ['(', '[', '{']:\n            stack.append(exp[i])\n        elif exp[i] in [')', ']', '}']:\n            if not stack:\n                return False\n            if exp[i] == ')' and stack[-1] == '(':\n                stack.pop()\n            elif exp[i] == ']' and stack[-1] == '[':\n                stack.pop()\n            elif exp[i] == '}' and stack[-1] == '{':\n                stack.pop()\n        else:\n            continue\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    # Split the input string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it is not, add it to the filtered words list\n            filtered_words.append(word)\n            \n    # Join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            del test_str[i]\n    return''.join(test_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    # Split the input string into words\n    words = test_str.split()\n\n    # Initialize a list to store the non-length-K words\n    result = []\n\n    # Loop over each word in the list\n    for word in words:\n        # If the length of the word is not K, add it to the result list\n        if len(word)!= K:\n            result.append(word)\n\n    # Join the non-length-K words back into a string\n    result_str =''.join(result)\n\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the modified words\n    modified_words = []\n    # Loop through the words\n    for word in words:\n        # Check if the length of the word is less than K\n        if len(word) < K:\n            # Append the word to the modified_words list\n            modified_words.append(word)\n    # Join the modified words back into a string\n    modified_str =''.join(modified_words)\n    return modified_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        print(\"Match found:\", m.group())\n        print(\"Occurrence:\", m.start())\n        print(\"Position:\", m.end())\n        return m\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    \n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regex to search for pattern in text\n    match = re.search(pattern, text)\n    \n    # Check if match is not None\n    if match:\n        # Get the occurrence and position of the match\n        occurrence = match.group()\n        position = match.start()\n        # Return the result as a tuple\n        return occurrence, position\n    else:\n        # If match is None, return None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    result = re.search(pattern, text)\n\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"The substring '{match}' was found at position {text.find(match)} in the string '{text}'\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns True if every odd index contains odd numbers, and False otherwise.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue  # skip even indices\n        \n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                break  # exit inner loop if odd number found\n            \n        if count == 0:\n            return False  # odd position found without odd numbers\n    \n    return True  # all odd indices contain odd numbers"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if sum(filter(lambda x: x % 2!= 0, nums[i:])) % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return all(odd_nums[i:i+2] % 2!= 0 for i in range(0, len(odd_nums), 2))"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(n):\n        if nums[i] % 2!= 0:\n            count = 0\n            while i+count < n and nums[i+count] % 2!= 0:\n                count += 1\n            if count == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if any(nums[i] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] not in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n\n    # Initialize a counter for the number of vowels\n    vowel_count = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str) - 1):\n        # Check if the character is a vowel and has a vowel as its neighbor\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            vowel_count += 1\n\n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Create a dictionary to store the frequency of each vowel\n    vowel_freq = {\n        'a': 0,\n        'e': 0,\n        'i': 0,\n        'o': 0,\n        'u': 0\n    }\n\n    # Iterate through the given string\n    for char in test_str:\n        # If the character is a vowel, increment its frequency in the dictionary\n        if char in vowel_freq:\n            vowel_freq[char] += 1\n\n    # Iterate through the dictionary and count the number of characters that have two or more vowels as their neighbors\n    count = 0\n    for char in vowel_freq:\n        if vowel_freq[char] > 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count = {}\n    for elem in arr:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    \n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    \n    # iterate over the elements in the list\n    for elem in arr:\n        # if the count of the current element is 1, add it to the sum\n        if count[elem] == 1:\n            non_repeated_sum += elem\n    \n    # return the final sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # convert the set back to a list and sum its elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    arr = list(set(arr))  # remove duplicates from the list\n    return sum(arr)  # return the sum of all elements in the list"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr) # create a set of unique elements\n    sum_unique = sum(unique_elements) # find the sum of unique elements\n    \n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_unique_elements = sorted(list(unique_elements))\n\n    # Initialize a variable to store the sum of unique elements\n    sum_unique_elements = 0\n\n    # Iterate over the sorted list and add the sum of each element to the sum_unique_elements variable\n    for i in range(len(sorted_unique_elements)):\n        sum_unique_elements += sorted_unique_elements[i]\n\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n    \n    # Initialize the sum to zero\n    sum_non_repeated = 0\n    \n    # Loop through the unique elements to add their values to the sum\n    for element in unique_elements:\n        sum_non_repeated += element\n        \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_set = set(arr)\n    \n    # Convert the set back to a list and calculate the sum\n    sum_list = list(unique_set)\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Remove duplicates from the list\n    unique_arr = list(set(arr))\n    # Calculate the sum of the non-repeated elements in the list\n    sum_arr = sum(unique_arr)\n    return sum_arr"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements of the list\n    freq = {}\n    for element in arr: \n        if element in freq: \n            # if the element is already in the dictionary, increment its frequency \n            freq[element] += 1 \n        else: \n            # if the element is not in the dictionary, add it with a frequency of 1 \n            freq[element] = 1 \n    # create a list to store the sum of non-repeated elements in the list \n    non_repeated_sum = []\n    # iterate over the dictionary and add up the frequency of each element \n    for element, frequency in freq.items(): \n        if frequency == 1: \n            non_repeated_sum.append(element) \n    # return the sum of non-repeated elements in the list \n    return sum(non_repeated_sum) "
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the number of occurrences of each element\n    count_dict = {}\n\n    # Iterate over the list and update the count in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate over the dictionary and add up the values to get the sum\n    sum_non_repeated = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            sum_non_repeated += num\n\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item in list1:\n        if not result or item!= result[-1]:\n            result.append(item)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    group = []\n    for item in list1:\n        if item == list1[len(list1) - 1]:\n            group.append(item)\n        else:\n            if len(group) > 1:\n                result.append(group)\n            group = [item]\n    if len(group) > 1:\n        result.append(group)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for group in groupby(lst) if not group.startswith(\"(\")]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            result.append(list(group))\n        else:\n            result.append([list1[0], list(group)])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k for k, g in groupby(lst)] for k in lst]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, pack consecutive duplicates of elements into sublists.\n    \"\"\"\n    return [[*group] for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive duplicates of elements\n    grouped_lst = groupby(lst, lambda x: x)\n    \n    # Create a list to store the sublists\n    sublist_lst = []\n    \n    # Iterate over the grouped list\n    for key, group in grouped_lst:\n        # Check if the group contains only consecutive duplicates of the same element\n        if len(list(group)) == len(group) == 1:\n            # If yes, append the sublist to the list of sublists\n            sublist_lst.append(list(group))\n        else:\n            # If not, create a sublist for each group and append it to the list of sublists\n            sublist = []\n            sublist.extend(list(group))\n            while group.next():\n                sublist.append(next(group))\n            sublist_lst.append(sublist)\n    \n    return sublist_lst"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() function to group consecutive duplicates of a list\n    grouped_list = groupby(list1)\n    # Initialize an empty list to store sublists\n    packed_list = []\n    # Iterate over each group\n    for group in grouped_list:\n        # If the group has only one element, add it to the packed list\n        if len(list(group)) == 1:\n            packed_list.append(list(group))\n        else:\n            # Otherwise, add the group to the packed list as a sublist\n            packed_list.append(list(group))\n            # If there are multiple elements in the group, add the first element of the group to the packed list\n            packed_list[-1].insert(0, next(group))\n    return packed_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if not isinstance(item, list):\n            continue\n        if item not in sublist_count:\n            sublist_count[item] = 1\n        else:\n            sublist_count[item] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the count of unique lists\n    count_dict = {}\n\n    # Loop through the list1\n    for item in list1:\n\n        # Check if the current item is a list\n        if isinstance(item, list):\n\n            # Convert the list to a tuple and check if it already exists in the dictionary\n            if tuple(item) in count_dict:\n                count_dict[tuple(item)] += 1\n            else:\n                # If the tuple doesn't exist in the dictionary, add it with a count of 1\n                count_dict[tuple(item)] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initialize an empty dictionary\n    counts = {}\n    \n    # iterate through each element in the list\n    for item in list1:\n        # if the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            sublist = unique_sublists(item)\n            # add the sublist to the counts dictionary\n            for key, value in sublist.items():\n                counts[key] = counts.get(key, 0) + value\n        # if the item is not a list, add it to the counts dictionary\n        else:\n            counts[item] = counts.get(item, 0) + 1\n    \n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_count = {}\n    for i in range(len(list1)):\n        sublist = list1[i]\n        if sublist not in list_count:\n            list_count[tuple(sublist)] = 1\n        else:\n            list_count[tuple(sublist)] += 1\n    return list_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n\n    # Loop through each item in the list\n    for item in list1:\n        # If the item is a list, turn it into a tuple and count its occurrences\n        if type(item) == list:\n            item_tuple = tuple(item)\n            if item_tuple in count_dict:\n                count_dict[item_tuple] += 1\n            else:\n                count_dict[item_tuple] = 1\n\n    # Return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through the list\n    for item in list1:\n        \n        # If the item is a list, turn it to a tuple and add to the dictionary\n        if type(item) == list:\n            key = tuple(item)\n            sublist_count[key] = sublist_count.get(key, 0) + 1\n    \n    # Return the dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n\n    # iterate over all elements of the input list\n    for element in list1:\n        # if the element is a list, create a tuple of its elements and add it to the dictionary\n        if isinstance(element, list):\n            sublist_tuple = tuple(element)\n            if sublist_tuple not in sublist_count:\n                sublist_count[sublist_tuple] = 1\n            else:\n                sublist_count[sublist_tuple] += 1\n\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store the count of unique sublists\n    counts = {}\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Convert the sublist to a tuple and check if it's in the dictionary\n        if tuple(sublist) in counts:\n            # If it is, increment its count in the dictionary\n            counts[tuple(sublist)] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_dict:\n            sublist_dict[tuple(sublist)] += 1\n        else:\n            sublist_dict[tuple(sublist)] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts of lists\n    counts = {}\n    \n    # iterate over all lists in the input list\n    for sublist in list1:\n        # turn the list into a tuple and check if it's already in the dictionary\n        if tuple(sublist) not in counts:\n            # if it's not, add it with a count of 1\n            counts[tuple(sublist)] = 1\n        else:\n            # otherwise, increment the count for the existing tuple\n            counts[tuple(sublist)] += 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sorting the list of tuples in ascending order\n    test_list.sort()\n    # Finding the maximum sum value in the list\n    max_sum = sum(test_list[-1])\n    # Creating a list of tuples with the maximum sum value\n    max_sum_tuple = (test_list[-1],)\n    # Finding all combinations of sums with tuples in the given list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            # Combining the two lists to get all combinations of sums with tuples in the given list of tuples\n            current_combination = combinations(test_list[i:j], r=2)\n            # Adding the current combination to a list of all combinations\n            for comb in current_combination:\n                # Adding the tuple to the max_sum_tuple if it satisfies the condition that the sum of two elements in the tuple is equal to max_sum\n                if sum(comb) == max_sum:\n                    max_sum_tuple += comb\n    # Returning the list of all combinations of sums with tuples in the given list of tuples\n    return list(max_sum_tuple)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and finds all the combinations of sums with tuples in the list.\n    '''\n    n = len(test_list)\n    count = 0\n\n    # Create a set of tuples to store the sums\n    sums = set()\n\n    # Iterate through all the tuples in the list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Create the tuple\n            tup = (test_list[i], test_list[j])\n\n            # Add the tuple to the set\n            sums.add(tup)\n\n            # Update the count\n            count += 1\n\n    # Convert the set to a list\n    list_of_combinations = list(sums)\n\n    # Sort the list of combinations based on the sums\n    list_of_combinations.sort(key=lambda x: x[0]+x[1])\n\n    return list_of_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty dictionary to store the combinations of sums\n    combinations_dict = {}\n\n    # Iterate through all possible tuples in the test list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the current tuples\n            current_sum = sum(test_list[i]) + sum(test_list[j])\n            # Check if the current sum is already in the dictionary\n            if current_sum in combinations_dict:\n                # If it is, add the current combination to the list\n                combinations_dict[current_sum].append((test_list[i], test_list[j]))\n            else:\n                # If it's not, create a new list and add the current combination\n                combinations_dict[current_sum] = [(test_list[i], test_list[j])]\n\n    # Print the combinations of sums with tuples in the given tuple list\n    print(\"Combinations of sums with tuples in the given tuple list:\")\n    for key, value in combinations_dict.items():\n        print(\"Sum:\", key)\n        print(\"Tuples:\", value)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of tuples containing all possible combinations of sums with tuples in the list.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    list: A list of tuples containing all possible combinations of sums with tuples in the list.\n\n    Example:\n    >>> test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    >>> find_combinations(test_list)\n    [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 2, 7), (1, 2, 8), (1, 2, 9), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 3, 7), (1, 3, 8), (1, 3, 9), (1, 4, 5), (1, 4, 6), (1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 5, 6), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 7, 8), (1, 7, 9), (1, 8, 9), (2, 3, 4), (2, 3, 5), (2, 3, 6), (2, 3, 7), (2, 3, 8), (2, 3, 9), (2, 4, 5), (2, 4, 6), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 5, 6), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 7, 8), (2, 7, 9), (2, 8, 9), (3, 4, 5), (3, 4, 6), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 5, 6), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 7, 8), (3, 7, 9), (3, 8, 9), (4, 5, 6), (4, 5, 7), (4, 5, 8), (4, 5, 9), (4, 6, 7), (4, 6, 8), (4, 6, 9), (4, 7, 8), (4, 7, 9), (4, 8, 9), (5, 6, 7), (5, 6, 8), (5, 6, 9), (5, 7, 8), (5, 7, 9), (5, 8, 9), (6, 7, 8), (6, 7, 9), (6, 8, 9), (7, 8, 9)]\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, i):\n            result.append(tuple(combo))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns all possible combinations of sums with tuples in the list.\n    '''\n    # Create a set of all possible combinations of sums\n    all_sums = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)+1):\n                all_sums.add((test_list[i], test_list[j], test_list[k]))\n\n    # Find all combinations of sums with tuples in the given list\n    all_combinations = set()\n    for comb in combinations(all_sums, 3):\n        if all(t in test_list for t in comb):\n            all_combinations.add(comb)\n\n    # Convert the set to a list and return the result\n    return list(all_combinations)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    for combination in combinations(test_list, r=2):\n        if sum(combination) in test_list:\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get all the distinct tuples in the list\n    distinct_tuples = list(set(tuple(sorted(combination)) for combination in combinations(test_list, len(test_list))))\n\n    # sort the tuples based on the sum of the elements\n    sorted_tuples = sorted(distinct_tuples, key=lambda x: sum(x))\n\n    # return the sorted tuples\n    return sorted_tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    target = sum(test_list) // 2\n    for combo in combinations(test_list, r=2):\n        if sum(combo) == target:\n            result.append(combo)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each tuple in the list\n        for comb in combinations(tup, r=len(tup)):\n            # check if the combination sum is equal to the target sum\n            if sum(comb) == sum(tup):\n                # print the combination\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i:j+1]) == sum(test_list[j:k+1]) == sum(test_list[k:]):\n                    print(test_list[i:k+1])"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd.\n    \"\"\"\n\n    # Function to calculate the count of divisors of a number n\n    def count_div(n):\n        count = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    # Calculate the count of divisors of n\n    count = count_div(n)\n\n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            divisors.append(i)\n            n //= i\n    if n > 1:\n        divisors.append(n)\n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n):\n    print(\"The count of divisors is even.\")\nelse:\n    print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    def count_divisors_helper(num, count=0):\n        if num == 1:\n            return count\n        elif num % 2 == 0:\n            count_divisors_helper(num // 2, count + 1)\n        else:\n            count_divisors_helper(num - 1, count + 1)\n\n    count = count_divisors_helper(n)\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes a number as input and returns True if the count of its divisors is even. \n    If the count of divisors is even, the function returns True. Otherwise, it returns False.\n    '''\n    # Calculate the sum of all the numbers from 1 to n \n    sum_of_numbers = (n * (n+1)) // 2 \n    \n    # Calculate the square root of the sum of numbers \n    sqrt_sum = int(math.sqrt(sum_of_numbers)) \n    \n    # Loop through all the numbers from 1 to sqrt_sum \n    for i in range(1, sqrt_sum+1): \n        # Check if the sum of the square of i and n is equal to sum_of_numbers \n        if (sum_of_numbers - (i*i)) == i*i: \n            # If the sum is equal to sum_of_numbers, then i is a divisor of n \n            return True \n    \n    # If we reach here, then there is no divisor of n in the range from 1 to sqrt_sum \n    return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_primes(num):\n        count = 0\n        for i in range(2, num+1):\n            if is_prime(i):\n                count += 1\n        return count\n\n    divisors = []\n    for i in range(1, n+1):\n        if count_primes(i) % 2 == 0:\n            divisors.append(i)\n\n    count_divisors = len(divisors)\n    return count_divisors"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    \"\"\"\n    # calculate the count of divisors of n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    # check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    if n == 1:\n        return \"1 is not prime\"\n    \n    if n <= 3:\n        return n, 1\n    \n    i = 2\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisor_count = 2\n            while i*i <= n:\n                if n % i:\n                    n //= i\n                    divisor_count += 1\n                else:\n                    n //= i\n                    i += 1\n            if n > 1:\n                divisor_count += 1\n            return n, divisor_count\n    return n, 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while divisor <= n/2:\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    # Calculate the number of divisors\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n-1):\n        if i==0 or arr[i]!=arr[i-1]:\n            for j in range(i+1, n):\n                if j==n-1 or arr[j]!=arr[j+1]:\n                    res += arr[i:j+1].sum()\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub_arr = arr[i:j]\n            if len(sub_arr) % 2 == 1:\n                sum_odd += sum(sub_arr)\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    for i in range(1, n, 2):\n        sub_arr = arr[i-1:i+1]\n        total_sum += sum(sub_arr)\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+2, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    total_sum = 0\n    \n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            count += 1\n            total_sum += sum(arr[i:j+1])\n    \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = [0] * (n+1)\n    for i in range(n):\n        sum_arr[i+1] = sum_arr[i] + arr[i]\n\n    total = 0\n    for i in range(1, n+1, 2):\n        total += sum_arr[i]\n\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n-i+1, 2):\n            total_sum += arr[j]\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    # initialize a variable to store the sum of odd length subarrays\n    sum_odd_len = 0\n\n    # loop through each subarray in the array\n    for i in range(len(arr)):\n        # loop through each subsequent subarray starting from the current subarray\n        for j in range(i+1, len(arr)+1):\n            # check if the length of the subarray is odd\n            if j - i % 2!= 0:\n                # add the sum of the odd elements to the sum of odd length subarrays\n                sum_odd_len += sum(arr[i:j])\n\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    odd_length_sum = 0\n\n    for i in range(1, n - 1):\n        if arr[i] % 2!= 0:\n            odd_length_sum += arr[i] + arr[i - 1] + arr[i + 1]\n\n    return odd_length_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in RGB color values and returns HSV color values.\n\n    Args:\n        r (int): Red color value.\n        g (int): Green color value.\n        b (int): Blue color value.\n\n    Returns:\n        tuple: Hue, Saturation, Value (HSV) color values.\n    \"\"\"\n\n    # Convert RGB to HSV model\n    h = 0\n    s = 0\n    v = max(r, g, b)\n    delta = v - min(r, g, b)\n\n    if delta == 0:\n        s = 0\n    elif v == r:\n        h = (g - b) / delta\n    elif v == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60\n    if h < 0:\n        h += 360\n\n    s = delta / (v + 1e-6)\n    s = round(s, 2)\n\n    v = v / 255\n    v = round(v, 2)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    \n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        delta = max_val - min_val\n        s = (delta / max_val) * 100\n        \n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        if h < 0:\n            h += 6\n        \n        h = int(h * 60)\n        \n    v = max_val\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n\n    :param r: Red value in the range [0, 255]\n    :param g: Green value in the range [0, 255]\n    :param b: Blue value in the range [0, 255]\n    :return: Hue (in degrees), Saturation (in percentage) and Value (in percentage)\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / delta\n    elif max_value == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n\n    saturation = 0\n    if max_value!= 0:\n        saturation = delta / max_value * 100\n\n    value = max_value * 100\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to its HSV equivalent.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    del_max = cmax - cmin\n    if del_max == 0:\n        h = 0\n        s = 0\n    else:\n        s = del_max / max(cmax, cmin)\n        del_r = ((cmax - r) / 6) + (del_max / 2)\n        del_g = ((cmax - g) / 6) + (del_max / 2)\n        del_b = ((cmax - b) / 6) + (del_max / 2)\n        if r == cmax:\n            h = del_b - del_g\n        elif g == cmax:\n            h = (1 / 3) + del_r - del_b\n        elif b == cmax:\n            h = (2 / 3) + del_g - del_r\n        if h < 0:\n            h += 1\n        elif h > 1:\n            h -= 1\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # calculate the minimum, maximum and delta values for the rgb color\n    minimum = min(r, g, b)\n    maximum = max(r, g, b)\n    delta = maximum - minimum\n\n    # calculate the hue value\n    if maximum == r:\n        hue = (g - b) / delta\n    elif maximum == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # calculate the saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / maximum\n\n    # calculate the value value\n    value = maximum\n\n    # calculate the hue value in degrees\n    hue_degrees = hue * 60.0\n    if hue_degrees < 0:\n        hue_degrees += 360.0\n\n    # return the hsv values in a tuple\n    return (hue_degrees, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    \"\"\"\n    \n    # Convert r, g, b to float and normalize them\n    r, g, b = r/255, g/255, b/255\n    \n    # Find the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the value and the delta\n    delta = max_val - min_val\n    \n    # Calculate the saturation and value\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_val\n    \n    if delta == 0:\n        h = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        elif max_val == b:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        # Check if h is outside the range of 0 to 1\n        if h < 0:\n            h += 1\n    \n    # Calculate the value and the delta\n    value = max_val\n    \n    # Calculate the hue\n    if s == 0:\n        h = 0\n    elif h < 1:\n        h = 60 * h\n        \n    # Convert h to degrees\n    h = round(h)\n    \n    return (h, value, s)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60*(g-b)/delta\n    elif max_val == g:\n        h = 60*(2+(b-r)/delta)\n    else:\n        h = 60*(4+(r-g)/delta)\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = delta/max_val\n    \n    if s == 0:\n        v = max_val\n    else:\n        if max_val == r:\n            v = (g-b)/delta\n        elif max_val == g:\n            v = (b-r)/delta\n        else:\n            v = (r-g)/delta\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color model.\n    Hue: 0 to 360 degrees\n    Saturation: 0 to 1\n    Value: 0 to 1\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    saturation = 0.0\n    hue = 0.0\n    \n    if max_value == min_value:\n        hue = 0.0\n    else:\n        if max_value == r:\n            hue = (g - b) / delta % 6.0\n        elif max_value == g:\n            hue = (b - r) / delta + 2.0\n        elif max_value == b:\n            hue = (r - g) / delta + 4.0\n        \n        if hue < 0.0:\n            hue += 6.0\n        \n        hue = hue * 60.0\n        if hue >= 360.0:\n            hue = hue - 360.0\n    \n    if max_value == 0:\n        saturation = 0.0\n    else:\n        saturation = delta / max_value\n    \n    value = max_value\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert r, g, b to float\n    r, g, b = float(r), float(g), float(b)\n\n    # Minimum value\n    min_val = min(r, g, b)\n\n    # Maximum value\n    max_val = max(r, g, b)\n\n    # Value difference\n    delta = max_val - min_val\n\n    # Set hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Set hue to 60 degrees\n    if hue < 0:\n        hue += 6\n\n    # Set saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Set value\n    value = max_val\n\n    # Return the result as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color value to HSV values.\n    Conversion formula:\n    h = (r + g + b) / 3\n    s = max(r, g, b) - min(r, g, b)\n    v = max(r, g, b)\n    s = 0 if s == 0 else s / v\n    v = 0 if v == 0 else v / 255.0\n    h = 60 * [r, g, b]\n    \"\"\"\n    h = (r + g + b) / 3\n    s = max(r, g, b) - min(r, g, b)\n    v = max(r, g, b)\n    \n    if s == 0:\n        h = 0\n        s = 0\n        v = v / 255.0\n    else:\n        s = s / v\n    \n    if v == 0:\n        h = 0\n        s = 0\n    else:\n        h = 60 * [r, g, b]\n        h = h / 255.0\n    \n    return (int(h), int(s * 100), int(v * 100))"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    product = 1\n    count = 0\n    for i in lst:\n        if i % 2 == 0:\n            count += 1\n            if count % 2 == 0:\n                product *= i\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    first_even = -1\n    first_odd = -1\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even == -1:\n                first_even = num\n            else:\n                first_even *= num\n        else:\n            if first_odd == -1:\n                first_odd = num\n            else:\n                first_odd *= num\n    \n    if first_even!= -1 and first_odd!= -1:\n        return first_even * first_odd\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return \"No even and odd number found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    result = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n        result *= num\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the product of the first even and odd numbers of the list.\n    '''\n    count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n        if count == 2:\n            product *= num\n            count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0:\n        return odd_count\n    else:\n        return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    # Create an empty list to store the even and odd numbers\n    even_odd = []\n\n    # Iterate through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            # Add the even number to the even_odd list\n            even_odd.append(num)\n        else:\n            # Add the odd number to the even_odd list\n            even_odd.append(num)\n\n    # Check if the even_odd list has at least 2 numbers\n    if len(even_odd) < 2:\n        return None\n\n    # Calculate the product of the first even and first odd numbers\n    product = even_odd[0] * even_odd[1]\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    return even_product * odd_product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    str_list = test_str.split(',')\n    # Convert each string to integer\n    int_list = [int(s) for s in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the string into a list of strings based on the comma delimiter\n    str_list = test_str.split(',')\n\n    # Convert each string in the list to an integer and append it to a new list\n    int_list = []\n    for s in str_list:\n        int_list.append(int(s))\n\n    # Convert the new list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Initialize the list to store the integer values\n    integer_list = []\n    \n    # Split the string into individual elements\n    elements = test_str.split(\",\")\n    \n    # Loop through each element and convert it to an integer\n    for element in elements:\n        try:\n            integer_list.append(int(element.strip()))\n        except ValueError:\n            pass # Skip the element if it is not an integer\n    \n    # Convert the integer list to a tuple\n    return tuple(integer_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a tuple of strings\n    str_tuple = test_str.split()\n    # Convert each string to an integer\n    int_tuple = tuple(int(x) for x in str_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string by commas\n    string_list = test_str.split(',')\n    # Create an empty list to store the integer tuples\n    int_list = []\n    # Loop over the string list and convert each string to an integer\n    for string in string_list:\n        int_list.append(int(string))\n    # Return the resulting integer tuple list\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and returns the tuple string as an integer tuple.\n    '''\n\n    # Convert the input string to a tuple using the comma as separator\n    tuple_str = tuple(test_str.split(','))\n\n    # Convert each element of the tuple string to an integer using the int() function\n    int_tuple_str = tuple(int(i) for i in tuple_str)\n\n    return int_tuple_str"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into individual strings separated by commas\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer and append it to a list\n    int_list = [int(i) for i in str_list]\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of tuples\n    test_lst = test_str.split(',')\n    \n    # Initialize an empty list to store the integers\n    int_lst = []\n    \n    # Loop through each tuple in the list and append the integers to a new list\n    for tup in test_lst:\n        # Split each tuple into two elements (string and integer)\n        tup_split = tup.split(':')\n        int_lst.append(int(tup_split[1]))\n    \n    # Return the list of integers\n    return int_lst"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Parameters:\n    test_str (str): a string containing a tuple of integers separated by spaces.\n\n    Returns:\n    tuple: a tuple of integers.\n\n    Example:\n    test_str = \"3 4 5 6\"\n    tuple_str_int(test_str) # returns (3, 4, 5, 6)\n    \"\"\"\n    # split the string into a list of integers\n    int_list = [int(num) for num in test_str.split()]\n    # return the tuple of integers\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Args:\n        test_str: str\n            A string representation of a tuple, such as \"(1, 2, 3)\".\n\n    Returns:\n        tuple: An integer tuple converted from the input string.\n    \"\"\"\n    # Split the input string by comma and space to extract the tuple elements\n    elements = test_str.split(', ')\n\n    # Convert each element to integer using the int() function\n    int_elements = [int(element.strip()) for element in elements]\n\n    # Convert the integer elements into a tuple\n    return tuple(int_elements)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the insertion index\n    i = bisect.bisect_right(a, x)\n    # Return the index of the element at the insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): sorted list of integers\n    x (int): integer to be inserted\n\n    Returns:\n    int: index of the right insertion point\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect_right to find the insertion point in sorted order\n    i = bisect.bisect_right(a, x)\n    # If the value is already present in the list, i will be equal to the index of that element\n    if i!= len(a) and a[i] == x:\n        i += 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\s*b{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}.*?'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return f\"The text '{text}' has an a followed by three 'b's: {matches}\"\n    else:\n        return f\"The text '{text}' does not match the pattern\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w*b\\w*b\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?i)(a)b{3}'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"Some text that has an Abba. And another example with an abbabbabbba\"\nprint(text_match_three(text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_list = tuple(test_list)\n    # concatenate the two lists\n    new_tuple = test_str + new_list\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item)\n    return (test_str, new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists into a single list\n    combined_list = test_list + [test_str]\n    # convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n\n    # Concatenate the two tuples\n    new_tuple = test_tuple + (test_str,)\n\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Define the new tuple\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a new tuple\n    new_tuple = tuple(test_list + [test_str])\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([x for x in nums[i:] if x % 2 == 0]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(n % 2 == 0 for n in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i])) % 2 == 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0 and nums[i+1] % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    n = len(nums)\n    for i in range(0, n, 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and checks whether every even index contains even numbers.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i+j] % 2 == 0 for j in range(len(nums)//2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(len(nums)):\n            if j == i:\n                continue\n            if nums[j] % 2 == 0:\n                count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Get the first element of the tuple\n    first_elem = test_tup[0]\n    # Check if the first element is a tuple\n    if isinstance(first_elem, tuple):\n        # If it is, recursively call the function on the tuple\n        remove_nested(first_elem)\n        # Remove the tuple from the main tuple\n        test_tup = test_tup[1:]\n    # If the first element is not a tuple, print it\n    else:\n        print(first_elem)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_tup.append(subitem)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initialize an empty list to hold the non-nested tuples\n    non_nested_list = []\n    # iterate through each tuple in the given tuple\n    for tup in test_tup:\n        # if the current tuple is not a tuple, append it to the non_nested_list\n        if not isinstance(tup, tuple):\n            non_nested_list.append(tup)\n        # if the current tuple is a tuple, recursively call the remove_nested function on it\n        else:\n            non_nested_list.extend(remove_nested(tup))\n    # return the non_nested_list\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                flat_list.append(sub_item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n        else:\n            new_tup += remove_nested(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n        else:\n            for sub_item in item:\n                new_list.append(sub_item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): The sorted array in which we are searching for the last occurrence of the element.\n        x (int): The element we are looking for in the array.\n\n    Returns:\n        int: The index of the last occurrence of the element in the array. If the element is not present in the array, it will return -1.\n\n    Example:\n        arr = [1, 2, 3, 4, 4, 4, 5]\n        x = 4\n        last_occurrence = last(arr, x)\n        print(last_occurrence)  # Output: 5\n\n        arr = [1, 2, 3, 4, 4, 4, 5]\n        x = 6\n        last_occurrence = last(arr, x)\n        print(last_occurrence)  # Output: -1\n    \"\"\"\n\n    # Initialize the left and right pointers to the start and end of the array, respectively.\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last_occurrence variable to -1.\n    last_occurrence = -1\n\n    # Loop through the array until the left pointer is greater than or equal to the right pointer.\n    while left <= right:\n\n        # Find the middle index of the current window.\n        mid = (left + right) // 2\n\n        # If the element is found at the middle index, check if it is the last occurrence.\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                last_occurrence = mid\n\n        # If the element is greater than the middle element, search the left half.\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the element is less than the middle element, search the right half.\n        else:\n            right = mid - 1\n\n    # Return the last_occurrence variable.\n    return last_occurrence"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n\n    Parameters:\n        arr: list\n            The sorted array.\n        x: any\n            The element to find the last position of.\n\n    Returns:\n        int\n            The last position of x in the array, or -1 if x is not found in the array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments, an array and an element. It then searches for the last occurrence of the element in the array and returns its position.\n    \"\"\"\n    # Initialize variables for start and end indices\n    start = 0\n    end = len(arr) - 1\n\n    # Check if the element is present in the array\n    while start <= end:\n        mid = (start + end) // 2\n\n        # If the element is found, then update the start index to mid + 1\n        if arr[mid] == x:\n            start = mid + 1\n\n        # If the element is greater than mid element, then update the start index to mid + 1\n        elif arr[mid] > x:\n            end = mid - 1\n\n        # If the element is smaller than mid element, then update the end index to mid - 1\n        else:\n            start = mid + 1\n\n    # If the element is not found, then return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): The sorted array.\n    x (int): The element whose last position needs to be found.\n\n    Returns:\n    int: The last position of x in arr.\n\n    Raises:\n    TypeError: If arr is not a list or if x is not an integer.\n    \"\"\"\n    if not isinstance(arr, list) or not isinstance(x, int):\n        raise TypeError(\"Both arr and x must be lists and integers\")\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the last position as -1\n    last_pos = -1\n    # loop through the array\n    for i in range(len(arr)):\n        # if the element matches the given element x\n        if arr[i] == x:\n            # update the last position\n            last_pos = i\n            # exit the loop\n            break\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: the sorted array and the element we're searching for.\n    It returns the index of the last occurrence of the element in the array.\n    If the element is not found, it returns -1.\n    \"\"\"\n    n = len(arr)\n    i = 0\n    while i < n and arr[i] < x:\n        i += 1\n    if i == n or arr[i]!= x:\n        return -1\n    j = i + 1\n    while j < n and arr[j] == x:\n        j += 1\n    return j - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if arr[0] == x:\n        return 0\n    elif arr[-1] == x:\n        return len(arr) - 1\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] < x and arr[i + 1] == x:\n                return i + 1\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the element in the array\n    index = arr.index(x)\n\n    # Return the last index of the element\n    return index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?P<anything>.)b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z0-9])a(?![a-zA-Z0-9])b(?![a-zA-Z0-9])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append(match.group())\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # variable to store the sum of odd numbers\n    sum_odd = 0\n    # loop through all the odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the odd numbers to the sum\n        sum_odd += i\n    # return the sum of odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = map(int, input(\"Enter the lower and upper limit of the range (l,r): \").split())\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Finds the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # take input from the user\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the range of numbers from l to r\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the odd number to the sum\n            sum += i\n\n    # print the sum of odd numbers in the range l to r\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initializing sum variable to 0\n    sum = 0\n    \n    # iterating through odd natural numbers from l to r\n    for i in range(n+1):\n        if i % 2!= 0:  # checking if i is odd\n            sum += i  # adding i to sum\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(l, r+1):\n            if i % 2 == 1:\n                return i\n        return 0"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum_of_odds = 0\n    current_num = 1\n    \n    # loop through all the natural numbers within the range l and r\n    while current_num <= n:\n        # check if the current number is odd\n        if current_num % 2!= 0:\n            # add it to the sum of odds\n            sum_of_odds += current_num\n        # increment the current number\n        current_num += 1\n    \n    # return the sum of odds\n    return sum_of_odds"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total_sum = 0\n    for i in arr:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for i in arr:  \n        total += i  \n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if isinstance(arr, list) or isinstance(arr, tuple):\n        return sum(arr)\n    else:\n        raise TypeError(\"Input should be a list or tuple.\")"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    result = 0\n    for num in arr:\n        result += num\n    return result"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes two arguments: a 32-bit integer n and an integer d representing the number of bits to rotate left.\n    The function returns the rotated number.\n    \"\"\"\n    # convert the number to a string to manipulate it\n    n_str = str(n)\n    # calculate the number of bits to rotate by\n    num_bits = len(n_str) * 8\n    d = d % num_bits\n    # calculate the number of bits to shift by\n    shift_bits = num_bits - d\n    # calculate the shifted number\n    shifted_number = int(n_str[shift_bits:]) + int(n_str[:shift_bits]) * 2 ** num_bits\n    # convert the shifted number back to an integer\n    rotated_number = int(shifted_number)\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Find the number of bits in the number\n    num_bits = 32\n    \n    # Find the number of rotations to be performed\n    rotations = d % num_bits\n    \n    # Find the shift amount\n    shift_amount = num_bits - rotations\n    \n    # Shift the number to the left by the shift amount\n    result = (n << shift_amount) | (n >> (num_bits - shift_amount))\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary and get the length of the binary string\n    num_bin = bin(n)[2:]\n    len_bin = len(num_bin)\n\n    # Compute the shift value\n    shift = d % len_bin\n\n    # Compute the shifted binary value\n    shifted_bin = (num_bin[len_bin - 1] + '0' * shift) * '1'\n\n    # Convert the shifted binary value to decimal and return\n    return int(shifted_bin, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    if d >= 32:\n        return n\n    else:\n        mask = (1 << d) - 1\n        return ((n & mask) << d) | ((n >> (32 - d)) & ((1 << d) - 1))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Initialize result to 0\n    result = 0\n    \n    # Iterate d times and add the leftmost bit of n to the result\n    for i in range(d):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n        \n    # Return the result shifted by d bits\n    return (result << (32 - d)) | (n >> d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    d = d % 32\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    rotated = (n << d) | (n & mask)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    if d >= 32:\n        return 0\n    if d == 0:\n        return n\n    elif d < 32:\n        n = (n << d) | (n >> (32 - d))\n        return n & mask\n    else:\n        n = (n << (d-32)) | (n >> 32)\n        return n & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary format\n    binary_format = '{0:032b}'.format(n)\n    # Split the binary format into a list of digits\n    binary_digits = [int(digit) for digit in binary_format]\n    # Reverse the list of digits\n    binary_digits = binary_digits[::-1]\n    # Calculate the number of zeros to be added at the beginning of the new binary format\n    zeros_to_add = d // 32\n    # Add zeros to the beginning of the list\n    for i in range(zeros_to_add):\n        binary_digits.insert(0, 0)\n    # Calculate the number of zeros to be added at the end of the new binary format\n    zeros_to_remove = d % 32\n    # Remove zeros from the end of the list\n    for i in range(zeros_to_remove):\n        binary_digits.pop()\n    # Convert the list of digits back to a binary number and return it\n    binary_number = int(''.join(str(digit) for digit in binary_digits), 2)\n    return binary_number"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove whitespaces from the beginning and end of the string\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces from the text\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z),max(x,y,z)+1):\n        if x==i:\n            count += 1\n        elif y==i:\n            count += 1\n        elif z==i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z:\n        count += 1\n    elif x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, max(x, y, z) + 1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z), max(x,y,z)+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    This function takes three integers as input and returns the count of the number of equal numbers in the three integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z or x == y and y == z or x == z and z == y:\n        count += 1\n    if y == x and y == z or y == x and y == z or y == z and z == x:\n        count += 1\n    if z == x and z == y or z == x and z == y or z == y and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # To find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # To find the maximum element in the array\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n\n    # To find the difference between the maximum and minimum element\n    diff = max_element - min_element\n\n    # To find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        temp = arr[i]\n        j = (i - diff) % n\n        while arr[j] > temp:\n            j = (j - diff) % n\n        count += n - j\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Base case: if array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # If array is not sorted, perform binary search to find the pivot index\n    pivot = 0\n    while pivot + 1 < n:\n        pivot = (pivot + n) // 2\n    # Divide the array into two parts, one with elements smaller than pivot and one with elements greater than pivot\n    less = [x for x in arr if x < arr[pivot]]\n    greater = [x for x in arr if x > arr[pivot]]\n    # Recursively count the number of rotations required for each part\n    count_less = count_rotation(less)\n    count_greater = count_rotation(greater)\n    # Combine the counts of the two parts and return the final answer\n    return count_less + count_greater + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the count of rotations\n    count = 0\n\n    # Traverse through the array and check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # If the array is not sorted, check if there is any rotation required\n            if i > 0 and arr[i] < arr[i-1]:\n                # If there is a rotation required, increment the count\n                count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n        elif arr[i] < arr[j]:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If array is already sorted, return 0 rotations\n    if arr == sorted(arr):\n        return 0\n    # If array is already sorted in reverse, return 0 rotations\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # Count rotations until array is sorted\n    count = 0\n    while arr!= sorted(arr):\n        arr = arr[1:]\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array to find the maximum element\n    max_element = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n    \n    # Traverse the array again to find the minimum element\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # If the first element is greater than the maximum element, then there is only one rotation\n    if max_element < min_element:\n        return 1\n    \n    # If the first element is less than the minimum element, then there is only one rotation\n    if min_element > max_element:\n        return 1\n    \n    # If the first two elements are equal, then there is only one rotation\n    if min_element == max_element:\n        return 1\n    \n    # Find the first occurrence of the maximum element\n    index = arr.index(max_element)\n    \n    # Count the number of times the maximum element appears in the remaining part of the array\n    count = 0\n    for i in range(index+1, n):\n        if arr[i] == max_element:\n            count += 1\n    \n    # Return the count of times the maximum element appears in the array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    \n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Perform binary search to find the index where the pivot element should be placed\n    pivot = arr[n // 2]\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == pivot:\n            return count + 1\n        elif arr[mid] < pivot:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # If the pivot element is not present, then the array is not sorted and we need to rotate the array to get it sorted\n    return count + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i\n    return n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-i-1]:\n            return n - i - 1\n    return 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    return False\n\nprint(is_perfect_square(64)) #True\nprint(is_perfect_square(8)) #False\nprint(is_perfect_square(25)) #True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n\n    # Check if the number is a perfect square using the formula for a perfect square\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    \n    x = n\n    y = n\n    \n    while x!= y:\n        x = (x + y) // 2\n        y = (x + n // x) // 2\n        \n    return x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if n is a perfect square\n    i = 1\n    while i * i <= n:\n        if n == i * i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    \n    # Returns true if the number is a perfect square, else false\n    def is_perfect_square_helper(num):\n        # If the number is 1, it is a perfect square.\n        if num == 1:\n            return True\n        \n        # If the number is less than 2, it is not a perfect square.\n        elif num < 2:\n            return False\n        \n        # Find the square root of the number using math.sqrt() function.\n        sqrt_num = math.sqrt(num)\n        \n        # Check if the square root is an integer.\n        if sqrt_num == int(sqrt_num):\n            # If the square root is an integer, it is a perfect square.\n            return True\n        \n        # If the square root is not an integer, it is not a perfect square.\n        else:\n            return False\n    \n    # Call the helper function and return the result.\n    return is_perfect_square_helper(n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    # Initialize the square root of n\n    sqrt_n = int(n**0.5)\n\n    # Loop till the square root\n    for i in range(sqrt_n + 1):\n\n        # Calculate the square of the square root\n        square_sqrt_n = i**2\n\n        # If the square of square root is equal to n, then n is a perfect square\n        if square_sqrt_n == n:\n            return True\n\n        # Check if the square of square root is less than n\n        elif square_sqrt_n < n:\n            continue\n\n        # If the square of square root is greater than n, then n is not a perfect square\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Return True if the number is a perfect square, else False\n    x = n\n    y = 0\n    while x > 0:\n        y += 1\n        x = x // 2\n    if n == 1:\n        return True\n    elif x * x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Function to check whether a number is a perfect square or not\n    def is_square(num):\n        \"\"\"\n        Returns True if the given number is a perfect square, else returns False.\n        \"\"\"\n        # Check if the number is less than 2.\n        if num < 2:\n            return False\n        # Initialize a variable to store the square of the number.\n        square = 0\n        # Loop until the square becomes greater than or equal to the number.\n        while square < num:\n            square += square\n        # Return True if the square is equal to the number, else return False.\n        return square == num\n\n    # Check if the given number is a perfect square.\n    if is_square(n):\n        print(n, \"is a perfect square\")\n    else:\n        print(n, \"is not a perfect square\")"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            if i * i == n:\n                return True\n            else:\n                return False\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if the number is less than 1\n    if n < 1:\n        return False\n\n    # check if the number is already a perfect square\n    if n == int(n**0.5)**2:\n        return True\n\n    # check for other perfect squares\n    i = 1\n    while True:\n        if i**2 == n:\n            return True\n        i += 1\n\n    # if the number is not a perfect square, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        print(\"The product of numbers in the list is even.\")\n    else:\n        print(\"The product of numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    This function takes in a list of numbers and returns True if the product of all the numbers is even and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize variables\n    product = 1\n    is_even = True\n\n    # Iterate through the list and multiply each element with product\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    # Check if product is even or odd\n    if product % 2 == 0:\n        is_even = True\n    else:\n        is_even = False\n\n    return is_even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product is even.\"\n    else:\n        return \"The product is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            sum_val = 0\n            for k in range(len(lists[0][0])):\n                sum_val += lists[i][j][k]\n            if sum_val > max_sum:\n                max_sum = sum_val\n                max_list = lists[i][j]\n                \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    result = []\n\n    # Iterate through the lists\n    for i, sublist in enumerate(lists):\n        # Iterate through the sublist\n        for j, num in enumerate(sublist):\n            # Add the number to the current sum\n            current_sum += num\n\n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum and the corresponding result list\n                max_sum = current_sum\n                result = [sublist[k] for k in range(len(sublist))]\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n            \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum\n    max_sum = 0\n    \n    # loop through each list in the list of lists\n    for lst in lists:\n        # calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        \n        # check if the current sum is greater than the maximum sum found so far\n        if sum_lst > max_sum:\n            # update the maximum sum\n            max_sum = sum_lst\n    \n    # create a new list and append the lists whose sum is equal to the maximum sum\n    new_lst = []\n    for lst in lists:\n        if sum(lst) == max_sum:\n            new_lst.append(lst)\n    \n    # return the new list\n    return new_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize max_sum to the smallest possible integer value\n    max_sum = float('-inf')\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Initialize curr_sum to 0\n        curr_sum = 0\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to curr_sum\n            curr_sum += num\n        # Check if curr_sum is greater than max_sum\n        if curr_sum > max_sum:\n            # If it is, update max_sum to curr_sum\n            max_sum = curr_sum\n    # Create a new list with the elements in the input lists that sum to max_sum\n    new_list = []\n    for lst in lists:\n        for num in lst:\n            if num == max_sum:\n                new_list.append(num)\n    # Return the new list\n    return new_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def list_sum(lst):\n        return sum(lst)\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for lst in lists:\n        total_sum = list_sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        temp_sum = 0\n        for j in range(len(lists[i])):\n            temp_sum += lists[i][j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for list in lists:\n        total = sum(list)\n        if total > max_sum:\n            max_sum = total\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    n = len(test_str)\n    max_run = 0\n    run = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            uppercase_count = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run, uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start = i - current_run + 1\n\n        if i == len(test_str) - 1:\n            if current_run > max_run:\n                max_run = current_run\n                start = i - current_run + 1\n\n    return max_run, test_str[start:start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Create an empty list to store the run of uppercase characters\n    run_of_upper = []\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # Check if the current character is uppercase\n        if char.isupper():\n            # If it is, check if the length of the current run is greater than the maximum run found so far\n            if len(run_of_upper) > len(max_run):\n                # If it is, update the maximum run\n                max_run = run_of_upper\n            # If it's not, add the current character to the end of the run\n            else:\n                # Add the current character to the run\n                run_of_upper.append(char)\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the uppercase_count\n        if char.isupper():\n            uppercase_count += 1\n        \n        # If the character is not uppercase, reset the uppercase_count to 0\n        else:\n            uppercase_count = 0\n        \n        # If the current_run is greater than the maximum_run, update the maximum_run and current_run\n        if current_run > max_run:\n            max_run = current_run\n            current_run = 0\n        \n        # If the current_run is not 0, increment it\n        current_run += 1\n        \n        # If the uppercase_count is greater than the current_run, update the current_run\n        if uppercase_count > current_run:\n            current_run = uppercase_count\n            \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    start_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - max_run + 1\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n        start_index = len(test_str) - max_run + 1\n    return test_str[start_index:start_index + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    run = 0\n    uppercase = False\n    current_char = ''\n\n    # Iterate through each character in the string\n    for char in test_str:\n\n        # Check if the character is uppercase\n        if char.isupper():\n            uppercase = True\n            current_char = char\n\n        # If the character is not uppercase and it's the start of a new run, reset the run count and start a new run\n        elif not uppercase:\n            run = 1\n            max_run = 0\n            current_char = char\n            uppercase = False\n\n        # If the character is not uppercase and it's part of an existing run, increment the run count\n        else:\n            run += 1\n\n        # Update the maximum run if the current run is longer\n        if run > max_run:\n            max_run = run\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 1\n    current_run = test_str[0].upper()\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            run_length += 1\n        else:\n            if run_length > 1:\n                if current_run == test_str[i].upper():\n                    run_length += 1\n                else:\n                    current_run = test_str[i].upper()\n                    run_length = 1\n    if run_length > 1:\n        print(\"The maximum run of uppercase characters is:\", run_length)\n    else:\n        print(\"There is no run of uppercase characters in the string.\")"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables to keep track of start and end indices of current run\n    start = 0\n    end = 0\n\n    # Iterate through the string character by character\n    for i in range(len(test_str)):\n        # If the current character is uppercase, update the end index\n        if test_str[i].isupper():\n            end = i\n\n        # If the current character is not uppercase, check if the run has ended\n        else:\n            # Check if the current run has a length greater than the previous run\n            if end - start + 1 > max_len:\n                # Update the maximum length and start and end indices of the run\n                max_len = end - start + 1\n                start = 0\n                end = i\n\n    # Check if the last run has a length greater than the previous run\n    if end - start + 1 > max_len:\n        max_len = end - start + 1\n\n    # Return the maximum length of the run\n    return max_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    # loop through the list of numbers\n    for num in nums:\n        # if the number is odd, return the number\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    # Convert the tuples to lists to check for membership\n    if type(test_tup[0]) == list:\n        test_list = list(test_tup[0])\n    else:\n        test_list = [test_tup[0]]\n\n    if type(test_tup[1]) == list:\n        key_list = list(test_tup[1])\n    else:\n        key_list = [test_tup[1]]\n\n    # Check if both the lists are of equal length\n    if len(test_list)!= len(key_list):\n        return False\n\n    # Check if all the elements in the key list are present in the test list\n    for element in key_list:\n        if element not in test_list:\n            return False\n\n    # Check if the k is present in the test tuple\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function checks if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif K == 0:\n        return True\n    else:\n        for i in range(K):\n            if test_tup[i]!= test_tup[-i-1]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Check if all elements of the second tuple are smaller than their corresponding elements in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The length of the two tuples is not equal.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"The element at index \" + str(i) + \" of the first tuple is greater than the corresponding element in the second tuple.\"\n    \n    return \"All elements in the second tuple are smaller than or equal to their corresponding elements in the first tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    # loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The element at index\", i, \"in the first tuple is greater than its corresponding element in the second tuple.\")\n            return\n    \n    # if all elements are smaller, print a success message\n    print(\"The two tuples are equal.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"The {i+1}th element of the first tuple is smaller than the {i+1}th element of the second tuple.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]