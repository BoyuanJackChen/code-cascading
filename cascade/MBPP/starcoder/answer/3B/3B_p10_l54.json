[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    common_elements = []\n\n    # Find the intersection of the two tuples\n    intersection = set(test_tup1) & set(test_tup2)\n\n    # Find the common elements\n    for element in intersection:\n        if element in test_tup1 and element in test_tup2:\n            common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_elements = set()\n    \n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element exists in the second tuple\n        if element in test_tup2:\n            # Add the element to the shared_elements set\n            shared_elements.add(element)\n    \n    # Return the shared_elements set as a list\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists and sort them\n    lst1 = sorted(list(test_tup1))\n    lst2 = sorted(list(test_tup2))\n    \n    # find the common elements between the two lists\n    common_lst = [x for x in lst1 if x in lst2]\n    \n    # return the shared elements\n    return common_lst"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n\n    # Sort the two lists in ascending order\n    test_tup1.sort()\n    test_tup2.sort()\n\n    # Iterate through the two lists simultaneously\n    i = j = 0\n    while i < len(test_tup1) and j < len(test_tup2):\n        if test_tup1[i] == test_tup2[j]:\n            print(test_tup1[i])\n            i += 1\n            j += 1\n        elif test_tup1[i] < test_tup2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If any element was found in both lists, return True\n    if i == len(test_tup1) and j == len(test_tup2):\n        return True\n\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_set = set1.intersection(set2)\n    shared_elements = list(common_set)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set of elements from both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Return the elements as a list\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    return list(common_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the shared elements.\n    \"\"\"\n    # Convert the tuples into sets for faster comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back into a list\n    shared_elements = list(intersection)\n    \n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is greater than 1\n    if n <= 1:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    # If we make it through the loop without finding a divisor, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if n is less than 2\n    if n < 2:\n        return True\n\n    # Check if n is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n\n    # Check if n is divisible by any odd number between 5 and sqrt(n)\n    for i in range(5, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    A Python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the input is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is divisible by any number between 3 and sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    heap = hq.nsmallest(n,nums)\n    # find the n largest elements in the min heap\n    largest = [heapq.heappop(heap) for i in range(n)]\n    # return the largest elements in descending order\n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to heap\n    max_heap = [x for x in nums[:n]]\n    hq.heapify(max_heap)\n    \n    # remove the maximum element from the heap and append it to the result list\n    result = []\n    while len(max_heap) > 0:\n        result.append(max_heap[0])\n        max_heap = max_heap[1:]\n        \n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums: A list of integers.\n        n: An integer representing the number of largest integers to be found.\n\n    Returns:\n        A list of integers representing the n largest integers in descending order.\n    \"\"\"\n\n    # Convert the list to a min heap and find the n largest integers\n    hq.heapify(nums)\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_nums.append(hq.heappop(nums))\n\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list to a min heap\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n    \n    # Iterate over the remaining numbers and add them to the heap\n    for num in nums[n:]:\n        # If the heap is smaller than the current number, pop and add the current number to the heap\n        if hq.heappushpop(min_heap, num) > num:\n            # If the current number is larger than the top of the heap, pop it and add the current number to the heap\n            hq.heappushpop(min_heap, num)\n    \n    # Convert the heap back to a list and return it\n    return [hq.heappop(min_heap) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.heapify(nums)\n    hq.heapify(heap, n, reverse=True)\n    return hq.nlargest(n, heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(nums)\n\n    # Remove the smallest numbers from the heap and store them in a new list\n    largest_nums = []\n    while len(largest_nums) < n:\n        largest_nums.append(hq.heappop(nums))\n\n    # Convert the list to a descending list and return it\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap of the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # Pop and return the largest element from the heap\n    for i in range(n, len(nums)):\n        # If this element is larger than the maximum element in the heap, replace it\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n], nums[i])\n\n    # Return the n largest integers in descending order\n    return nums[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = [(-num, i) for i, num in enumerate(nums)]\n    hq.heapify(heap)\n    while n > 0:\n        yield heapq.heappop(heap)[1]\n        n -= 1"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a min heap\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n    # Get the n largest integers from the heap\n    result = [heapq.heappop(heap) for i in range(n)]\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize an empty max heap of size n\n    max_heap = []\n\n    # Build the max heap from the input list\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n\n    # Extract the n largest integers from the heap and return them in descending order\n    largest_nums = []\n    for _ in range(n):\n        largest_nums.append(-heapq.heappop(max_heap))\n\n    return largest_nums"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x & (x-1) == 0): # Check if x is a power of 2 using bitwise AND operator\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        x &= x - 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if the number is negative\n    if x < 0:\n        return \"The number cannot be negative.\"\n    \n    # Convert the number to binary representation\n    binary = bin(x)[2:]\n    \n    # Check if there is only one 1 in the binary representation\n    if binary.count('1') == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        # x is a power of two \n        return True \n    else: \n        # x is not a power of two \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Get the binary representation of x and y\n    x_binary = bin(x)[2:] # remove the \"0b\" prefix\n    y_binary = bin(y)[2:] # remove the \"0b\" prefix\n\n    # Compare the number of bits set in x and y\n    num_bits_set_in_x = x_binary.count('1')\n    num_bits_set_in_y = y_binary.count('1')\n\n    # If the number of bits set in x is equal to the number of bits set in y, it means the two numbers differ at one bit position only\n    if num_bits_set_in_x == num_bits_set_in_y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x): \n    if x & (x - 1) == 0: # Check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0 or x == 1:\n        return True\n    elif (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # check if the number is a power of two\n    while x & (x - 1)!= 0:\n        x &= (x - 1)\n    return x == 1"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Split the text into words\n    words = text.split()\n\n    # Initialize an empty list to store the words that meet the criteria\n    long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # If it is, add it to the list of long words\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Define a regular expression pattern to match words with at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of words which are at least 4 characters long in the string.\n    '''\n    # Use a regular expression to find all words which are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches of the pattern in the input text\n    matches = pattern.findall(text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regular expressions to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # iterate over each element in the list\n    for i in range(len(nums)):\n        # square the element and store the result in a new list\n        nums[i] = nums[i] ** 2"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                return 0\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str)\n    # find the minimum number of rotations required to get the string with all characters in reverse order\n    reverse_str = str[::-1]\n    min_rotations = n - len(reverse_str)\n    # if the reverse string is already the same as the original string, return 0 rotations\n    if str == reverse_str:\n        return 0\n    # otherwise, find the minimum number of rotations required to get the reverse string with all characters in reverse order\n    rotations = find_Rotations(reverse_str)\n    min_rotations = min(min_rotations, rotations)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    # convert the given string to a set to remove duplicates\n    set_str = set(str) \n    # sort the set in ascending order\n    sorted_set_str = sorted(set_str)\n    # find the length of the set\n    length = len(sorted_set_str)\n    # initialize the minimum number of rotations to 0\n    min_rotations = 0\n    # loop through the set of characters and compare each character with the next one\n    for i in range(length-1): \n        # if the next character is less than the current one, increment the count of rotations\n        if sorted_set_str[i] < sorted_set_str[i+1]: \n            min_rotations += 1\n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    # initialize 2D matrix with 0 values \n    n = len(str) \n    dp = [[0 for j in range(n)] for i in range(n)] \n\n    # initialize first row and column with 0 \n    for i in range(n): \n        dp[i][i] = 0\n\n    # check for rotations required to get same string \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            for j in range(i): \n                dp[i][j] = dp[i-1][j] + dp[i-1][j+1]\n        else: \n            for j in range(n): \n                dp[i][j] = dp[i-1][j] + 1\n\n    # return minimum number of rotations required to get same string \n    min_rotations = dp[n-1][0]\n    for i in range(1, n-1): \n        min_rotations = min(min_rotations, dp[n-1][i])\n\n    return min_rotations "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n\n    # Iterate through all possible rotations of the string\n    for i in range(n):\n        for j in range(i, n):\n            # Check if the rotated string is the same as the original string\n            if str[j:n] == str[:j] + str[j:n]:\n                # Check if the rotation is required\n                if j - i > count:\n                    count = j - i\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j] == str[j:i][::-1]: \n                count += 1 \n                break \n    return count "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 1:\n        return 0\n\n    min_rot = float('inf')\n\n    for i in range(n):\n        for j in range(n-i-1):\n            if str[j:j+i+1] == str[j+i:j+i+i]:\n                temp = str[j:j+i+1]\n                temp = temp[::-1]\n                if temp!= str[j:j+i+1]:\n                    min_rot = min(min_rot, n-i)\n\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str[i]!= str[n-i-1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                return 0\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    # Calculate the difference between the length of the string and its reverse\n    diff = n - len(str[::-1])\n    # If the difference is less than or equal to 0, there is no rotation required\n    if diff <= 0:\n        return 0\n    # Calculate the number of rotations required by checking the smallest and largest characters\n    rotations = min(diff, max(str))\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # remove last occurrence of character\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    # If the character is not found, return the original string\n    if ch not in s:\n        return s\n    # Find the first and last occurrences of the character and remove them\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    return s[:first_occ] + s[last_occ + len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the character is in the string\n    if ch not in s:\n        return s\n    # Split the string into two parts at the occurrence of the character\n    s1,s2 = s.split(ch,1)\n    # If the length of s1 is greater than 0, remove the last character from s1\n    if len(s1) > 0:\n        s1 = s1[:-1]\n    # If the length of s2 is greater than 0, remove the first character from s2\n    if len(s2) > 0:\n        s2 = s2[1:]\n    # Concatenate the two parts of the string\n    s = s1 + s2\n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip()  #remove any leading or trailing whitespace\n    if not s:  #if string is empty after stripping, return empty string\n        return \"\"\n    if s[0] == ch:  #if first character is the character to remove\n        s = s[1:]  #remove first character\n    if s[-1] == ch:  #if last character is the character to remove\n        s = s[:-1]  #remove last character\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the index of the first occurrence of the character\n    index = s.index(ch)\n    # Remove the first occurrence of the character\n    s = s[:index] + s[index+1:]\n    # Find the index of the last occurrence of the character\n    index = s.rindex(ch)\n    # Remove the last occurrence of the character\n    s = s[:index] + s[index+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of character\n    while s.find(ch)!= -1:\n        s = s.replace(ch, '', 1)\n    # Remove last occurrence of character\n    while s.rfind(ch)!= -1:\n        s = s[:s.rfind(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into list of characters\n    char_list = list(s)\n    # find the index of the first occurrence of the character\n    index = char_list.index(ch)\n    # check if the index is 0 or length of the list-1, then return the empty string\n    if index == 0 or index == len(char_list)-1:\n        return \"\"\n    # remove the first and last occurrence of the character from the list\n    char_list.pop(index)\n    char_list.pop(index)\n    # join the list of characters into a string and return it\n    return \"\".join(char_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1:\n        s = s.replace(ch, '')\n        return remove_Occ(s, ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        i = 0\n        while i < len(s) and s[i]!= ch:\n            i += 1\n        if i == len(s):\n            return s\n        else:\n            j = len(s) - 1\n            while j >= 0 and s[j]!= ch:\n                j -= 1\n            if j == -1:\n                return s[:i+1]\n            else:\n                return s[:i] + s[j+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # sort the matrix in ascending order\n    M.sort(key=lambda x: sum(x))\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Initialize the variables\n    n = len(M)\n    count = 0\n    \n    # Sort the matrix in ascending order according to the sum of its rows\n    for i in range(n):\n        for j in range(n):\n            count += M[i][j]\n        count = 0\n        for j in range(i+1, n):\n            if count + M[i][j] < M[j][i]:\n                M[i], M[j] = M[j], M[i]\n            count += M[i][j]\n            \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    n = len(M)\n\n    # Step 1: Sort the rows of the matrix in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i], M[j] = M[j], M[i]\n\n    # Step 2: Sort the columns of the matrix in ascending order\n    for j in range(n):\n        for i in range(j+1, n):\n            if M[i][j] < M[i][j]:\n                M[i], M[j] = M[j], M[i]\n\n    # Step 3: Sort the entire matrix in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list to store the row sums\n    row_sums = []\n    for row in M:\n        # Calculate the sum of the current row\n        row_sum = sum(row)\n        # Add the row sum to the list of row sums\n        row_sums.append(row_sum)\n    \n    # Sort the list of row sums in ascending order\n    row_sums.sort()\n    \n    # Create a new list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Iterate over the original matrix and fill the new matrix with the sorted row sums\n    for i in range(len(M)):\n        sorted_row = [0] * len(M[0])\n        for j in range(len(M[0])):\n            # Find the index of the row with the smallest sum after excluding the row at index i and column j\n            min_sum_index = row_sums.index(min(row_sums[i+1:]))\n            # Add the row sum to the sorted row\n            sorted_row[j] = row_sums[min_sum_index]\n            # Remove the row sum from the list of row sums\n            row_sums.pop(min_sum_index)\n        # Add the sorted row to the new matrix\n        sorted_matrix.append(sorted_row)\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n):\n            if j > 0 and M[i][j] < M[i][j-1]:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Sort the rows of the matrix\n    for i in range(len(M)):\n        M[i].sort()\n        \n    # Compute the sum of each row and sort the matrix\n    for i in range(len(M)):\n        M[i].sort()\n        M[i].reverse()\n        row_sum = sum(M[i])\n        M[i].reverse()\n        M.sort(key=lambda x: x[i], reverse=True)\n        for j in range(len(M)-1, 0, -1):\n            if M[j]!= row_sum:\n                M.remove(M[j])\n                break\n            \n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Initialize the minimum value of the row\n        min_val = M[i][0]\n        # Loop through each element of the row\n        for j in range(1, len(M[i])):\n            # If the current element is smaller than the minimum value, update the minimum value\n            if M[i][j] < min_val:\n                min_val = M[i][j]\n        # Loop through each element of the row again and swap elements that are smaller than the minimum value\n        for j in range(len(M[i])):\n            if M[i][j] < min_val:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Check if all rows have the same number of columns\n    for i in range(n):\n        if len(M[i])!= n:\n            return \"Matrix is not square\"\n    \n    # Initialize the row sums\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on row sums\n    for i in range(n):\n        row = M[i]\n        row.sort()\n        for j in range(i+1, n):\n            if row[j] < row[i]:\n                row[i], row[j] = row[j], row[i]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a new list to store the sorted matrix\n    sorted_matrix = []\n    # loop through each row in the matrix\n    for i in range(n):\n        # initialize a variable to store the sum of the current row\n        row_sum = 0\n        # loop through each element in the current row\n        for j in range(n):\n            # add the element to the row_sum\n            row_sum += M[i][j]\n        # append the current row to the sorted_matrix\n        sorted_matrix.append(M[i])\n    # sort the sorted_matrix in ascending order of row sums\n    sorted_matrix.sort(key=lambda x: sum(x))\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    # create a copy of the matrix to avoid modifying original matrix\n    M = M.copy()\n    # loop through each row in the matrix\n    for i in range(len(M)):\n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            # find the maximum element in the current row\n            max_idx = j\n            for k in range(j+1, len(M[i])):\n                if M[i][k] > M[i][max_idx]:\n                    max_idx = k\n            # swap the maximum element with the current element\n            M[i][j], M[i][max_idx] = M[i][max_idx], M[i][j]\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the triangular prism using formula V = (l*b*h)/12\n    V = (l * b * h) / 12\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Calculate the volume of the prism using the formula: V = (l*b*h)/3\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the triangular prism\n    V = l * b * h / 6\n    \n    # Return the volume of the triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n    # Calculate the volume of the prism\n    volume = area * h\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #Calculating the area of the triangle using Heron's formula\n    s = (l+b+h)/2\n    area = (s*(s-l)*(s-b)*(s-h))/2**3\n    \n    #Calculating the volume of the prism using the formula V = l * b * h\n    volume = l*b*h\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the length, width, and height of a triangular prism and returns the volume of the prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = l*b*h/3\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h\n    print(\"The volume of the triangular prism is:\",V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-zA-Z])(?:[a-z])(?=[a-z])|(?:[a-z][a-z])|(?:[a-z][a-z][a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regular expression pattern to match sequences of lowercase letters\n    pattern = r'[a-z]+_[a-z]+'\n    # Use the re.search() function to search for matches in the input string\n    result = re.search(pattern, text)\n    # Return True if a match was found, and False otherwise\n    return True if result else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define regular expression pattern to match sequences of lowercase letters followed by underscore\n    pattern = r'[a-z]*_?[a-z]*'\n\n    # Use the re.search() method to search for a match in the input string\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z]*[_]'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)_')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z]+)(_[a-z]+)*'\n    return re.match(pattern, text)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # regular expression pattern to match a sequence of lowercase letters joined with an underscore\n    pattern = re.compile(r'(?<![a-z])[a-z]+(?![a-z])_+(?=[a-z])')\n\n    # check if the input string matches the pattern\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'([a-z])([A-Z])')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n\n    Args:\n    a (float): The side length of the square\n\n    Returns:\n    float: The perimeter of the square\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a + a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    list_string = list(char_list)\n    for i in range(len(list_string)):\n        if list_string[i] in string:\n            list_string.pop(i)\n    return ''.join(list_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string, char_list):\n    \"\"\"\n    This function takes a string and a list of characters to remove from the first string. It returns the modified string.\n    \"\"\"\n    new_string = ''\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    # Converting the string into a list of characters\n    str_list = list(string)\n    # Creating an empty list to store the characters that need to be removed\n    rem_chars = []\n    # Looping through the list of characters\n    for i in range(len(str_list)):\n        # Checking if the current character is present in the second string\n        if str_list[i] in string:\n            rem_chars.append(str_list[i])\n            # Removing the character from the list of characters\n            str_list.pop(i)\n            i -= 1\n    # Converting the list of characters back to a string and returning it\n    return ''.join(str_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Remove all the characters present in the second string from the first string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    string_list = [char for char in string_list if char not in list(string)]\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # create a list to store the characters from the second string\n    common_chars = []\n    # iterate over each character in the first string\n    for char in string:\n        # check if the character is present in the second string\n        if char in string:\n            common_chars.append(char)\n    # create a new string by removing the common characters from the first string\n    new_string = ''.join([char for char in string if char not in common_chars])\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to list of characters\n    char_list = list(string)\n\n    # Remove the characters present in the second string from the first string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string\n    result = ''.join(char_list)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(string)\n    for i in range(NO_OF_CHARS):\n        if list_of_chars[i] in string:\n            list_of_chars.remove(list_of_chars[i])\n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    # Initialize an empty list to store the output\n    output = []\n    # Initialize an empty set to store the characters that are present in the second string\n    present_chars = set()\n\n    # Convert the second string to a set to remove duplicates\n    second_set = set(string)\n\n    # Loop through each character in the first string\n    for char in string:\n        # If the character is not present in the second string, add it to the output and its set\n        if char not in second_set:\n            output.append(char)\n            present_chars.add(char)\n\n    # Return the output list as a string\n    return ''.join(output)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), \"\")\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    # Create a list of all possible characters with NO_OF_CHARS capacity\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n\n    # Convert the input string to a list of characters\n    input_list = [char for char in string]\n\n    # Remove characters from the input list which are present in the char_list\n    for char in input_list:\n        if char in char_list:\n            char_list.remove(char)\n\n    # Convert the resulting list of characters back to a string\n    result_string = ''.join(char_list)\n\n    return result_string\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create a set to store unique numbers\n    unique_set = set()\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the set, return True\n        if num in unique_set:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_set.add(num)\n\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # check if the length of the set is equal to the length of the original array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #create a dictionary to store the elements of the array as keys and their frequency as values\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    #check if any element has a frequency greater than 1\n    for freq in freq_dict.values():\n        if freq > 1:\n            return True\n    \n    #if no duplicates found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the unique elements and their count\n    unique_dict = {}\n\n    # Iterate through the array and add each element to the dictionary\n    for num in arraynums:\n        if num in unique_dict:\n            unique_dict[num] += 1\n        else:\n            unique_dict[num] = 1\n\n    # Iterate through the dictionary and return True if any element has a count greater than 1, False otherwise\n    for count in unique_dict.values():\n        if count > 1:\n            return True\n\n    # If no element has a count greater than 1, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create an empty dictionary to store the indices of the elements\n    index_dict = {}\n    for i in range(len(arraynums)):\n        # check if the current element is already in the dictionary\n        if arraynums[i] in index_dict:\n            # if it is, return True because there is at least one duplicate element\n            return True\n        # if it's not, add its index to the dictionary\n        else:\n            index_dict[arraynums[i]] = i\n    # if the loop completes without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Loop through each element in the array\n    for element in arraynums:\n        # If the element is already in the set, the array contains a duplicate\n        if element in unique_elements:\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_elements.add(element)\n\n    # If no duplicates were found, the array does not contain any\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary\n    seen = {}\n    # Iterate through the array\n    for num in arraynums:\n        # If the current number is already in the dictionary, return True\n        if num in seen:\n            return True\n        # Otherwise, add the current number to the dictionary\n        else:\n            seen[num] = True\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set()\n    \n    # Iterate through the array and check if any number is present in the set\n    for num in arraynums:\n        if num in unique_nums:\n            return True\n        else:\n            unique_nums.add(num)\n    \n    # If no duplicates found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique values\n    unique_values = set()\n\n    # loop through each element in the array\n    for num in arraynums:\n        # check if the element is already in the set\n        if num in unique_values:\n            # if it is, return True\n            return True\n        # otherwise, add the element to the set\n        else:\n            unique_values.add(num)\n\n    # if we reach here, there were no duplicates in the array\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        print(x, \"is not a woodball.\")\n    else:\n        print(x, \"is a woodball.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 10 == 0 and x % 15 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0: # checks if the number is even\n        if x in [1, 3, 5, 7, 9, 11, 13, 15]: # checks if the number is a woodball number\n            return True\n        else:\n            return False\n    else: # checks if the number is odd\n        if x in [2, 4, 6, 8, 10, 12, 14, 16]: # checks if the number is a woodball number\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x > 10 and x < 20: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 10:\n        return False\n    elif x < 20:\n        return True\n    elif x < 30:\n        return True\n    elif x < 40:\n        return False\n    elif x < 50:\n        return True\n    elif x < 60:\n        return True\n    elif x < 70:\n        return False\n    elif x < 80:\n        return True\n    elif x < 90:\n        return True\n    elif x < 100:\n        return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    return x % 2 == 0"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the base conditions\n    if x == 1:\n        return True\n    elif x < 1:\n        return False\n    else:\n        # Define the recursive case\n        if x % 2 == 0:\n            return is_woodall(x//2)\n        else:\n            return not is_woodall((x+1)//2)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 12 and x < 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and x % 10 == 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num = num // 10\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = str(num)[::-1]\n    if int(reversed_num) < 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the given number to a string\n    str_num = str(num)\n\n    # Convert the string to a list of characters\n    char_list = list(str_num)\n\n    # Reverse the list\n    rev_list = char_list[::-1]\n\n    # Convert the reversed list back to a string\n    rev_str = ''.join(rev_list)\n\n    # Convert the reversed string to an integer\n    rev_int = int(rev_str)\n\n    # Check if the original number minus the reverse is one less than the reverse\n    if num - rev_int - 1 < rev_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number and convert it to a string\n    rev_num = str(num)[::-1]\n    # Convert the reversed number back to an integer and check if it is one less than twice the original\n    if int(rev_num) < (int(num) * 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    if reverse == num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the given number to string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to integer\n    rev_int = int(rev_str)\n    # calculate the difference between the given number and twice its reverse\n    diff = abs(num - rev_int * 2)\n    # check if the difference is one less than 0\n    if diff < 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2 * int(str(num)[::-1])) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    #convert the number to string\n    num_str = str(num)\n    \n    #reverse the string\n    rev_str = num_str[::-1]\n    \n    #convert the reversed string back to int\n    rev_int = int(rev_str)\n    \n    #calculate the difference\n    diff = num - rev_int\n    \n    if diff == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string and convert back to an integer\n    reversed_num = int(num_str[::-1])\n\n    # Calculate the difference between the original number and twice its reversed number\n    diff = num - (2 * reversed_num)\n\n    # Check if the difference is one\n    if diff == 1:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Function to check if the given number can be formed by concatenating the digits of the given list\n    def is_valid_number(num):\n        if len(num) < len(arr):\n            return False\n        else:\n            for i in range(len(num)):\n                if num[i] not in arr:\n                    return False\n            return True\n\n    # Function to find the largest valid number that can be formed by concatenating the digits of the given list\n    def find_largest_valid_number():\n        largest_valid_num = ''\n        for i in range(len(arr), 0, -1):\n            num = ''\n            for j in range(i):\n                num += str(j)\n            if is_valid_number(num):\n                largest_valid_num = num\n                break\n        return largest_valid_num\n\n    return find_largest_valid_number()"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize the max number with the first digit\n    max_num = arr[0]\n    \n    # Loop through the list of digits starting from the second digit\n    for i in range(1, len(arr)):\n        # Multiply the current digit with the max number\n        new_num = arr[i] * max_num\n        # If the new number is greater than max_num, update max_num\n        if new_num > max_num:\n            max_num = new_num\n    \n    # Return the max number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed by adding\n    all the digits.\n    \"\"\"\n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, digit)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)-1, -1, -1):\n        max_num += arr[i] ** len(arr)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(2**n):\n        num = 0\n        for j in range(n):\n            if (i & (1 << j)) > 0:\n                num += arr[j]\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) #sort the array in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        temp = 0\n        for j in range(len(arr)):\n            if j <= i:\n                temp += arr[j]\n        max_num += temp\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed by the digits.\n    '''\n\n    # Sort the list of digits in ascending order\n    arr.sort()\n\n    # Initialize variables to store the maximum number and the current number\n    max_num = 0\n    curr_num = 0\n\n    # Iterate through the sorted list of digits\n    for digit in arr:\n\n        # Calculate the number of ways to form the current number with the given digit\n        num_ways = curr_num // digit\n\n        # Update the maximum number if the current number is greater than the maximum number\n        if curr_num > max_num:\n            max_num = curr_num\n\n        # Update the current number with the given digit and add the new digit to the number of ways\n        curr_num = curr_num * 10 + digit\n        curr_num += num_ways\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    digits = [int(i) for i in arr]\n    digits.sort(reverse=True)\n    max_num = 0\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            max_num = max_num + digits[i]\n        else:\n            max_num = max_num + digits[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # Define a helper function to check if a number is palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    # Initialize the largest number to be -inf\n    max_num = -float('inf')\n\n    # Loop through all possible combinations of digits and check if they can form a palindrome\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    for m in range(10):\n                        for n in range(10):\n                            # Combine the digits to form a number\n                            num = int(str(i) + str(j) + str(k) + str(l) + str(m) + str(n))\n                            # Check if the number is palindrome and if it is greater than the current largest number\n                            if num > max_num and is_palindrome(num):\n                                max_num = num\n\n    # Return the largest palindrome number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits and returns the maximum number that can be formed with them.\n    \"\"\"\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, int(num))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0: \n        return True\n    elif x<=0 and y<=0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        print(f\"{x} and {y} have opposite signs\")\n    elif x < 0 and y > 0:\n        print(f\"{x} and {y} have opposite signs\")\n    else:\n        print(f\"{x} and {y} have the same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Checks if two integers have opposite signs.\n\n    :param x: The first integer to check.\n    :param y: The second integer to check.\n    :return: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    # Check if the signs are opposite\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the sign of the product of these two integers is -1 and False otherwise.\n    \"\"\"\n    product = x * y\n    if product < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the signs of the two numbers are opposite, False otherwise.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x<0 and y>0:\n        return \"The first integer has an opposite sign as the second integer.\"\n    elif x>0 and y<0:\n        return \"The first integer has an opposite sign as the second integer.\"\n    else:\n        return \"The two integers have the same signs.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the signs of both integers are opposite, False otherwise.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if both numbers have the same sign\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    j = n\n    while i <= j:\n        temp = i + j\n        if temp == 2 * i - 1:\n            return True\n        elif temp > 2 * i - 1:\n            i += 1\n        else:\n            j -= 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n - 1) * (2 * n - 1)\n\nn = int(input(\"Enter a number: \"))\n\nif is_octagonal(n):\n    print(f\"{n} is an octagonal number\")\nelse:\n    print(f\"{n} is not an octagonal number\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        result = 10\n        for i in range(3, n+1):\n            result += 6 * (n - i)\n        return result"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return 16\n    else:\n        return is_octagonal(n-2) + (is_octagonal(n-1) * 8)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_n = 0\n    i = 1\n    while i <= n:\n        oct_n += i*i\n        i += 1\n    return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Find the side length of the square\n    side_length = int(n**0.5) + 1\n\n    # Calculate the nth octagonal number\n    octagonal_num = (n * (3 * n - 1)) / 2\n\n    # Check if the octagonal number is a square\n    if octagonal_num == side_length ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 1440 - 144*n + 14*n**2 - 6*n**3"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return 2 * is_octagonal(n-1) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # First octagonal number is 1\n    if n == 1:\n        return 1\n\n    # Find the square of the first octagonal number\n    square_of_first_octagonal = (1 + 8**(n-1))**(1/3)\n\n    # Find the nth octagonal number\n    nth_octagonal = square_of_first_octagonal * (2 * n - 1)\n\n    return int(nth_octagonal)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        if i**2 == n:\n            return i\n        i += 1\n        \nn = int(input(\"Enter the value of n: \"))\noct_n = is_octagonal(n)\nprint(\"The\", n, \"th octagonal number is:\", oct_n)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    count_dict = defaultdict(int)\n    length = len(s)\n\n    for i in range(length):\n        if s[i].isdigit():\n            count_dict[int(s[i])] += 1\n        count += 1\n\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if s[i].isdigit() and s[j].isdigit():\n                if int(s[i]) + int(s[j]) == length:\n                    count_dict[length] += 1\n                    count_dict[int(s[i]) + int(s[j])] += 1\n\n    for i in count_dict:\n        count += count_dict[i]\n\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digits = [int(digit) for digit in substring if digit.isdigit()]\n            if sum(digits) == len(digits):\n                substrings[substring] += 1\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    counts = defaultdict(int)\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        \n        # Extract the current substring\n        substring = s[i:]\n        \n        # Calculate the sum of digits in the substring\n        substring_sum = sum(int(digit) for digit in substring)\n        \n        # Increment the count of substrings with the sum of digits equal to their length in the dictionary\n        counts[substring_sum] += 1\n    \n    # Return the count of all substrings with the sum of digits equal to their length\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(d) for d in s[i:j+1]) == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize the dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of length n\n    for n in range(1, len(s)+1):\n        # Iterate through all possible substrings of length n\n        for i in range(len(s)-n+1):\n            # Calculate the sum of digits in the substring\n            substring_sum = sum([int(digit) for digit in s[i:i+n]])\n            # If the sum is equal to the length of the substring, increment the count in the dictionary\n            if substring_sum == n:\n                count_dict[n] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[sum(int(c) for c in s[i:])] += 1\n    return digit_count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n    # Initialize a count variable\n    count = 0\n    \n    # Loop through each character of the string\n    for i in range(len(s)):\n        # Initialize the current substring\n        curr_sub = ''\n        # Loop through each character after the current one\n        for j in range(i+1, len(s)+1):\n            # If the substring contains only digits, add it to the count\n            if s[i:j].isdigit():\n                curr_sub += s[i:j]\n                count_dict[len(curr_sub)] += 1\n                # If the substring's sum is equal to the length of the substring, increment the count\n                if curr_sub == curr_sub[::-1]:\n                    count += 1\n    # Return the count of substrings with the given sum\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    length = len(s)\n    for i in range(length):\n        for j in range(i, length):\n            sub_str = s[i:j+1]\n            if sum(int(d[c]) for c in sub_str) == len(sub_str):\n                d[sum(int(c) for c in sub_str)] += 1\n    return d[sum(int(c) for c in s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with given length\n    count_dict = defaultdict(int)\n    # Iterate through the given string\n    for i in range(len(s)):\n        # Iterate through the remaining string to the end\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum([int(d) for d in s[i:j+1]]) == len(s[i:j+1]):\n                # Increment the count of substrings with given length\n                count_dict[len(s[i:j+1])] += 1\n    # Return the count of substrings with given length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize the count variable and a defaultdict to store the lengths of all substrings\n    count = 0\n    lengths = defaultdict(int)\n\n    # Iterate through the string s and for each character, add its length to the corresponding key in the defaultdict\n    for i in range(len(s)):\n        lengths[s[i]] += 1\n\n    # Iterate through the defaultdict and for each key-value pair, calculate the sum of digits and compare it to the length of the key\n    for key, value in lengths.items():\n        sum_of_digits = sum(int(digit) for digit in key)\n        if sum_of_digits == len(key):\n            count += value\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0] # initialize smallest with the first element of the list\n    for x in xs: # iterate over the rest of the list\n        if x < smallest: # if the current element is smaller than smallest\n            smallest = x # update smallest with the current element\n    return smallest # return the smallest element found"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initializing smallest number variable with first element of list\n    smallest = xs[0]\n    # looping through the list starting from the second element\n    for i in range(1, len(xs)):\n        # checking if current element is smaller than smallest number\n        if xs[i] < smallest:\n            smallest = xs[i]\n    # returning the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    - test_list (list): a list of tuples representing the available pairs of integers.\n\n    Returns:\n    - int: the maximum difference between available pairs in the given tuple list.\n\n    Example:\n    test_list = [(1, 5), (2, 4), (3, 3), (4, 2), (5, 1)]\n    max_difference(test_list) # Output: 5\n    '''\n\n    # Sort the list of tuples in ascending order based on the first element\n    sorted_list = sorted(test_list)\n\n    # Initialize two variables to store the maximum and minimum values of the difference\n    max_diff = sorted_list[0][1] - sorted_list[0][0]\n    min_diff = sorted_list[0][1] - sorted_list[0][0]\n\n    # Iterate through the sorted list and update the max and min difference values\n    for i in range(1, len(sorted_list)):\n        diff = sorted_list[i][1] - sorted_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n        if diff < min_diff:\n            min_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes in a list of tuples and returns the maximum difference between available pairs in the list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[0])\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][0] - test_list[i][0]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize maximum difference variable and minimum value in the list\n    max_diff = 0\n    min_val = test_list[0]\n    \n    # Loop through each pair of values in the list\n    for i in range(len(test_list) - 1):\n        # Get the difference between the current pair and the minimum value\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n        \n        # Update the maximum difference variable if the difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize variables for minimum and maximum differences\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # loop through the remaining tuples\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the two tuples\n            diff = abs(test_list[i][1] - test_list[j][1])\n            # update the minimum and maximum differences\n            if diff < min_diff:\n                min_diff = diff\n            if diff > max_diff:\n                max_diff = diff\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the tuple list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize variables to keep track of the maximum difference and the indices of the maximum and minimum values\n    max_diff = sorted_list[1][0] - sorted_list[0][0]\n    max_index = 0\n    min_index = 1\n\n    # Loop through the sorted list, checking if the difference between adjacent values is greater than the current maximum difference\n    for i in range(1, len(sorted_list)-1):\n        if abs(sorted_list[i][0] - sorted_list[i-1][0]) > max_diff:\n            max_diff = abs(sorted_list[i][0] - sorted_list[i-1][0])\n            max_index = i\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        raise ValueError('The test_list is empty')\n    if len(test_list) < 2:\n        raise ValueError('The test_list must have at least two elements')\n\n    pairs_max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            pairs_max_diff = max(pairs_max_diff, diff)\n\n    return pairs_max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples of subject marks and sorts them in descending order of the second value of each tuple.\n    '''\n    # Sorting the list in descending order of the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    # sorting the subject marks list based on the second value (i.e., the marks)\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Recursively flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add first element and call function with rest of list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Check if the input list is empty\n    if not data_list:\n        return 0\n\n    # Check if the first element of the list is a list\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n\n    # Add the first element of the list to the sum and continue with the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                total += item\n\n    flatten(data_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        '''\n        Recursive function to flatten a nested list.\n        '''\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n    \n    # Flatten the input list\n    flattened_list = flatten(data_list)\n    \n    # Sum all elements in the flattened list\n    total_sum = sum(flattened_list)\n    \n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Recursively flatten a list.\n        '''\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten(item)\n        else:\n            yield data_list\n\n    flatten_list = list(flatten(data_list))\n    return sum(flatten_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(lst):\n        for element in lst:\n            if isinstance(element, list):\n                for sub_element in flatten(element):\n                    yield sub_element\n            else:\n                yield element\n\n    flattened_list = list(flatten(data_list))\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            flat_list += recursive_list_sum(item)\n        return flat_list\n    else:\n        return [data_list]\n\n\ndef flatten_list(data_list):\n    return recursive_list_sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Helper function to flatten the list recursively\n    def flatten_list(data_list):\n        if not data_list:\n            return []\n        return flatten_list(data_list[1:]) + [data_list[0]]\n\n    # Flatten the list\n    flattened_list = flatten_list(data_list)\n\n    # Sum the flattened list\n    sum_list = sum(flattened_list)\n\n    return sum_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    # Recursive case: add the first element and the recursive sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers present in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    Write a Python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition as 1\n    ways = 1\n\n    # Iterate over the first n elements of the Bell sequence\n    for i in range(n):\n        # Calculate the number of ways to partition the current element as a subset of the remaining elements\n        ways *= (i + 1)\n\n    # Return the number of ways to partition the whole set\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def partition(n):\n        \"\"\"\n        Helper function to recursively calculate the partition of n numbers.\n        \"\"\"\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * partition(n-1)\n\n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables for storing the count of ways to partition and remaining Bell numbers\n    ways = 1\n    remaining = n\n\n    # Loop through each digit in the Bell number\n    for i in range(2, n+1):\n        # Calculate the number of ways to partition the remaining Bell numbers with the current digit\n        ways *= remaining\n        # Update the remaining Bell numbers\n        remaining -= i\n\n    # Return the final count of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, memo):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n in memo:\n            return memo[n]\n\n        count = partition(n - 1, memo) + partition(n - 2, memo)\n        memo[n] = count\n        return count\n\n    memo = {}\n    return partition(n, memo)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    num = 0\n    count = 1\n\n    # Check if n is a Bell number\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 0\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(2, n + 1, 2):\n        num = (num * i) // (i - 1)\n        count = (count * i) // (i - 2)\n\n    # Add the last way to partition the set of Bell numbers\n    count += num\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return 4 * n - 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the count of ways to partition the set\n    count = 0\n\n    # Iterate through each possible partition of the set\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i + j <= n:\n                count += 1\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    num_ways = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    \n    # Calculate the number of ways for each n\n    for i in range(3, n+1):\n        # Calculate the number of ways to add i to the set of Bell numbers\n        ways = bell_number(i-1)\n        # Add the number of ways to the current value of num_ways\n        num_ways += ways\n    \n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n) + bell_number(n-1)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[1] <= A[0]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Returns True if the given array A is monotonic, otherwise False.\n    A is a list of integers.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    \n    if A[1] > A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    \n    if A[1] < A[0]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize a flag to check if the array is monotonic or not\n    is_monotonic = True\n    \n    # Loop through the array\n    for i in range(len(A)-1): \n        # If the current element is greater than the next element, set the flag to False\n        if A[i] > A[i+1]: \n            is_monotonic = False\n            break\n    \n    # Return the flag value\n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 3: \n        return True\n\n    if A[0] <= A[1]: \n        if A[1] <= A[2]: \n            return True\n        else: \n            return False\n    else: \n        if A[1] >= A[2]: \n            return True\n        else: \n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] <= A[1]: \n        if len(A) == 2: \n            return True\n        elif A[1] <= A[2]: \n            for i in range(2, len(A)-1): \n                if A[i] <= A[i-1]: \n                    return False\n        else: \n            return False\n    else: \n        if len(A) == 2: \n            return True\n        elif A[1] >= A[2]: \n            for i in range(2, len(A)-1): \n                if A[i] >= A[i-1]: \n                    return False\n        else: \n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2: \n        return True \n\n    for i in range(1, len(A)): \n        if A[i] > A[i-1]: \n            return False \n        elif A[i] < A[i-1]: \n            return True \n        else: \n            continue \n\n    return True "
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    n = len(A)\n    if n <= 1:\n        return True\n\n    for i in range(1, n):\n        if A[i] < A[i - 1]:\n            return False\n        elif A[i] > A[i - 1] and (i == n - 1 or A[i] > A[i + 1]):\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] >= A[i+1]: \n            return True\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    elif A[0] <= A[1]: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n\n    # Initialize the indices of the sublist in the list\n    i, j = 0, 0\n\n    # Iterate through the list until we find a sublist\n    while i < len(l):\n        if j == len(s):\n            # We have found a sublist\n            return True\n        elif l[i] == s[j]:\n            j += 1\n            i += 1\n        else:\n            j = 0\n            i += 1\n\n    # We have not found a sublist\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n\n    i = 0\n    j = 0\n\n    while j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - 1 if i > 0 else 0\n            j = 0\n\n    return i == len(s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(set(map(str, Input[i])))!= len(Input[i]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        print(\"All tuples have equal length\")\n    else:\n        print(\"Not all tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n        \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n\n    first_tuple = Input[0]\n    for i in range(1, len(Input)):\n        if len(Input[i])!= len(first_tuple):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # iterate over the list of tuples\n    for tup in Input:\n        # get the length of the current tuple\n        length = len(tup)\n        # check if all tuples have equal length\n        if all(len(tup) == length for tup in Input):\n            # if all tuples have equal length, return True\n            return True\n    # if no tuples have equal length, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length. Otherwise, it returns False.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n                gap = min(gap, i+1)\n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # Define parameters\n    max_iter = 100  # Maximum number of iterations\n    gap = 10       # Gap between successive elements\n    swapped = True # Flag for swapping\n\n    # Loop until the gap is equal to 1\n    while gap!= 1:\n        swapped = False\n\n        # Iterate through the array\n        for i in range(len(nums)-gap):\n            # If the elements are not in ascending order\n            if nums[i] > nums[i+gap]:\n                # Swap them\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n        # If no swaps were made, the gap is now 1\n        if not swapped:\n            gap = 1\n        else:\n            # Calculate the new gap based on the iteration count\n            gap = int(gap / 1.3)\n            if gap < 1:\n                gap = 1\n\n        # Check if the maximum number of iterations has been reached\n        if max_iter == 0:\n            print(\"Algorithm did not converge. Stopping.\")\n            break\n\n        max_iter -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n\n    Args:\n        nums (list): The list of elements to sort.\n\n    Returns:\n        list: The sorted list.\n    \"\"\"\n\n    # Initialize variables\n    swapped = True\n    gap = len(nums) // 2\n\n    while swapped:\n        swapped = False\n\n        # Iterate through the list\n        for i in range(gap, len(nums)):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size\n        gap = int(gap / 1.3)\n\n        # Stop sorting when the gap is less than 1\n        if gap < 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    # Start comb sort\n    while gap > 1:\n        # Determine the new gap size\n        gap = int(gap / 1.3)\n        # Perform the comb sort\n        for i in range(n):\n            # Move the current element to its correct position\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n            # If the sorted range is the entire array, we're done\n            if j + gap == n:\n                break\n        # Reduce the gap size\n        gap = int(gap / 1.3)\n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Implementation of the Comb Sort algorithm in Python.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    # iterate until the gap is no longer than 1\n    while gap > 1 or swapped:\n\n        # set swapped to False\n        swapped = False\n\n        # iterate through the list and swap adjacent elements if they are not in the correct order\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                # swap nums[i] and nums[i-gap]\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        # decrease the gap size\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        gap = min(gap, n)\n        swapped = False\n        \n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n                \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Define the default sort function\n    def sort(nums):\n        for i in range(len(nums)):\n            # Get the largest element and swap with the i-th element\n            max_idx = i\n            for j in range(i+1, len(nums)):\n                if nums[j] > nums[max_idx]:\n                    max_idx = j\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        return nums\n\n    # Keep swapping elements until the list is sorted\n    swapped = True\n    while swapped:\n        swapped = False\n        # Sort the list using the default sort function\n        sorted_nums = sort(nums)\n        # Check if the sorted list is already sorted\n        if sorted_nums == nums:\n            break\n        else:\n            # Swap the sorted list with the original list\n            nums = sorted_nums\n            swapped = True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def is_square(num):\n        '''\n        Helper function to check whether the given number is a square or not.\n        '''\n        return num == int(num**0.5)**2\n    \n    def square_difference(num):\n        '''\n        Helper function to calculate the difference of two squares.\n        '''\n        return (num-1)**2 - (num+1)**2\n    \n    # check if the given number is a square\n    if is_square(n):\n        # if yes, calculate the difference of two squares\n        diff = square_difference(n)\n        print(f'{n} can be represented as the difference of two squares: {diff}')\n    else:\n        # if no, print that the number cannot be represented as the difference of two squares\n        print(f'{n} cannot be represented as the difference of two squares.')"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = n ** 0.5\n    if square.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # function to check whether n can be represented as the difference of two squares\n    def can_be_squared(n):\n        # find the square of the number\n        square = n * n\n        # check whether the square is smaller than the number\n        if square < n:\n            return False\n        # check whether the difference between the square and the number is a square\n        return square - n == n\n\n    # check if the input number is smaller than or equal to 0\n    if n <= 0:\n        print(\"The input number must be greater than 0.\")\n        return\n    \n    # check if the input number can be represented as the difference of two squares\n    if can_be_squared(n):\n        # find the square root of the difference between the square of the number and the input number\n        sqrt_diff = int(n ** 0.5)\n        # check if the difference is a square\n        if sqrt_diff ** 2 == n - sqrt_diff ** 2:\n            print(f\"{n} can be represented as the difference of two squares.\")\n        else:\n            print(f\"{n} cannot be represented as the difference of two squares.\")\n    else:\n        print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check whether the given number can be represented as the sum of two squares\n    if n % 4 == 0:\n        return True\n    else:\n        # factorize the given number\n        while n % 2 == 0:\n            n //= 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                n //= i\n        # check whether the given number can be represented as the difference of two squares\n        if n == 1 or n == 4 or n == 9:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Function to check whether a number is a difference of two squares\n    def is_square_diff(a):\n        a = abs(a)\n        for i in range(1, int(a**0.5)+1):\n            if a % i == 0 and i!= int(a**0.5):\n                return True\n        return False\n\n    # Check if the number is a difference of two squares\n    if is_square_diff(n):\n        print(\"The given number is a difference of two squares.\")\n    else:\n        print(\"The given number is not a difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is less than 0\n    if n < 0:\n        return \"Number cannot be represented as the difference of two squares\"\n\n    # Calculate the square of the given number\n    square = n * n\n\n    # Calculate the difference between the square and the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    diff = square - sqrt_n ** 2\n\n    # Check if the difference is greater than 0\n    if diff > 0:\n        return \"The given number can be represented as the difference of two squares\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Finding the square of the number\n    num_square = n ** 0.5\n\n    # Checking for the possible difference between two squares\n    if num_square == int(num_square):\n        for i in range(1, int(num_square) + 1):\n            if (i ** 2) + (num_square ** 2) == n:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if n can be represented as the difference of two squares\n    while n % 4 == 0:\n        if n % 16 == 0:\n            return True\n        n = n // 2\n        \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is negative or zero\n    if n < 0 or n == 0:\n        return False\n    \n    # find the square root of the number and store it in a variable\n    sqrt_n = n ** 0.5\n    \n    # check if the square root of the number is an integer\n    if sqrt_n.is_integer():\n        return False\n    \n    # check if the square of the square root of the number is equal to the original number\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the input number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        print(\"Input should be a positive integer.\")\n        return\n    \n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        if n - i * i == i ** 2:\n            print(\"Yes, the number can be represented as the difference of two squares.\")\n            return\n    print(\"No, the number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    color_index = 0\n\n    while color_index < len(colors):\n        if colors[color_index] == patterns[pattern_index]:\n            color_index += 1\n            pattern_index += 1\n        else:\n            pattern_index = 0\n        if pattern_index == len(patterns):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # create a dictionary to store the number of occurrences of each color in the colors array\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n            \n    # initialize the index of the patterns array to 0\n    pattern_index = 0\n    \n    # loop through the colors in the colors array\n    for i in range(len(colors)):\n        # if the current color has the same number of occurrences as the color at the current index in the patterns array, move to the next pattern index\n        if color_count[colors[i]] == patterns[pattern_index]:\n            pattern_index += 1\n            \n        # if the current color has a different number of occurrences as the color at the current index in the patterns array, return False\n        elif color_count[colors[i]] < patterns[pattern_index]:\n            return False\n            \n    # if all the colors have been matched, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n    \n    for i in range(n-1):\n        if patterns[i]!= patterns[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the number of colors is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Initialize a list to store the colors that have already been seen\n    seen_colors = []\n    \n    # Loop through the patterns array\n    for pattern in patterns:\n        # Check if all the colors in the pattern are in the seen_colors list\n        if all(color in seen_colors for color in pattern):\n            # If all the colors in the pattern are in the seen_colors list,\n            # append the color to the seen_colors list and continue with the next pattern\n            seen_colors.extend(pattern)\n        else:\n            # If any color in the pattern is not in the seen_colors list,\n            # return False immediately\n            return False\n    \n    # If all the patterns have been checked without returning False,\n    # return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    n = len(colors)\n\n    # Check if all the colors in the patterns array are unique\n    if len(set(patterns))!= len(patterns):\n        return False\n\n    # Check if the length of the patterns array is equal to n\n    if len(patterns)!= n:\n        return False\n\n    # Check if the pattern array contains all the possible patterns for the colors array\n    for i in range(n):\n        pattern = patterns[i]\n        for color in colors:\n            if color not in pattern:\n                return False\n\n    # If all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a list to store the colors seen so far\n    seen_colors = []\n    # Loop through the patterns\n    for pattern in patterns:\n        # Loop through the colors in the pattern\n        for color in pattern:\n            # If the color is not in the list of seen colors, return False\n            if color not in seen_colors:\n                return False\n            # If the color is already in the list of seen colors, add it to the list\n            else:\n                seen_colors.append(color)\n    # If we've gone through all the patterns without finding any duplicates, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n\n    Args:\n        colors (list of strings): A list of colors.\n        patterns (list of lists of strings): A list of patterns.\n\n    Returns:\n        bool: True if the colors follow the patterns, False otherwise.\n    \"\"\"\n    for i in range(len(patterns)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        if all(test_list[i][j] % K == 0 for j in range(len(test_list[i]))):\n            print(test_list[i])"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a new empty list to store the valid tuples\n    valid_tuples = []\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Check if each element in the tuple is divisible by K\n        if all(x % K == 0 for x in tup):\n            # Add the valid tuple to the list of valid tuples\n            valid_tuples.append(tup)\n    # Return the list of valid tuples\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the result tuples\n    result_list = []\n    # iterate through the test list of tuples\n    for tup in test_list:\n        # if all the elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # add the tuple to the result list\n            result_list.append(tup)\n    # return the result list\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the result tuples\n    result = []\n    # Loop through the given list of tuples\n    for i in range(len(test_list)):\n        # Loop through the remaining elements in the tuple\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the elements in the tuple is divisible by K\n            if sum(test_list[i]) % K == 0 and sum(test_list[j]) % K == 0:\n                # If both elements in the tuple are divisible by K, add the tuple to the result list\n                result.append((test_list[i], test_list[j]))\n    # Return the result list of tuples\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    test_list: list of tuples. Each tuple contains a list of integers.\n    K: integer. The divisor to check for all elements in the tuples.\n\n    Returns:\n    list of tuples. The tuples with all elements divisible by K are returned.\n    \"\"\"\n    divisible_tuples = []\n    for tuple_ in test_list:\n        all_divisible = True\n        for num in tuple_:\n            if num % K!= 0:\n                all_divisible = False\n                break\n        if all_divisible:\n            divisible_tuples.append(tuple_)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_ in test_list:\n        if all(i % K == 0 for i in tuple_):\n            result.append(tuple_)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Create a set to store the elements from the list\n    unique_elements = set(test_list[0])\n\n    # Iterate through the list of tuples and check if all elements are divisible by K\n    result = []\n    for tuple_elements in test_list:\n        is_divisible = True\n        for element in tuple_elements:\n            if element % K!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(tuple_elements)\n\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Find if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    This function takes an integer n as input and returns True if the number is divisible by 11, and False otherwise.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    count = 0\n    for word in words:\n        count += 1\n        if len(word) % 2 == 0:\n            print(\"The length of the word is even.\")\n        else:\n            print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(\"The length of word is odd\")\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()  # split the string into a list of words\n    odd_words = []  # create an empty list to store the odd words\n    for word in words:  # iterate over each word in the list\n        if len(word) % 2!= 0:  # check if the length of the word is odd\n            odd_words.append(word)  # append the odd word to the list\n    return odd_words  # return the list of odd words"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    words = s.split() # Split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 0: # Check if the length of the word is even\n            return False # If the length is even, return False\n        else:\n            return True # If the length is odd, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, 'is an even length.')\n        else:\n            print(word, 'is an odd length.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return 'Odd'\n    return 'Even'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Split the string into words\n    words = s.split()\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2!= 0:\n            # If the length is odd, return True\n            return True\n    # If no odd word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return f'{word} is an even word.'\n        else:\n            return f'{word} is an odd word.'"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) * (n + 3) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def triangle_number(n):\n        '''\n        Write a function to find the nth triangle number.\n        '''\n        a = 1\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n\n    return n * triangle_number(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4 * n * (n + 1)) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 16\n    elif n == 3:\n        return 64\n    elif n == 4:\n        return 256\n    elif n == 5:\n        return 1024\n    elif n == 6:\n        return 4096\n    elif n == 7:\n        return 16384\n    elif n == 8:\n        return 65536\n    elif n == 9:\n        return 262144\n    elif n == 10:\n        return 1048576\n    elif n == 11:\n        return 4194304\n    elif n == 12:\n        return 16777216\n    elif n == 13:\n        return 67108864\n    elif n == 14:\n        return 268435456\n    elif n == 15:\n        return 1073741824\n    else:\n        return -1\n\nn = int(input(\"Enter the number of tetrahedral numbers to find: \"))\nfor i in range(n):\n    print(tetrahedral_number(i))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedron(a, b, c, d):\n        return a + b + c + d\n\n    def are_coplanar(a, b, c, d):\n        return (a[0] * (b[1] * c[2] - c[1] * b[2]) +\n                b[0] * (c[1] * a[2] - a[1] * c[2]) +\n                c[0] * (a[1] * b[2] - b[1] * a[2]))\n\n    def are_equal(a, b, c, d):\n        return a[0] == b[0] and a[1] == b[1] and a[2] == b[2]\n\n    def is_inside(a, b, c, d, p):\n        return are_equal(a, b, c, d) or (a[0] * (b[1] * p[2] - p[1] * b[2]) +\n                                           b[0] * (c[1] * p[2] - p[1] * c[2]) +\n                                           c[0] * (p[1] * a[2] - a[1] * p[2]) +\n                                           a[0] * (c[1] * b[2] - b[1] * c[2]) +\n                                           b[0] * (p[1] * c[2] - c[1] * p[2]) +\n                                           c[0] * (p[1] * a[2] - a[1] * p[2]) -\n                                           d[0] * (a[0] * p[1] + b[0] * p[2] + c[0] * p[3]) -\n                                           d[1] * (a[1] * p[0] + b[1] * p[3] + c[1] * p[2]) -\n                                           d[2] * (a[2] * p[0] + b[2] * p[1] + c[2] * p[3])) > 0\n\n    def compute_tetrahedron(p1, p2, p3, p4):\n        a = p1 - p2\n        b = p3 - p2\n        c = p4 - p2\n\n        # Check if the tetrahedron is collinear\n        if are_coplanar(a, b, c, [0, 0, 0]):\n            return None\n\n        # Compute the normal vector of the tetrahedron\n        n = [a[1] * b[2] - a[2] * b[1],\n             a[2] * b[0] - a[0] * b[2],\n             a[0] * b[1] - a[1] * b[0]]\n        n_norm = [n[0] / (a[0] * n[0] + a[1] * n[1] + a[2] * n[2]),\n                  n[1] / (a[0] * n[0] + a[1] * n[1] + a[2] * n[2]),\n                  n[2] / (a[0] * n[0] + a[1] * n[1] + a[2] * n[2])]\n\n        # Compute the circumcenter of the tetrahedron\n        x = 0.5 * (a[0] * b[0] * c[0] - a[1] * b[0] * c[1] - a[2] * b[0] * c[2] +\n                   a[0] * b[1] * c[0] - a[1] * b[1] * c[1] - a[2] * b[1] * c[2] +\n                   a[0] * b[2] * c[0] - a[1] * b[2] * c[1] - a[2] * b[2] * c[2])\n        y = 0.5 * (a[0] * a[1] * (c[2] - b[2]) + a[0] * a[2] * (b[1] - c[1]) + a[1] * a[2] * (c[0] - b[0]) +\n                   b[0"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case: n = 0, return 0\n    if n == 0:\n        return 0\n\n    # Base case: n = 1, return 4\n    if n == 1:\n        return 4\n\n    # Base case: n = 2, return 10\n    if n == 2:\n        return 10\n\n    # Recursive case: find the (n-1)th tetrahedral number\n    else:\n        # Find the (n-1)th tetrahedral number\n        tn1 = tetrahedral_number(n-1)\n\n        # Compute the (n-1)th tetrahedral number and return it\n        return 4*tn1 - 4*tn1**3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 4\n    else:\n        return 4 * (n-1) + tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the first two terms of the sequence\n    t1 = 1\n    t2 = 3\n\n    # Initialize the first three terms of the sequence\n    tn = 0\n    for i in range(1, n+1):\n        # Calculate the next term of the sequence\n        tn = 4*t1**3 - t2**2 + i\n        # Update the values of t1 and t2\n        t1 = t2\n        t2 = tn\n\n    # Return the nth term of the sequence\n    return tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initializing variables\n    a = 1\n    b = 1\n    c = 2\n    d = 6\n    \n    # Iterating through the tetrahedral numbers\n    while n > 0:\n        # If n is even, add the product of a and d to the result\n        if n % 2 == 0:\n            result += a * d\n        # If n is odd, add the product of b and c to the result\n        else:\n            result += b * c\n        \n        # Updating variables\n        a += 1\n        b += 1\n        c += 2\n        d -= 2\n        \n        # Decrementing n\n        n -= 1\n        \n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) // 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    vol = (4/3)*math.pi*(r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3) * pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for i in strr:\n        ascii_val += ord(i)\n    char = ascii_val % 26\n    return chr(65 + char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    ascii_val = ord('a')\n    char = ''\n    \n    for char in strr:\n        count += ord(char) - ascii_val\n        \n    ascii_val = (ascii_val + count) % 26\n    char = chr(ascii_val + ascii_val)\n    \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if not isinstance(strr, str):\n        raise TypeError(\"Input must be a string\")\n\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = sum(ord(c) for c in strr) % 26\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    return chr(char_val % 26 + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Define the character variable\n    char = \"\"\n    # Convert all the characters of the string to ASCII values\n    for char_ascii in str.encode():\n        # Add the ASCII value to the character variable modulo 26\n        char += chr((ord(char_ascii) - 65 + 26) % 26 + 65)\n    # Return the character variable\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize a variable to store the sum of ASCII values of all characters of the string\n    sum = 0\n    \n    # Iterate through each character of the string and add its ASCII value to the sum\n    for char in strr:\n        sum += ord(char)\n    \n    # Return the character made by adding the ASCII value of all the characters modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the sequence with the first two numbers in the sequence\n    sequence = [1, 2]\n\n    # Loop through the sequence until we reach n\n    for i in range(2, n + 1):\n        # Create a new list with the previous numbers in the sequence\n        new_sequence = [sequence[j] + sequence[j + 1] for j in range(len(sequence) - 1)]\n        # Update the sequence with the new list\n        sequence = new_sequence\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n\nn = int(input(\"Enter the value of n: \"))\n\nresult = sequence(n)\n\nprint(\"The\", n, \"th number in the sequence is:\", result)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    else:\n        return (10**n - 10**(n-1) + 10**(n-2)) // 2"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0] * (n+1)\n    sequence[0] = 1\n    sequence[1] = 1\n    sequence[2] = 1\n    for i in range(3, n+1):\n        sequence[i] = (4*sequence[i-1] - sequence[i-2] - sequence[i-3]) % 1000000\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence\n    sequence = [1]\n\n    # calculate the first few numbers in the sequence\n    for i in range(1, n):\n        # for each number in the sequence, check if it's alive or dead\n        if i % 2 == 0:\n            # if it's even, add 1\n            sequence.append(sequence[-1] + 1)\n        else:\n            # if it's odd, add 0\n            sequence.append(0)\n\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append((sequence[-1] + sequence[-2]) % 2)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]  # initialize the sequence with 1 and 1\n    for i in range(2, n):\n        sequence.append(3 * sequence[i-1] + 1)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]  # start with 1 and 1\n    for i in range(2, n+1):\n        sequence.append(3*sequence[-1]-sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence with 1, 1, 0, 1, 0,...\n    sequence = [1, 1]\n    \n    # Iterate n-1 times\n    for i in range(n-1):\n        # Add the previous two numbers in the sequence\n        sequence.append(sequence[-1]+sequence[-2])\n    \n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # convert radius from meters to centimeters\n    r_cm = r * 100\n\n    # use the formula for the surface area of a sphere\n    surface_area = (4/3) * math.pi * r_cm ** 3\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in a radius (r) and returns the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes the radius of the sphere as an input and returns its surface area.\n    '''\n    # Formula for surface area of a sphere: A = 4*\u03c0*r^2\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer as input and returns the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The value of n.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    \"\"\"\n    n = n - 1 # Convert input value to 0-based indexing\n    centered_hex = 1 # Initialize the centered hexagonal number to 1\n    center = 0 # Initialize the center of the hexagon to 0\n\n    # Calculate the number of steps to move the center to the left and up\n    steps_to_left = n // 2\n    steps_to_up = n - steps_to_left - 1\n\n    # Calculate the distance from the center to the edges of the hexagon\n    distance_to_left = steps_to_left - 1\n    distance_to_right = steps_to_left - distance_to_left\n    distance_to_up = steps_to_up - 1\n    distance_to_down = steps_to_up - distance_to_up\n\n    # Loop until the center reaches the edge of the hexagon\n    while True:\n        centered_hex += 1 # Increment the centered hexagonal number\n        center += 1 # Increment the center position\n        steps_to_left -= 1 # Decrement the number of steps to move the center left\n        steps_to_up -= 1 # Decrement the number of steps to move the center up\n\n        if steps_to_left < 0 and steps_to_up < 0: # Check if the center has reached the edge of the hexagon\n            break\n\n    # Move the center to the desired position relative to the edges of the hexagon\n    for _ in range(center):\n        centered_hex += 1 # Increment the centered hexagonal number\n        center += 1 # Increment the center position\n        steps_to_left -= 1 # Decrement the number of steps to move the center left\n        steps_to_up -= 1 # Decrement the number of steps to move the center up\n        steps_to_left += 1 # Increment the number of steps to move the center left\n        steps_to_up += 1 # Increment the number of steps to move the center up\n\n    # Calculate the distance from the center to the center of the hexagon\n    distance_to_center = steps_to_left + steps_to_up - steps_to_left - steps_to_up + 1\n\n    # Return the centered hexagonal number\n    return centered_hex - distance_to_center"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 5 * (n * (3 * n - 1) // 2) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize a counter variable to keep track of the number of hexagons\n    counter = 0\n    \n    # Initialize a variable to store the sum of the centered hexagons\n    sum_of_centered_hexagons = 0\n    \n    # Loop through each hexagon (starting at 1)\n    for i in range(1, n+1):\n        # Calculate the number of hexagons in the i-th row\n        num_hexagons = 2 * i - 1\n        \n        # Calculate the sum of the centered hexagons in the i-th row\n        sum_of_centered_hexagons += num_hexagons\n        \n        # Add the number of hexagons to the counter\n        counter += num_hexagons\n        \n    # Return the sum of the centered hexagons\n    return sum_of_centered_hexagons"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1]\n    for i in range(2, n+1):\n        hexagonal_numbers.append(sum(hexagonal_numbers[-2:]))\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (2*n-1) * centered_hexagonal_number(n-1) + n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function returns the nth centered hexagonal number.\n    \"\"\"\n    a = 1\n    b = 1.5\n    c = 2\n    d = 1.5\n\n    result = 0\n\n    for i in range(n):\n        result += (a + b + c + d) / 4\n\n        a = b\n        b = c\n        c = d\n        d = a + b + c + d\n\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the starting and ending points of the range of centered hexagonal numbers\n    start = 1\n    end = 12\n\n    # Initialize a counter to keep track of the number of centered hexagonal numbers found\n    count = 0\n\n    # Iterate through the range of centered hexagonal numbers\n    for i in range(start, end+1):\n        # Check if the current centered hexagonal number is equal to the input n\n        if i == n:\n            # Increment the count and break out of the loop\n            count += 1\n            break\n\n    # Return the count of centered hexagonal numbers found\n    return count"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    elif n == 6:\n        return 36\n\n    # Calculate the centered hexagonal number\n    a = centered_hexagonal_number(n - 1)\n    b = centered_hexagonal_number(n - 2)\n    return a + b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    row = n\n    col = 0\n    total = 0\n    \n    # loop through rows\n    while row > 0:\n        # calculate the number of spaces needed for each row\n        spaces = (2 * (row - 1) - 1) // 2\n        \n        # loop through columns\n        for i in range(spaces):\n            total += 1\n        \n        # move to next row and reset column count\n        row -= 1\n        col = 0\n    \n    return total"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagon_base = 1.61803398875 # golden ratio\n    hexagon_top = 0.5 * hexagon_base\n    hexagon_side = 2 * hexagon_base\n    \n    # find the maximum number of iterations that can be performed\n    max_iterations = int(n / hexagon_base)\n    \n    # calculate the nth centered hexagonal number\n    centered_hexagonal = 0\n    \n    # iterate through the number of iterations\n    for i in range(max_iterations):\n        # add the number of hexagons along the top half of the hexagon to the total number of hexagons\n        centered_hexagonal += 6 * i + 1\n        \n        # add the number of hexagons along the bottom half of the hexagon to the total number of hexagons\n        centered_hexagonal += 6 * (max_iterations - i - 1) + 1\n    \n    # subtract the number of hexagons that are outside the bounds of the hexagon from the total number of hexagons\n    centered_hexagonal -= 6 * n + 1\n    \n    return centered_hexagonal"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n\n    # Iterate through each key in the first dictionary\n    for key in dict1:\n        # If the key is already in the merged dictionary, append the values of the dictionaries\n        if key in merged_dict:\n            merged_dict[key] += [dict1[key]]\n        # If the key is not in the merged dictionary, add it with its value as a list containing only one value\n        else:\n            merged_dict[key] = [dict1[key]]\n\n    # Iterate through each key in the second dictionary\n    for key in dict2:\n        # If the key is already in the merged dictionary, append the values of the dictionaries\n        if key in merged_dict:\n            merged_dict[key] += [dict2[key]]\n        # If the key is not in the merged dictionary, add it with its value as a list containing only one value\n        else:\n            merged_dict[key] = [dict2[key]]\n\n    # Iterate through each key in the third dictionary\n    for key in dict3:\n        # If the key is already in the merged dictionary, append the values of the dictionaries\n        if key in merged_dict:\n            merged_dict[key] += [dict3[key]]\n        # If the key is not in the merged dictionary, add it with its value as a list containing only one value\n        else:\n            merged_dict[key] = [dict3[key]]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n        dict1 (dict): The first dictionary to be merged.\n        dict2 (dict): The second dictionary to be merged.\n        dict3 (dict): The third dictionary to be merged.\n\n    Returns:\n        dict: The merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): Dictionary to be merged.\n        dict2 (dict): Dictionary to be merged.\n        dict3 (dict): Dictionary to be merged.\n\n    Returns:\n        dict: Merged dictionary.\n\n    \"\"\"\n    merged_dict = {}\n\n    # Merge first dictionary with second dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    # Merge second dictionary with third dictionary\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = ct.Counter(merged_dict[key] + value)\n\n    # Merge third dictionary with first dictionary\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = ct.Counter(merged_dict[key] + value)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    # Iterate through the keys of the first dictionary\n    for key in dict1:\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If the key exists, append the values from the dictionaries to the merged dictionary\n            merged_dict[key] = list(dict1[key]) + list(dict2[key]) + list(dict3[key])\n        else:\n            # If the key does not exist, add it to the merged dictionary with the merged values\n            merged_dict[key] = list(dict1[key]) + list(dict2[key]) + list(dict3[key])\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters\n    ----------\n    dict1 : dict\n        First dictionary to merge.\n    dict2 : dict\n        Second dictionary to merge.\n    dict3 : dict\n        Third dictionary to merge.\n\n    Returns\n    -------\n    dict\n        Merged dictionary.\n    \"\"\"\n    # Combine all three dictionaries into a single dictionary using the update() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        if key not in merged_dict and key not in dict2:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for num in list1:\n        freq_dict[num] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def freq_count(lst):\n    \"\"\"\n    Return a dictionary with the frequency of all elements in the list lst.\n\n    Args:\n    lst (list): a list of elements\n\n    Returns:\n    dict: a dictionary with keys being elements in lst and values being their frequency in lst.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as an input and returns a dictionary where the keys are the unique elements in the list\n    and the values are the frequency of that element in the list.\n    '''\n    freq = {}\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Create an empty dictionary\n    freq_dict = collections.defaultdict(int)\n\n    # Iterate through the list\n    for element in list1:\n        # Increment the frequency count for the element\n        freq_dict[element] += 1\n\n    # Return the dictionary with the frequency count\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = [i for i in range(1, N+1)]\n    closest = float('inf')\n    for num in numbers:\n        if num < N:\n            diff = N - num\n            if abs(diff) < abs(closest):\n                closest = diff\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    \n    for i in range(1, N):\n        if i < smallest:\n            closest = smallest\n            smallest = i\n        elif i < closest and i!= smallest:\n            closest = i\n            \n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables to keep track of closest smaller number and its distance\n    smallest = float('inf')\n    smallest_dist = float('inf')\n    closest = None\n    \n    # Iterate over all numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the distance between N and i\n        dist = abs(N - i)\n        \n        # If the current distance is smaller than the smallest distance or the current number is smaller than the smallest number, update variables\n        if dist < smallest_dist or (dist == smallest_dist and i < smallest):\n            smallest = i\n            smallest_dist = dist\n            closest = i\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize the smallest number as the input number\n    smallest = N\n\n    # loop through the list of numbers from 1 to n-1\n    for num in range(1, N):\n        # check if the current number is smaller than the smallest number\n        if num < smallest:\n            # if it is, update the smallest number\n            smallest = num\n\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(N, 0, -1):\n        if i < smallest:\n            smallest = i\n            break\n    return smallest\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N + 1\n    for i in range(1, N):\n        if abs(i - N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smallest_num = None\n    closest_num = None\n    \n    for i in range(1, N+1):\n        if smallest_num is None or i < smallest_num:\n            smallest_num = i\n        elif i < closest_num:\n            closest_num = i\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    min_diff = float('inf')\n    closest_num = None\n    \n    for i in range(1, N+1):\n        if i > N:\n            break\n        diff = abs(n - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n            \n    if closest_num is not None:\n        print(f\"The closest smaller number is {closest_num} with a difference of {min_diff}.\")\n    else:\n        print(\"There is no smaller number than\", n, \"in the range 1 to\", N, \".\")"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N < 2:\n        return N\n    \n    min_diff = float('inf')\n    min_num = None\n    \n    for num in range(2, N+1):\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n            \n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for num in range(N):\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    # Initialize a variable to store the length of the longest word\n    longest_word = 0\n\n    # Loop through the list of words\n    for word in list1:\n        # Check if the current word is longer than the current longest word\n        if len(word) > longest_word:\n            # Update the variable to the length of the current word\n            longest_word = len(word)\n\n    # Return the length of the longest word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    word = ''\n\n    # Iterate through the list\n    for item in list1:\n\n        # Remove any non-alphanumeric characters from the word\n        word = ''.join(e for e in item if e.isalnum())\n\n        # Check if the length of the current word is greater than the current maximum length\n        if len(word) > max_length:\n            max_length = len(word)\n\n    # Return the maximum length of any word in the list\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    longest_word = \"\"\n\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not sub_str:\n        raise ValueError(\"Sub-string cannot be empty\")\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of string values and a substring as input and returns True if the\n    substring appears in the list, otherwise it returns False.\n    '''\n    for str in str_list:\n        if sub_str in str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in the string.\")\n    else:\n        print(f\"{sub_str} is not present in the string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str_list, sub_str):\n    \"\"\"\n    This function takes a list of strings and a substring as input and returns True if the substring is present in any of the strings in the list, and False otherwise.\n    \"\"\"\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert sub_str to a set to remove duplicates\n    sub_set = set(sub_str)\n\n    # loop through the list and check if the substring is present as a set of characters in each element of the list\n    for elem in str1:\n        if set(elem) == sub_set:\n            return True\n\n    # if the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check whether the given number is odd or even\n    if n % 2 == 0: \n        # even number\n        return False\n    else: \n        # odd number\n        for i in range(2, n//2): \n            if n % i == 0: \n                # n is divisible by i\n                return False\n        # n is not divisible by any odd number less than or equal to half of n\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even number is not undulating'\n    else:\n        return 'Odd number is undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # initialize variables\n    is_undulating = False\n    sum_of_squares = 0\n\n    # calculate the sum of squares of the digits of the number\n    for digit in str(n):\n        sum_of_squares += int(digit)**2\n\n    # check whether the sum of squares is even or odd\n    if sum_of_squares % 2 == 0:\n        is_undulating = True\n\n    # return the result\n    return is_undulating"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is a even number\")\n        return False\n    else:\n        print(n, \"is a odd number\")\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    if n < 3:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Define the conditions for an undulating number\n    conditions = [\n        lambda x: x > 1 and x % 2 == 0,\n        lambda x: x > 2 and x % 2 == 0,\n        lambda x: x > 3 and x % 2 == 0,\n        lambda x: x > 4 and x % 2 == 0,\n        lambda x: x > 5 and x % 2 == 0,\n        lambda x: x > 6 and x % 2 == 0,\n        lambda x: x > 7 and x % 2 == 0,\n        lambda x: x > 8 and x % 2 == 0,\n        lambda x: x > 9 and x % 2 == 0,\n        lambda x: x > 10 and x % 2 == 0,\n        lambda x: x > 11 and x % 2 == 0,\n        lambda x: x > 12 and x % 2 == 0,\n        lambda x: x > 13 and x % 2 == 0,\n        lambda x: x > 14 and x % 2 == 0,\n        lambda x: x > 15 and x % 2 == 0,\n        lambda x: x > 16 and x % 2 == 0,\n        lambda x: x > 17 and x % 2 == 0,\n        lambda x: x > 18 and x % 2 == 0,\n        lambda x: x > 19 and x % 2 == 0,\n        lambda x: x > 20 and x % 2 == 0,\n        lambda x: x > 21 and x % 2 == 0,\n        lambda x: x > 22 and x % 2 == 0,\n        lambda x: x > 23 and x % 2 == 0,\n        lambda x: x > 24 and x % 2 == 0,\n        lambda x: x > 25 and x % 2 == 0,\n        lambda x: x > 26 and x % 2 == 0,\n        lambda x: x > 27 and x % 2 == 0,\n        lambda x: x > 28 and x % 2 == 0,\n        lambda x: x > 29 and x % 2 == 0,\n        lambda x: x > 30 and x % 2 == 0,\n        lambda x: x > 31 and x % 2 == 0,\n        lambda x: x > 32 and x % 2 == 0,\n        lambda x: x > 33 and x % 2 == 0,\n        lambda x: x > 34 and x % 2 == 0,\n        lambda x: x > 35 and x % 2 == 0,\n        lambda x: x > 36 and x % 2 == 0,\n        lambda x: x > 37 and x % 2 == 0,\n        lambda x: x > 38 and x % 2 == 0,\n        lambda x: x > 39 and x % 2 == 0,\n        lambda x: x > 40 and x % 2 == 0,\n        lambda x: x > 41 and x % 2 == 0,\n        lambda x: x > 42 and x % 2 == 0,\n        lambda x: x > 43 and x % 2 == 0,\n        lambda x: x > 44 and x % 2 == 0,\n        lambda x: x > 45 and x % 2 == 0,\n        lambda x: x > 46 and x % 2 == 0,\n        lambda x: x > 47 and x % 2 == 0,\n        lambda x: x > 48 and x % 2 == 0,\n        lambda x: x > 49 and x % 2 == 0,\n        lambda x: x > 50 and x % 2 == 0\n    ]\n\n    # Loop through the conditions and find the first one that returns True\n    for condition in conditions:\n        if condition(n):\n            return True\n\n    # If no condition returns True, then the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = float('inf')\n    for i, tup in enumerate(test_list):\n        if tup[1] < min_value:\n            min_index = i\n            min_value = tup[1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to access the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to select the second element of each tuple\n    return sorted(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = float('inf')\n    index = -1\n    for i, tup in enumerate(test_list):\n        if tup[1] < minimum:\n            minimum = tup[1]\n            index = i\n    return test_list[index]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Define a custom sort key to sort the tuples based on the second value of the tuple\n    def custom_sort(x):\n        return x[1]\n\n    # Sort the list of tuples using the custom sort function\n    sorted_list = sorted(test_list, key=custom_sort)\n\n    # Return the first value of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value using the itemgetter function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return test_list.index(min_value)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000000 # initialize minimum length to a very large number\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize a variable to store the length of the smallest list\n    min_length = 999999\n\n    # Iterate over each list in the list of lists\n    for sub_list in lst:\n        # Check if the length of the current list is less than the minimum length\n        if len(sub_list) < min_length:\n            # If it is, update the minimum length\n            min_length = len(sub_list)\n\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000000  # initialize minimum length to a very large number\n    for i in range(len(lst)):  \n        for j in range(len(lst[i])):  \n            if len(lst[i][j]) < min_len:  \n                min_len = len(lst[i][j])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # check if the input is an integer\n    if type(n)!= int:\n        raise TypeError(\"Input must be an integer\")\n\n    # initialize a count variable to store the number of divisors\n    count = 0\n\n    # loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # if n is divisible by i, increment the count\n        if n % i == 0:\n            count += 1\n\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i <= n/i:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 1\n        i += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer using the Sieve of Eratosthenes algorithm.\n    \"\"\"\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while(p*p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if(prime[p] == True):\n            # Update all multiples of p\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # count the number of prime divisors of n\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to hold the frequency of each element\n    freq_dict = {}\n    # loop through the flattened list of lists\n    for sublist in list1:\n        # loop through each element in the sublist\n        for element in sublist:\n            # check if the element is already in the dictionary\n            if element in freq_dict:\n                # increment its frequency by 1\n                freq_dict[element] += 1\n            else:\n                # otherwise add the element to the dictionary with a frequency of 1\n                freq_dict[element] = 1\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for elem in item:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list of lists\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[element] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq_dict[element] = 1\n    \n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist] # Flatten the nested list\n    freq_dict = {} # Create an empty dictionary to store the frequency\n\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store frequency\n    freq_dict = {}\n\n    # iterate over each element in the flattened list\n    for element in list1:\n        # check if the element is already in the dictionary\n        if element in freq_dict:\n            # increment the frequency of the element\n            freq_dict[element] += 1\n        else:\n            # add the element to the dictionary with a frequency of 1\n            freq_dict[element] = 1\n\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate through each element in the flattened list\n    for element in list1:\n\n        # If the element is already in the dictionary, increment its frequency count\n        if element in freq_dict:\n            freq_dict[element] += 1\n\n        # If the element is not in the dictionary, add it with a frequency count of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    # Multiply all the numbers and divide with the length of the list\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    # Return the result\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0] * numbers[-1] / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # check if n is negative\n    if n < 0:\n        n = bin(abs(n))[2:]\n        return '-' + n[::-1]\n    else:\n        n = bin(n)[2:]\n        return n[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # base case: if n is 0, return 0\n    if n == 0:\n        return 0\n    \n    # base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # recursive case: divide n by 2 and recursively call the function for the quotient\n    quotient = decimal_to_binary(n//2)\n    \n    # append the remainder (i.e., n modulo 2) to the end of the quotient string\n    remainder = n % 2\n    quotient = str(remainder) + quotient\n    \n    # return the quotient string\n    return quotient"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty list to store the binary digits\n    binary_digits = []\n\n    # loop through the digits of the decimal number in reverse order\n    while n > 0:\n        # get the last digit of the decimal number and convert it to a binary digit\n        digit = n % 2\n        # add the binary digit to the beginning of the list\n        binary_digits.insert(0, digit)\n        # divide the decimal number by 2 and remove the last digit\n        n = n // 2\n\n    # convert the list of binary digits into a string\n    return ''.join(str(digit) for digit in binary_digits)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # convert decimal to binary using bitwise operators\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = '' \n    while n > 0: \n        remainder = n % 2 \n        binary_string = str(remainder) + binary_string \n        n = n // 2 \n    return binary_string "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    elif n < 0:\n        raise ValueError(\"Negative numbers are not allowed.\")\n    else:\n        binary_str = ''\n        while n > 0:\n            binary_str = str(n % 2) + binary_str\n            n //= 2\n        return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reverse_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse_str)\n    # Add 1 to the reversed integer to get the next smallest palindrome\n    next_palindrome = reverse_num + 1\n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def smallest_palindrome(num):\n        if is_palindrome(num):\n            return num\n\n        def is_multiple(n):\n            return any(num % i == 0 for i in range(2, int(n**0.5) + 1))\n\n        while True:\n            if is_multiple(num):\n                num += 1\n            else:\n                return num\n\n    def next_palindrome(num):\n        if is_palindrome(num):\n            return num\n\n        while True:\n            if num < 0:\n                num = 1\n            elif num > 0:\n                return num\n\n            num = smallest_palindrome(num)\n\n    return next_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(num):\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # Check if the original number and its reversed version are equal\n    if reversed_num == num:\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, find the next smallest odd number\n        while not (num % 2 == 1):\n            num += 1\n        return num\n    else:\n        # If it's not, find the next smallest palindrome\n        next_num = num + 1\n        while not is_palindrome(next_num):\n            next_num += 1\n        return next_num - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Check if the integer is already a palindrome\n    is_palindrome = True\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-i - 1]:\n            is_palindrome = False\n            break\n    # If the integer is not a palindrome, return the largest integer less than it\n    if not is_palindrome:\n        return max(int(str(num)[::-1]), num + 1)\n    # If the integer is a palindrome, return the next smallest palindrome\n    else:\n        return int(num_str[::-1]) + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_num_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_num_str)\n    # Find the next smallest palindrome by incrementing the original number by 1\n    next_palindrome = num + 1\n    # Check if the next palindrome is smaller than the original number\n    while True:\n        # Increment the next palindrome by 1\n        next_palindrome += 1\n        # Convert the next palindrome to a string\n        next_palindrome_str = str(next_palindrome)\n        # Reverse the string and compare it with the reversed original number string\n        if next_palindrome_str[::-1] < rev_num_str:\n            break\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the smallest positive integer that is equal to the next largest palindrome.\n\n    For example, if the input is 1234, then the function should return 1344, which is the next largest palindrome of 1234.\n    \"\"\"\n    # Find the largest palindrome that is less than or equal to the input number\n    largest_palindrome = int(str(num)[::-1])\n    # Check if the largest palindrome is equal to the input number\n    if largest_palindrome <= num:\n        largest_palindrome += 1\n    # Find the smallest palindrome that is greater than the input number and is less than or equal to the largest palindrome\n    smallest_palindrome = largest_palindrome + 1\n    while smallest_palindrome <= largest_palindrome and str(smallest_palindrome)[::-1] < str(num):\n        smallest_palindrome += 1\n    # Return the smallest palindrome that is greater than the input number and is less than or equal to the largest palindrome\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = sys.maxsize\n    while True:\n        num = num + 1\n        if str(num) == str(num)[::-1]:\n            if num > max_num:\n                return num\n        else:\n            break\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert the integer to a string\n    num_str = str(num)\n    \n    # Initialize the smallest palindrome to be the input integer itself\n    smallest_palindrome = num\n    \n    # Iterate over the digits of the input integer\n    for digit in num_str:\n        # Remove the current digit from the palindrome and add the next digit\n        next_palindrome = int(digit + num_str[num_str.index(digit)+1:])\n        \n        # If the next palindrome is smaller than the current smallest palindrome, update the smallest palindrome\n        if next_palindrome < smallest_palindrome:\n            smallest_palindrome = next_palindrome\n    \n    # Return the smallest palindrome found\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    # convert num to a string\n    num_str = str(num)\n\n    # find the largest palindrome that is less than num\n    max_palindrome = 0\n    for i in range(99, num-1, -1):\n        for j in range(i, 0, -1):\n            palindrome = int(num_str[j:]) + int(num_str[:j]) * 10\n            if palindrome > max_palindrome:\n                max_palindrome = palindrome\n\n    # find the next smallest palindrome\n    for i in range(99, max_palindrome-1, -1):\n        for j in range(i, 0, -1):\n            palindrome = int(num_str[j:]) + int(num_str[:j]) * 10\n            if palindrome < num:\n                return palindrome\n\n    # if no such palindrome exists, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes a positive integer as input and returns the next smallest palindrome of that integer.\n    \"\"\"\n\n    # check if the input is a positive integer\n    if type(num)!= int or num < 1:\n        sys.exit(\"Error: Input must be a positive integer\")\n\n    # check if the input is even\n    if num % 2 == 0:\n        # the input is even, so increment the last digit by 1\n        num = num // 10 * 10 + 1\n\n    # create a list of digits in the input number\n    num_list = [int(digit) for digit in str(num)]\n\n    # reverse the list of digits\n    num_list.reverse()\n\n    # create a new list of digits that are odd\n    odd_digits = [digit for digit in num_list if digit % 2!= 0]\n\n    # create a new list of digits that are even\n    even_digits = [digit for digit in num_list if digit % 2 == 0]\n\n    # if there are no odd digits, increment the last digit by 1\n    if not odd_digits:\n        num = num // 10 * 10 + 1\n\n    # if there are odd digits, find the smallest odd digit and decrement it\n    else:\n        smallest_odd_digit = min(odd_digits)\n        num_list = [digit for digit in num_list if digit!= smallest_odd_digit]\n        num_list.append(smallest_odd_digit - 1)\n        num = int(''.join(map(str, num_list)))\n\n    # if there are no even digits, increment the last digit by 1\n    if not even_digits:\n        num = num // 10 * 10 + 1\n\n    # if there are even digits, find the smallest even digit and increment it\n    else:\n        smallest_even_digit = min(even_digits)\n        num_list = [digit for digit in num_list if digit!= smallest_even_digit]\n        num_list.append(smallest_even_digit + 1)\n        num = int(''.join(map(str, num_list)))\n\n    return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Initialize the left and right pointers to the first and last elements\n    left = 1\n    right = len(arr)\n    \n    # Initialize the count variable\n    count = 1\n    \n    # Loop through the array until the count reaches the kth element\n    while count < k:\n        # If the count is less than k, move the left pointer to the right\n        if count == (k-1):\n            left = right + 1\n        # If the count is greater than k, move the right pointer to the left\n        else:\n            right = left - 1\n        \n        # Update the count variable\n        count = count + right - left\n        \n    # Return the value at the kth element\n    return arr[right]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or if the k is less than 1 or greater than the length of the array\n    if not arr or k < 1 or k > len(arr):\n        return None\n\n    # Initialize two pointers, left and right, to the beginning of the array\n    left = 1\n    right = len(arr)\n\n    # Iterate until the kth element is found or until the pointers cross each other\n    while left <= right:\n        # Calculate the midpoint of the array using integer division\n        mid = left + (right - left) // 2\n\n        # If the kth element is found, return it\n        if k == mid:\n            return arr[k-1]\n\n        # If the kth element is less than the midpoint, the kth element is in the right half of the array\n        elif k < mid:\n            right = mid - 1\n\n        # If the kth element is greater than the midpoint, the kth element is in the left half of the array\n        else:\n            left = mid + 1\n\n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Invalid input\")\n        return\n    \n    i = 0\n    j = n - 1\n    while i <= j:\n        while i <= j and arr[i] <= arr[i-1]:\n            i += 1\n        while i <= j and arr[j] >= arr[j+1]:\n            j -= 1\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    \n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Error: k is greater than the length of the array.\"\n    if k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[n-1]\n    else:\n        left = 1\n        right = n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively find the kth element in the left half\n    if k <= len(left_half):\n        return kth_element(left_half, k)\n    # Recursively find the kth element in the right half\n    else:\n        return kth_element(right_half, k - len(left_half) - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    \n    left = 1\n    right = n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left, right = 0, n - 1\n    \n    while left <= right:\n        pivot = partition(arr, left, right)\n        \n        if pivot == k - 1:\n            return arr[pivot]\n        elif pivot < k - 1:\n            left = pivot + 1\n        else:\n            right = pivot - 1\n            \ndef partition(arr, left, right):\n    pivot = arr[right]\n    i = left - 1\n    \n    for j in range(left, right):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n            \n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    # Remove all underscores from the word\n    word = word.replace('_', '')\n\n    # Capitalize the first letter of each word\n    words = word.split('_')\n    words = [word.capitalize() for word in words]\n\n    # Join the words with a single underscore\n    camel_case = '_'.join(words)\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words using the underscore as the separator\n    words = word.split(\"_\")\n    # Capitalize the first letter of each word and join them with an underscore\n    camel_case = \"_\".join([word.capitalize() for word in words])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += \"_\" + char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = []\n    for i in range(len(word)):\n        if i == 0:\n            camel_case.append(word[i].lower())\n        elif word[i-1].islower() and word[i].isupper():\n            camel_case.append(word[i].lower())\n        else:\n            camel_case.append(word[i])\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for char in word:\n        if char.isupper():\n            camel_case += '_' + char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_word += word[i].lower() + '_'\n        else:\n            camel_word += word[i]\n    return camel_word.lstrip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = words[0].lower()\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        if m == 0:\n            return 1\n        elif m == 1:\n            return 0\n    elif n == 1:\n        if m == 0:\n            return 1\n        elif m == 1:\n            return 1\n    elif m == 0:\n        return eulerian_num(n-1, m)\n    elif m == 1:\n        return eulerian_num(n-1, m-1) - eulerian_num(n-1, m-2)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1) - eulerian_num(n-1, m-2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def get_combinations(n, r):\n        '''\n        Generate all possible combinations of r elements from n.\n        '''\n        result = []\n        for i in range(n - r + 1):\n            result.append([int(x) for x in bin(i)[2:].zfill(r)])\n        return result\n\n    def get_combinations_of_length(n, m, length):\n        '''\n        Generate all possible combinations of length r elements from n.\n        '''\n        result = []\n        for i in range(n - m + 1):\n            result.append([int(x) for x in bin(i)[2:].zfill(length)])\n        return result\n\n    def count_pairs(pairs):\n        '''\n        Count the number of pairs in the list of pairs.\n        '''\n        count = 0\n        for pair in pairs:\n            if pair[0] < pair[1]:\n                count += 1\n        return count\n\n    def count_pairs_of_length(pairs, length):\n        '''\n        Count the number of pairs of length r in the list of pairs.\n        '''\n        count = 0\n        for pair in pairs:\n            if (pair[0] < length and pair[1] < length) or (pair[0] > length and pair[1] > length):\n                count += 1\n        return count\n\n    def construct_combinations(n, m, r):\n        '''\n        Construct all possible combinations of r elements from n.\n        '''\n        combinations = get_combinations(n, r)\n        return [pair for pair in combinations if pair[0] < pair[1]]\n\n    def construct_pairs(pairs, r, length):\n        '''\n        Construct all possible pairs of length r in the list of pairs.\n        '''\n        result = []\n        for pair in pairs:\n            if (pair[0] < length and pair[1] < length) or (pair[0] > length and pair[1] > length):\n                result.append(pair)\n        return result\n\n    def construct_pairs_of_length(pairs, length):\n        '''\n        Construct all possible pairs of length r in the list of pairs.\n        '''\n        result = []\n        for pair in pairs:\n            if pair[0] < length and pair[1] < length or pair[0] > length and pair[1] > length:\n                result.append(pair)\n        return result\n\n    def count_n_pairs_of_length(n, m, r, length):\n        '''\n        Count the number of pairs of length r in the list of pairs.\n        '''\n        pairs = get_combinations_of_length(n, m, r)\n        return count_pairs_of_length(construct_pairs_of_length(pairs, length), length)\n\n    def count_n_pairs(n, m, r):\n        '''\n        Count the number of pairs in the list of pairs.\n        '''\n        pairs = get_combinations(n, r)\n        return count_pairs(construct_pairs(pairs, r, 0))\n\n    def count_n_pairs_of_length_sum(n, m, r, length):\n        '''\n        Count the number of pairs of length r in the list of pairs.\n        '''\n        pairs = get_combinations_of_length(n, m, r)\n        return count_pairs_of_length(construct_pairs_of_length(pairs, length), length)\n\n    def construct_pairs_of_length_sum(pairs, length):\n        '''\n        Construct all possible pairs of length r in the list of pairs.\n        '''\n        result = []\n        for pair in pairs:\n            if pair[0] + pair[1] == length:\n                result.append(pair)\n        return result\n\n    def count_n_pairs_of_length_sum(n, m, r, length):\n        '''\n        Count the number of pairs of length r in the list of pairs.\n        '''\n        pairs = get_combinations_of_length(n, m, r)\n        return count_pairs_of_length(construct_pairs_of_length_sum(pairs, length), length)\n\n    def generate_pairs(n, m, r):\n        '''\n        Generate all possible pairs of length r in the list of pairs.\n        '''\n        pairs = get_combinations(n, r)\n        return [pair for pair in pairs if pair[0] < pair[1]]\n\n    def generate_pairs_of_length(pairs, length):\n        '''\n        Generate all possible pairs of length r in the list of pairs.\n        '''"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += (-1)**i * (2*i-1) * ((n-i+m-1) // (i-1))\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += (i * (m - i)) // (i + 1)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(2, n + 1):\n        a *= (i - m) / i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0: \n        return 1 \n    elif n == 1: \n        return m \n    else: \n        return eulerian_num(n-1, m-1) "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # calculate the number of numbers in the sequence\n    num_seq = 1\n    for i in range(2, n+1):\n        num_seq *= i\n    \n    # calculate the number of numbers with m digits\n    num_m = 1\n    for i in range(m):\n        num_m *= 10\n    \n    # calculate the product of the two numbers\n    num_prod = num_seq // num_m\n    \n    # return the product\n    return num_prod"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the list of Eulerian numbers\n    a = [1]\n\n    # Check for divisibility of n by m\n    while n % m!= 0:\n        a.append(a[-1] + 1)\n        n = n + 1\n\n    # Initialize the variable for the sum of Eulerian numbers\n    s = a[-1]\n\n    # Find the sum of Eulerian numbers using the formula a(n, m) = (n-m+1) * s\n    while n >= m:\n        a.append(a[-1] + n - m + 1)\n        n = n - 1\n\n    # Return the sum of the Eulerian numbers\n    return sum(a)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1) - eulerian_num(n-1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 1\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            if (i*j) % n == 0:\n                a += (i*j)//n\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n\ninput_list = [\n    ['apple', 'banana', 'cherry'],\n    ['dog', 'cat', 'bird'],\n    ['elephant', 'giraffe', 'zebra']\n]\n\nsort_sublists(input_list)\n\nprint(input_list)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for num in lst:\n        if num:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = tuple(test_tup + (item,))\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the given lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # Append the list to the tuple\n    test_tup += test_list\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    return tuple(test_tup) + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    # Return the new list\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # append the given list to the given tuples\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Using list comprehension to convert tuples to lists\n    test_list = list(test_tup)\n\n    # Appending the list to the tuples\n    test_list.extend(test_list)\n\n    # Creating a new tuple with the appended list\n    new_tup = tuple(test_list)\n\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # Append the list to the tuple\n    test_tup.append(test_list)\n\n    # Convert the list back to tuples\n    test_tup = tuple(test_tup)\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_tup = tuple(test_list)\n    # Append the lists to the tuples\n    test_tup += (test_list,)\n    # Return the new tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a list of all the elements in the input lists\n    merged_list = num1 + num2 + num3\n    \n    # sort the list using heapq (priority queue)\n    heapq.heapify(merged_list)\n    \n    # remove duplicates and return the sorted list\n    return list(set(merged_list))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Add any remaining elements\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[k:])\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into one\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge two sorted lists\n    merged = sorted(num1 + num2)\n    # Merge the merged list with the third list\n    return sorted(merged + num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n\n    # Sort the three lists\n    sorted_list = []\n    if num1:\n        sorted_list.extend(heapq.merge(sorted_list, num1))\n    if num2:\n        sorted_list.extend(heapq.merge(sorted_list, num2))\n    if num3:\n        sorted_list.extend(heapq.merge(sorted_list, num3))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge two lists into a single list\n    merged_list = sorted(num1 + num2)\n    # merge the two lists with the third list\n    merged_list = heapq.merge(merged_list, num3)\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Initialize an empty list to store the merged list\n    merged_list = []\n    # Use heapq to merge the three lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        # Compare the smallest elements of each list and append the larger one to the merged list\n        if heapq.heappop(num1) > heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n    # Append any remaining elements to the merged list\n    merged_list += num1 + num2 + num3\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): first sorted list\n    num2 (list): second sorted list\n    num3 (list): third sorted list\n\n    Returns:\n    list: merged sorted list\n    \"\"\"\n    # Combine the three lists into one big list\n    merged_list = num1 + num2 + num3\n\n    # Use heapq to sort the merged list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the two smallest lists into a single list.\n    merged_list = []\n    i, j = 0, 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    # Add the remaining elements of the first list.\n    merged_list += num1[i:]\n    # Add the remaining elements of the second list.\n    merged_list += num2[j:]\n    # Add the remaining elements of the third list.\n    merged_list += num3\n    # Sort the merged list in ascending order.\n    return sorted(merged_list)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # convert binary string to list of digits\n    s_list = [int(d) for d in s]\n\n    # rotate the list of digits\n    for i in range(n):\n        s_list.append(s_list.pop(0))\n\n    # count the number of odd numbers\n    count = sum(1 for d in s_list if d % 2!= 0)\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize the count of odd numbers to zero\n    count = 0\n    \n    # Loop through the binary string s\n    for i in range(len(s)): \n        # Check if the i-th bit of s is odd\n        if s[i] == '1': \n            # If it is, increment the count of odd numbers\n            count += 1\n        \n        # Rotate the string n times to the left\n        s = s[n:] + s[:n]\n        \n    # Return the count of odd numbers after rotating the string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # initialize the result\n    count = 0\n    # loop through the binary string s n times\n    for _ in range(n):\n        # convert s to a binary string\n        binary_s = bin(int(s, 2))[2:]\n        # check if the last digit is odd\n        if binary_s[-1] == '1':\n            # increment the count\n            count += 1\n        # rotate the binary string by 1 position\n        s = binary_s[-1] + binary_s[:-1]\n    # return the result\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Split the input binary string into a list of characters\n    s = list(s)\n    # Initialize a count variable to store the number of odd values in the list\n    count = 0\n    # Loop n times\n    for i in range(n):\n        # Reverse the order of the characters in the list\n        s.reverse()\n        # Loop through the list and count the number of odd values\n        for j in range(len(s)):\n            if int(s[j])%2!= 0:\n                count += 1\n    # Return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert binary string to integer\n    num = int(s, 2)\n\n    # Calculate the number of rotations\n    rotations = n % len(s)\n\n    # If the length of the string is greater than 1, rotate the binary string to the right by rotations\n    if len(s) > 1:\n        num = (num >> rotations) + (num << (len(s) - rotations))\n\n    # Count the number of odd numbers in the rotated binary string\n    count = 0\n    for i in range(len(s)):\n        if num & (1 << i):\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary = bin(int(s, 2))[2:] # convert the binary string to a list of binary digits\n    binary.reverse() # reverse the list of binary digits\n    odd_count = 0 # initialize the count of odd numbers\n    \n    for i in range(n):\n        binary.append(binary.pop(0)) # rotate the binary list n times by appending the last element to the first position and removing the first element from the end of the list\n    \n    for i in range(len(binary)):\n        if binary[i] == '1':\n            odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize the counter to 0\n    counter = 0\n    \n    # Initialize the current position in the string\n    pos = 0\n    \n    # Iterate n times\n    for _ in range(n):\n        # Rotate the string\n        s = s[1:] + s[0]\n        \n        # Iterate over the characters in the string\n        for char in s:\n            # If the character is odd, increment the counter\n            if int(char) % 2!= 0:\n                counter += 1\n    \n    # Return the final result\n    return counter"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    s = s[::-1] # reverse the binary string\n    for i in range(len(s)): \n        if int(s[i]) % 2!= 0: \n            count += 1\n            if count == n: \n                return count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    def reverse_binary(s):\n        return int(s[::-1], 2)\n\n    def reverse_reverse_binary(s):\n        return int(reverse_binary(reverse_binary(s))[::-1], 2)\n\n    def rotate_binary(s, n):\n        return s + s * (n // len(s))\n\n    def odd_rotate_binary(s, n):\n        return rotate_binary(s, n) - rotate_binary(s, n + 1)\n\n    s = bin(reverse_reverse_binary(int(s, 2)))[2:]\n    n = n % len(s)\n    return len(odd_rotate_binary(s, n))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_list.append(set(nestedlist[i]).intersection(set(nestedlist[j])))\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common_set = set()\n\n    # loop through each list in the nested list\n    for list in nestedlist:\n        # loop through each element in the current list\n        for element in list:\n            # add the element to the common set if it's not already in it\n            if element not in common_set:\n                common_set.add(element)\n\n    # return the common set as a list\n    return list(common_set)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for sublist in nestedlist:\n        common_set.update(sublist)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize empty set to store common elements\n    common = set()\n    # loop over all sublists in nestedlist\n    for sublist in nestedlist:\n        # loop over all elements in sublist\n        for elem in sublist:\n            # add element to common set if it's not already there\n            if elem not in common:\n                common.add(elem)\n    # return the common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set to store the common elements\n    common = set()\n    # loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist and check if it is already in the set\n        for element in sublist:\n            if element in common:\n                # if it is, then add it to the set\n                common.add(element)\n            else:\n                # if it isn't, then check if it is in the set of sublists\n                for sublist2 in nestedlist:\n                    if element in sublist2:\n                        # if it is, then add it to the set\n                        common.add(element)\n                        break\n                # if it isn't in the set of sublists, then it is not a common element\n                if element not in sublist2:\n                    common.discard(element)\n    # convert the set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common = set()\n    # loop through each nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element is not already in the common set, add it\n            if element not in common:\n                common.add(element)\n    # return the common elements in a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0][0])):\n                if nestedlist[i][j][k] in common_elements:\n                    common_elements.remove(nestedlist[i][j][k])\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n    for sublist in nestedlist:\n        for item in sublist:\n            # If the item is not already in the dictionary, add it\n            if item not in common_dict:\n                common_dict[item] = 1\n    # Return the dictionary containing the common elements\n    return common_dict"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove any non-digit characters from the string\n    text = ''.join(filter(str.isdigit, text))\n\n    # If the string is empty, return False\n    if not text:\n        return False\n\n    # Convert the string to an integer and check if it is an integer\n    try:\n        num = int(text)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if not dict:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    # loop through the list of dictionaries\n    for dict1 in list1:\n        # check if any dictionary is not empty\n        if not dict1:\n            return False\n    # if all dictionaries are empty, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a string using the join() method\n    nums_str = ''.join(str(num) for num in nums)\n    \n    # Convert the string to an integer using the int() function\n    int_num = int(nums_str)\n    \n    # Return the integer\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize a variable to hold the sum of the integers in the tuple\n    result = 0\n    \n    # Loop through each integer in the tuple\n    for num in nums:\n        # Add the integer to the result variable\n        result += num\n        \n    # Return the final result as an integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to store the converted integer\n    converted_num = ''\n    \n    # iterate through each digit in the tuple\n    for digit in nums:\n        # convert the digit to an integer and add it to the converted_num string\n        converted_num += str(int(digit))\n    \n    # return the converted integer as an integer\n    return int(converted_num)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list to enable list slicing\n    nums = list(nums)\n    # Initialize an empty integer variable\n    result = 0\n    # Iterate over the list and add each element to the result variable\n    for num in nums:\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, elem in enumerate(row):\n            if isinstance(elem, (int, float)):\n                continue\n            elif isinstance(elem, list):\n                test_list[i][j] = float(elem)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                float_value = float(test_list[i][j])\n                test_list[i][j] = float_value\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                continue\n            except ValueError:\n                try:\n                    int(element)\n                    float_element = float(element)\n                    sublist[sublist.index(element)] = float_element\n                    continue\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the words to a list\n    words_list = list(words)\n    return words_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array and returns the element that appears only once in the array.\n    \"\"\"\n    # initialize a dictionary to store the count of each element in the array\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # loop through the count dictionary and find the element that appears only once\n    for num, count in count.items():\n        if count == 1:\n            return num\n    \n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if unique_element is None or arr[i] > unique_element:\n                unique_element = arr[i]\n        elif unique_element is not None and unique_element!= arr[i]:\n            unique_element = None\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables for the first and last elements\n    first = arr[0]\n    last = arr[-1]\n\n    # Iterate through the array to find the first and last elements\n    for i in range(len(arr)):\n        if arr[i] == first:\n            first = arr[i]\n            break\n        if arr[i] == last:\n            last = arr[i]\n            break\n\n    # If the first and last elements are equal, return the first element\n    if first == last:\n        return first\n\n    # Initialize variables for the current and previous elements\n    current = first\n    prev = -1\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] == current:\n            return -1\n        elif arr[i] < current:\n            return current\n        elif arr[i] > current and arr[i]!= prev:\n            current = arr[i]\n\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    n = len(arr)\n    if n < 2:\n        return \"Array is too small\"\n    # initialize a boolean array to keep track of which elements have appeared so far\n    has_appeared = [False] * n\n    # iterate through the array, keeping track of the current element\n    current = None\n    for i in range(n):\n        # if the current element has not appeared yet, mark it as appeared\n        if not has_appeared[arr[i]]:\n            current = arr[i]\n            has_appeared[arr[i]] = True\n        # if the current element has appeared before, return it\n        elif has_appeared[arr[i]] and current!= arr[i]:\n            return current\n    # if we make it through the loop without finding a duplicate, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once in the array.\n    \"\"\"\n    # Initialize two variables to keep track of the first and last element of the array\n    first = 0\n    last = len(arr) - 1\n    \n    # Initialize a variable to store the element that appears only once\n    result = None\n    \n    # Iterate through the array and check if the element at the current index is equal to the previous element\n    while first < last:\n        if arr[first] == arr[first + 1]:\n            # If the element is equal to the next element, it means that it appears only once in the array\n            # Update the result variable and move the last pointer to the right\n            result = arr[first]\n            last -= 1\n        else:\n            # If the element is not equal to the next element, move the first pointer to the right\n            first += 1\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize two pointers, one for left and one for right\n    left = 0\n    right = n - 1\n\n    # Initialize a set to store the elements that appear only once\n    unique_elements = set()\n\n    # Traverse the array using two pointers\n    while left <= right:\n\n        # If the current element is not already in the set,\n        # add it to the set and increment the count of unique elements\n        if arr[left] not in unique_elements:\n            unique_elements.add(arr[left])\n            left += 1\n        else:\n            # If the current element is already in the set,\n            # decrement the count of unique elements and move the right pointer\n            unique_elements.remove(arr[right])\n            right -= 1\n\n    # Return the element that appears only once, if any\n    if len(unique_elements) == 1:\n        return list(unique_elements)[0]\n    else:\n        return \"There is no element that appears only once in the array.\""
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes in a list and returns the maximum absolute product of numbers in pairs\n    of tuples within the list.\n\n    Args:\n        lst: List of tuples.\n\n    Returns:\n        The maximum absolute product of numbers in pairs of tuples within the list.\n    \"\"\"\n\n    max_prod = 0\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0] * lst[j][1]) > max_prod:\n                max_prod = abs(lst[i][0] * lst[j][1])\n\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append((i, -i))\n    list2.sort()\n    result = 0\n    max_product = 0\n    for i in range(len(list2)):\n        for j in range(i+1, len(list2)):\n            if abs(list2[i][0]) * abs(list2[j][0]) > max_product:\n                max_product = abs(list2[i][0]) * abs(list2[j][0])\n                result = (list2[i][0], list2[j][0])\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers in pairs of tuples within the list.\n    '''\n\n    # Initialize variables for maximum and minimum products\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Check if the current tuple is smaller than the minimum product so far\n        if list1[i][0] < min_product:\n            min_product = list1[i][0]\n        # Check if the current tuple is larger than the maximum product so far\n        if list1[i][1] > max_product:\n            max_product = list1[i][1]\n\n    # Calculate the maximum absolute product between pairs of numbers in the list\n    max_abs_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers in the pair\n            abs_diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n            # Update the maximum absolute product if the current absolute difference is larger\n            if abs_diff > max_abs_product:\n                max_abs_product = abs_diff\n\n    # Return the maximum absolute product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize variables\n    max_product = float('-inf')\n    max_product_tuple = None\n\n    # iterate over the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the two numbers in each tuple\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            # update the maximum product and the corresponding tuple if necessary\n            if product > max_product:\n                max_product = product\n                max_product_tuple = (list1[i], list1[j])\n\n    # return the maximum product and the corresponding tuple\n    return max_product, max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_tuple = ()\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0] * list1[j][1]) > max_product:\n                max_product = abs(list1[i][0] * list1[j][1])\n                max_product_tuple = (list1[i], list1[j])\n\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') # initialize max product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable_pair(num):\n    '''\n    Check if a number is an amicable pair.\n    '''\n    square = int(num**0.5)\n    if square**2 == num:\n        first = square\n        second = num // square\n    elif square**2 + num == square:\n        first = square\n        second = num - square\n    else:\n        return False\n    \n    return (first, second)\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for num in range(1, limit+1):\n        if num == 1:\n            continue\n        pair = is_amicable_pair(num)\n        if pair:\n            amicable_sum += pair[0] + pair[1]\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable to another number.\n    \"\"\"\n    divisors = [i for i in range(1, num // 2 + 1) if num % i == 0]\n    if len(divisors) == 2 and all(d!= num for d in divisors):\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == sum_of_proper_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Calculate the sum of proper divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable_number(num):\n    '''\n    Check if a given number is an amicable number.\n    '''\n    if num < 12:\n        return False\n\n    sum_of_divisors = 0\n    for i in range(1, num // 2 + 1):\n        if num % i == 0:\n            sum_of_divisors += i + num // i\n\n    if sum_of_divisors == num:\n        return True\n    else:\n        return False\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n\n    for i in range(1, limit + 1):\n        if is_amicable_number(i):\n            amicable_numbers.append(i)\n\n    return sum(amicable_numbers)\n\n\nif __name__ == \"__main__\":\n    limit = int(input(\"Enter a limit number: \"))\n    print(\"The sum of amicable numbers up to\", limit, \"is\", amicable_numbers_sum(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            amicable_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i!= 1:\n            is_amicable = True\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    is_amicable = False\n                    break\n            if is_amicable:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables for the sum and count\n    sum_amicable = 0\n    count = 0\n    \n    # Loop through numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if amicable_number(i):\n            # Add the amicable number to the sum and increment the count\n            sum_amicable += i\n            count += 1\n    \n    # Return the sum of the amicable numbers\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    sum = 0\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(sum_of_divisors(i)):\n            sum += i\n    return sum\n\ndef sum_of_divisors(n):\n    sum = 1\n    for i in range(2, n):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all the prime numbers up to the limit\n    primes = []\n    for num in range(2, limit+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    # Initialize the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Loop through the prime numbers and check if they are amicable\n    for prime in primes:\n        if prime < limit:\n            # Check if prime is an amicable number\n            for num in range(1, limit+1):\n                # Check if prime and number are equal and prime is not divisible by number\n                if num == prime and num!= prime and prime % num!= 0:\n                    # Add the amicable number to the sum\n                    amicable_sum += num\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        a, b = i, limit - i\n        if is_prime(a) and is_prime(b) and a!= b:\n            amicable_numbers.append(a + b)\n    return sum(amicable_numbers)\n\n\ndef is_prime(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = a + b*1j\n    \n    angle = cmath.phase(complex_num)\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        return None\n    else:\n        return cmath.phase(a/b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = round(angle.real, 3)\n    if angle < 0:\n        angle += 360\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    num = a*cmath.exp(b)\n    angle = cmath.phase(num)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex conjugate\n    z = a + b*1j\n    # Calculate the absolute value of z\n    magnitude = abs(z)\n    # Calculate the argument of z\n    angle = cmath.phase(z)\n    # Calculate the angle\n    angle = angle * 180.0 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = abs(count_zero - count_one)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # create a dictionary to store the count of 0s and 1s in each sub-string\n    sub_strings = {}\n    \n    # iterate through each sub-string of the binary string\n    for i in range(len(string)):\n        # find the count of 0s and 1s in the current sub-string\n        count_0 = 0\n        count_1 = 0\n        for j in range(len(string)):\n            if string[i][j] == '0':\n                count_0 += 1\n            elif string[i][j] == '1':\n                count_1 += 1\n        \n        # store the count of 0s and 1s in the dictionary for the current sub-string\n        sub_strings[(i, count_0, count_1)] = sub_strings.get((i, count_0, count_1), 0) + 1\n    \n    # initialize the maximum difference to be the count of 0s\n    max_diff = sub_strings[(0, 0, 0)]\n    \n    # iterate through the sub-strings and compare their counts of 0s and 1s\n    for i in range(len(string)):\n        for count_0 in range(sub_strings[(i, count_0, count_1)].count(0), -1, -1):\n            for count_1 in range(sub_strings[(i, count_0, count_1)].count(1), -1, -1):\n                # calculate the difference between the count of 0s and 1s in the current sub-string\n                diff = count_0 + count_1 - sub_strings[(i, count_0, count_1)]\n                \n                # update the maximum difference if the current difference is greater than the maximum\n                if diff > max_diff:\n                    max_diff = diff\n    \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # initialize variables to store the count of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n\n    # loop through each character in the string\n    for char in string:\n        # if the character is a 0, increment the zero_count\n        if char == '0':\n            zero_count += 1\n        # if the character is a 1, increment the one_count\n        elif char == '1':\n            one_count += 1\n        # if the character is neither 0 nor 1, increment the zero_count and reset the one_count\n        else:\n            zero_count += 1\n            one_count = 0\n\n    # initialize variables to store the maximum difference between the number of 0s and number of 1s\n    max_diff = 0\n\n    # loop through each substring of the string\n    for i in range(len(string)):\n        # loop through each character in the substring\n        for j in range(len(string)):\n            # if the index i and the index j are both within the range of the string, increment the maximum difference between the number of 0s and number of 1s by 1\n            if i <= j:\n                diff = abs(zero_count - one_count)\n                max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n\n        if count > max_count:\n            max_count = count\n            max_diff = 1\n        elif count == max_count:\n            max_diff += 1\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n    length = len(string)\n\n    for i in range(length):\n        zeros = string.count('0', i, length)\n        ones = string.count('1', i, length)\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # Initialize count of 0s and 1s\n    zeros = 0\n    ones = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            ones += 1\n            \n    # Calculate the maximum difference between the counts\n    max_diff = max(zeros - ones, ones - zeros)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    max_diff = 0\n    length = len(string)\n    for i in range(length - 1):\n        for j in range(i + 1, length + 1):\n            if string[i] == '0' and string[j] == '1':\n                diff = j - i\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    # Convert the string to a list of characters\n    string = list(string)\n    \n    # Initialize variables for the number of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate through the list of characters in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n    \n    # Initialize the maximum difference between 0s and 1s to 0\n    max_diff = 0\n    \n    # Iterate through all possible substrings of the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # Calculate the difference between the counts of 0s and 1s in the substring\n            diff = count_0 - count_1 + len(string) - j\n            \n            # Update the maximum difference if the current substring is longer\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference between 0s and 1s in the string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n            if count_0 > count_1:\n                break\n            elif count_0 < count_1:\n                count_0 = 0\n                count_1 = 0\n        diff = count_1 - count_0\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find common divisors of two numbers\n    def common_divisors(x, y):\n        divisors = set()\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.add(i)\n        return divisors\n\n    # Finding common divisors of a and b\n    a_divisors = common_divisors(a, b)\n    b_divisors = common_divisors(b, a)\n\n    # Finding the intersection of the two sets of divisors\n    common_divisors = a_divisors.intersection(b_divisors)\n\n    # Finding the sum of the common divisors\n    result = sum(common_divisors)\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the largest common divisor of a and b\n    gcd = gcd(a, b)\n\n    # calculate the sum of common divisors by dividing each number by its gcd\n    div_sum = a // gcd + b // gcd\n\n    return div_sum\n\n\ndef gcd(a, b):\n    \"\"\"\n    Write a python function to find the greatest common divisor of two given numbers.\n    \"\"\"\n    # base case: if a or b is 0, return a or b\n    if a == 0 or b == 0:\n        return a if a!= 0 else b\n\n    # recursive case: subtract the least significant bit of b from a and repeat the process\n    return gcd(b, a % b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # function to find common divisors of two numbers\n    def find_common_divisors(a, b):\n        \"\"\"\n        Write a function to find common divisors of two given numbers.\n        \"\"\"\n        divisors = set()\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.add(i)\n        return divisors\n\n    # find common divisors of two numbers\n    divisors_a = find_common_divisors(a, b)\n    divisors_b = find_common_divisors(b, a)\n\n    # find the sum of common divisors of two numbers\n    sum_divisors = sum(divisors_a) + sum(divisors_b)\n\n    # return the sum of common divisors of two numbers\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Function to check if a number is a common divisor of b\n    def is_common_divisor(a, b):\n        if b == 0:\n            return True\n        elif a % b == 0:\n            return True\n        else:\n            return is_common_divisor(b, a % b)\n\n    # Finding all the common divisors of a and b\n    common_divisors = []\n    divisor = 1\n    while divisor <= b:\n        if is_common_divisor(divisor, a):\n            common_divisors.append(divisor)\n        divisor += 1\n\n    # Calculating the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    def gcd(x, y):\n        '''\n        Write a python function to find the greatest common divisor of two numbers.\n        '''\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        '''\n        Write a python function to find the least common multiple of two numbers.\n        '''\n        return (x * y) // gcd(x, y)\n\n    def common_divisors(x, y):\n        '''\n        Write a python function to find the common divisors of two numbers.\n        '''\n        divisors = set()\n        a = x\n        while a % y == 0:\n            divisors.add(y)\n            a //= y\n        b = y\n        while b % x == 0:\n            divisors.add(x)\n            b //= x\n        return divisors\n\n    x_divisors = common_divisors(a, b)\n    y_divisors = common_divisors(b, a)\n\n    common_divisors_sum = sum(x_divisors) + sum(y_divisors)\n\n    return common_divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of the common divisors of two numbers.\n    \"\"\"\n    common_divisors = set()\n    # find the common divisors of a and b\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    # find the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # find the largest common divisor of a and b\n    gcd = 1\n    for i in range(2, a + 1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n            break\n    \n    # find the sum of all common divisors of a and b\n    sum_divisors = 0\n    for i in range(1, gcd + 1):\n        if gcd % i == 0:\n            sum_divisors += i\n    \n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if the input values are valid\n    if not isinstance(a, int) or not isinstance(b, int):\n        print(\"Invalid input. Both values must be integers.\")\n        return None\n\n    # Initialize variables\n    divisor = 2\n    divisors_sum = 0\n\n    # Loop through the numbers and find their common divisors\n    while divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            divisors_sum += divisor\n        divisor += 1\n\n    return divisors_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize variables\n    common_divisor = 0\n    sum_of_divisors = 0\n\n    # find common divisor using Euclidean algorithm\n    while b!= 0:\n        quotient = a // b\n        sum_of_divisors += a\n        a = b\n        b = quotient\n\n    # return the sum of common divisors\n    return sum_of_divisors\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): maximum length of a word\n        words (list): list of words\n\n    Returns:\n        list: list of words that are longer than n characters\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(set(row))!= 1:\n            return False\n    \n    # Check if all columns have the same length\n    for column in zip(*my_matrix):\n        if len(set(column))!= 1:\n            return False\n    \n    # Check if the main diagonal has the same elements\n    diagonal = [row[i] for i, row in enumerate(my_matrix)]\n    if len(set(diagonal))!= 1:\n        return False\n    \n    # Check if the secondary diagonal has the same elements\n    diagonal = [row[i] for i, row in enumerate(my_matrix)][::-1]\n    if len(set(diagonal))!= 1:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Determine the size of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            # Check if the sum of the row and column is equal to the sum of the diagonals\n            if sum(my_matrix[i]) == sum(my_matrix[j]) + sum(my_matrix[k] for k in range(rows) if k!= i and k!= j):\n                return False\n            # Check if the sum of the sub-matrix is equal to the sum of the diagonal elements of the original matrix\n            if i == j:\n                if sum(my_matrix[i])!= sum(my_matrix[k][j] for k in range(rows)):\n                    return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Check the rows for duplicates\n    for i in range(n):\n        duplicates = set()\n        for j in range(n):\n            if my_matrix[i][j] in duplicates:\n                return False\n            duplicates.add(my_matrix[i][j])\n    # Check the columns for duplicates\n    for j in range(n):\n        duplicates = set()\n        for i in range(n):\n            if my_matrix[i][j] in duplicates:\n                return False\n            duplicates.add(my_matrix[i][j])\n    # Check the diagonal for duplicates\n    duplicates = set()\n    for i in range(n):\n        if my_matrix[i][i] in duplicates:\n            return False\n        duplicates.add(my_matrix[i][i])\n    # Check the anti-diagonal for duplicates\n    for i in range(n):\n        if my_matrix[i][n-1-i] in duplicates:\n            return False\n        duplicates.add(my_matrix[i][n-1-i])\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # Calculate the sum of the elements in the matrix\n    sum_matrix = sum(sum(row) for row in my_matrix)\n\n    # Create the magic square\n    magic_square = [[int(x) for x in input(\"Enter elements of the magic square separated by spaces: \").split()] for _ in range(3)]\n\n    # Calculate the sum of the elements in the magic square\n    sum_magic_square = sum(sum(row) for row in magic_square)\n\n    # Check if the sum of the elements in the matrix and the magic square is equal\n    if sum_matrix == sum_magic_square:\n        print(\"The matrix is a magic square.\")\n    else:\n        print(\"The matrix is not a magic square.\")\n\n    return sum_matrix, sum_magic_square"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    row_lengths = [len(row) for row in my_matrix]\n    if not all(len(row) == row_lengths[0] for row in my_matrix):\n        return False\n    # Check if all columns have the same length\n    col_lengths = [len(row) for row in zip(*my_matrix)]\n    if not all(len(row) == col_lengths[0] for row in zip(*my_matrix)):\n        return False\n    # Check if the main diagonal is the same as the secondary diagonal\n    diag1 = [row[i] for i, row in enumerate(my_matrix)]\n    diag2 = diag1[::-1]\n    if diag1!= diag2:\n        return False\n    # Check if all elements of the matrix form a single row and column\n    row_sum = sum(row)\n    col_sum = sum(zip(*my_matrix))\n    if row_sum!= col_sum!= sum(my_matrix):\n        return False\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"Matrix is not a square matrix.\"\n    \n    # Check if all rows have the same number of elements\n    row_length = len(my_matrix[0])\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= row_length:\n            return \"Matrix is not a square matrix.\"\n    \n    # Check if the matrix is a magic square\n    n = len(my_matrix)\n    for i in range(n):\n        for j in range(n):\n            # Check if the element is present in the sum of its row and column indices\n            if my_matrix[i][j] == i+j:\n                continue\n            # Check if the element is present in the sum of its row and column indices after removing it from the matrix\n            for k in range(n):\n                if k!= i and k!= j and my_matrix[i][j] == i+j+k:\n                    continue\n            return \"Matrix is not a magic square.\"\n    \n    return \"Matrix is a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(len(my_matrix))])\n        if row_sum!= col_sum or abs(row_sum - col_sum)!= len(my_matrix) * len(my_matrix) - sum(my_matrix[i][j] for j in range(len(my_matrix))):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 4 rows and 4 columns\n    if len(my_matrix)!= 4 or any(len(row)!= 4 for row in my_matrix):\n        return False\n\n    # Check if the matrix contains only integers\n    if any(not isinstance(elem, int) for row in my_matrix for elem in row):\n        return False\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the diagonal sum is equal to 15\n    if diagonal_sum!= 15:\n        return False\n\n    # Check if the sum of any row minus the sum of any column is equal to 0\n    for row in my_matrix:\n        row_sum = sum(row)\n        col_sum = sum(row[i] for i in range(len(row)))\n        if row_sum - col_sum!= 0:\n            return False\n\n    # Check if the sum of any row minus the sum of its transpose is equal to 0\n    for i in range(4):\n        row_sum = sum(row[i] for row in my_matrix)\n        col_sum = sum(my_matrix[j][i] for j in range(4))\n        if row_sum - col_sum!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum of the first row is equal to the sum of the last column\n    row_sum = sum(my_matrix[0])\n    if row_sum == diagonal_sum:\n        return True\n    \n    # Check if the sum of the last column is equal to the sum of the first row\n    col_sum = sum(row[-1] for row in my_matrix)\n    if col_sum == diagonal_sum:\n        return True\n    \n    # Check if any two sub-matrices have the same sum of the diagonal elements\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            sub_matrix = [row[k] for row in my_matrix[i:i+3] for k in range(len(row))]\n            sub_diagonal_sum = sum(sum(row) for row in sub_matrix)\n            if sub_diagonal_sum == diagonal_sum:\n                return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a 3x3\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if all the rows, columns, and 2x2 submatrices are the same\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j]!= my_matrix[i][j] or my_matrix[j][i]!= my_matrix[j][i]:\n                return False\n        for k in range(3):\n            if my_matrix[i][k]!= my_matrix[i][k] or my_matrix[k][i]!= my_matrix[k][i]:\n                return False\n        if my_matrix[i][i]!= my_matrix[i][i] or my_matrix[i][2]!= my_matrix[i][2] or my_matrix[2][i]!= my_matrix[2][i]:\n            return False\n        if my_matrix[2][i]!= my_matrix[2][i] or my_matrix[i][0]!= my_matrix[i][0] or my_matrix[0][i]!= my_matrix[0][i]:\n            return False\n    \n    # Check if all the values are unique\n    for i in range(3):\n        for j in range(3):\n            if len(my_matrix[i][j])!= 1:\n                return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize a dictionary to store the count of each number in the list\n    freq = defaultdict(int)\n\n    # Iterate through the list and update the count of each number in the dictionary\n    for num in nums:\n        freq[num] += 1\n\n    # Initialize variables to hold the maximum frequency and the item with that frequency\n    max_freq = 0\n    max_item = None\n\n    # Iterate through the dictionary and update the maximum frequency and item if necessary\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = num\n\n    # Return the maximum frequency and item\n    return max_freq, max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_count = max(freq.values())\n    max_item = None\n\n    for num, count in freq.items():\n        if count == max_count:\n            max_item = num\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = 0\n    max_num = None\n    for num in freq:\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = max(freq.values())\n    max_item = None\n    for item, count in freq.items():\n        if count == max_count:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    \n    max_count = max(count.values())\n    max_item = None\n    \n    for num in nums:\n        if count[num] == max_count:\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    reversed_str = \"\"\n\n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = char + reversed_str\n\n    return reversed_str[:vowel_count] + reversed_str[vowel_count:]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str += char\n    return new_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    rev_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            rev_str += str1[i]\n    return rev_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_set = set(vowels)\n    reversed_str = ''\n    for char in str1:\n        if char in vowels_set:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_vowels.append(char)\n    reversed_vowels.reverse()\n    return ''.join(reversed_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowel_list = []\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_list.append(char)\n    vowel_str = ''.join(vowel_list[::-1])\n    return vowel_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    \n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n            \n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    str2 = \"\"\n    for i in str1:\n        if i not in vowels:\n            str2 += i\n    return str2[::-1]"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(item) for item in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for item in tup1:\n        string += str(item)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str1 = \"\"\n    for item in tup1:\n        str1 += str(item) + \" \"\n    return str1[:-1] # remove the last space"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert tuple to a list\n    tup2 = list(tup1)\n    # convert the list to a string using join() method\n    return ', '.join(str(i) for i in tup2)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    result = str(tup1)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    for i in range(1, n+1):\n        b = a + (i * (2 * i - 1))\n        print(b)\n        a = b\n    return b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n-1)**2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return 2 * (n * (n - 1) + 1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first 6 hexagonal numbers\n    hex_nums = [1, 6, 11, 16, 21, 26]\n    # Use the formula for nth hexagonal number\n    return hex_nums[n - 1] * 3"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0: \n        return \"Please enter a positive integer.\"\n    \n    # formula to calculate nth hexagonal number\n    hex_num = (n*(3*n-1))/2\n    \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Formula for nth hexagonal number\n    # H(n) = 2^(n-1) - 1\n    return 2**(n-1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (3*n**2 - 1)/2\n    else:\n        return (-3*n**2 + 1)/2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * (max(nums)+1))\n    for num in nums:\n        count[num] += 1\n    for i in range(1, len(count)):\n        count[i] += count[i-1]\n    zero_count = count[1:]\n    non_zero_count = count[0]\n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Initialize a new array to store the count of zeroes\n    zero_counts = array('i', [0] * len(nums))\n    \n    # Iterate through the array and count the number of zeroes\n    for num in nums:\n        if num == 0:\n            zero_counts[zero_counts.index(num)] += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count_sum = sum(zero_counts)\n    non_zero_count_sum = len(nums)\n    ratio = zero_count_sum / non_zero_count_sum\n    \n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(num)] += 1\n    non_zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num!= 0:\n            non_zero_count[non_zero_count.index(num)] += 1\n    zero_ratio = 0\n    for i in range(len(zero_count)):\n        zero_ratio += float(zero_count[i]) / non_zero_count[i]\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] += 1\n    zeros = 0\n    nonzeros = 0\n    for i in range(len(count)):\n        zeros += count[i]\n        nonzeros += len(nums) - count[i]\n    return zeros / nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an empty array to store the non-zero numbers\n    non_zeros = array('i')\n    # Loop through the input array and add non-zero numbers to the non_zeros array\n    for num in nums:\n        if num!= 0:\n            non_zeros.append(num)\n    # Calculate the total number of non-zero numbers\n    total_non_zeros = len(non_zeros)\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = 1 - len(nums) / total_non_zeros\n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    return (zeros/non_zeros) * 100"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an array of zeros to count the number of zeroes in the array\n    zero_count_array = array('i', [0] * len(nums))\n\n    # Loop through each element in the array\n    for num in nums:\n        # If the element is zero, increment the corresponding index in the zero_count_array\n        if num == 0:\n            zero_count_array[nums.index(num)] += 1\n\n    # Find the ratio of zeroes to non-zeroes in the array\n    non_zero_count = sum(1 for num in nums if num!= 0)\n    zero_count_ratio = sum(zero_count_array) / non_zero_count\n\n    return zero_count_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize counters\n    zeros = 0\n    non_zeros = 0\n    \n    # Iterate through the array\n    for num in nums:\n        # Check if the number is zero\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    if non_zeros > 0:\n        ratio = zeros / non_zeros\n        \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    zero_count_sum = sum(zero_count)\n    non_zero_count_sum = len(nums) - sum(zero_count)\n    ratio = non_zero_count_sum / zero_count_sum\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    # check if n is equal to the sum of powers of 2\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if the number is odd or not\n    if n % 2!= 0: \n        return False\n\n    # Calculate the sum of powers of 2\n    powers_of_two = 0\n    while n > 0:\n        if n & 1 == 1:\n            powers_of_two += 1\n        n >>= 1\n\n    # Check if the sum of powers of 2 is equal to the given number\n    if powers_of_two == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the number is less than 0\n    if n < 0:\n        return False\n    # Check if the number is less than or equal to 1\n    elif n <= 1:\n        return True\n    # Check if the number is divisible by 2\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    # Check if the number is not divisible by 2\n    else:\n        # Initialize the result to True\n        result = True\n        # Iterate from 1 to n-1\n        for i in range(1, n):\n            # Check if n can be expressed as sum of non-zero powers of 2\n            if n % (2**i) == 0:\n                result = False\n                break\n        return result"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    def is_sum_of_powers_of_two(n):\n        \"\"\"\n        Helper function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n        \"\"\"\n        if n == 0:\n            return True\n        elif n % 2 == 0:\n            return is_sum_of_powers_of_two(n//2)\n        else:\n            return is_sum_of_powers_of_two((n*3)//2)\n\n    return is_sum_of_powers_of_two(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables\n    power = 0\n    sum_of_powers = 0\n    # Check if n can be represented as sum of powers of 2\n    while n > 0:\n        # Check if the last bit of n is 1\n        if n & 1 == 1:\n            # Check if the power of 2 can be added to the sum of powers\n            if power < 2**power:\n                sum_of_powers += 2**power\n            else:\n                return False\n        # Shift n to the left by 1 bit\n        n = n >> 1\n        # Increment the power by 1\n        power += 1\n    # Check if the sum of powers is equal to n\n    return sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n    \n    # Check for the sum of powers of 2\n    while n > 0:\n        if n % 2 == 0:\n            n >>= 1\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 0:\n            n = n / 2\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # check if n is a positive integer\n    if n <= 0: \n        return False\n\n    # initialize the sum of powers of 2\n    sum_of_powers_of_two = 0\n\n    # check if n is divisible by 2^i for i from 1 to log2(n)\n    for i in range(1, int(math.log2(n))+1):\n        if n & (1 << i):\n            # if it is, add (2^i)^(i) to the sum of powers of 2\n            sum_of_powers_of_two += (1 << i) ** i\n\n    # check if the sum of powers of 2 is equal to n\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is greater than 0\n    if n <= 0:\n        return False\n\n    # Iterate through all the numbers from 1 to n/2 (inclusive)\n    for i in range(1, n//2 + 1):\n        # Check if the number can be represented as sum of non-zero powers of 2 using i as the base\n        if i*i == n:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is a power of 2\n    if n & (n-1) == 0: \n        # n is a power of 2\n        return True\n\n    # Check if sum of powers of 2 of n is greater than n\n    if sum_of_powers_of_two(n) > n: \n        # sum of powers of 2 of n is greater than n\n        return True\n\n    # Check if sum of powers of 2 of n is less than or equal to n\n    if sum_of_powers_of_two(n) <= n: \n        # sum of powers of 2 of n is less than or equal to n\n        return False\n\n    # If none of the above conditions are satisfied, then n is not a sum of powers of 2\n    return False\n\ndef sum_of_powers_of_two(n): \n    '''\n    Write a python function to calculate the sum of powers of 2 of a number.\n    '''\n    # Initialize sum of powers of 2 to 0\n    sum = 0\n\n    # Loop through all the bits in the binary representation of n\n    for i in range(32): \n        # Check if the i-th bit is set in the binary representation of n\n        if n & (1 << i)!= 0: \n            # If it is, add 2^i to the sum of powers of 2\n            sum += 2**i\n\n    # Return the sum of powers of 2\n    return sum"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # formula to find the circumference of a circle\n    circumference = 2 * 3.14159 * r\n    \n    # return the value of the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Convert the list of lists to a list of numbers\n    flattened_list = [num for sublist in test_list for num in sublist]\n    # Convert the list of numbers to a set of numbers\n    unique_list = set(flattened_list)\n    return unique_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    flat_list = [num for sublist in test_list for num in sublist]\n    unique_nums = set(flat_list)\n    return sorted(unique_nums)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    singly_list = sorted(list(set(flattened_list)))\n    return singly_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(extract_singly(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = [item for sublist in test_list for item in sublist]\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    \n    # Start with the last element and move backwards\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum element in the remaining part of the array\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the elements and move back\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # initialize the stack with a range from 0 to n-1\n    stack = range(n-1, -1, -1)\n    # initialize the variable for the index of the current position\n    i = 0\n    # while there are elements in the stack\n    while stack:\n        # pop an element from the stack and set it to the current position\n        j = stack.pop()\n        nums[i], nums[j] = nums[j], nums[i]\n        # if the current position is not the last element, push the next element (n-1-i) to the stack\n        if i < j:\n            stack.append(n-1-i)\n        # increment the current position\n        i += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    This function takes a list of numbers as input and sorts it in ascending order using the \"pancake sort\" algorithm.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    # while swapping is true, keep shifting the gap\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)  # shrink the gap by 33%\n\n        # for each index, find the largest element and swap it with the last element in the gap\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def helper(nums, k):\n        '''\n        Helper function for pancake_sort function.\n        '''\n        # Step 1: Invert the first k elements of the list\n        for i in range(k):\n            nums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n        \n        # Step 2: Decrement the value of k\n        k -= 1\n        \n        # Step 3: Repeat steps 1-3 until k becomes 0\n        while k > 0:\n            # Step 3a: Invert the first k elements of the list\n            for i in range(k):\n                nums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n            \n            # Step 3b: Decrement the value of k\n            k -= 1\n        \n        # Step 4: Reverse the first k elements of the list\n        for i in range(k):\n            nums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n    \n    # Step 5: Perform the pancake sort algorithm\n    n = len(nums)\n    for k in range(n, 1, -1):\n        helper(nums, k)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part\n        swap(nums, i, max_index)\n        # Reverse the array from i to the maximum element, inclusive\n        for j in range(i, max_index+1):\n            swap(nums, j, n-1)\n        n -= 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(i):\n            if nums[j]>nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Start from the second element of the list and sort the remaining elements in pancake sort manner\n    for start in range(n-1):\n        # Find the maximum element in the remaining unsorted portion of the list\n        max_index = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_index]:\n                max_index = end\n        # Swap the maximum element with the first element of the unsorted portion of the list\n        nums[start], nums[max_index] = nums[max_index], nums[start]\n        # Reverse the pancake sort manner by swapping adjacent elements\n        for i in range(start, n-1):\n            nums[i], nums[n-i-1] = nums[n-i-1], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of length n-1 containing all numbers from 1 to n-1\n    inversions = list(range(n-1, -1, -1))\n    # sort the inversions list using a recursive merge sort function\n    merge_sort(nums, 0, n-1, inversions)\n    # reverse the sorted list to obtain the sorted pancake sequence\n    sorted_sequence = list(reversed(nums[0:n-1]))\n    # combine the sorted pancake sequence with the input list\n    return sorted_sequence + nums\n\ndef merge_sort(nums, low, high, inversions):\n    # base case: if low and high are the same, there's nothing to sort\n    if low >= high:\n        return\n    \n    # divide the input list into two halves and sort each half recursively\n    mid = (low + high) // 2\n    merge_sort(nums, low, mid, inversions)\n    merge_sort(nums, mid+1, high, inversions)\n    \n    # merge the sorted halves of the input list into a single sorted list\n    i = low\n    j = mid + 1\n    k = low\n    while i <= mid and j <= high:\n        if inversions[i] <= inversions[j]:\n            nums[k] = nums[i]\n            i += 1\n        else:\n            nums[k] = nums[j]\n            j += 1\n        k += 1\n    \n    # copy any remaining elements from the left half to the output list\n    while i <= mid:\n        nums[k] = nums[i]\n        i += 1\n        k += 1\n    \n    # copy any remaining elements from the right half to the output list\n    while j <= high:\n        nums[k] = nums[j]\n        j += 1\n        k += 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the current column\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the last element in the column\n        swap(nums, i-1, max_idx)\n        # Reverse the entire column\n        for j in range(i):\n            swap(nums, i-j-1, i-1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def reverse(start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def rotate(start, end):\n        if start < end:\n            reverse(start, end)\n            reverse(start, end - 1)\n            reverse(start, end)\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = i\n        for j in range(i - 1):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        if max_index!= i - 1:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n            rotate(i - 1, len(nums) - 1)"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of the lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of all three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                if list2[j] == list3[i]:\n                    count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of the three lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    n = len(arr)\n    max_diff = float('-inf')\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize a variable to store the maximum difference \n    max_diff = 0\n    \n    # Loop through each element in the array \n    for i in range(len(arr)): \n        # Calculate the absolute difference between the current element and the next element in the array \n        diff = abs(arr[i] - arr[i+1])\n        \n        # Update the maximum difference if the current difference is greater than the current maximum \n        if diff > max_diff: \n            max_diff = diff\n    \n    # Return the maximum difference \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = arr[0]\n    for i in range(1, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least two elements.\"\n    else:\n        max_diff = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the denominator is zero, which means there is no solution\n    if b == 0:\n        return None\n\n    # Calculate the common factor of a and b\n    factor = gcd(a, b)\n\n    # Calculate the inverse of b modulo the common factor of a and b\n    inv_b = power(b, -1, factor)\n\n    # Calculate the coefficients of x and y\n    x_coeff = n // (a * inv_b)\n    y_coeff = n // b\n\n    # Calculate x and y using the equation ax + by = n\n    x = x_coeff * inv_b\n    y = y_coeff * inv_b\n\n    # Check if x and y are in the range [0, 1]\n    if 0 <= x <= 1 and 0 <= y <= 1:\n        return (int(round(x)), int(round(y)))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 or b == 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative, indicating no real roots\n    if discriminant < 0:\n        return None\n    \n    # Calculate the roots using quadratic formula\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Check if the roots are integers\n    if int(root1) == root1 and int(root2) == root2:\n        return (int(root1), int(root2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    # check if coefficients are valid\n    if a == 0 or b == 0:\n        return None\n    \n    # calculate the roots using the quadratic formula\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x = -b/2/a\n        y = -b/2/a\n        return (x, y)\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        y = -b/2/a\n        return (x1, y), (x2, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the equation is in the form ax + by = n\n    if a == 0 or b == 0:\n        return None\n\n    # Calculate the determinant of the matrix A\n    detA = a*a + b*b\n\n    # Calculate the determinant of the matrix B\n    detB = -1*a*b\n\n    # Calculate the determinant of the equation system\n    det = detA*detB\n\n    # Check if the determinant is zero\n    if det == 0:\n        return None\n\n    # Calculate the solution by dividing the determinant by the product of the a and b matrices\n    x = det / (2*a)\n    y = det / (2*b)\n\n    # Check if the solution satisfies the equation ax + by = n\n    if a*x + b*y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if the given equation has a solution\n    if a == 0:\n        if n % b == 0:\n            x = n // b\n            y = 0\n            return (x, y)\n        else:\n            return None\n    else:\n        # Solve the equation for x\n        x = (-b + (n // b)) // a\n        \n        # If the equation has a solution, check if it has a unique solution or not\n        if x * a + b * x == n:\n            y = x\n            return (x, y)\n        else:\n            y = (-b + x) // a\n            return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if the quadratic equation has a real solution\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    \n    # find two real solutions\n    x1 = (-b + discriminant**0.5)/2/a\n    x2 = (-b - discriminant**0.5)/2/a\n    \n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if the given condition is true\n    if a == 0:\n        return None\n    elif a > 0 and b > 0:\n        # Calculate the discriminant\n        discriminant = b**2 - 4*a*n\n        # Check if the discriminant is positive\n        if discriminant > 0:\n            # Calculate the two solutions\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            return (x1, x2)\n        elif discriminant == 0:\n            # There is only one solution\n            x = -b/(2*a)\n            return (x, x)\n        else:\n            # The given condition is false\n            return None\n    elif a < 0 and b > 0:\n        # Check if the given condition is true\n        if a == 0 and b == 0:\n            # The given condition is false\n            return None\n        else:\n            # Calculate the discriminant\n            discriminant = b**2 - 4*a*n\n            # Check if the discriminant is negative\n            if discriminant < 0:\n                # There are no solutions\n                return None\n            elif discriminant == 0:\n                # There is only one solution\n                x = -b/(2*a)\n                return (x, x)\n            else:\n                # Calculate the two solutions\n                x1 = (-b + discriminant**0.5)/(2*a)\n                x2 = (-b - discriminant**0.5)/(2*a)\n                return (x1, x2)\n    elif a > 0 and b < 0:\n        # Swap the variables a and b to find the solutions with a < 0 and b > 0\n        return find_solution(-a, -b, n)\n    elif a < 0 and b < 0:\n        # Calculate the discriminant\n        discriminant = b**2 - 4*a*n\n        # Check if the discriminant is negative\n        if discriminant < 0:\n            # There are no solutions\n            return None\n        elif discriminant == 0:\n            # There is only one solution\n            x = -b/(2*a)\n            return (x, x)\n        else:\n            # Calculate the two solutions\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a is zero\n    if a == 0:\n        return None\n\n    # find the solution using the extended Euclidean algorithm\n    x0 = n // a\n    y0 = n % a\n\n    # check if y0 is zero\n    if y0 == 0:\n        return None\n\n    # find the solution using the extended Euclidean algorithm\n    x1 = y0 // b\n    y1 = y0 % b\n\n    # check if y1 is zero\n    if y1 == 0:\n        return None\n\n    # check if x0 and x1 are both in the range [1, n/a]\n    if x0 < 1 or x0 > n // a or x1 < 1 or x1 > n // a:\n        return None\n\n    # return the solution as a tuple\n    return (x0, x1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # Check if there are no real roots\n    if disc < 0:\n        return None\n    \n    # Check if there is only one real root\n    elif disc == 0:\n        x = -b / (2*a)\n        return (x, x)\n    \n    # There are two real roots\n    else:\n        x1 = (-b + disc**0.5) / (2*a)\n        x2 = (-b - disc**0.5) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize x and y variables\n    x = y = 0\n    # loop through all possible values of x and y\n    for i in range(1, n):\n        # check if the equation is satisfied\n        if a*i + b*n == n:\n            # return the solution\n            return (x, y)\n        # calculate the next value of x and y\n        x = x + 1\n        y = i\n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the first list and remove all elements present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Check if the two lists are of equal length\n    if len(list1)!= len(list2):\n        print(\"The two lists are of unequal length.\")\n        return\n\n    # Iterate through the two lists and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from list1 present in list2.\n    '''\n    list1_new = []\n    for elem in list1:\n        if elem not in list2:\n            list1_new.append(elem)\n    return list1_new"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the unique elements of the first list\n    unique_list = []\n    \n    # Iterate through the first list and append each element to the new list if it is not present in the second list\n    for element in list1:\n        if element not in list2:\n            unique_list.append(element)\n            \n    # Return the new list containing only the unique elements of the first list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate through the list1 and remove the elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i = i-1\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    i = 0\n    while i <= n // 2:\n        series_sum += n - 2 * i\n        i += 1\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_lst = []\n    for i in range(n//2):\n        sum_lst.append(n - 2*i)\n    return sum(sum_lst)\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += (n - 2 * i)\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 2:\n        return 0\n    else:\n        return (n * (n - 1)) // 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the Heron's formula\n    a = (s**2 + l**2)**0.5\n    return pi * a**2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * tan(pi/l)) / (2*pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    pi = math.pi\n    \n    # calculate the area of the polygon using Heron's formula\n    area = (s * (s - l) * (s - 2*l) * (s - 3*l)) / (4 * pi * l**2)\n    \n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l))/(4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) / (2 * (i+1))\n    return area * (s/2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (tan(i * 2 * pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += s * (1 - tan(angle)**2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi, factorial\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = len(s)\n    return (s[0] * (s[0] - 1) *... * (s[0] - n + 1)) / (factorial(n) * pi)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    if n < 1:\n        return False\n    \n    divisors = []\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            divisors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    \n    divisors.append(n)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # initialize variables\n    divisor_sum = 0\n    \n    # loop through all possible divisors from 1 to n\n    for i in range(1, n+1):\n        \n        # check if i is a divisor of n\n        if n % i == 0:\n            \n            # add i to the sum of divisors\n            divisor_sum += i\n    \n    # check if the sum of divisors is the same as n\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n \n    sum_div = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]) \n    # calculate the sum of the divisors of n+1\n    sum_div_plus_1 = sum([i for i in range(1, int(math.sqrt(n+1)) + 1) if n+1 % i == 0])\n    # compare the two sums \n    if sum_div == sum_div_plus_1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisor_sum = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisor_sum += i\n    if n > 1:\n        divisor_sum += n\n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_of_divisors += i + n//i\n    \n    if sum_of_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = [i for i in range(1, n+1) if n % i == 0]\n    div2 = [i for i in range(1, n+1) if n % i == 0]\n    div1.sort()\n    div2.sort()\n    if div1 == div2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    sum_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # Calculate the sum of the divisors of the sum of n and itself\n    sum_sum = sum([i for i in range(1, n+1)])\n    # Check if the sum of the divisors of n and its sum are the same\n    if sum_divisors == sum_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n\n    Args:\n    n (int): the number to check for divisibility\n\n    Returns:\n    bool: True if the sum of the divisors of two integers are the same, False otherwise.\n    \"\"\"\n    # Calculate the sum of the divisors of n using the Sieve of Eratosthenes algorithm\n    def sum_of_divisors(n):\n        if n == 1:\n            return 0\n        divs = [True] * (n + 1)\n        divs[1] = False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if divs[i]:\n                for j in range(i*i, n + 1, i):\n                    divs[j] = False\n        return sum(divs[:n+1])\n\n    # Check if the sum of the divisors of n and n + 1 are the same\n    return sum_of_divisors(n) == n + sum_of_divisors(n + 1)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of the divisors of n\n    divs = [i for i in range(1, n+1) if n % i == 0]\n    div_sum = sum(divs)\n\n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # calculate the sum of the divisors of n using math.factorial()\n    divisor_sum = sum(math.factorial(i) for i in range(1, n+1) if n%i == 0)\n\n    # compare the divisor sum to the sum of the original numbers\n    return n == divisor_sum"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    count = 0 \n    for i in range(26): \n        if str1.lower() == chr(97 + i).lower(): \n            count += 1 \n\n    return count "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the count of characters at the same position in the English alphabet\n    alphabet_count = {}\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Loop through the string and count the number of characters at the same position in the English alphabet\n    for i in range(26):\n        count = 0\n        for char in str1:\n            if char == chr(ord('a') + i):\n                count += 1\n        alphabet_count[chr(ord('a') + i)] = count\n\n    # Return the dictionary of character counts\n    return alphabet_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # create a dictionary to store the position of each character in the English alphabet\n    position_dict = {chr(i): i for i in range(ord('a'), ord('z')+1)}\n\n    # initialize a counter for the number of times each character occurs in the string\n    count_dict = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is in the position dictionary, update its count in the count dictionary\n        if char in position_dict:\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n\n    # count the number of times each character occurs in the string\n    result = 0\n    for char, count in count_dict.items():\n        if position_dict[char] == count:\n            result += count\n\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the character positions and their counts\n    char_count = {}\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Get the character at the current position\n        char = str1[i]\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # Otherwise, increment the count for the character\n        else:\n            char_count[char] += 1\n    # Return the dictionary containing the character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in str1.lower():\n        if i in str1:\n            count += str1.lower().count(i)\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # Loop through each character in the string and count its occurrences at each position in the English alphabet\n    for i, char in enumerate(str1):\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Initialize a counter to keep track of the number of occurrences of each character in the string\n    count = 0\n\n    # Loop through each character in the string again and increment the count if it appears at the same position in the English alphabet\n    for char in str1:\n        if char in char_count:\n            count += char_count[char]\n\n    # Return the total count of occurrences of each character in the string\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char = char.lower()\n        # If the character is a letter in the English alphabet, add 1 to its count in the dictionary\n        if 'a' <= char <= 'z':\n            char_count[char] = char_count.get(char, 0) + 1\n    # Return the dictionary with the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    for i in range(26):\n        for j in range(len(str1)):\n            if english_alphabet[i].lower() == str1[j].lower():\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n\n    # Iterate through each character in the string\n    for i in range(26):\n        # Get the index of the current character in the alphabet\n        index = (ord('a') + i) % 26\n\n        # Check if the character is already in the dictionary\n        if chr(index + ord('a')) in char_count:\n            # Increment the count of the character at the current index\n            char_count[chr(index + ord('a'))] += 1\n        else:\n            # Add the character to the dictionary with a count of 1\n            char_count[chr(index + ord('a'))] = 1\n\n    # Count the number of characters in the input string that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char in str1:\n        # Check if the character is in the dictionary\n        if char.lower() in char_count:\n            # Increment the count of the character at the current index\n            count += char_count[char.lower()]\n\n    # Return the count of characters in the input string that occur at the same position in the string as in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in str1.lower():\n        if char in alphabet:\n            position = alphabet.index(char)\n            if position == ord(char) - 1 or position == ord(char) + 1:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2!= 0 and A[j] % 2!= 0 and A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    # initialize count to zero\n    count = 0\n    \n    # loop through the list\n    for i in range(len(A)):\n        # loop through the remaining list\n        for j in range(i+1, len(A)):\n            # check if the xor of A[i] and A[j] is even\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    # Initialize a variable to store the count of even-xor pairs\n    count = 0\n\n    # Loop through each element in the list\n    for i in range(len(A)):\n        # Loop through each element in the list starting from the next one\n        for j in range(i+1, len(A)):\n            # If the xor of the two elements is even, increment the count\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n\n    # Return the count of even-xor pairs\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # check if n is a power of 2\n    if n == 1:\n        return 2\n\n    # find the binary logarithm of n (base 2)\n    log2 = 0\n    while n > 1:\n        n = n >> 1\n        log2 += 1\n\n    # calculate the power of 2\n    power_of_2 = 1 << log2\n\n    # check if power_of_2 is greater than or equal to n\n    if power_of_2 >= n:\n        return power_of_2\n    else:\n        return 2 * power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If the number is already a power of 2, return it\n    if n & (n-1) == 0:\n        return n\n\n    # Find the least significant bit set\n    least_significant_bit = n & -n\n\n    # Return the power of 2 greater than or equal to n\n    return least_significant_bit << (n.bit_length() - least_significant_bit.bit_length())"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # get the binary representation of n\n    bin_n = bin(n)[2:]\n\n    # initialize the minimum power of 2 greater than or equal to n\n    min_power = 1\n\n    # iterate through all binary digits in the binary representation of n\n    for bit in bin_n:\n        # if the bit is 1, multiply min_power by 2\n        if bit == '1':\n            min_power *= 2\n\n    # return the minimum power of 2 greater than or equal to n\n    return min_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n & (n-1): # loop until the binary representation of n is not all ones\n        n = n | (n-1) # set all 1's in the binary representation of n to 0\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 and the loop counter\n    power = 1\n    count = 0\n\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Loop until the power of 2 is greater than or equal to n\n    while power < n:\n        power *= 2\n        count += 1\n\n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1  # Convert n to the form 2^k, where k is the number of leading zeros in n\n    k = 0\n    while n >= 1:\n        n = n >> 1\n        k += 1\n    return 1 << k"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the largest power of 2 smaller than n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    # Return the next power of 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 1\n\n    # Loop through all possible values for the exponent\n    while result < n:\n        result *= 2\n\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # convert n to binary string and reverse it\n    bin_str = bin(n)[2:][::-1]\n\n    # count the number of 1s in the binary string\n    count = bin_str.count('1')\n\n    # calculate the minimum power of 2 greater than or equal to n\n    min_pow = 1 << (count - 1)\n\n    return min_pow"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list and a number as arguments and returns the number of occurrences of the given number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        return \"Invalid indices\"\n    else:\n        # create a sublist between the indices\n        sublist = list1[m:n+1]\n        # sum up the sublist\n        return sum(sublist)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1) and i >= 0:\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through the list from index m to n (inclusive)\n    for i in range(m, n+1):\n        # Add the value at the current index to the sum\n        sum += list1[i]\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j+1] for i in range(m+1) for j in range(n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum of numbers within the range\n    sum_range = 0\n\n    # Loop through the list from the starting index m to n (inclusive) and add the numbers to the sum variable\n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    # Return the sum of numbers within the specified range\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a * math.sin(math.pi / 5)\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = [a, math.sqrt(3)*a/2, math.sqrt(3)*a/2]\n    perimeter = sum(sides)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * math.sqrt(3) * a\n    return circumference"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    for i in s:\n        if i == std[0]:\n            j = 0\n            while j < len(std) and i == std[j]:\n                j += 1\n            if j == len(std):\n                count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for word in s.split():\n        if word.lower() =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    while std in s:\n        count += s.count(std)\n        s = s.replace(std, '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 4\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element)!= first_element_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function checks if all the elements in the tuple have the same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set()\n    for element in test_tuple:\n        if type(element) not in types:\n            types.add(type(element))\n        else:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Convert all elements of the tuple into a list\n    data_list = list(test_tuple)\n    # Find the data type of the first element in the list\n    data_type = type(data_list[0])\n    # Iterate over the rest of the elements in the list\n    for element in data_list[1:]:\n        # Check if the current element has the same data type as the first element\n        if type(element)!= data_type:\n            # If not, return False\n            return False\n    # If all elements in the list have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Check if the current element is equal to the target element\n        if arr[i] == x:\n            # Increment the counter variable\n            count += 1\n            \n    # Return whether the target element is the majority element or not\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the count of set bits in that number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_values = set()\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_values.add(str[i])\n    return ''.join(odd_index_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove characters from a given string which have odd index values.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and removes the characters at odd index positions.\n    \"\"\"\n    odd_indices = [i for i in range(len(str)) if i % 2 == 1]\n    return ''.join([str[i] for i in odd_indices])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the new string\n    new_str = ''\n    # loop through each character in the given string\n    for char in str:\n        # if the character has an odd index, add it to the new string\n        if str.index(char) % 2!= 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # create a new string to store the output\n    new_str = ''\n    # iterate through the characters of the input string\n    for i in range(len(str)):\n        # if the index is odd, add it to the new string\n        if i % 2 == 1:\n            new_str += str[i]\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    odd_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            odd_str += str[i]\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a string with all the odd index values removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c): \n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        print(\"Minimum number is:\", a) \n    elif b < a and b < c: \n        print(\"Minimum number is:\", b) \n    else: \n        print(\"Minimum number is:\", c) \n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        if (n & (1 << (l-1)))!= 0:\n            return False\n        elif all_Bits_Set_In_The_Given_Range(n>>1, l+1, r):\n            return True\n        else:\n            return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if all bits are set in the range [l, r]\n    for i in range(l, r + 1):\n        if n & (1 << i) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the number of unset bits in the range\n    unset_bits = 0\n    # Initialize the variable to keep track of the length of the range\n    range_length = 1\n    \n    # Iterate over the range until the end of it is reached\n    while l <= r:\n        # Add one to the length of the range if the current bit is set\n        if n & l:\n            range_length += 1\n        # Add the length of the range to the number of unset bits\n        unset_bits += range_length\n        # Shift the range left by 1\n        l <<= 1\n    \n    # Check if all the bits are unset in the range\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the input values to binary and get the length of binary representation of n\n    length = len(bin(n)[2:])\n\n    # Check if the length of binary representation of n is less than or equal to l\n    if length <= l:\n        return False\n\n    # Initialize the variable to True to check if all the bits are set\n    all_bits_set = True\n\n    # Iterate through the binary representation of n from the least significant bit to the most significant bit\n    for i in range(l, length):\n        # Check if the i-th bit of binary representation of n is 1\n        if bin(n)[2:].count('1') == 1:\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    :param n: The given integer number.\n    :param l: The lower limit of the range.\n    :param r: The upper limit of the range.\n    :return: True if all the bits are set in the given range, otherwise, False.\n    \"\"\"\n\n    # Check if all the bits are set in the given range or not.\n    # If all the bits are set, return True.\n    # If not, return False.\n    return all((n & (1 << i)) == 0 for i in range(l, r + 1))"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if both l and r are within the range of n\n    if l < 0 or l >= n or r < 0 or r >= n:\n        print(\"Error: l and r must be within the range of n.\")\n        return\n    \n    # convert l and r to binary and check if all bits are set to 1\n    l_binary = bin(l)[2:]\n    r_binary = bin(r)[2:]\n    if len(l_binary) > len(r_binary):\n        for i in range(len(l_binary) - len(r_binary)):\n            l_binary = \"0\" + l_binary\n    elif len(r_binary) > len(l_binary):\n        for i in range(len(r_binary) - len(l_binary)):\n            r_binary = \"0\" + r_binary\n    \n    if l_binary == r_binary:\n        print(\"All bits are set in the given range.\")\n    else:\n        print(\"All bits are not set in the given range.\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize an empty set to store unset bits\n    unset_bits = set()\n    # Loop through the range of numbers between l and r (inclusive)\n    for i in range(l, r+1):\n        # Convert the number to binary and split it into a list of bits\n        binary_num = bin(i)[2:]\n        # Convert the binary number to a set of bits\n        bit_set = set(binary_num)\n        # Check if the set of unset bits is equal to the bit set of the current number\n        if unset_bits!= bit_set:\n            # If not, return False to indicate that there are unset bits in the given range\n            return False\n    # If all bits are unset in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to store the difference between r and l\n    diff = r - l\n\n    # Iterate over the bits of n using a loop\n    for i in range(diff+1):\n        # If the i-th bit is set, return False as all the bits must be unset\n        if n & (1 << i):\n            return False\n\n    # If all the bits of n are unset, return True as all the bits are set\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        return True\n    for i in range(l, r+1):\n        if bin(i).count('1') < len(bin(i)):\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize variables\n    negative = []\n    positive = []\n    \n    # Separate the elements into two lists\n    for num in arr:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    # Combine the two lists and sort them in non-decreasing order\n    arr = negative + positive\n    arr.sort()\n    \n    # Return the sorted array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize three variables to keep track of the number of negative, zero, and positive elements\n    num_neg = 0\n    num_zero = 0\n    num_pos = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            num_neg += 1\n        elif arr[i] == 0:\n            num_zero += 1\n        else:\n            num_pos += 1\n\n    # initialize two arrays to store the negative, zero, and positive elements\n    neg_arr = []\n    zero_arr = []\n    pos_arr = []\n\n    # loop through the array again and move the appropriate elements into their respective arrays\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        elif arr[i] == 0:\n            zero_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # check if the number of negative and positive elements is equal to n\n    if num_neg + num_pos == n:\n        # loop through the two arrays and append the negative elements first\n        for i in range(num_neg):\n            neg_arr.append(neg_arr.pop(0))\n        # loop through the two arrays and append the zero elements after the negative elements\n        for i in range(num_zero):\n            pos_arr.append(zero_arr.pop(0))\n        # loop through the two arrays and append the positive elements after the zero elements\n        for i in range(num_pos):\n            pos_arr.append(pos_arr.pop(0))\n        # return the resulting array\n        return neg_arr + zero_arr + pos_arr\n    else:\n        # return an error message if the number of negative and positive elements is not equal to n\n        return \"Error: Number of negative and positive elements is not equal to n.\""
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: left and right\n    left = 0\n    right = n - 1\n    \n    # Iterate through the array until the right pointer reaches the end\n    while right < len(arr):\n        # If the current element is negative, swap it with the next element in the array\n        if arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n        # If the current element is positive, move the right pointer to the next index\n        else:\n            right += 1\n    \n    # Print the final array\n    print(\"Re-arranged array:\", arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negatives = []\n    positives = []\n    for num in arr[:n]:\n        if num < 0:\n            negatives.append(num)\n        else:\n            positives.append(num)\n    arr[:n] = negatives + positives\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    i = 0\n    \n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n            neg_count += 1\n        else:\n            arr[i], arr[pos_count] = arr[pos_count], arr[i]\n            pos_count += 1\n        i += 1\n    \n    # Copy the remaining elements to the end of the array\n    while neg_count < pos_count:\n        arr[neg_count], arr[pos_count] = arr[pos_count], arr[neg_count]\n        pos_count += 1\n        neg_count += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negatives = []\n    positives = []\n    for i in arr:\n        if i < 0:\n            negatives.append(i)\n        else:\n            positives.append(i)\n    negatives.sort(reverse=True)\n    return negatives + positives"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create an empty list for negative elements\n    negative_elements = []\n\n    # loop through the array and add negative elements to the negative_elements list\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n\n    # loop through the array and add positive elements to the end of the array\n    for i in range(n, len(arr)):\n        arr[i] = negative_elements.pop(0)\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # creating a new array to store the elements in the desired order\n    new_arr = []\n\n    # iterating through the array and checking for negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            new_arr.append(arr[i])\n\n    # iterating through the array again and adding the positive elements\n    for i in range(n, len(arr)):\n        new_arr.append(arr[i])\n\n    # returning the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    for i in range(n):\n        arr[i] = neg[i] if neg[i] < 0 else pos[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to hold positive and negative elements\n    pos_list = []\n    neg_list = []\n    # iterate over the input array and add elements to the appropriate list\n    for elem in arr:\n        if elem > 0:\n            pos_list.append(elem)\n        else:\n            neg_list.append(elem)\n    # sort the negative list in descending order (since we want to preserve relative order)\n    neg_list.sort(reverse=True)\n    # concatenate the positive and negative lists to form the final output array\n    result = pos_list + neg_list[:n] + neg_list[n:]\n    # return the final result\n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in lst:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sorting the list in descending order\n    list1.sort(reverse=True)\n    # returning the first n elements of the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    \n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    if n > len(list1):\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            heapq.heappush(heap, -list1[i])\n        for i in range(n, len(list1)):\n            if -list1[i] > -heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -list1[i])\n        return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    # extract the largest n numbers from the heap and add them to a list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n    # reverse the list to get the largest numbers first\n    result.reverse()\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for _ in range(n):\n        heapq.heappush(max_heap, float('-inf'))\n    # iterate over the list, adding items to the max heap\n    for num in list1:\n        heapq.heappush(max_heap, num)\n    # extract the n largest items from the max heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n    # extract the n largest elements from the min heap\n    for i in range(n, len(list1)):\n        if list1[i] > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, list1[i])\n    # return the n largest elements from the min heap\n    return min_heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * r * h\n    \n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*(r**2+h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Calculate lateral surface area\n    A = r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h + r*r*h + r*r*h + 2*r*r*h + r*r*h +"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of a cylinder using the formula:\n    # LSA = (2/3) * pi * r^2 * h\n    lateral_surface_area = (2/3) * 3.14159 * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    The function takes in the radius r and height h of the cylinder as input.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    area = math.pi * r**2 * h\n\n    # Return the lateral surface area of the cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface = 2*math.pi*(r**2)+(2*h)\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n    \n    Returns:\n    float: the lateral surface area of the cylinder.\n    \"\"\"\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    lateral_surface_area = math.pi * (r**2 + h**2)\n    \n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3 # calculate the volume\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l * l * l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n: \n        if n & 1 == 0: \n            n = n ^ 1\n        else: \n            n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    for bit in bin(n)[2:]:\n        if int(bit) & 1 == 0:\n            result |= 1 << (int(bit) - 1)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of the input number\n    even_bits = []\n    # Loop through each bit of the input number\n    for i in range(len(bin(n))-2, -1, -1):\n        # If the current bit is an even number, append it to the even_bits list\n        if i%2 == 0:\n            even_bits.append(i)\n    # Return the number with even bits set to 1\n    return bin(int(''.join(str(x) for x in even_bits), 2))[2:]"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a counter variable\n    counter = 0\n    # Initialize a binary string of n\n    binary_string = bin(n)[2:]\n    # Iterate through the binary string\n    for bit in binary_string:\n        # Check if the bit is even\n        if int(bit) % 2 == 0:\n            # Set the even bit to 1\n            binary_string = binary_string[:counter] + '1' + binary_string[counter+1:]\n        # Increment the counter\n        counter += 1\n    # Convert the binary string back to an integer\n    result = int(binary_string, 2)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the even bit position counter to 0\n    even_bit_position = 0\n    \n    # Loop through each bit in the binary representation of n\n    while even_bit_position < 32:\n        # If the current bit is even, set the corresponding bit in the binary representation of n\n        if n & 1:\n            n |= (1 << even_bit_position)\n            \n        # Shift the even bit position counter to the right\n        even_bit_position += 1\n        \n    # Return the updated binary representation of n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 1  # bitwise AND of the number with 1\n    return n | even_bits  # bitwise OR of the number with even bits set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        n += 1\n    return even_bit_set_number(n >> 1)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    count = 0\n    # Count the number of even bits in the number\n    for bit in bin(n)[2:]:\n        if bit == '0':\n            count += 1\n    # Set the number of even bits to the number of even bits in the number\n    return n | (1 << count)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Convert binary number to integer \n    n = int(n, 2) \n\n    # Iterate through all bits of binary number \n    for i in range(len(bin(n)[2:])): \n        # Set even bit to 1 \n        if n & (1 << i): \n            n |= (1 << i) \n\n    # Convert integer back to binary number \n    return bin(n)[2:].zfill(len(bin(n)[2:]))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the even bits of the given number\n    even_bits = 0\n\n    # Loop through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is an even number, set it to 1\n        if int(bit) == 0:\n            even_bits |= 1 << int(bit)\n\n    # Return the even bits of the given number\n    return even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter function from collections module to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    # Return the count_dict dictionary as the result\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the occurrences of tuples\n    occurrences = {}\n    \n    # loop through the list of tuples\n    for item in test_list:\n        # convert the tuple to a string so we can use it as a dictionary key\n        key = str(item)\n        # update the count of the key in the dictionary if it already exists, or set it to 1 if it doesn't\n        if key in occurrences:\n            occurrences[key] += 1\n        else:\n            occurrences[key] = 1\n    \n    return occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each unique tuple in the list\n    counter = Counter(test_list)\n    # Return the dictionary of occurrences\n    return counter.most_common()"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    count_dict = {}\n    \n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    for tup in unique_tuples:\n        count = test_list.count(tup)\n        count_dict[tup] = count\n    \n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(s):\n    # Initialize variables\n    count = 0\n    start = 0\n    end = 0\n    substring = \"\"\n    while end < len(s):\n        # Move the end pointer to the right\n        end += 1\n        while end < len(s) and s[end] not in \"abcdefghijklmnopqrstuvwxyz0123456789\":\n            # Move the end pointer to the right until a letter or digit is found\n            end += 1\n        # Check if the substring is non-empty\n        if end > start:\n            count += 1\n        # Update the substring and start pointer\n        substring = s[start:end]\n        start = end\n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j].strip(): \n                count += 1\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    start = 0\n    end = 0\n\n    # loop through all possible substrings of the string\n    while end < len(str):\n        # check if current substring is non-empty\n        if end < len(str) - 1 and str[end] == str[end+1]:\n            # if it is, increment the count and move both start and end pointers\n            count += 1\n            start = end\n            end += 1\n        else:\n            # if not, move only end pointer\n            end += 1\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0 \n    for i in range(2, m+1): \n        if i <= 2*i*i: \n            count += 1 \n    return count \n\nm = int(input(\"Enter the value of m: \")) \nn = int(input(\"Enter the value of n: \")) \n\nprint(\"The number of possible sequences is: \", get_total_number_of_sequences(m, n)) "
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    prev_num = 0\n    for i in range(2, n+1):\n        if i <= m:\n            for j in range(i-1, -1, -1):\n                if j * 2 >= i and j * 2 <= m:\n                    total_sequences += 1\n                    prev_num = j\n        else:\n            break\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total = 0\n    prev_element = 0\n    \n    # Check if n is greater than zero\n    if n <= 0:\n        return 0\n    \n    # Loop through all possible values of the first element\n    for i in range(1, m+1):\n        # Check if current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2*prev_element and i <= m:\n            # Increment the total count\n            total += 1\n        # Update the previous element\n        prev_element = i\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize a variable to store the count of sequences\n    count = 0\n\n    # Iterate through all possible sequences of length n\n    for i in range(m, n+1):\n\n        # Calculate the previous element of the sequence\n        prev_elem = (i - 1) // 2\n\n        # Check if the current element is a positive integer and satisfies the given conditions\n        if (i % 2 == 0) and (prev_elem >= 2 * prev_elem) and (i <= m):\n\n            # Increment the count of sequences\n            count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2,m):\n        if i >= 2*i:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a variable to count the number of sequences\n    count = 0\n    \n    # Initialize a variable to store the current sequence\n    current_sequence = [0]\n    \n    # Loop through the first m-1 elements of the sequence\n    for i in range(m-1):\n        # Loop through the first n-1 elements of the sequence\n        for j in range(n-1):\n            # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n            if current_sequence[j] < m and 2*current_sequence[j] >= current_sequence[j+1]:\n                # Append the current element to the sequence\n                current_sequence.append(current_sequence[j]+1)\n                # Increment the count variable\n                count += 1\n    \n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(m):\n        count += n - (i + 1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(1, m+1):\n            if i >= 2*m:\n                count += get_total_number_of_sequences(m, n-1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n):\n    count = 0\n    for i in range(1, m+1):\n        if i >= 2*n:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    sequence = [0]\n    for i in range(2, n + 1):\n        sequence.append(i)\n        while sequence[-1] > m:\n            sequence.pop()\n        count += len(sequence)\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the length of list2 is less than the length of list1\n    if len(list2) < len(list1):\n        return \"Error: The second list cannot be longer than the first list.\"\n    # Loop through the first list and replace the last element with the elements of the second list\n    for i in range(len(list1) - 1, -1, -1):\n        list1[i] = list2[i]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n\n    # Iterate through the first list\n    for i in range(len(list1)-1, -1, -1):\n        # Append the last element of the second list to the first list\n        list1.append(list2[-1])\n        # Remove the last element of the second list\n        list2.pop()"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1 += list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n\n    # Initialize empty list to store the result\n    result = []\n\n    # Add the first list to the result list\n    for item in list1:\n        result.append(item)\n\n    # Add the elements of the second list to the result list\n    for item in list2:\n        result.append(item)\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n\n    # Return the result list\n    return result"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_characters(string):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    return len(string)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = len(str1)\n    return total"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    i = sqrtN + 1\n    while i*i <= N:\n        i += 1\n    return i*i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        return None\n    \n    # Initialize variables\n    k = 1\n    x = N\n    \n    # Iterate until the square root of the given number is greater than 0\n    while x * x > N:\n        k += 1\n        x = (k * (k + 1))\n    \n    # Calculate the next perfect square\n    x = (k * (k + 1))\n    \n    # Check if the square is greater than the given number\n    if x > N:\n        return x\n    \n    # If the square is less than the given number, return the square\n    else:\n        return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = int(math.sqrt(N)) + 1 # calculate the square root of N\n    for i in range(sqrt_N, 0, -1): # iterate from sqrt_N to 1\n        if N % i == 0:\n            return i*i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    \n    sqrt_N = math.sqrt(N)\n    sqrt_N = int(sqrt_N)\n    \n    while True:\n        sqrt_N += 1\n        if sqrt_N**2 > N:\n            return sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Define a function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return math.sqrt(num) == int(math.sqrt(num))\n\n    # Find the square root of the input number\n    sqrt_N = math.sqrt(N)\n\n    # If the square root is an integer, then the next perfect square is the square of the square root\n    if sqrt_N == int(sqrt_N):\n        return pow(sqrt_N, 2)\n\n    # If the square root is not an integer, then the next perfect square is the square of the integer part of the square root\n    else:\n        return pow(int(sqrt_N), 2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a positive integer N and returns the next perfect square greater than N.\n\n    The algorithm used is the same as finding the next perfect square using binary search,\n    but with a slight modification to stop when the square is greater than the given number N.\n    '''\n\n    # Base case\n    if N == 1:\n        return 4\n\n    # Find the previous perfect square\n    prev_square = N - 1\n    while prev_square % 4!= 1:\n        prev_square -= 1\n\n    # Find the next perfect square using binary search\n    low, high = prev_square, N\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid > N:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return high"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Convert N to a string\n    N_str = str(N)\n    # Get the length of the string\n    length = len(N_str)\n    # Check if the length is 1 or 2\n    if length == 1:\n        # N is already a perfect square\n        return N + 1\n    elif length == 2:\n        # N is a perfect square minus 1\n        return int(N_str[:-1])\n    else:\n        # N is a perfect square with its last digit\n        N_last_digit = int(N_str[-1])\n        # Get the next possible value for the last digit\n        next_last_digit = N_last_digit - 1\n        # Check if next_last_digit is less than 10\n        while next_last_digit >= 10 and length < 9:\n            next_last_digit -= 10\n            length += 1\n        # Check if the length is still 9\n        if length == 9:\n            # All possible values for the last digit have been tried\n            # If we have tried all possible values for the last digit, then we need to consider the remaining digits\n            while True:\n                # Get the next perfect square with the same first digit as N\n                next_square = math.ceil(float(N) / 10) ** 2\n                # Check if the next perfect square is less than or equal to N\n                if next_square > N:\n                    # N is already a perfect square\n                    return N\n                # Check if the next perfect square is greater than the next possible value for the last digit\n                elif next_square > next_last_digit:\n                    # N is a perfect square with the next possible value for the last digit\n                    return next_square\n                else:\n                    # The next perfect square has the same first digit as N but a greater last digit\n                    # We can repeat this process with the next smaller value for the last digit\n                    next_last_digit -= 10\n                    length += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math  \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Using the math library to find the square root of N \n    sqrt_N = math.sqrt(N) \n    # Multiplying the square root by 2 and round it up to the nearest integer \n    next_sqrt_N = math.ceil(sqrt_N * 2)\n    # Multiplying the next perfect square by 2 and adding N to it to get the next perfect square greater than N \n    next_P_square = next_sqrt_N * 2 + N\n    # Returning the next perfect square greater than N \n    return next_P_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Function to check if a number is a perfect square\n    def is_perfect_square(num):\n        '''\n        Function to check if a number is a perfect square or not.\n        '''\n        root = math.sqrt(num)\n        return int(root) ** 2 == num\n\n    # Function to find the next perfect square greater than a given number\n    def next_greater_perfect_square(num):\n        '''\n        Function to find the next perfect square greater than a given number.\n        '''\n        # Initialize a variable to store the next perfect square greater than num\n        next_sq = 0\n\n        # Check if num is a perfect square\n        if is_perfect_square(num):\n            # Initialize a variable to store the square root of num\n            root = math.sqrt(num)\n\n            # Initialize a variable to store the integer part of the square root of num\n            root_int = int(root)\n\n            # Check if the square root is an odd integer\n            if root_int % 2 == 1:\n                # If the square root is odd, then add 1 to it to get the next perfect square greater than num\n                next_sq = root_int + 1\n\n            # Check if the square root is even\n            else:\n                # If the square root is even, then divide it by 2 and round up to get the next perfect square greater than num\n                next_sq = int(root) + 1\n\n        # Check if num is not a perfect square\n        else:\n            # Set the next perfect square greater than num to num\n            next_sq = num\n\n        return next_sq\n\n    # Call the next_greater_perfect_square function to find the next perfect square greater than N\n    next_N = next_greater_perfect_square(N)\n\n    # Return the next perfect square greater than N\n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Convert N to a float and round it down to the nearest integer\n    N = int(N)\n\n    # Initialize a flag variable to check if N is a perfect square\n    is_square = True\n\n    # Check if N is a perfect square\n    for i in range(int(math.sqrt(N)) + 1):\n        if N % i == 0:\n            is_square = False\n            break\n\n    # If N is not a perfect square, find the next smallest perfect square greater than N\n    if is_square:\n        # Initialize two variables for the next perfect square\n        i = 1\n        j = 1\n        next_square = i * i\n\n        # Check if the next smallest perfect square is greater than N\n        while next_square > N:\n            i += 1\n            j = 1\n            next_square = i * i\n\n        # Calculate the next smallest perfect square greater than N\n        next_square = i * i\n\n        return next_square\n    else:\n        # If N is already a perfect square, return N + 1\n        return N + 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_sum += arr[i]\n        elif arr[i] > arr[i-1]:\n            max_sum = max(max_sum, arr[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return max(arr)\n\n    left = [0] * n\n    right = [0] * n\n    prev_left = -1\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            left[i] = left[i - 1] + arr[i]\n        else:\n            left[i] = arr[i]\n\n        if arr[i] > arr[i - 1]:\n            right[i] = right[i - 1] + arr[i]\n        else:\n            right[i] = arr[i]\n\n        if left[i] > right[i]:\n            left[i] = right[i]\n        elif left[i] == right[i]:\n            left[i] = max(left[i], arr[i])\n\n        if i > 1 and right[i] > left[i - 1]:\n            right[i] = left[i - 1]\n\n    max_sum = float('-inf')\n    for i in range(n):\n        if left[i] > right[i]:\n            max_sum = max(max_sum, right[i])\n        elif left[i] == right[i]:\n            max_sum = max(max_sum, max(left[i], arr[i]))\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n\n    # Find the minimum value in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Initialize the maximum sum with the minimum value\n    max_sum = min_val\n\n    # Traverse through the array\n    for i in range(n):\n        # If the current element is greater than the minimum value, update the maximum sum\n        if arr[i] > min_val:\n            max_sum = max(max_sum, arr[i] + dp[i - 1])\n        # If the current element is less than the minimum value, update the minimum value and the maximum sum\n        else:\n            min_val = arr[i]\n            max_sum = arr[i] + dp[i - 1]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    # Initialize variables to keep track of the maximum sum found so far and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the array and update the current sum based on whether the current element is increasing or decreasing\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        else:\n            curr_sum -= arr[i-1]\n            \n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + arr[i]\n        else:\n            dp[i] = arr[i]\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i], dp[i-1] + arr[i])\n        else:\n            dp[i] = max(dp[i], dp[i-1])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n\n    max_sum_increasing = 0\n    max_sum_decreasing = 0\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            max_sum_increasing += arr[i]\n        else:\n            max_sum_decreasing += arr[i]\n\n    max_sum_bitonic = max(max_sum_increasing, max_sum_decreasing)\n\n    return max_sum_bitonic\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Find the first increasing subsequence\n    i = 0\n    while i < n - 1 and arr[i] < arr[i + 1]:\n        i += 1\n\n    if i == n - 1:\n        return 0\n\n    # Find the last decreasing subsequence\n    j = n - 1\n    while j > 0 and arr[j - 1] > arr[j]:\n        j -= 1\n\n    # Return the maximum sum of the two subsequences\n    return arr[i] + arr[j] - (arr[i] * arr[j])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_sum_i = arr[0]\n    max_sum_j = max(arr[0], arr[1])\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            max_sum_i += arr[i]\n        else:\n            max_sum_j += arr[i]\n\n        max_sum = max(max_sum_i, max_sum_j)\n        max_sum_i = max(max_sum_i, max_sum_j - arr[i])\n        max_sum_j = max(max_sum_i + arr[i], max_sum_j)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    max_sum = float('-inf')\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i][j] = dp[i-1][j] + arr[i]\n            elif arr[i] > arr[j]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + arr[i]\n            max_sum = max(max_sum, dp[i][j])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Initialize variables\n    max_sum_increasing = arr[0]\n    max_sum_decreasing = arr[0]\n    current_sum_increasing = max_sum_increasing\n    current_sum_decreasing = max_sum_decreasing\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            # If the next element is increasing, add it to the current sum\n            current_sum_increasing += arr[i]\n        else:\n            # If the next element is decreasing, update the current sum\n            current_sum_decreasing = max(current_sum_decreasing, current_sum_increasing - arr[i])\n            current_sum_increasing = arr[i]\n\n        max_sum_increasing = max(max_sum_increasing, current_sum_increasing)\n        max_sum_decreasing = max(max_sum_decreasing, current_sum_decreasing)\n\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Initialize variables\n    x0 = 1\n    x1 = 2\n\n    # Iterate until the difference between the previous two\n    # iterations is less than or equal to a tolerance value\n    while abs(x1 - x0) > 1e-6:\n        x0, x1 = x1, x1 - ((x1 ** 2 - number) / (2 * x1))\n\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    \n    # initialize variables\n    x, y = 1, 1\n    n = 1\n    sqrt_number = number\n    \n    while abs(y) > 1e-6:\n        x, y = y, x - y/x\n        n += 1\n        \n    return sqrt_number, n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    i = 0\n    guess = number / 2\n    while guess * guess > number:\n        i += 1\n        guess = (number / guess) + guess / 2\n    print(\"The square root of\", number, \"is\", guess, \"after\", i, \"iterations.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    if number < 0:\n        print(\"Error: Input must be a positive number.\")\n        return None\n    \n    sqrt_approximation = 1\n    sqrt_lower_bound = 0\n    sqrt_upper_bound = number\n    \n    while abs(sqrt_upper_bound - sqrt_lower_bound) > 0.001:\n        sqrt_middle = (sqrt_lower_bound + sqrt_upper_bound) / 2\n        if sqrt_middle * sqrt_middle == number:\n            return sqrt_middle\n        elif sqrt_middle * sqrt_middle < number:\n            sqrt_lower_bound = sqrt_middle\n        else:\n            sqrt_upper_bound = sqrt_middle\n    \n    print(\"The square root of\", number, \"is approximately\", sqrt_approximation)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number / guess) / 2\n        if abs(next_guess - guess) < 0.00001:\n            return next_guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = 0.5 * (number + 1)\n    while abs(guess**2 - number) > 0.00001:\n        guess = 0.5 * (number / guess + guess)\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        x = guess * guess\n        if x == number:\n            return guess\n        elif x < number:\n            guess = guess - (number / guess)\n        else:\n            guess = guess + (number / guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0000001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    a = 1.0\n    b = number\n    c = number / b\n    count = 0\n    \n    # Perform iterations until convergence\n    while abs(c - b) > 1e-12:\n        a = b\n        b = c\n        c = b / (a + (a / b))\n        count += 1\n    \n    # Return the final approximation\n    return b"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    # Initialize a table to store the length of longest palindromic subsequences for all prefixes\n    prefix = [0] * len(string)\n    # Initialize the length of the longest palindromic subsequence to 1\n    longest = 1\n    # Initialize the start index of the longest palindromic subsequence to 0\n    start = 0\n    # Loop through the string and calculate the length of longest palindromic subsequences for all prefixes\n    for i in range(1, len(string)):\n        # If the current character is same as the previous character then the length of longest palindromic subsequence for the current prefix is the length of longest palindromic subsequence for the previous prefix plus 2 (for considering both the current character and the previous character)\n        if string[i] == string[i-1]:\n            prefix[i] = prefix[i-1] + 2\n            # If the length of longest palindromic subsequence found so far is greater than the length of longest palindromic subsequence found so far by the current prefix, then update the length of longest palindromic subsequence found so far by the current prefix\n            if prefix[i] > longest:\n                longest = prefix[i]\n                start = i - prefix[i] + 1\n        else:\n            # If the current character is not same as the previous character then the length of longest palindromic subsequence for the current prefix is the maximum of the length of longest palindromic subsequence for the previous prefix and the length of longest palindromic subsequence for the previous prefix minus 2 (for considering both the current character and the previous character)\n            prefix[i] = max(prefix[i-1], prefix[i-1] - 2)\n    # Return the length of the longest palindromic subsequence found\n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store length of longest palindrome subsequence for all prefixes \n    # of given string \n    table = [[0] * n for _ in range(n)] \n  \n    # Store length of longest palindrome subsequence for empty string and all \n    # prefixes of given string \n    for i in range(n): \n        table[i][i] = 1 \n    for length in range(2, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2 \n            else: \n                table[i][j] = max(table[i+1][j], table[i][j-1]) \n  \n    # Return length of longest palindromic subsequence for given string \n    return table[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the lengths of LPS for substrings of length i\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Build the table\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # Iterate through all substrings of length 3 to n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return lps_table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    lps_array = [1] * n\n    max_len = 1\n    start = 0\n\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_array[i] = lps_array[i-1] + 1\n            if lps_array[i] > max_len:\n                start = i - lps_array[i] + 1\n                max_len = lps_array[i]\n        else:\n            lps_array[i] = 1\n            if lps_array[i] > max_len:\n                start = i\n                max_len = lps_array[i]\n\n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    max_length = 1\n    start = 0\n    \n    for i in range(1, len(str)):\n        # Check if the current character is same as the previous character\n        if str[i] == str[i-1]:\n            # If it is, then check if the current substring is a palindrome\n            temp_start = start\n            temp_end = i\n            while temp_start < temp_end:\n                if str[temp_start]!= str[temp_end]:\n                    break\n                temp_start += 1\n                temp_end -= 1\n            # If it is a palindrome, update the maximum length and starting index\n            if temp_start >= temp_end:\n                max_length = max(max_length, i-temp_start+1)\n                start = temp_start\n        # If the current character is different, then reset the starting index\n        else:\n            start = i\n            \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [0] * n\n    \n    # Calculate length of LPS for all prefixes\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n    \n    return dp[n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store lengths of longest palindromic subsequence for all \n    # substrings of given string. \n    table = [[0] * n for _ in range(n)] \n    # Initialize table[i][j] to -1 to indicate that no palindromic subsequence of \n    # length i+1 is present in substring str[j:i+1] \n    for i in range(n): \n        table[i][i] = 1 \n    # Compute lengths of longest palindromic subsequences for all pairs of \n    # adjacent characters in the string. If the characters are same, then \n    # expand palindromic subsequence of length i+1 to include current character. \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i+length-1 \n            if str[i] == str[j]: \n                table[i][j] = table[i+1][j-1] + 2 \n            else: \n                table[i][j] = max(table[i+1][j], table[i][j-1]) \n    # Return the length of the longest palindromic subsequence. \n    return table[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D table to store the length of longest palindromic subsequence for all substrings.\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # Fill the table in bottom up manner.\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence.\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # initializing a dictionary to store the lengths of the longest palindromic subsequence of each substring\n    dp = {}\n    \n    # initializing the length of the longest palindromic subsequence to be 0\n    max_length = 0\n    \n    # iterating through all possible substrings of the string\n    for i in range(len(str)):\n        # checking if the substring is already present in the dictionary\n        if str[i] in dp:\n            # checking if the length of the current substring is greater than the length of the longest palindromic subsequence so far\n            if dp[str[i]] + 2 > max_length:\n                max_length = dp[str[i]] + 2\n        else:\n            # finding the longest palindromic subsequence of the substring\n            for j in range(len(str)):\n                # checking if the substring is a palindrome\n                if i <= j and str[i:j+1] == str[i:j+1][::-1]:\n                    # checking if the length of the current substring is greater than the length of the longest palindromic subsequence so far\n                    if j - i + 1 > max_length:\n                        max_length = j - i + 1\n                        # updating the dictionary with the length of the current substring as the key and the length of the longest palindromic subsequence as the value\n                        dp[str[i:j+1]] = j - i + 1\n                        \n    return max_length"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_of_harmonic = 0\n    for i in range(n-1):\n        sum_of_harmonic += 1/i\n    return sum_of_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through n-1 values and add them to the sum variable\n    for i in range(n-1):\n        sum += 1 / (i+1)\n    \n    # Return the harmonic sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + 1/n) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1.0/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays and returns their intersection.\n    \"\"\"\n    # Create two dictionaries to store the counts of each element in array_nums1 and array_nums2\n    count_dict1 = {}\n    count_dict2 = {}\n\n    # Iterate through each element in array_nums1 and add its count to the count_dict1 dictionary\n    for num in array_nums1:\n        count_dict1[num] = count_dict1.get(num, 0) + 1\n\n    # Iterate through each element in array_nums2 and add its count to the count_dict2 dictionary\n    for num in array_nums2:\n        count_dict2[num] = count_dict2.get(num, 0) + 1\n\n    # Create an empty list to store the intersection\n    intersection = []\n\n    # Iterate through each element in count_dict1 and check if it exists in count_dict2. If so, add it to the intersection list\n    for num in count_dict1:\n        if num in count_dict2 and count_dict1[num] <= count_dict2[num]:\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes in two arrays of integers and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a set from array_nums1\n    set1 = set(array_nums1)\n    # Create a set from array_nums2\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the occurrence of each element in array1\n    occ_dict1 = {}\n    for num in array_nums1:\n        if num in occ_dict1:\n            occ_dict1[num] += 1\n        else:\n            occ_dict1[num] = 1\n    \n    # create a dictionary to store the occurrence of each element in array2\n    occ_dict2 = {}\n    for num in array_nums2:\n        if num in occ_dict2:\n            occ_dict2[num] += 1\n        else:\n            occ_dict2[num] = 1\n    \n    # find the intersection of two dictionaries using set intersection\n    common_nums = set(occ_dict1.keys()) & set(occ_dict2.keys())\n    \n    # create a new list to store the intersection of the two arrays\n    intersection = []\n    for num in common_nums:\n        if occ_dict1[num] > 0 and occ_dict2[num] > 0:\n            intersection.append(num)\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as inputs and returns the intersection of the two arrays.\n    '''\n\n    # Create a set from array_nums1\n    set1 = set(array_nums1)\n\n    # Create an empty set to store the intersection\n    intersection_set = set()\n\n    # Loop through array_nums2\n    for num in array_nums2:\n        # If the number is present in set1, add it to the intersection set\n        if num in set1:\n            intersection_set.add(num)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of them.\n    \"\"\"\n\n    # Initialize an empty set to store the intersection of the arrays\n    intersection = set()\n\n    # Loop through each element in the first array\n    for num1 in array_nums1:\n\n        # Check if the element is in the second array\n        if num1 in array_nums2:\n\n            # If it is, add it to the intersection set\n            intersection.add(num1)\n\n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1\n    set_nums1 = set(array_nums1)\n\n    # Create a set from array_nums2\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Return the list of elements in the intersection\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the count of each element in array_nums1\n    count_dict = {}\n    for num in array_nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Create a list to store the intersection elements\n    intersection_list = []\n    \n    # Iterate through array_nums2 and check if the element is in the dictionary\n    for num in array_nums2:\n        if num in count_dict and count_dict[num] > 0:\n            count_dict[num] -= 1\n            intersection_list.append(num)\n    \n    # Return the list of intersection elements\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for i in array_nums1:\n        if i in array_nums2:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create sets from the input arrays\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # loop through the list and insert the element before each element\n    for i in range(len(list)):\n        list.insert(i, element)\n    # return the resulting list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    # Make a copy of the list to modify it without modifying the original list\n    new_list = list.copy()\n\n    # Use a for loop to iterate over each element in the original list\n    for i in range(len(new_list)):\n        # Insert the element before the current element\n        new_list.insert(i, element)\n\n    # Return the modified list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # Convert the complex number to polar form\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        \n        # Add the polar coordinates to the result list\n        result.append((r, theta))\n    \n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    \n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        \n        if imag == 0:\n            theta = 0\n        else:\n            theta = cmath.phase(num)\n        \n        polar_coordinates.append((cmath.sqrt(real**2 + imag**2), theta))\n        \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # convert the complex number to polar coordinates\n        r = cmath.abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append([r, theta])\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        if isinstance(number, complex):\n            magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n            angle = cmath.phase(number)\n            print(f\"{number} in polar coordinates is {magnitude} with angle {angle} degrees.\")\n        else:\n            print(f\"{number} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers (represented as strings) as input.\n    It returns a list of polar coordinates (represented as tuples) of the same length\n    as the input list.\n\n    For each complex number in the input list, the function converts it to polar coordinates\n    using the cmath module. The polar angle is obtained by taking the angle of the complex\n    number in radians, and the magnitude is obtained by taking the modulus of the complex\n    number.\n\n    The polar coordinates are returned as a list of tuples, where each tuple contains\n    the magnitude and the angle of the corresponding polar coordinate.\n\n    Example:\n\n    >>> convert(['3+4j', '-5-6j', '1+2j'])\n    [(3.0, 0.7853981633974483), (-5.0, 1.5707963267948966), (1.0, 0.7853981633974483)]\n    '''\n\n    # Convert each complex number to polar coordinates using cmath\n    polar_coordinates = []\n    for number in numbers:\n        number = complex(number)\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num1, num2) for num1, num2 in numbers]\n    polar_coordinates = [cmath.polar(num) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n        polar_coordinates.append((magnitude, phase))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = num.real\n        theta = cmath.phase(num)\n        print(f\"{num} in polar coordinates: ({r}, {theta} rad)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        polar.append((magnitude, angle))\n    return polar"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for number in numbers:\n        # converting the complex number to polar coordinates\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        phase = cmath.phase(number)\n\n        # printing the polar coordinates\n        print(f\"({magnitude:.2f}, {phase:.2f})\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as an input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of length n with replacement (i.e. no element can be repeated)\n    comb_list = list(combinations_with_replacement(l, n))\n    # Create a list of tuples with each combination as a tuple\n    comb_tuples = [(tuple(comb)) for comb in comb_list]\n    return comb_tuples"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    for comb in combinations_with_replacement(l, n):\n        colors_comb = tuple(comb)\n        yield colors_comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append((i,)+j)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    result = []\n    for i in comb:\n        result.append(tuple(i))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[j] for j in range(i, i+n))\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combos = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l[i:], n):\n            color_combos.append((l[i], combo))\n    return color_combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n    else:\n        max_num = max(test_tup1)\n        max_index = test_tup1.index(max_num)\n        max_tup1 = (max_num, max_index)\n\n        max_num = max(test_tup2)\n        max_index = test_tup2.index(max_num)\n        max_tup2 = (max_num, max_index)\n\n        print(\"Maximum element in the first tuple:\", max_tup1[0])\n        print(\"Index of the maximum element in the first tuple:\", max_tup1[1])\n\n        print(\"Maximum element in the second tuple:\", max_tup2[0])\n        print(\"Index of the maximum element in the second tuple:\", max_tup2[1])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    max_num = test_tup1[0] if test_tup1[0] >= test_tup2[0] else test_tup2[0]\n    max_num = max(max_num, test_tup1[1]) if max_num < test_tup1[1] else max_num\n    max_num = max(max_num, test_tup2[1]) if max_num < test_tup2[1] else max_num\n    return (max_num, test_tup1[0] == max_num and test_tup1[1] > test_tup2[1])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return None\n\n    # Check if both tuples have only integers\n    for element in test_tup1 + test_tup2:\n        if not isinstance(element, int):\n            print(\"Both tuples must have only integers\")\n            return None\n\n    # Find the maximum element in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Return the tuple with the maximum elements\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        # maximize first tuple\n        max_tuple = test_tup1\n    else:\n        # maximize second tuple\n        max_tuple = test_tup2\n    # maximize each element in the tuple\n    for i in range(len(max_tuple)):\n        max_tuple[i] = max(max_tuple[i], max_tuple[i+1])\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tuple = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n            \n    if max1 > max2:\n        max_tuple += (max1,)\n    else:\n        max_tuple += (max2,)\n    \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    if test_tup1[0] >= test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        return test_tup1 if test_tup1[1] > test_tup2[1] else test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # calculate the sum of the first tuple\n    sum1 = sum(test_tup1)\n\n    # calculate the sum of the second tuple\n    sum2 = sum(test_tup2)\n\n    # find the maximum sum tuple\n    max_tuple = test_tup1 if sum1 >= sum2 else test_tup2\n\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of both tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # If the length is equal, compare the elements in the tuples\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                # If the element in the first tuple is smaller, swap them\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Take the length of the shorter tuple as the count of elements to choose from\n    min_length = min(len(test_tup1), len(test_tup2))\n    # Initialize the maximum sum and the index of the chosen element for the first tuple\n    max_sum = test_tup1[0]\n    max_index = 0\n    # Initialize the maximum sum and the index of the chosen element for the second tuple\n    max_sum_second = test_tup2[0]\n    max_index_second = 0\n\n    # Choose the element with the maximum sum from the first tuple\n    for i in range(1, min_length):\n        if test_tup1[i] > max_sum:\n            max_sum = test_tup1[i]\n            max_index = i\n\n    # Choose the element with the maximum sum from the second tuple\n    for i in range(1, min_length):\n        if test_tup2[i] > max_sum_second:\n            max_sum_second = test_tup2[i]\n            max_index_second = i\n\n    # Choose the element with the maximum sum that is not the maximum sum from either tuple\n    for i in range(1, min_length):\n        if test_tup1[i]!= max_sum and test_tup2[i]!= max_sum_second:\n            if test_tup1[i] > max_sum_second:\n                max_sum_second = test_tup1[i]\n                max_index_second = i\n            else:\n                max_sum = test_tup2[i]\n                max_index = i\n\n    # Return the maximum sum and the index of the chosen element for both tuples\n    return (max_sum, max_index), (max_sum_second, max_index_second)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function finds the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Define a list of primes to check against\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Check if n is less than the length of the list of primes\n    if n < len(primes):\n        # Return the nth prime number in the list\n        return primes[n]\n    else:\n        # If n is greater than or equal to the length of the list of primes, raise a ValueError\n        raise ValueError(\"n must be less than the length of the list of primes.\")"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the list of prime numbers up to the square root of the given integer\n    primes = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if all(i % j!= 0 for j in range(2, int(n ** 0.5) + 1)):\n            primes.append(i)\n    # Initialize the count of primes to zero\n    count = 0\n    # Check if the given integer is prime\n    if all(n % i!= 0 for i in primes):\n        primes.append(n)\n    # Starting from the square root of the given integer, check if there are more newman-shanks-williams primes\n    for i in range(int(n ** 0.5), 2, -1):\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            count += 1\n        if count == n:\n            return i\n    # If there are not enough newman-shanks-williams primes, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Base case\n    if n == 1:\n        return 2\n\n    # Initialize variables\n    p = 2\n    count = 0\n    prime = False\n\n    # Check if 2 is a prime number\n    if is_prime(2):\n        prime = True\n        count += 1\n\n    # Iterate over all subsequent numbers\n    while count < n:\n        p += 1\n\n        # Check if p is a prime number\n        if is_prime(p):\n            prime = True\n            count += 1\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return p\n\n\ndef is_prime(n):\n    \"\"\"\n    Write a function to check if a given number is a prime number.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count and prime list\n    count = 0\n    prime_list = []\n\n    # Check for prime numbers from 2 to n-1\n    for i in range(2, n):\n        is_prime = True\n        # Check if i is a prime number\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is a prime number, add it to the list and increment the count\n        if is_prime:\n            prime_list.append(i)\n            count += 1\n\n        # If we have found the nth prime number, stop searching\n        if count == n:\n            break\n\n    # If we haven't found the nth prime number, return None\n    if count < n:\n        return None\n\n    # Return the nth prime number from the list\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through all numbers from 2 to n-1\n    for i in range(2, n+1):\n\n        # Check if the current number is a newman\u2013shanks\u2013williams prime number\n        if i == 2 or (i % 2 == 1 and all(i%j!= 0 for j in range(3, int(i**0.5)+1, 2))):\n            count += 1\n\n            # If the count reaches the desired value, return the current number\n            if count == n:\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the number of primes found so far\n    count = 0\n    \n    # Initialize a variable to keep track of the current number being checked for primes\n    current_number = 2\n    \n    # Loop through the desired number of iterations\n    for i in range(n):\n        \n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, int(current_number**0.5)+1):\n            if current_number % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # If the current number is prime, increment the count and move on to the next number\n            count += 1\n            current_number += 1\n    \n    # Return the count of primes found\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        \"\"\"\n        Helper function to find the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 1\n    \n    # Loop until count reaches n\n    while count < n:\n        # Check if prime number is newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(prime):\n            count += 1\n        # Increment prime number\n        prime += 1\n    \n    # Return nth newman-shanks-williams prime number\n    return prime\n\ndef is_newman_shanks_williams_prime(num):\n    '''\n    Check if a number is a newman-shanks-williams prime number.\n    '''\n    # Check if number is less than 2\n    if num < 2:\n        return False\n    \n    # Check if number is 2 or 3\n    if num == 2 or num == 3:\n        return True\n    \n    # Check if number is even\n    if num % 2 == 0:\n        return False\n    \n    # Check if number is 5 or 7\n    if num == 5 or num == 7:\n        return True\n    \n    # Check if number is divisible by 3 or 5\n    if num % 3 == 0 or num % 5 == 0:\n        return False\n    \n    # Check if number is divisible by 11 or 13\n    if num % 11 == 0 or num % 13 == 0:\n        return False\n    \n    # Check if number is divisible by 17\n    if num % 17 == 0:\n        return False\n    \n    # Check if number is a newman-shanks-williams prime number\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the initial value of a and b\n    a = 2\n    b = 3\n\n    # Loop through the n-1 iterations to find the nth newman\u2013shanks\u2013williams prime number\n    for i in range(n - 1):\n        # Calculate the next value of a and b using the Newton-Raphson method\n        a_next = (2 * a + b) // 3\n        b_next = (a_next * a_next + b_next * a_next) // 2\n\n        # If b_next is prime, it is the nth newman\u2013shanks\u2013williams prime number\n        if is_prime(b_next):\n            return b_next\n\n    # If the loop completes without finding the nth newman\u2013shanks\u2013williams prime number, return None\n    return None\n\n\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    p = 2\n    i = 0\n    while i < n:\n        if is_newman_prime(p):\n            i += 1\n        p += 1\n    return p\n\ndef is_newman_prime(n):\n    \"\"\"\n    Helper function to check if a number is a newman prime number.\n    \"\"\"\n    if n < 3:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two input tuples should be equal.\")\n    \n    # Create a new empty tuple\n    result_tup = ()\n    \n    # Perform element-wise division on each element of the two input tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple((x / y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Perform element-wise division operation\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('inf')) # Set division result to infinity if denominator is zero\n    \n    return tuple(result) # Return the tuple of division results"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a/b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 0:\n                raise ValueError(\"Both tuples should not contain zeroes.\")\n    return tuple([a/b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        result_tup += ((num1 / num2),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            division.append(test_tup1[i] / test_tup2[i])\n        else:\n            division.append(test_tup1[i] // test_tup2[i])\n    return tuple(division)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # calculate the length of the first part of the list\n    length_1 = L\n    \n    # create two empty lists to store the first and second parts of the list\n    first_part = []\n    second_part = []\n    \n    # loop through the list and add elements to the first and second parts as long as the length of the list is greater than or equal to the length of the first part\n    while len(list1) >= length_1:\n        # add the first part of the list to the first part list\n        first_part.append(list1.pop(0))\n        \n        # add the second part of the list to the second part list\n        second_part.append(list1.pop())\n    \n    # if the length of the list is less than the length of the first part, add all the elements to the first part list\n    else:\n        first_part = list1\n    \n    # return the first part list and the second part list in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Calculate the length of the first part of the list\n    first_part_length = len(list1) // 2\n    \n    # Check if the length of the first part of the list is equal to L\n    if first_part_length == L:\n        # If it is, return a tuple containing the first and second parts of the list\n        return (list1[:first_part_length], list1[first_part_length:])\n    \n    # If the length of the first part of the list is less than L, add L to the length of the second part of the list\n    elif first_part_length < L:\n        second_part_length = L - first_part_length\n        return (list1[:first_part_length], list1[first_part_length:first_part_length+second_part_length])\n    \n    # If the length of the first part of the list is greater than L, return a tuple containing the first and second parts of the list\n    else:\n        return (list1[:first_part_length], list1[first_part_length:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into chunks of size L\n    chunks = [list1[i:i+L] for i in range(0, len(list1), L)]\n    # Return the resulting lists as a tuple\n    return tuple(chunks)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return ([list1[:L]], [list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts based on the given length L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_length = len(list1)\n    mid = list_length // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L == 0:\n        # If the length of the list is divisible by L, then we can split the list into two parts equally\n        mid = len(list1) // 2\n        part1 = list1[:mid]\n        part2 = list1[mid:]\n        return (part1, part2)\n    else:\n        # If the length of the list is not divisible by L, then we need to split the list into two parts with some overlap\n        mid = len(list1) // 2\n        part1 = list1[:mid+1]\n        part2 = list1[mid:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is a valid input\n    if not isinstance(L, int) or L < 1:\n        raise ValueError('L must be an integer greater than 0')\n    \n    # check if list1 is a valid input\n    if not isinstance(list1, list):\n        raise TypeError('list1 must be a list')\n    \n    # check if list1 has at least L elements\n    if len(list1) < L:\n        raise ValueError('list1 must have at least L elements')\n    \n    # split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return 7 * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # convert hours to days and calculate dog's age in dog's years\n    dog_years = (h_age * 7) / 25\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    return 7 + (h_age / 365)\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in years\n    dog_age_years = h_age * 7\n    # Return the dog's age in years\n    return dog_age_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    cm_age = h_age * 2.54\n    dog_years = int(cm_age / 12.5)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    breed_age = 12 # in dog's years\n    dog_years = h_age * breed_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 + (h_age * 0.6)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 6:\n        return round(h_age*7,1)\n    else:\n        return round(h_age*6,1)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if step > n:\n        return [S]\n    else:\n        return [S[i:i+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError('S must be a list')\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError('step must be a positive integer')\n    if step > len(S):\n        raise ValueError('step must be less than or equal to the length of the list')\n    n = len(S) // step\n    return [S[i:i+step] for i in range(0, n*step, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    while len(S) > 0:\n        if len(S) >= step:\n            S_split.append(S[:step])\n            S = S[step:]\n        else:\n            S_split.append(S)\n            S = []\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Slice the input list and append it to the result list\n        result.append(S[i:i+step])\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(len(S)+1, 0, -step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    r = l/2\n    return 6*math.pi*r**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l ** 2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**2)*(3*l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Cube formula\n    volume = l**3\n    lateral_surface = (4/3)*volume\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l) + (6 * l * l) + (6 * l * l)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2 # Cube formula\n    lateral_area = surface_area - 3 * l**2 # Rectangular prism formula\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 1\n    sum_squares = 0\n    while count <= n:\n        sum_squares += count**2\n        count += 2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop n times, adding the squares of odd natural numbers to the sum\n    for i in range(1, n+1, 2):\n        sum += i*i\n    # Return the sum of the squares of the odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    current_num = 1\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1,n+1,2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i ** 2\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    num = 1\n    \n    while num <= n:\n        sum_of_squares += num**2\n        num += 2\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n % 2 == 0:\n        print(\"Please provide an odd integer greater than 0.\")\n        return\n    \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 1\n    sum_of_squares = 0\n    while count <= n:\n        sum_of_squares += (count * count)\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum = 0\n    count = 1\n\n    while count <= n:\n        sum += count ** 2\n        count += 2\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n    # loop through the sequence of numbers\n    while count <= n:\n        # print the number\n        print(num, end=' ')\n        # update the count and number\n        count += 1\n        num += 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    # Calculate the number of spaces and stars required to print the n-th star\n    spaces = (5 * n) - 5\n    stars = 2 * n\n    \n    # Print the required number of spaces and stars\n    print(\" \" * spaces)\n    print(\"*\" * stars)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    if n <= 0:\n        return None\n    else:\n        return n * (n + 1) // 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    num = 1\n    count = 1\n    # loop through numbers from 1 to n and count stars\n    while count < n:\n        # print a star for each number\n        print('*' * num)\n        # increment count\n        count += 1\n        # increment number of stars by 2 (since each number increases by 2 each time)\n        num += 2"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return'* '\n    else:\n        return find_star_num(n-1) +'* '"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0: \n        return \"Invalid input\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variable for result\n    result = 0\n\n    # loop n-1 times to add n-1 numbers to result\n    for i in range(n-1): \n        result += i+1\n\n    # add nth number to result\n    result += n\n\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n    \n    # loop n times\n    for i in range(1, n+1):\n        # print the current star number\n        print(str(num) + \" \"*(5-len(str(num))))\n        \n        # update count and num\n        count += 2\n        num = count\n    \n    # print the last star number\n    print(str(num) + \" \"*(5-len(str(num))))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n > 1:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    for i in range(len(k)):\n        if k[i] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            return ord(k[i])\n    return ord(' ')"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.upper()\n    if len(k)!= 1:\n        raise ValueError('Input must be a single character')\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr),2):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even_at_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n        if count % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n        if even_index % 2 == 0:\n            break\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1):\n        result += i ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1, 1, -2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(1, n+1):\n        if i ** 5 % 2 == 0:\n            even_power_sum += i\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i**5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes in an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power = 5\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**power\n        i += 2\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    \n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_power += i ** 5\n    \n    return sum_even_power\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_item in test_list:\n        rear_list.append(tuple_item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i, tup in enumerate(test_list):\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create an empty list to store the rear elements\n    rear_elements = []\n    # iterate through the list of tuples\n    for tup in test_list:\n        # extract the rear element of the tuple\n        rear_element = tup[-1]\n        # add the rear element to the rear_elements list\n        rear_elements.append(rear_element)\n    # return the list of rear elements\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Loop through the first tuple and subtract the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    subtraction = [test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))]\n    return subtraction"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    for index, value1 in enumerate(test_tup1):\n        for index2, value2 in enumerate(test_tup2):\n            if index == index2:\n                test_tup1[index] = value1 - value2\n\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = 0\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # subtract the elements of the second tuple by the element at the same index in the first tuple\n        test_tup1[i] -= test_tup2[i]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # If the length of the first tuple is not equal to the length of the second tuple, raise an exception\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the first tuple should be equal to the length of the second tuple.\")\n    \n    # Initialize an empty tuple to store the results\n    result_tup = ()\n    \n    # Iterate through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # If the two elements have the same index, subtract the elements and add them to the result tuple\n        if i == test_tup2.index(test_tup1[i]):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize variables\n    even_index_binomial_coeff_sum = 0\n    odd_index_binomial_coeff = 1\n    \n    # Calculate the even index binomial coefficients\n    for i in range(n):\n        even_index_binomial_coeff = odd_index_binomial_coeff * (2*i+1) // (i+1)\n        even_index_binomial_coeff_sum += even_index_binomial_coeff\n        odd_index_binomial_coeff *= (2*n-2*i) // (i+1)\n    \n    return even_index_binomial_coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        return \"Error: Please enter a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_binomial_Coeff_Sum(n): \n    # defining the binomial coefficient function\n    def binomial(n, k): \n        if k > n//2: k = n-k\n        num = math.factorial(n)\n        den = math.factorial(k) * math.factorial(n-k)\n        return num // den\n\n    # initializing the sum to zero\n    coeff_sum = 0\n\n    # iterating through the odd indices of the array and summing the even binomial coefficients\n    for i in range(1, n+1, 2): \n        coeff_sum += binomial(n, i)\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum to zero\n    total = 0\n    # loop through odd indices\n    for i in range(1, n+1, 2):\n        # compute the binomial coefficient\n        coeff = math.comb(n, i)\n        # check if the index is even\n        if i % 2 == 0:\n            # add the coefficient to the total sum\n            total += coeff\n    # return the total sum\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    The even index binomial coefficient is defined as:\n    b(n, k) = (n choose k) * (k choose (n-k)) / (k * (n-k))\n\n    Args:\n    n (int): A positive integer\n\n    Returns:\n    int: The sum of even index binomial coefficients of n.\n    '''\n\n    # Define a helper function to calculate the sum of even index binomial coefficients\n    def even_binomial_Coeff_Sum_Helper(n, k):\n        if k == 0:\n            return 1\n        elif k == 1 or k == n:\n            return n\n        else:\n            return (math.factorial(n) // math.factorial(k) // math.factorial(n - k))\n\n    # Initialize the sum of even index binomial coefficients to 0\n    coeff_sum = 0\n\n    # Iterate over the indices from 0 to n-1 and calculate the sum of even index binomial coefficients\n    for k in range(n):\n        coeff_sum += even_binomial_Coeff_Sum_Helper(n, k)\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients to 0\n    even_binomial_sum = 0\n    # Loop through each index i\n    for i in range(2, n+1):\n        # Calculate the binomial coefficient for i and n\n        binomial_coeff = math.comb(n, i)\n        # If the index is even, add the coefficient to the sum\n        if i % 2 == 0:\n            even_binomial_sum += binomial_coeff\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    \n    # Calculate the sum of even index binomial coefficients using the formula: (n choose k) * (n - k + 1) / k^2\n    for i in range(0, n+1, 2):\n        for j in range(2, i//2+1):\n            even_sum += math.comb(i, j) * math.comb(n-i+1, n-j+1)\n    \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # calculate the sum of even index binomial coefficients using math.comb function\n    sum_even = 0\n    for i in range(2, n+1, 2):\n        sum_even += math.comb(n, i)\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2*n, 2*n+2):\n        sum += (math.factorial(n)/(math.factorial(i-n)*math.factorial(n-i)))\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize sum to 0\n    sum_even_binomial_Coeff = 0\n    \n    # loop through the integers from 1 to n\n    for i in range(1, n+1):\n        # calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i)\n        # if the index of the coefficient is even, add it to the sum\n        if i % 2 == 0:\n            sum_even_binomial_Coeff += binomial_coeff\n    \n    # return the sum of even index binomial coefficients\n    return sum_even_binomial_Coeff"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*(r**2)*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r**2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.14159265358979323846\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k:v for k,v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key: value for key, value in dict.items() if value >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[0]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # First we calculate the sum of the first n terms of the series.\n    sum_terms = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Then we find the decimal part of the sum.\n    decimal_part = sum_terms - int(sum_terms)\n    \n    # If the decimal part is 0, then the n-th decagonal number is a perfect square.\n    if decimal_part == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the decagonal number as 1\n    decagonal_num = 1\n\n    # Loop through each digit of the input number\n    while n > 0:\n        # Find the decimal places of the current digit\n        decimal_places = 0\n        while n % 10 == 0:\n            n //= 10\n            decimal_places += 1\n\n        # Multiply the current digit by 10^decimal_places and add to the decagonal number\n        decagonal_num += n * 10 ** decimal_places\n\n        # Remove the last digit of the current number\n        n //= 10\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    else:\n        return (10 * (n - 1) ** 2) + 10"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the variables \n    num = 1\n    count = 1\n\n    # Loop through the count variable \n    while count <= n: \n        # Add the current number to the total \n        num += count \n        \n        # Increment the count variable \n        count += 2\n    \n    # Return the nth decagonal number \n    return num "
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize the variables for the loop\n    decagonal = 1\n    count = 0\n\n    # Loop until we reach the nth decagonal number\n    while count < n:\n        decagonal += 2 * (count + 1)\n        count += 1\n\n    # Return the value of the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n\n    decagonal = 0\n    for i in range(n):\n        decagonal += i * (i + 1)\n\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 10\n    else:\n        # Recursive case\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Use a loop to calculate the sum of the first n odd numbers\n    sum_odd_numbers = sum([i for i in range(1, n+1, 2)])\n    # Return the sum of the first n odd numbers\n    return sum_odd_numbers"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += i * i * (2 * i - 1)\n    return num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize variables to store the search result and index\n    result = False\n    index = -1\n    \n    # Loop through the array until we find the item or reach the end of the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # If we find the item, set the result to True and set the index to the current position\n            result = True\n            index = i\n            break\n    \n    # Return the result and index as a tuple\n    return (result, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique, \n    and False otherwise.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the unique set is equal to the length of the original set\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # convert the list to set to remove duplicate elements\n    unique_set = set(test_list)\n\n    # check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    #convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    #check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return len(unique_list) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = list(set(test_list))  # convert to set to get unique elements, and then back to list\n    if len(test_list) == len(test_list.union(*[set(x) for x in test_list[:-1]])):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Parameters:\n    nums1 (list): List of numbers.\n    nums2 (list): List of numbers.\n\n    Returns:\n    list: List of differences between corresponding elements of `nums1` and `nums2`.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must be of equal length.')\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n\n    # Initialize an empty list to hold the result\n    result = []\n\n    # Iterate over each element in the lists\n    for i in range(len(nums1)):\n        # Subtract the corresponding elements\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n        \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    freq = {}\n    for i in str(n):\n        freq[i] = freq.get(i, 0) + 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    for digit in freq:\n        if freq[digit] > n:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Initialize the frequency dictionary\n    freq = {}\n\n    # Loop through each digit of the number\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # If it is, increment its count\n            freq[digit] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            freq[digit] = 1\n\n    # Loop through the digits in the number again\n    for digit in str(n):\n        # Check if the frequency of the digit is greater than or equal to itself\n        if freq[digit] > digit:\n            # If it is, return False\n            return False\n\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    freq = [0] * 10\n    for i in str(n): \n        freq[int(i)] += 1\n\n    for i in range(10): \n        if freq[i] > n // 10 + 1: \n            return False\n\n    return True "
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        freq[d] = freq.get(d, 0) + 1\n\n    for d in freq:\n        if freq[d] > d:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Counting the frequency of each digit in the integer\n    digit_count = {}\n    for digit in str(n):\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    # Checking whether the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in digit_count:\n        if digit_count[digit] > digit:\n            return False\n    \n    # If no digit has more than one frequency in the integer, then the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    for digit in digits:\n        frequency = digits.count(digit)\n        if frequency > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    for d in freq:\n        if freq[d] > d:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        print(f\"{element} is present in the list.\")\n    else:\n        print(f\"{element} is not present in the list.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element as input and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    if len(lst) == 1 and lst[0] == element:\n        return True\n    else:\n        for i in range(len(lst)):\n            if lst[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all elements in the list are equal to the given element, otherwise it returns False.\n    '''\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(lst, ele):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == ele:\n        return check_element(lst[1:], ele)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Checks whether all items in a list are equal to a given element.\n\n    Args:\n        list (list): The list to check.\n        element (any): The element to compare to.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in list)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    # Use regular expressions to match the pattern\n    pattern = r'a.*b(.{2,3})'\n    match = re.match(pattern, text)\n\n    # Check if the pattern matches\n    if match:\n        # Get the matched substring\n        matched_substring = match.group(0)\n        print(matched_substring)\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]*b{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\w{2,3}b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        print(f\"The string '{text}' contains the pattern 'a(b{2,3})'.\")\n    else:\n        print(f\"The string '{text}' does not contain the pattern 'a(b{2,3})'.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?i).*a.*b.*(b){2,3}.*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b(.{2,3})')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Calculate the sum of the first n elements of the array\n    total_sum = sum(a[:n])\n    \n    # Initialize variables to store the maximum sum and its index\n    max_sum = total_sum\n    max_sum_index = 0\n    \n    # Iterate through the array and find the maximum sum of a contiguous array formed by repeating the given array k times\n    for i in range(n, len(a)):\n        current_sum = total_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_index = i\n        \n        # If the current sum is greater than k times the previous sum, update the total sum and start over with the first element\n        if current_sum > k*max_sum:\n            total_sum = a[0] + (current_sum - k*max_sum)\n            max_sum = current_sum\n            max_sum_index = 0\n    \n    return max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_a = [a[i] for i in range(n)]\n    mod_a.extend([a[0] for _ in range(k-1)])\n    max_sum = max(mod_a)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # repeat the given array k times and append to the end of modified_array\n    modified_array = []\n    for i in range(k):\n        modified_array.extend(a)\n\n    # initialize max_sum, current_sum and start_index\n    max_sum = float('-inf')\n    current_sum = sum(a)\n    start_index = 0\n\n    # loop through the modified_array and find the maximum sum of a contiguous subarray\n    for i in range(k, n):\n        current_sum = current_sum - a[start_index] + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - k + 1\n\n    # return the maximum sum of a contiguous subarray\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    def repeated_array(a, k):\n        \"\"\"\n        Return the modified array formed by repeating the given array k times.\n        \"\"\"\n        return a * k\n\n    def max_subarray_sum(arr):\n        \"\"\"\n        Return the maximum sum of a contiguous subarray in the given array.\n        \"\"\"\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n\n        return max_so_far\n\n    # Find the maximum sum of a contiguous subarray in the given array\n    max_sum_subarray = max_subarray_sum(a)\n\n    # Repeat the given array k times to form the modified array\n    modified_array = repeated_array(a, k)\n\n    # Find the maximum sum of a contiguous subarray in the modified array\n    max_sum_modified_array = max_subarray_sum(modified_array)\n\n    # Return the maximum sum of a contiguous subarray in the modified array\n    return max(max_sum_subarray, max_sum_modified_array)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_arr = []\n    for i in range(n):\n        for j in range(k):\n            if i == 0:\n                mod_arr.append(a[i])\n            else:\n                mod_arr.append(a[i])\n                mod_arr.append(a[i])\n            if i == n-1:\n                break\n    mod_arr.sort()\n    max_sum = mod_arr[-1]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if k == 1:\n        return max(sum(a), max(a))\n    if n == 1:\n        return max(a)\n    if k == n:\n        return max(sum(a), max(a))\n\n    # Initialize the maximum sum seen so far\n    max_sum = float('-inf')\n\n    # Iterate over the array\n    for i in range(n):\n        # If k elements are present, remove the i-th element and add the repeated array\n        if i < k:\n            continue\n        if i == k - 1:\n            temp_sum = sum(a[:i]) + sum(a[i:])\n        else:\n            temp_sum = sum(a[:i]) + a[i] + a[i-k]\n\n        # Update the maximum sum seen so far\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    This function finds the largest sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    '''\n\n    # create a new array by repeating the given array k times\n    repeated_array = [a[0]] * k\n    repeated_array.extend(a)\n\n    # initialize variables to keep track of the maximum subarray sum and its ending index\n    max_sum = repeated_array[0]\n    max_start = 0\n\n    # iterate through the modified array and find the maximum subarray sum ending at each index\n    for i in range(1, n):\n        current_sum = repeated_array[i] + repeated_array[i-k]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = i - k\n\n    return max_sum, max_start"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return 0\n\n    # Initialize the result and the current sum of the repeated array\n    result = 0\n    repeated_sum = 0\n\n    # Initialize the index of the repeated array\n    repeated_index = 0\n\n    # Iterate through the given array and keep updating the repeated array and the result\n    for i in range(n):\n        # If the current index is greater than or equal to k, reset the repeated array\n        if i >= k:\n            repeated_sum -= a[repeated_index]\n            repeated_index += 1\n\n        # Update the repeated array and the result\n        repeated_sum += a[i]\n        result = max(result, repeated_sum)\n\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize two variables to store the sum of the current subarray and the maximum sum of all subarrays\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Loop through the array, subtracting the first element and adding the k-th element to get the modified array\n    for i in range(1, n):\n        current_sum = max(a[i] - a[0], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a list to store the modified array\n    modified_array = [a] * k\n    \n    # Initialize variables for the maximum sum and its index\n    max_sum = modified_array[0]\n    max_index = 0\n    \n    # Loop through the modified array\n    for i in range(1, len(modified_array)):\n        # Get the sum of the modified array\n        modified_sum = modified_array[i] + sum(modified_array[i-k:i])\n        \n        # Update the maximum sum and its index\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n            max_index = i\n            \n    return max_sum, max_index"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        total = 0\n        i = 0\n        while i < n:\n            total += i ** 2\n            i += 2\n        return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_numbers = [2, 4, 6, 8, 10]\n    sum_of_squares = 0\n    for number in even_numbers:\n        sum_of_squares += number**2\n        if sum_of_squares >= n:\n            break\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    i = 0\n    while i < n:\n        total += i*i\n        i += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current even number to the sum\n        sum += i*i\n\n    # Return the sum of squares of even numbers\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of lists that have the maximum length.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n\n    Args:\n        list1 (list): A list of lists.\n\n    Returns:\n        list: The list of lists with the maximum length.\n    \"\"\"\n    lengths = [len(sublist) for sublist in list1]\n    max_length_list = [sublist for sublist in list1 if len(sublist) == max(lengths)]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths) or not max_lengths:\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # initializing an empty list to store the maximum length lists\n    max_lengths = []\n    # iterating over each list in the input list\n    for lst in list1:\n        # initializing a variable to keep track of the current maximum length\n        current_max = 0\n        # iterating over each element in the list\n        for elem in lst:\n            # updating the current maximum length if the current element is longer than the current maximum\n            if len(str(elem)) > current_max:\n                current_max = len(str(elem))\n        # appending the current maximum length to the list of maximum lengths\n        max_lengths.append(current_max)\n    # returning the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length of each sub-list.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(max(sublist, key=len))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an empty list to store the number of ways of painting the fence\n    ways = []\n    \n    # Initialize two empty lists to store the colors used in the previous and current positions\n    prev_colors = []\n    current_colors = []\n    \n    # Initialize a variable to keep track of the number of ways of painting the fence so far\n    count = 0\n    \n    # Iterate through all possible positions and check if they can be painted with the current color\n    for i in range(n):\n        \n        # Check if the current position can be painted with the current color\n        if current_colors.count(current_colors[-1]) == 0:\n            \n            # Add the number of ways of painting the fence to the list of ways\n            ways.append(count)\n            \n            # Increment the count\n            count += 1\n            \n            # Add the current color to the list of colors used in the current position\n            current_colors.append(current_colors[-1])\n            \n            # If the current position is adjacent to the previous position, add the current color to the list of colors used in the previous position\n            if i > 0 and current_colors[-1] == prev_colors[-1]:\n                prev_colors.append(current_colors[-1])\n            \n            # If the number of colors used in the current and previous positions is less than or equal to k, check if the current position can be painted with the next color\n            if len(prev_colors) <= k and len(current_colors) <= k:\n                count += count_no_of_ways(n-1, k)\n            \n            # Remove the last color from the list of colors used in the current position\n            current_colors.pop()\n            \n            # Remove the last color from the list of colors used in the previous position\n            prev_colors.pop()\n    \n    # Return the number of ways of painting the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a list to store the number of ways of painting each fence\n    ways = [0] * (n + 1)\n    \n    # Base case: if there are 0 colors, there is 1 way\n    ways[0] = 1\n    \n    # If there are at most 2 colors, there are 2 ways\n    for j in range(2, k + 1):\n        ways[1] = 2\n    \n    # Fill in the rest of the ways\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            ways[i] += ways[i - 1] + ways[i - j]\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    # create a 2D table to store the number of ways to paint the fence\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    # base cases\n    for i in range(n+1):\n        dp[i][0] = 1\n    for j in range(k+1):\n        dp[0][j] = 1\n        \n    # fill the table\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == k:\n                dp[i][j] = dp[i-1][k-1]\n            elif j == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n                \n    # return the number of ways to paint the fence\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize a matrix of size (n+1) x k, where each cell represents the number of ways to paint the fence with n posts and k colors using exactly one color.\n    ways = [[0] * (k+1) for i in range(n+1)]\n    # Base case: if n is 0, there are 1 ways to paint the fence with 0 posts and k colors.\n    ways[0][0] = 1\n    # Initialize variables to keep track of the colors used so far and the number of times the fence has been painted with different colors.\n    used_colors = []\n    painted_with_diff_colors = 0\n    # Fill in the matrix using dynamic programming.\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the i-th post has the same color as the j-th post, then there are two options: either the color is not used, or the color is used.\n            if ways[i-1][j] + ways[i-1][j-1] == ways[i][j-1]:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n            # If the i-th post has a different color than the j-th post, then there are two options: either the color is not used, or the color is used.\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1] + ways[i-1][j-2]\n            # Check if the fence has been painted with different colors.\n            if j not in used_colors:\n                painted_with_diff_colors = painted_with_diff_colors + 1\n                used_colors.append(j)\n    # Return the total number of ways to paint the fence.\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a boolean array to store the color status of each post\n    post_colors = [False] * (n + 1)\n\n    # Initialize the count of ways to 1\n    count = 1\n\n    # Check for 1 post\n    if n == 1:\n        if post_colors[1] == post_colors[2]:\n            count *= 2\n        return count\n\n    # Check for 2 posts\n    elif n == 2:\n        if post_colors[1] == post_colors[2] or post_colors[1] == not post_colors[2]:\n            count *= 2\n        return count\n\n    # Check for more than 2 posts\n    else:\n        # Initialize an array to store the number of ways to paint the fence for each post\n        ways_to_paint = [0] * (n + 1)\n\n        # Initialize the ways to paint the fence for the first two posts\n        ways_to_paint[1] = 1\n        ways_to_paint[2] = 1\n\n        # Loop through the remaining posts\n        for i in range(3, n + 1):\n            # Check if the colors are adjacent or not\n            if post_colors[i - 1] == post_colors[i - 2]:\n                ways_to_paint[i] = ways_to_paint[i - 1]\n            elif post_colors[i - 1] == not post_colors[i - 2]:\n                ways_to_paint[i] = ways_to_paint[i - 1] + ways_to_paint[i - 2]\n            else:\n                ways_to_paint[i] = ways_to_paint[i - 1] + ways_to_paint[i - 2] + ways_to_paint[i - 3]\n\n            # Check if the count is greater than the number of ways to paint the fence for the current post\n            if ways_to_paint[i] > count:\n                count = ways_to_paint[i]\n\n        # Return the final count\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for color in range(k):\n                if color == 0:\n                    if i < j:\n                        ways += 1\n                elif color == i-j:\n                    ways += 1\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if j == 0:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = 2\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 2*(i in [2, 3, 4] and 1 or 0)\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [1] * (n+1)\n    ways[0] = 0\n    ways[1] = 1\n    \n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            ways[i] += ways[j] * ways[i-j]\n    \n    if k > 2:\n        ways[k] = 0\n    \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through all possible pairs of colors in the fence\n    for i in range(k):\n        for j in range(i+1, k):\n            \n            # loop through all possible ways of painting the fence\n            for a in range(n+1):\n                for b in range(a+1, n+1):\n                    \n                    # check if the current pair of colors satisfies the condition\n                    if a <= i <= b <= j:\n                        count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return 1\n    elif n == 0:\n        return 0\n\n    # count the ways of painting the fence without adjacent posts having same color\n    no_of_ways = 0\n    for i in range(n-1):\n        no_of_ways += count_no_of_ways(n-1, k-1)\n\n    # count the ways of painting the fence with adjacent posts having same color\n    if n % 2 == 0:\n        no_of_ways += count_no_of_ways(n-2, k)\n\n    return no_of_ways"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    This function takes two integers n and m as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n//m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient.\n    \"\"\"\n    if m == 0:\n        print(\"Error: Division by zero!\")\n        return\n    else:\n        return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    else:\n        return find(n % m, m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    This function finds the quotient of two numbers rounded down to the nearest integer.\n    \"\"\"\n    if m == 0:\n        print(\"Error: Division by zero not allowed.\")\n        return None\n    else:\n        quotient = n // m\n        return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    # calculate the area of the triangle\n    a = math.sqrt(w*w + h*h)\n    \n    # find the cosine of the angle between the two sides\n    cos_angle = (w*w + h*h - a*a) / (2 * w * h)\n    \n    # find the cotangent of the angle between the two sides\n    cot_angle = 1 / math.tan(math.acos(cos_angle))\n    \n    # find the length of the third side\n    third_side = a * cot_angle\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the lengths of the two sides of a right angled triangle\n    and returns the length of the third side of the triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle using the formula: s = (a + b + c)/2\n    s = (w + h + math.sqrt(w**2 + h**2)) / 2\n    \n    # Use the Pythagorean theorem to calculate the length of the third side\n    third_side = math.sqrt(s**2 - w**2)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return 2*w*s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes the lengths of two sides of a right angled triangle, w and h,\n    and returns the length of the third side.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(w ** 2 + h ** 2 - s ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5\n    return math.sqrt(s*(w**2 - h**2))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n    w (float): the length of the first side\n    h (float): the length of the second side\n\n    Returns:\n    float: the third side of the right angled triangle\n    \"\"\"\n    c = (w**2 + h**2)**0.5\n    s = math.sin(math.radians(60))\n    return c * s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the square root of the semi-perimeter\n    c = math.sqrt(s)\n\n    # return the third side of the triangle\n    return w + 2 * c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    # Calculate the angle opposite of the side\n    angle_opposite = math.acos((w**2 + h**2 - s**2) / (2 * w * h))\n    # Calculate the third side using the law of cosines\n    third_side = s * math.sin(angle_opposite)\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_val:\n                max_val = item\n        elif isinstance(item, float):\n            if item > max_val:\n                max_val = item\n        elif isinstance(item, str):\n            if len(item) > len(str(max_val)):\n                max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    maxval = None\n    for val in listval:\n        if maxval is None or val > maxval:\n            maxval = val\n            \n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0] #initialize the max value with the first element of the list\n    \n    for val in listval:\n        if val > max_num:\n            max_num = val\n    \n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Error: Input is not a list.\")\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for val in listval[1:]:\n        if val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None # initialize the maximum value to None\n    for num in listval:\n        if max_num is None or num > max_num: # check if current number is greater than max number\n            max_num = num # if yes, update the maximum number\n    return max_num # return the maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for val in listval:\n        if maxval is None or val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], str):\n        return max(listval, key=len)\n    elif isinstance(listval[0], int):\n        return max(listval)\n    elif isinstance(listval[0], float):\n        return max(listval)\n    elif isinstance(listval[0], bool):\n        return max(listval)\n    else:\n        return None"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 2\n    total = 0\n    while div * div <= number:\n        if number % div == 0:\n            total += div\n        div += 1\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = [i for i in range(1, number+1) if number % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a variable to store the sum of divisors\n    total = 0\n    \n    # loop through the range of numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5) + 1):\n        # check if the input number is divisible by the current number in the range\n        if number % i == 0:\n            # add the current number to the sum of divisors\n            total += i\n    \n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n            while number % i == 0:\n                number //= i\n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    # Create a function to count inversions\n    def count_inversions(arr, low, high):\n        if low >= high:\n            return 0\n        i = low + 1\n        j = high\n        inv_count = 0\n        while i <= j:\n            while i <= j and arr[i] <= arr[low]:\n                i += 1\n            while i <= j and arr[j] >= arr[low]:\n                j -= 1\n            if i <= j:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += j - i + 1\n        return inv_count\n\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n\n    # Count inversions using the count_inversions function\n    inv_count = 0\n    for i in range(n - 1):\n        inv_count += count_inversions(arr, i, n - 1)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # sort the array in non-decreasing order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                arr[i], arr[j] = arr[j], arr[i] # swap elements\n    # count the inversions\n    count = 0\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                count += i - j\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Create an empty array to store the sorted array\n    sorted_arr = []\n    # Store the length of the array\n    n = len(arr)\n    # Sort the array using merge sort algorithm\n    merge_sort(arr, 0, n-1, sorted_arr)\n    # Count the inversions using counting sort algorithm\n    inv_count = count_inv(arr, sorted_arr)\n    return inv_count\n\n\ndef merge_sort(arr, l, r, sorted_arr):\n    if l < r:\n        mid = (l + r) // 2\n        merge_sort(arr, l, mid, sorted_arr)\n        merge_sort(arr, mid+1, r, sorted_arr)\n        merge(arr, l, mid, r, sorted_arr)\n\ndef merge(arr, l, mid, r, sorted_arr):\n    i = l\n    j = mid+1\n    k = 0\n    while i <= mid and j <= r:\n        if arr[i] <= arr[j]:\n            sorted_arr[k] = arr[i]\n            i += 1\n        else:\n            sorted_arr[k] = arr[j]\n            j += 1\n            inv_count += mid - i + 1\n        k += 1\n    while i <= mid:\n        sorted_arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= r:\n        sorted_arr[k] = arr[j]\n        j += 1\n        k += 1\n\ndef count_inv(arr, sorted_arr):\n    inv_count = 0\n    n = len(sorted_arr)\n    # Create an empty array to store the count of each element in the sorted array\n    count = [0] * (n+1)\n    # Count the inversions in the array using counting sort algorithm\n    for i in range(n):\n        count[sorted_arr[i]] += 1\n    for i in range(n-1, -1, -1):\n        count[i] += count[i+1]\n        if arr[i]!= sorted_arr[count[i]-1]:\n            inv_count += (count[i] - count[i+1])\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n\n    # Sort the array \n    arr.sort() \n\n    # Initialize inversions count \n    inv_count = 0 \n\n    # Traverse the array from both ends \n    i = 0 \n    j = n - 1 \n\n    while i < j: \n\n        # If current element is smaller than the next element \n        if arr[i] > arr[j]: \n\n            # Increment the inversions count \n            inv_count += j - i + 1 \n\n            # Partition the array \n            arr[i], arr[j] = arr[j], arr[i] \n\n            # Find the index of the last element smaller than the pivot \n            last_smaller = i - 1 \n\n            # Traverse the array from i+1 to j-1 and update the values \n            for k in range(i+1, j): \n                if arr[k] < arr[i]: \n                    last_smaller += 1 \n                    arr[last_smaller], arr[k] = arr[k], arr[last_smaller] \n\n            # Move the last smaller element to its correct position \n            arr[i], arr[last_smaller+1] = arr[last_smaller+1], arr[i] \n\n            # Move the pointers \n            i += 1 \n            j -= 1 \n\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Merge sort algorithm\n    def merge_sort(arr):\n        if n > 1:\n            mid = n//2\n            left_arr = arr[:mid]\n            right_arr = arr[mid:]\n            merge_sort(left_arr)\n            merge_sort(right_arr)\n            i = j = k = 0\n            while i < len(left_arr) and j < len(right_arr):\n                if left_arr[i] < right_arr[j]:\n                    arr[k] = left_arr[i]\n                    i += 1\n                else:\n                    arr[k] = right_arr[j]\n                    j += 1\n                k += 1\n            while i < len(left_arr):\n                arr[k] = left_arr[i]\n                i += 1\n                k += 1\n            while j < len(right_arr):\n                arr[k] = right_arr[j]\n                j += 1\n                k += 1\n\n    # Counting inversions using merge sort algorithm\n    merge_sort(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-i-1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize variables to keep track of inversion count and indices\n    inv_count = 0\n    i = 0\n    j = len(arr) - 1\n\n    # Iterate through the array from both ends\n    while i < j: \n        # If the current element is less than the next element, increment the count and move towards the left\n        if arr[i] > arr[j]: \n            inv_count += j - i \n            i += 1\n        # If the current element is greater than the next element, move towards the right\n        else: \n            j -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # If array has less than 2 elements, return 0 inversions\n    if n < 2:\n        return 0\n\n    # If array has only 2 elements, return 0 inversions\n    if n == 2:\n        if arr[0] > arr[1]:\n            return 1\n        else:\n            return 0\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize left, mid and right pointers\n    left = 0\n    mid = 1\n    right = n - 1\n\n    # Count inversions and return the result\n    inv_count = 0\n    while mid <= right:\n        # If arr[left] > arr[mid], increment inv_count and move left pointer\n        if arr[left] > arr[mid]:\n            inv_count += mid - left\n            left = mid + 1\n        # If arr[mid] > arr[right], decrement inv_count and move right pointer\n        elif arr[mid] > arr[right]:\n            inv_count += right - mid\n            right = mid - 1\n        # If arr[left] <= arr[mid] and arr[mid] <= arr[right], move mid pointer\n        else:\n            mid += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # initialize variables\n    n = len(arr)\n    inv_count = 0\n\n    # merge sort algorithm to sort the array in ascending order\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    # merge two sorted arrays into one sorted array\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    # sort the array\n    sorted_arr = merge_sort(arr)\n\n    # return the inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n            elif arr[j] > arr[i]:\n                inv_count += j - i\n                \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i - j + 1 # Add inversions count\n                j = i # Reset j to start from the last element of the inner loop\n        \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list.\n\n    Parameters:\n    lst (list): A list to flatten.\n\n    Returns:\n    list: A flattened list.\n    \"\"\"\n    res = []\n    for item in lst:\n        if type(item) == list:\n            res.extend(flatten_list(item))\n        else:\n            res.append(item)\n    return res"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    if isinstance(list1, list):\n        for item in list1:\n            if isinstance(item, list):\n                flatten_list(item)\n            else:\n                yield item\n    else:\n        yield list1"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n\n    for item in stdata:\n        for j in range(len(item)):\n            if j == 0:\n                max_sum[0] = max(max_sum[0], item[j])\n            else:\n                max_sum[j] = max(max_sum[j], max_sum[j-1] + item[j])\n\n    max_sum_list = []\n    for i in range(len(max_sum)):\n        max_sum_list.append(max_sum[i])\n\n    max_sum_list = sorted(max_sum_list, reverse=True)\n\n    return max_sum_list[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each product\n    max_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for product, price in stdata:\n        # update the max aggregate for the product\n        max_dict[product] = max(max_dict[product], price)\n\n    # return the maximum aggregate\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for item in stdata:\n        freq_dict[item[0]] += 1\n\n    # Find the maximum frequency among all the items in the list\n    max_freq = max(freq_dict.values())\n\n    # Calculate the maximum aggregate by multiplying the maximum frequency by the item\n    max_aggregate = max_freq * max(stdata, key=lambda x: x[0])[0]\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int) # defaultdict to store aggregate counts\n\n    for item in stdata:\n        # extract aggregate from item\n        aggregate = item[0]\n        # update aggregate count in dictionary\n        aggregate_dict[aggregate] += 1\n\n    # find maximum aggregate count\n    max_count = max(aggregate_dict.values())\n\n    # find all aggregates with maximum count\n    max_aggs = [k for k, v in aggregate_dict.items() if v == max_count]\n\n    # calculate maximum aggregate\n    max_agg = max(max_aggs)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the maximum aggregate for each student\n    max_aggs = defaultdict(int)\n\n    # Iterate over the list of tuples and update the maximum aggregate for each student\n    for student, credit in stdata:\n        max_aggs[student] = max(max_aggs[student], credit)\n\n    # Return the maximum aggregate for each student\n    return dict(max_aggs)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the maximum aggregate for each team\n    max_aggs = defaultdict(int)\n\n    # iterate over the list of tuples and update the maximum aggregate for each team\n    for team, agg in stdata:\n        max_aggs[team] = max(max_aggs[team], agg)\n\n    # return the maximum aggregate for each team\n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each employee\n    employee_max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max aggregate for each employee\n    for name, age, salary in stdata:\n        employee_max_aggr[name] = max(employee_max_aggr[name], salary)\n\n    # Find the maximum aggregate from all employees\n    max_aggr = max(employee_max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Loop through the list of tuples and update the maximum aggregate for each customer\n    for c, a in stdata:\n        max_aggr[c] = max(max_aggr[c], a)\n\n    # Find the maximum aggregate and return it\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for day, amt in stdata:\n\n        # Calculate the maximum aggregate for the current day\n        max_agg[day] = max(max_agg[day], amt)\n\n    # Get the maximum aggregate for each day and return the result\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item\n    item_counts = defaultdict(int)\n    for item, count in stdata:\n        item_counts[item] += count\n    \n    # calculate the maximum aggregate\n    max_aggregate = 0\n    for count in item_counts.values():\n        max_aggregate = max(max_aggregate, count)\n    \n    return max_aggregate"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    def binary_seq(a, b):\n        while b:\n            if b & 1:\n                a = a + b\n            b = b >> 1\n        return a\n    \n    def check_sum(seq, n):\n        return sum(seq[:n]) + sum(seq[-n:])\n    \n    count = 0\n    for i in range(2**n):\n        seq = binary_seq(i, 0)\n        if check_sum(seq, n) == i:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert binary sequence to integer\n        seq = int(bin(i)[2:], 2)\n        # Calculate the sum of first n bits\n        first_n_sum = sum(seq[:n])\n        # Calculate the sum of last n bits\n        last_n_sum = sum(seq[-n:])\n        # If sum of first n bits is same as sum of last n bits, increment count\n        if first_n_sum == last_n_sum:\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize a counter\n    count = 0\n\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n): \n        # Extract the first n bits\n        seq1 = bin(i)[2:n+2]\n\n        # Extract the last n bits\n        seq2 = bin(i)[-n:]\n\n        # Check if the sum of first n bits and last n bits are same\n        if int(seq1) == int(seq2): \n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    # initialize a list to store the count of each binary sequence\n    count = [0] * (2**n) \n    \n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # convert the binary number to an integer\n        binary = bin(i)[2:]\n        \n        # find the sum of first n bits and last n bits\n        sum_first_n = int(binary[:n])\n        sum_last_n = int(binary[-n:])\n        \n        # if the sum of first n bits is same as the sum of last n bits, increment the count\n        if sum_first_n == sum_last_n:\n            count[i] += 1\n    \n    # return the count of each binary sequence\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    # Initialize variables to keep track of count and the last n bits of the sum\n    count = 0\n    last_n_bits_sum = 0\n    last_n_bits = [0] * n\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2 ** n):\n        # Convert the binary sequence to a list of integers\n        binary_sequence = list(bin(i)[2:])\n\n        # Calculate the sum of the first n bits\n        first_n_bits_sum = sum(binary_sequence[:n])\n\n        # Calculate the sum of the last n bits\n        last_n_bits_sum = sum(binary_sequence[-n:])\n\n        # If the sums are equal, increment the count\n        if first_n_bits_sum == last_n_bits_sum:\n            count += 1\n\n        # Update the last n bits for the next iteration\n        for j in range(n - 1, -1, -1):\n            last_n_bits[j] = binary_sequence[j]\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2 ** n - 1, 2 ** n + 1):\n        first_half = bin(i)[2:]\n        last_half = bin(i)[-2:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        num = bin(i)[2:].zfill(2*n)\n        if sum(num[:n]) == sum(num[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = i // 2**n\n        last = i % 2**n\n        if sum(bin(first)[2:].zfill(n)) == sum(bin(last)[2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[-n:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        if i == i & (2**(n-1)):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth to 0\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # If the value is a dictionary, recursively call the function\n        if isinstance(d[key], dict):\n            # Increment depth by 1\n            depth += 1\n        # If the value is a list, recursively call the function for each element in the list\n        elif isinstance(d[key], list):\n            for elem in d[key]:\n                if isinstance(elem, dict):\n                    # Increment depth by 1\n                    depth += 1\n    # Return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    depth = max(depth, dict_depth(item) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to 1\n    depth = 1\n    \n    # loop through all the keys in the dictionary\n    for key in d:\n        # check if the value of the key is a dictionary\n        if isinstance(d[key], dict):\n            # if it is, increment the depth by 1\n            depth += 1\n            # recursively call the function with the nested dictionary\n            depth = max(depth, dict_depth(d[key]))\n        # if the value of the key is not a dictionary, decrement the depth by 1\n        else:\n            depth -= 1\n            \n    # return the maximum depth found\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 0\n    while stack:\n        depth += 1\n        current = stack.pop()\n        for k, v in current.items():\n            if isinstance(v, dict):\n                stack.append(v)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Find the element to be rotated\n    element = arr[index]\n\n    # Rotate the array\n    for i in range(rotations):\n        # Initialize variables for new array and current index\n        new_arr = []\n        current_index = 0\n\n        # Iterate through the array and shift elements to new array\n        for j in range(len(arr)):\n            # Calculate the new index of the element\n            new_index = (current_index + j) % len(arr)\n\n            # Add the element to the new array\n            new_arr.append(arr[new_index])\n\n            # Shift the current index to the next position\n            current_index = new_index\n\n        # Update the original array with the new array\n        arr = new_arr\n\n    # Find the rotated element's index after rotating the array\n    rotated_index = (index - rotations + len(arr)) % len(arr)\n\n    # Return the rotated element\n    return arr[rotated_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize an empty dictionary to store the frequencies of each element in the array\n    freq = {}\n    # Find the frequency of each element in the array\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a list to store the frequencies of each element after rotations\n    after_rotations = []\n\n    # Find the frequencies of each element after rotations\n    for i in range(len(ranges)):\n        start = ranges[i][0]\n        end = ranges[i][1]\n        for j in range(start, end + 1):\n            after_rotations.append(freq[j])\n\n    # Find the sum of all the frequencies of elements after rotations\n    total_after_rotations = sum(after_rotations)\n\n    # Calculate the percentage of the sum that corresponds to the index\n    percentage = (total_after_rotations / len(arr)) * 100\n\n    # Initialize a list to store the indices of elements after rotations that have a frequency greater than the index\n    indices = []\n\n    # Find the indices of elements after rotations that have a frequency greater than the index\n    for i in range(len(after_rotations)):\n        if after_rotations[i] > index:\n            indices.append(i)\n\n    # Calculate the sum of the frequencies of elements after rotations that have a frequency greater than the index\n    sum_indices = sum(indices)\n\n    # Calculate the percentage of the sum that corresponds to the index among the indices with a frequency greater than the index\n    percentage_indices = (sum_indices / len(indices)) * 100\n\n    # If the percentage of the sum that corresponds to the index is less than or equal to the percentage of the sum that corresponds to the index among the indices with a frequency greater than the index, return the index\n    if percentage <= percentage_indices:\n        return index\n\n    # Otherwise, find the index of the element after rotations that has a frequency greater than the index and return that index\n    for i in range(len(indices)):\n        if after_rotations[indices[i]] > index:\n            return indices[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Function to rotate an array\n    def rotate_array(arr, n):\n        arr[:] = arr[n:] + arr[:n]\n\n    # Find the index of the element to be rotated\n    element_index = arr.index(arr[index])\n\n    # Calculate the number of rotations needed to reach the given index\n    rotations_needed = sum(range_value > rotations for range_value in ranges)\n\n    # Perform the rotations needed to reach the given index\n    for i in range(rotations_needed):\n        rotate_array(arr, 1)\n\n    # Return the element at the given index\n    return arr[element_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # initialize count and start value\n    count = 0\n    start_value = arr[index]\n\n    # loop through the rotations\n    for i in range(rotations) :\n\n        # increment count\n        count += 1\n\n        # calculate the end value\n        if count == ranges[index] :\n            end_value = arr[index]\n        else :\n            end_value = arr[(index+count) % len(arr)]\n\n        # check if the start and end values match\n        if start_value == end_value :\n            return end_value\n\n        # update the start value\n        start_value = end_value\n\n    # if the loop completes without finding a match, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # find the number of elements in the array\n    n = len(arr)\n\n    # find the index where the element to be found lies after rotations\n    after_rotations = (index + rotations) % n\n\n    # calculate the distance from the element to be found to its final position after rotations\n    distance = (after_rotations - index) % n\n\n    # find the element at the final position after rotations\n    final_element = (arr[index] + distance) % n\n\n    # return the element at the final position after rotations\n    return arr[final_element]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a number of rotations and an index.\n    It finds the element at the given index after rotating the array by the given number of rotations.\n\n    Parameters:\n    arr (list): An array of integers.\n    ranges (list): A list of ranges, where each range is a tuple of two integers (start and end).\n    rotations (int): A positive integer representing the number of rotations to be applied.\n    index (int): A positive integer representing the index at which the element is to be found.\n\n    Returns:\n    The element at the given index after rotating the array by the given number of rotations.\n\n    Raises:\n    ValueError: If any of the input values are invalid or if the index is out of range.\n    '''\n\n    if rotations < 1:\n        raise ValueError(\"Rotations must be a positive integer.\")\n\n    if not all(isinstance(r, tuple) and len(r) == 2 and all(isinstance(i, int) for i in r) for r in ranges):\n        raise ValueError(\"All ranges must be tuples of two integers.\")\n\n    if not all(0 <= r[0] < len(arr) and 0 <= r[1] < len(arr) for r in ranges):\n        raise ValueError(\"All range start and end indices must be within the array bounds.\")\n\n    if index < 0 or index >= len(arr):\n        raise ValueError(\"Index must be a positive integer and less than the length of the array.\")\n\n    for r in ranges:\n        if index < r[0]:\n            return arr[index]\n        elif index >= r[1]:\n            index -= r[1] - r[0]\n            return arr[index]\n\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in a list of numbers arr, a list of ranges of numbers and a list of rotations, and an index number.\n    It returns the element at the index after the specified number of rotations.\n\n    :param arr: list of numbers\n    :param ranges: list of ranges of numbers, e.g., [(1, 5), (6, 10), (11, 15)]\n    :param rotations: list of rotations, e.g., [1, 2, 3]\n    :param index: the index of the element to be found\n    :return: the element at the index after the specified number of rotations\n    \"\"\"\n\n    # Initialize the element at the index to be found\n    element = arr[index]\n\n    # Iterate through the rotations and ranges\n    for r in ranges:\n        for i in range(len(r)):\n            # If the range overlaps with the current rotation, rotate the element\n            if r[i] <= index <= r[i + 1]:\n                element = arr[(r[i] + r[i + 1]) // 2]\n\n    # Find the element at the index after all rotations have been applied\n    for i in range(len(rotations)):\n        element = arr[(index + rotations[i]) % len(arr)]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, rotation ranges and number of rotations, and returns the element\n    at the given index after rotating the array by the number of rotations.\n    \n    Args:\n        arr: A list or array of integers.\n        ranges: A list of tuples where each tuple represents a range of rotations.\n        rotations: An integer indicating the number of rotations to be applied.\n        index: An integer representing the index of the element to be found.\n    \n    Returns:\n        A tuple containing the element at the given index after rotating the array by the number of rotations.\n    \"\"\"\n    # Check if the index is within the range of the array\n    if index < 0 or index >= len(arr):\n        return None\n    \n    # Find the starting position of the element after rotating the array\n    start_pos = index\n    for i in range(len(ranges)):\n        if start_pos >= ranges[i][0] and start_pos < ranges[i][1]:\n            start_pos -= ranges[i][0] - start_pos\n    \n    # Find the element at the given index after rotating the array\n    for i in range(rotations):\n        start_pos = (start_pos + len(arr) - 1) % len(arr)\n    \n    # Return the element at the given index after rotating the array\n    return arr[start_pos]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the total number of rotations\n    total_rotations = sum(rotations)\n\n    # calculate the sum of the positions of the elements to be rotated\n    sum_of_elements = sum(arr[i] * rotations[i] for i in range(len(arr)))\n\n    # calculate the sum of the positions of the elements after rotating them\n    rotated_sum = ((total_rotations % len(arr)) * arr[index]) + sum(arr[i] * rotations[i] for i in range(index) + range(index+rotations[index]))\n\n    # calculate the element to be found\n    element_to_find = (rotated_sum - sum_of_elements) // arr[index]\n\n    # find the element at the given index\n    result = arr[(index + element_to_find) % len(arr)]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes a list, list of tuples representing ranges and rotations, and an index as input.\n    It finds the element at the given index after the specified number of rotations.\n    '''\n    count = 0\n    for i in range(len(ranges)):\n        if count == rotations:\n            return arr[ranges[i][0]:ranges[i][1]]\n        count += 1\n    return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    result = []\n\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n\n    if len(result) == 0:\n        return None\n    elif len(result) == 1:\n        return result[0]\n    else:\n        return result[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'\\bp[a-z]+'\n    matches = re.findall(pattern, words)\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-zA-Z]*$')  # regex pattern to match starting with p\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if re.match(\"^p\", words[i]):\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0:2]\n    else:\n        return \"No words starting with 'p' were found.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words = [word for word in words if re.search(pattern, word)]\n    return words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    # Compute the maximum sum of increasing subsequence for all prefixes of length up to index\n    for i in range(1, index + 1):\n        prefix_sum = 0\n        for j in range(i):\n            prefix_sum += a[j]\n            dp[i] = max(dp[i], prefix_sum + dp[j])\n\n    # Check if the kth element is also present in the maximum sum of increasing subsequence\n    if k > index:\n        # Find the kth element in the subsequence\n        k_sum = 0\n        k_index = 0\n        for i in range(index - 1, -1, -1):\n            k_sum += a[i]\n            if k_sum >= k:\n                k_index = i\n                break\n        # Add the maximum sum of increasing subsequence for the prefix until the kth element\n        k_prefix_sum = 0\n        for i in range(k_index, index):\n            k_prefix_sum += a[i]\n            dp[k_index + 1] = max(dp[k_index + 1], dp[i] + k_prefix_sum)\n\n    # Find the maximum sum of increasing subsequence including the kth element\n    for i in range(n):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Base case\n    if index == n:\n        return 0\n    \n    # Find the maximum sum of increasing subsequence till i\n    max_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    \n    # If a[i] is greater than k, then a[i] can be included in the subsequence\n    if a[index] > k:\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index+1, k-a[index]))\n        \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize an array to store the maximum sum of increasing subsequences\n    dp = [0] * (n + 1)\n    # Initialize an array to store the ending index of each increasing subsequence\n    end_index = [0] * (n + 1)\n\n    # Initialize the maximum sum of increasing subsequence as 0\n    max_sum = 0\n    # Initialize the ending index of the maximum sum as -1\n    max_end_index = -1\n\n    # Traverse through the array from 1 to n\n    for i in range(1, n + 1):\n        # If the element at the current index is greater than the kth element\n        if a[i - 1] > k:\n            # Initialize a variable to store the sum of the current element and the maximum sum of increasing subsequence ending before the current index\n            temp_sum = a[i - 1] + dp[index - 1]\n            # If the sum is greater than the maximum sum\n            if temp_sum > max_sum:\n                # Update the maximum sum and ending index of the increasing subsequence\n                max_sum = temp_sum\n                max_end_index = index\n            # If the ending index of the increasing subsequence before the current index is greater than the ending index of the maximum sum\n            if end_index[index - 1] > end_index[end_index[index - 1]]:\n                # Update the ending index of the current increasing subsequence to be equal to the ending index of the maximum sum\n                end_index[i] = end_index[end_index[index - 1]]\n            # If the ending index of the increasing subsequence before the current index is equal to the ending index of the maximum sum\n            else:\n                # Update the ending index of the current increasing subsequence to be equal to the ending index of the increasing subsequence before the current index\n                end_index[i] = end_index[index - 1]\n            # Move the index to the next index of the increasing subsequence\n            index += 1\n        else:\n            # If the element at the current index is less than or equal to the kth element\n            # Update the ending index of the current increasing subsequence to be equal to the current index\n            end_index[i] = index\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n    max_sum = max_sum_increasing_subseq(a, n, index-1, k)\n    if k > index:\n        max_sum += a[k]\n    return max(max_sum, a[index])"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # Base case\n    if index == 0:\n        return 0\n\n    # Initialize variables\n    max_sum = max_so_far = a[0]\n    sum_so_far = a[0]\n\n    # Traverse from prefix till i-1\n    for i in range(1, index):\n        sum_so_far += a[i]\n\n        # Update maximum sum if current sum is greater\n        if sum_so_far > max_sum:\n            max_sum = sum_so_far\n\n        # Update maximum sum if current sum is greater than or equal to k\n        if sum_so_far >= k:\n            max_sum = sum_so_far\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    current_sum = 0\n    max_sum = float('-inf')\n    kth_element = float('-inf')\n    for i in range(index, n):\n        # Update the sum if the current element is greater than the kth element\n        if a[i] > kth_element:\n            current_sum = a[i]\n            kth_element = a[i]\n        # Update the sum if the current element is greater than the current sum and the current element is greater than the (i-1)th element\n        elif a[i] > current_sum and a[i] > a[i-1]:\n            current_sum = a[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum and the current element is greater than the (i-1)th element\n        elif current_sum > max_sum and a[i] > a[i-1]:\n            max_sum = current_sum\n    # Return the maximum sum including the kth element\n    return max_sum + kth_element"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum of increasing subsequence and its starting index\n    max_sum = float('-inf')\n    start_index = None\n    # Traverse through the array from index to the end\n    for i in range(index, n):\n        # If the value of a[i] is greater than the value of k, add the value of a[i] to the sum and update the maximum sum and starting index if necessary\n        if a[i] > k:\n            # Add the value of a[i] to the sum\n            sum_of_seq = a[i] + max_sum\n            # If the sum is greater than the current maximum sum of increasing subsequence, update the maximum sum and starting index\n            if sum_of_seq > max_sum:\n                max_sum = sum_of_seq\n                start_index = i - index + 1\n            # If the sum is equal to the current maximum sum of increasing subsequence, continue traversing the array\n            elif sum_of_seq == max_sum:\n                # If the starting index is earlier than the current starting index, update the starting index\n                if i - index + 1 < start_index:\n                    start_index = i - index + 1\n    # If the maximum sum of increasing subsequence is less than zero, return -1\n    if max_sum < 0:\n        return -1\n    # If the maximum sum of increasing subsequence is not found, return -2\n    if start_index is None:\n        return -2\n    # Return the maximum sum of increasing subsequence and its starting index\n    return max_sum, start_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    if a[k] <= a[index]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1))\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (n + 1)\n    max_sum = float('-inf')\n    for i in range(1, n + 1):\n        if i < index:\n            dp[i] = dp[i - 1]\n        elif i == index:\n            if a[i - 1] < a[k - 1]:\n                dp[i] = dp[i - 1] + a[i - 1]\n            else:\n                dp[i] = dp[i - 1]\n        else:\n            if a[i - 1] < a[k - 1]:\n                dp[i] = max(dp[i - 1] + a[i - 1], dp[i - 1])\n            else:\n                dp[i] = dp[i - 1]\n    for i in range(n, index - 1, -1):\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return float('-inf')\n\n    if index == 0:\n        return 0\n\n    if index == k:\n        return a[k-1]\n\n    if index < k:\n        dp = [0] * (k-index+1)\n        dp[0] = 0\n\n        for i in range(1, k-index+1):\n            dp[i] = max(a[k-i] + dp[i-1], dp[i-1])\n\n        return max(dp)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex[0]):\n        return None\n    else:\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex[m][n] = 'x'\n        return tuple(new_tuplex[m])"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    This function takes a tuplex and a tuple of dimensions m and n and returns a colon of the original tuplex.\n    '''\n    # create a new tuplex with the same dimensions as the original tuplex\n    new_tuplex = deepcopy(tuplex)\n    # calculate the starting indices for each dimension\n    start_indices = []\n    for i in range(len(tuplex)):\n        start_indices.append(i*n)\n    # calculate the ending indices for each dimension\n    end_indices = []\n    for i in range(len(tuplex)):\n        end_indices.append((i+1)*n-1)\n    # iterate over each dimension and copy the colon to the new tuplex\n    for i in range(len(start_indices)):\n        new_tuplex[i] = tuplex[start_indices[i]:end_indices[i]+1]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    colon = colon[m:m+n]\n    return deepcopy(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[i],)\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple of tuples and a row and column\n    index as input and returns a tuple containing the specified\n    element of the given row and column in the tuple.\n\n    Args:\n        tuplex (tuple): A tuple of tuples.\n        m (int): The index of the row.\n        n (int): The index of the column.\n\n    Returns:\n        tuple: A tuple containing the specified element of the given row and column in the tuple.\n    \"\"\"\n    if isinstance(tuplex, tuple):\n        new_tuplex = deepcopy(tuplex)\n        if m < len(new_tuplex) and n < len(new_tuplex[m]):\n            return new_tuplex[m][n]\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    colontup = deepcopy(tuplex)\n    \n    # Loop through the tuple and replace each element with a colon\n    for i in range(m):\n        colontup = (colontup[0:i] + (':' * n) + colontup[i+1:])\n    \n    return colontup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    result = deepcopy(tuplex)\n    result = tuple(list(tuplex)[:m] + [tuplex[m]] + list(tuplex)[m+1:n+1])\n    return result"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # copy the tuple to avoid changes to original\n    t = deepcopy(tuplex)\n\n    # get the number of elements in the tuple\n    n = len(t)\n\n    # get the number of rows and columns in the colon\n    rows = n // m\n    cols = n // rows\n    if n % rows!= 0:\n        cols += 1\n\n    # create a new list to store the colon\n    colon = []\n\n    # iterate over the rows of the colon\n    for i in range(rows):\n        # create a new list to store the columns of the row\n        row = []\n        for j in range(cols):\n            # get the index of the column in the original tuple\n            index = i * rows + j\n            # add the value of the column to the row\n            row.append(t[index])\n        # add the row to the colon\n        colon.append(tuple(row))\n\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[i:i+m] for i in range(0,len(tuplex),n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(n):\n        result.append(tuplex[i][m])\n    return tuple(result)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # Sort the input lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum and minimum products\n    max_product = min_product = float('-inf')\n\n    # Loop through the specified number of products\n    for i in range(N):\n        # Calculate the product of the first factor from each list\n        product1 = nums1[i] * nums2[i]\n\n        # Update the maximum and minimum products\n        max_product = max(max_product, product1)\n        min_product = min(min_product, product1)\n\n    # Return the maximum and minimum products\n    return max_product, min_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize variables to store the maximum value and its index\n    max_value = 0\n    max_index = 0\n    \n    # Iterate over the specified number of pairs\n    for i in range(N):\n        # Calculate the product of the largest elements from each list\n        product = nums1[0] * nums2[0]\n        \n        # If the product is larger than the current maximum, update the maximum and its index\n        if product > max_value:\n            max_value = product\n            max_index = i\n            \n        # Remove the largest elements from both lists\n        nums1.pop(0)\n        nums2.pop(0)\n        \n        # If the number of elements in the first list is less than the specified number of pairs, append the smallest element to the first list\n        if len(nums1) < N:\n            nums1.append(nums1[-1])\n        \n        # If the number of elements in the second list is less than the specified number of pairs, append the smallest element to the second list\n        if len(nums2) < N:\n            nums2.append(nums2[-1])\n            \n    # Return the maximum value and its index\n    return max_value, max_index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the maximum product of two lists\n    max_product = 1\n    for i in range(len(nums1)):\n        max_product *= max(nums1[i], nums2[i])\n    # Calculate the largest product for each combination of two factors\n    largest_products = [0] * N\n    largest_products[0] = max(nums1[0] * nums2[0], nums1[1] * nums2[1])\n    for i in range(1, N):\n        largest_products[i] = max(largest_products[i-1], nums1[i] * nums2[i-1], nums2[i] * nums1[i-1])\n    # Calculate the product of the largest products and divide by the maximum product\n    return largest_products[0] / max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the required number of products\n    for i in range(N):\n        # Calculate the product of the first factor\n        product1 = nums1[i]\n\n        # Calculate the product of the second factor\n        product2 = nums2[i]\n\n        # Check if the product is greater than the previous result\n        if product1 * product2 > result[-1] if result else 0:\n            result.append(product1 * product2)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in decreasing order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize two variables to store the maximum product and its index\n    max_product = float('-inf')\n    max_product_index = 0\n    \n    # Iterate over the first N elements of each list and calculate the product of each element with all the elements of the other list\n    for i in range(N):\n        current_product = nums1[i] * nums2[i]\n        if current_product > max_product:\n            max_product = current_product\n            max_product_index = i\n    \n    return max_product_index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the maximum product of two lists\n    max_product = max(nums1[i] * nums2[j] for i in range(len(nums1)) for j in range(len(nums2)))\n\n    # Initialize the variables for the largest products\n    largest_product1 = max_product\n    largest_product2 = 0\n    largest_product3 = 0\n\n    # Find the largest products of all three factors in the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product1 = nums1[i] * nums2[j]\n            product2 = nums1[i] * largest_product2\n            product3 = largest_product1 * nums2[j]\n\n            # Update the variables for the largest products\n            if product1 > largest_product1:\n                largest_product3 = largest_product2\n                largest_product2 = largest_product1\n                largest_product1 = product1\n            elif product2 > largest_product2:\n                largest_product3 = largest_product2\n                largest_product2 = product2\n            elif product3 > largest_product3:\n                largest_product3 = product3\n\n    # Return the largest products\n    return largest_product1, largest_product2, largest_product3"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    num1_factors = []\n    num2_factors = []\n    \n    # Loop through all possible combinations of two factors from nums1 and nums2\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            product = 1\n            for k in range(i):\n                product *= nums1[k]\n            for l in range(j):\n                product *= nums2[l]\n            largest_products.append(product)\n            \n            if i > 1:\n                num1_factors.append(nums1[i-2])\n            else:\n                num1_factors.append(1)\n            \n            if j > 1:\n                num2_factors.append(nums2[j-2])\n            else:\n                num2_factors.append(1)\n    \n    # Find the indices of the largest products in the `largest_products` list\n    largest_indices = sorted(range(len(largest_products)), key=lambda x: largest_products[x], reverse=True)[:N]\n    \n    # Create a list of tuples containing the factors and the largest products\n    factors_products = []\n    for i in range(len(num1_factors)):\n        factors_products.append((num1_factors[i], largest_products[largest_indices[i]]))\n        factors_products.append((num2_factors[i], largest_products[largest_indices[i]]))\n    \n    return factors_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the products and their indices\n    product = []\n    index = []\n\n    # Loop through each number in the list\n    for num in nums1:\n        # Initialize variables to store the products and their indices\n        num_product = []\n        num_index = []\n\n        # Loop through each number in the second list\n        for j in nums2:\n            # Calculate the product of the two numbers\n            product_num = num * j\n\n            # Check if the product is the largest so far\n            if len(num_product) < N:\n                num_product.append(product_num)\n                num_index.append(nums2.index(j))\n            elif product_num > num_product[0]:\n                # Remove the largest products from the list of products\n                num_product.pop(0)\n                num_index.pop(0)\n\n                # Add the current product to the list of products\n                num_product.append(product_num)\n                num_index.append(nums2.index(j))\n\n        # Store the products and their indices in lists\n        product += num_product\n        index += num_index\n\n    # Sort the list of products by decreasing order\n    product.sort(reverse=True)\n\n    # Return the largest products and their indices\n    return product, index"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1 (list): List of integers\n    nums2 (list): List of integers\n    N (int): Number of largest products to find\n\n    Returns:\n    list: List of integers representing the largest N largest products found in the two input lists\n    \"\"\"\n\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Find the minimum value that will ensure that max(max1, max2) is divisible by N\n    min_mult = min(max1, max2) // N\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Loop through each number in the first list and find the products with each number in the second list\n    for num1 in nums1:\n        # Loop through each number in the second list and find the largest products\n        for num2 in nums2:\n            # If the product is greater than or equal to min_mult, add it to the list of largest products\n            product = num1 * num2\n            if product >= min_mult:\n                largest_products.append(product)\n\n    # Sort the largest_products list in descending order\n    largest_products.sort(reverse=True)\n\n    # Return the first N largest products from the list\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the maximum product of the first N elements from each list\n    max_product1 = max(nums1[:N] * nums2[:N])\n    max_product2 = max(nums1[-N:] * nums2[-N:])\n\n    # Calculate the minimum product of the last N elements from each list\n    min_product1 = min(nums1[-N:] * nums2[-N:])\n    min_product2 = min(nums1[-N:] * nums2[:-N])\n\n    # Calculate the minimum and maximum products that can be obtained from the two lists\n    max_product = max(max_product1, max_product2)\n    min_product = min(min_product1, min_product2)\n\n    # Return the minimum and maximum products\n    return min_product, max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:   \n        return a  \n    else:   \n        return b  "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters in that string.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the index of the leftmost unset bit\n    i = 0\n    while n & (1 << i) == 0:\n        i += 1\n\n    # Set the bit at the leftmost unset bit to 1\n    n |= 1 << i\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in an integer.\n\n    Args:\n        n (int): An integer to set the left most unset bit in.\n\n    Returns:\n        int: An integer with the left most unset bit set to 1.\n    \"\"\"\n    # Initialize the leftmost unset bit as 1\n    left_most_unset_bit = 1\n\n    # While the rightmost unset bit is unset, shift the leftmost unset bit to the right\n    while ((n & (1 << left_most_unset_bit)) == 0):\n        left_most_unset_bit <<= 1\n\n    # Return the modified integer with the leftmost unset bit set to 1\n    return n | (1 << left_most_unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer as input and returns the set bit to the left of the leftmost unset bit.\n    If there is no unset bit to the left, the function returns the original integer.\n    '''\n    while n > 0 and (n & 1) == 0:  # loop while the number is even\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Given a non-negative integer n, return the number with the leftmost unset bit set to 1.\n    If no bit is set to 1, return n unchanged.\n    \"\"\"\n    # Loop through the binary representation of n and check if the first bit is unset (0)\n    for i in range(len(bin(n)[2:])):\n        if bin(n)[2:].count('0') == i:\n            # Set the i-th bit to 1\n            n = n | (1 << i)\n            # Stop looping if we find a set bit\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the leftmost unset bit in a given number n.\n    \"\"\"\n    # Loop through all the bits from the rightmost set bit to the leftmost bit\n    while n & 1 == 0:\n        n >>= 1\n    \n    # Set the leftmost unset bit to 1 and return the updated value\n    return n | 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Find the rightmost set bit using bitwise operators\n    rightmost_set_bit = n & -(n & -n)\n    \n    # Find the number of set bits to the left of the rightmost set bit\n    num_set_bits = 0\n    while rightmost_set_bit:\n        num_set_bits += 1\n        rightmost_set_bit &= rightmost_set_bit - 1\n    \n    # Set the left most unset bit to 1\n    n |= (1 << num_set_bits)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer n.\n    \"\"\"\n    if n == 0:\n        return n\n    mask = 1 << (32 - int(math.log2(abs(n))))\n    if n & mask:\n        return n\n    else:\n        return n | mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of unset bits to the number of bits in n\n    unset_bit_count = bin(n).count('0')\n    \n    # Loop until the unset bit count becomes zero\n    while unset_bit_count > 0:\n        # Find the index of the leftmost unset bit\n        leftmost_unset_bit = bin(n).rfind('0')\n        \n        # Set the leftmost unset bit to 1\n        n = n | (1 << leftmost_unset_bit)\n        \n        # Decrement the count of unset bits\n        unset_bit_count -= 1\n        \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a binary number.\n    '''\n    # Convert the binary number to a string\n    binary_string = bin(n)[2:]\n\n    # Find the index of the leftmost unset bit\n    left_most_unset_bit_index = binary_string.find('1')\n\n    # If the leftmost unset bit is found, set it to 1\n    if left_most_unset_bit_index!= -1:\n        binary_string = binary_string[:left_most_unset_bit_index] + '1' + binary_string[left_most_unset_bit_index+1:]\n\n    # Convert the modified string back to a number\n    modified_number = int(binary_string, 2)\n\n    # Return the modified number\n    return modified_number"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize an empty list to store the unset bits\n    unset_bits = []\n\n    # Iterate through the bits of the given number in reverse order\n    for i in range(31, -1, -1):\n        # If the bit is unset, append it to the unset_bits list\n        if n & (1 << i) == 0:\n            unset_bits.append(i)\n\n    # If no unset bits are found, return 0\n    if len(unset_bits) == 0:\n        return 0\n\n    # Set the leftmost unset bit in the given number to 1\n    return n | (1 << unset_bits[0])"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*r**2*h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone with radius r and height h.\n    '''\n    # Formula for volume of a cone\n    V = math.pi * r**2 * h / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h / 3\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area_cone = math.pi * r * r\n    volume_cone = area_cone * h\n    return volume_cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone using the formula V = (1/3) * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n\n    Parameters:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    volume (float): volume of the cone\n    '''\n    volume = math.pi * r ** 2 * h / 3\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0 # initialize highest power of 2 to 0\n\n    while n > 1: # loop while n is greater than 1\n        highest += 1 # increment highest power of 2\n        n >>= 1 # shift n one bit to the right\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    # initialize highest power of 2 found\n    highest_power_of_2 = 1\n    \n    # loop through all possible powers of 2\n    for i in range(1, n):\n        # if the current power of 2 is less than the current highest power of 2, update the highest power of 2\n        if i < highest_power_of_2:\n            highest_power_of_2 = i\n    \n    # return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 1\n    while highest_power <= n:\n        highest_power <<= 1\n    return highest_power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Convert n to binary representation and find its length\n    binary = bin(n)[2:]\n    length = len(binary)\n\n    # Initialize the highest power of 2 found so far\n    highest = 1\n\n    # Iterate through the binary representation of n\n    for i in range(length):\n        # If the current bit is 1, set highest to 2*highest\n        if binary[i] == '1':\n            highest *= 2\n\n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 0:\n        n = n >> 1  # Shift right by 1 bit at a time until n is 0 or 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variable to store the highest power of 2 that is less than or equal to n\n    highest_pow2 = 0\n    \n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a power of 2\n        if i == 1:\n            highest_pow2 = 0\n        elif i == 2:\n            highest_pow2 = 1\n        elif i == 4:\n            highest_pow2 = 2\n        elif i == 8:\n            highest_pow2 = 3\n        elif i == 16:\n            highest_pow2 = 4\n        elif i == 32:\n            highest_pow2 = 5\n        elif i == 64:\n            highest_pow2 = 6\n        elif i == 128:\n            highest_pow2 = 7\n        elif i == 256:\n            highest_pow2 = 8\n        elif i == 512:\n            highest_pow2 = 9\n        elif i == 1024:\n            highest_pow2 = 10\n        elif i == 2048:\n            highest_pow2 = 11\n        elif i == 4096:\n            highest_pow2 = 12\n        elif i == 8192:\n            highest_pow2 = 13\n        elif i == 16384:\n            highest_pow2 = 14\n        elif i == 32768:\n            highest_pow2 = 15\n        elif i == 65536:\n            highest_pow2 = 16\n        elif i == 131072:\n            highest_pow2 = 17\n        elif i == 262144:\n            highest_pow2 = 18\n        elif i == 524288:\n            highest_pow2 = 19\n        elif i == 1048576:\n            highest_pow2 = 20\n        elif i == 2097152:\n            highest_pow2 = 21\n        elif i == 4194304:\n            highest_pow2 = 22\n        elif i == 8388608:\n            highest_pow2 = 23\n        elif i == 16777216:\n            highest_pow2 = 24\n        elif i == 33554432:\n            highest_pow2 = 25\n        elif i == 67108864:\n            highest_pow2 = 26\n        elif i == 134217728:\n            highest_pow2 = 27\n        elif i == 268435456:\n            highest_pow2 = 28\n        elif i == 536870912:\n            highest_pow2 = 29\n        elif i == 1073741824:\n            highest_pow2 = 30\n        elif i == 2147483648:\n            highest_pow2 = 31\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest_pow2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 found\n    highest_power_of_2 = 0\n    \n    # Loop through all possible powers of 2 from 1 to 32\n    for power in range(1, 33):\n        # Check if the current power is less than or equal to n\n        if power <= n:\n            # If it is, update the highest power of 2 found\n            highest_power_of_2 = power\n    \n    # Return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Define the function to check if a number is a power of 2\n    def is_power_of_2(num):\n        return (num & (num - 1)) == 0\n\n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # Check if the number is a power of 2\n        if is_power_of_2(i):\n            # Return the highest power of 2 found\n            return i"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n as input and returns then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number using Binet's formula.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    a = 0\n    b = 2\n\n    for _ in range(n):\n        a, b = b, a + b\n\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = 2\n        current_lucas = 1\n        for i in range(2, n+1):\n            lucas = (prev_lucas + current_lucas) % 10**9\n            prev_lucas = current_lucas\n            current_lucas = lucas\n        return current_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Initialize the first two numbers of the sequence\n    a, b = 2, 1\n\n    # Loop through the remaining numbers\n    for i in range(2, n+1):\n        # Calculate the next number in the sequence\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a, b = b, c\n\n    # Return then'th number in the sequence\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = [2, 1]\n        for i in range(2, n):\n            lucas.append(lucas[i-1] + lucas[i-2])\n        return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the nth lucas number.\n    '''\n    lucas = [0, 2]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(lst, fmt):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [fmt.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i*len(l2)+j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    \n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if l3:\n            sub_dict = convert_list_dictionary(l1[i], l2[i], l3[i])\n        else:\n            sub_dict = None\n        result[key] = sub_dict if sub_dict else value\n        \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the results\n    results = {}\n    \n    # Iterate over the input lists and append the values to the result dictionary\n    for i, item in enumerate(l1):\n        results[item] = l2[i]\n        results[item].append(l3[i])\n        \n    return results"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): List of strings representing the values for the first column.\n        l2 (list): List of strings representing the values for the second column.\n        l3 (list): List of strings representing the values for the third column.\n\n    Returns:\n        dict: A nested dictionary that maps each value in the input lists to a column name.\n    '''\n    # Define a dictionary to store the resulting nested dictionary\n    result = {}\n\n    # Loop through the input lists and add their values to the result dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value1 = l2[i]\n        value2 = l3[i]\n        result[key] = {\n            'Column 1': value1,\n            'Column 2': value2\n        }\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n    *lists: A variable number of lists to be converted to nested dictionary.\n\n    Returns:\n    A list of nested dictionaries.\n    \"\"\"\n    # Initialize an empty list to store the nested dictionaries\n    nested_list = []\n\n    # Loop through each input list\n    for input_list in lists:\n        # Loop through each item in the input list\n        for item in input_list:\n            # If the item is a dictionary, add it to the nested list\n            if isinstance(item, dict):\n                nested_list.append(item)\n            # If the item is not a dictionary, convert it to a dictionary with the item as the key\n            elif isinstance(item, (list, tuple, set)):\n                nested_list.append({item[0]: convert_list_dictionary(*item[1:])})\n            # If the item is neither a dictionary nor a list, convert it to a dictionary with the item as the key\n            else:\n                nested_list.append({item: None})\n\n    return nested_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2[i])):\n            result[l1[i]][l2[i][j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function converts more than one list to a nested dictionary.\n    '''\n    result = {}\n    for arg in args:\n        for item in arg:\n            if isinstance(item, list):\n                if item[0] not in result:\n                    result[item[0]] = {}\n                result[item[0]][item[1]] = item[2]\n            elif isinstance(item, tuple):\n                if len(item)!= 3:\n                    raise ValueError(\"Invalid input list.\")\n                if item[0] not in result:\n                    result[item[0]] = {}\n                result[item[0]][item[1]] = item[2]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Iterate through the three lists and add the values to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n        \n    # Return the nested dictionary\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a dictionary with keys as l1, l2, and l3 and values as empty lists\n    d = {l1:[], l2:[], l3:[]}\n    # Loop through each list and append its elements to corresponding list in d\n    for i in l1:\n        d[l1].append(i)\n    for i in l2:\n        d[l2].append(i)\n    for i in l3:\n        d[l3].append(i)\n    # Return the nested dictionary d\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the result\n    result = {}\n    \n    # Loop through the first list\n    for i, item in enumerate(l1):\n        # Create a new dictionary to store the values of the current item\n        sub_dict = {}\n        \n        # Loop through the second list to find the keys for the current item\n        for j, key in enumerate(l2):\n            # If the key matches the current item's value, add it to the sub-dictionary\n            if item == l2[j]:\n                sub_dict[l3[j]] = l1[i]\n        \n        # Add the sub-dictionary to the main dictionary with the key from the first list\n        result[l1[i]] = sub_dict\n        \n    # Return the final result dictionary\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 5:\n        return n\n    else:\n        sum1 = get_max_sum(n//2) + n\n        sum2 = get_max_sum(n//3) + n\n        sum3 = get_max_sum(n//4) + n\n        sum4 = get_max_sum(n//5) + n\n        return max(sum1, sum2, sum3, sum4)\n\nprint(get_max_sum(6)) # Output: 34"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 28\n    elif n == 9:\n        return 36\n    elif n == 10:\n        return 45\n    elif n == 11:\n        return 55\n    elif n == 12:\n        return 66\n    elif n == 13:\n        return 78\n    elif n == 14:\n        return 91\n    elif n == 15:\n        return 105\n    elif n == 16:\n        return 120\n    elif n == 17:\n        return 136\n    elif n == 18:\n        return 153\n    elif n == 19:\n        return 171\n    elif n == 20:\n        return 190\n    elif n == 21:\n        return 210\n    elif n == 22:\n        return 231\n    elif n == 23:\n        return 253\n    elif n == 24:\n        return 276\n    elif n == 25:\n        return 300\n    elif n == 26:\n        return 325\n    elif n == 27:\n        return 351\n    elif n == 28:\n        return 378\n    elif n == 29:\n        return 406\n    elif n == 30:\n        return 435\n    elif n == 31:\n        return 465\n    elif n == 32:\n        return 496\n    elif n == 33:\n        return 528\n    elif n == 34:\n        return 561\n    elif n == 35:\n        return 595\n    elif n == 36:\n        return 630\n    elif n == 37:\n        return 666\n    elif n == 38:\n        return 703\n    elif n == 39:\n        return 741\n    elif n == 40:\n        return 780\n    elif n == 41:\n        return 820\n    elif n == 42:\n        return 861\n    elif n == 43:\n        return 903\n    elif n == 44:\n        return 946\n    elif n == 45:\n        return 990\n    elif n == 46:\n        return 1035\n    elif n == 47:\n        return 1081\n    elif n == 48:\n        return 1128\n    elif n == 49:\n        return 1176\n    elif n == 50:\n        return 1225\n    elif n == 51:\n        return 1275\n    elif n == 52:\n        return 1326\n    elif n == 53:\n        return 1378\n    elif n == 54:\n        return 1431\n    elif n == 55:\n        return 1485\n    elif n == 56:\n        return 1540\n    elif n == 57:\n        return 1596\n    elif n == 58:\n        return 1653\n    elif n == 59:\n        return 1711\n    elif n == 60:\n        return 1770\n    elif n == 61:\n        return 1830\n    elif n == 62:\n        return 1891\n    elif n == 63:\n        return 1953\n    elif n == 64:\n        return 2016\n    elif n == 65:\n        return 2080\n    elif n == 66:\n        return 2145\n    elif n == 67:\n        return 2211\n    elif n == 68:\n        return 227"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    elif n == 2:\n        return 4\n    \n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Check for base cases\n    if n <= 2:\n        return n\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    if n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n    \n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is 1, return n\n    if n == 1:\n        return n\n    \n    # Recursive case: calculate sum of f(n/2), f(n/3), f(n/4) and f(n/5) and return the maximum sum\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    elif n == 2:\n        return 5\n    \n    elif n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n + 1"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Define the function to find the maximum sum using the given equation\n    def helper(n, i):\n        # Base case: if n is 1, then the maximum sum is n\n        if n == 1:\n            return n\n        \n        # Recursive case: if n is greater than 1, then the maximum sum is the maximum between the following\n        # cases:\n        # 1. n is even\n        #    - If i is 0, then the maximum sum is 2n\n        #    - If i is 1, then the maximum sum is 3n\n        # 2. n is odd\n        #    - If i is 0, then the maximum sum is 2n + 1\n        #    - If i is 1, then the maximum sum is 3n + 1\n        \n        if n % 2 == 0:\n            if i == 0:\n                return 2*n\n            else:\n                return 3*n\n        else:\n            if i == 0:\n                return 2*n + 1\n            else:\n                return 3*n + 1\n    \n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of the maximum sum using the given equation\n        current_sum = helper(n, i)\n        \n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = [item]\n        elif len(item) == max_length:\n            longest_list.append(item)\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = None\n    \n    # iterate through the list and find the maximum length\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n    \n    # return the list with maximum length\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as an input and returns the list with the maximum length.\n    '''\n    # Initialize two variables to store the maximum length and the list with maximum length\n    max_length = 0\n    max_list = []\n    # Iterate over each element of the input list and check if its length is greater than max_length\n    for elem in input_list:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_list = [elem]\n        elif len(elem) == max_length:\n            max_list.append(elem)\n    # Return the list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    lengths = [len(item) for item in input_list]\n    max_length = max(lengths)\n    max_list = [item for item in input_list if len(item) == max_length]\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and checks if it contains no duplicates.\n    \"\"\"\n    unique_tup = set(test_tup)\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate through the tuple\n    for elem in test_tup:\n        # check if the element is already in the set\n        if elem in unique_set:\n            # if it is, return False\n            return False\n        # otherwise, add the element to the set\n        else:\n            unique_set.add(elem)\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements of the tuple\n    unique_set = set(test_tup)\n    # Check if the set is empty\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is the same as the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # check if tuple is empty\n    if not test_tup:\n        return True\n    # check if tuple has duplicate elements\n    elif len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to eliminate duplicates\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # initialize an empty set\n    seen = set()\n    # loop through the tuple elements\n    for elem in test_tup:\n        # if the element is already in the set, return False\n        if elem in seen:\n            return False\n        # otherwise, add the element to the set\n        seen.add(elem)\n    # if we reach this point, the set should be empty, so return True\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    for c in str1:\n        freq[c] = freq.get(c, 0) + 1\n    \n    # find the first character with a frequency of 1\n    for c in freq:\n        if freq[c] == 1:\n            return c\n    \n    # if no character has frequency 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # iterate over the dictionary and find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            char_set.remove(char)\n    return char_set.pop()"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    # Iterate through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Find the first non-repeated character by iterating through the dictionary and returning the first character with count 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n    \n    # find the first non-repeated character by looping through the dictionary\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(string):\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # iterate through the dictionary and find the first non-repeating character\n    for char in string:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in it.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeating character by iterating through the dictionary and keeping track of the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first non-repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n\n    :param str1: A string containing only lowercase alphabets.\n    :return: The first non-repeated character in the string or None if no such character exists.\n    \"\"\"\n\n    # Create a dictionary to store the character counts\n    char_count = {}\n\n    # Loop through the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.search(regex, string):\n        return False\n    \n    for i in range(len(string)):\n        if string[i]!= string[-(i+1)]:\n            return False\n    \n    return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    return match"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not string.startswith(string[0]) or not string.endswith(string[0]):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if string starts and ends with the same character\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_list = [a, b, c]\n    sorted_list = sorted(a_list)\n    midpoint = len(a_list) // 2\n    if len(a_list) % 2 == 0:\n        return (sorted_list[midpoint-1] + sorted_list[midpoint]) / 2\n    else:\n        return sorted_list[midpoint]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2] + sorted_numbers[n//2-1]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # calculate the middle index\n    middle_index = len(numbers) // 2\n\n    # if the length of the list is odd, then the middle number is the median\n    if len(numbers) % 2!= 0:\n        return numbers[middle_index]\n\n    # if the length of the list is even, then the median is the average of the two middle numbers\n    else:\n        # calculate the indices of the middle two numbers\n        middle_one = middle_index - 1\n        middle_two = middle_index\n\n        # calculate the middle numbers\n        middle_one_number = numbers[middle_one]\n        middle_two_number = numbers[middle_two]\n\n        # calculate the average of the two middle numbers\n        return (middle_one_number + middle_two_number) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # calculate the length of the array\n    length = len(numbers)\n\n    # determine whether the length is odd or even\n    if length % 2 == 0:\n        # if the length is even, take the average of the middle two numbers\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        # if the length is odd, take the middle number\n        median = numbers[length // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    a_sorted = sorted([a, b, c])\n\n    # Find the middle number of the sorted list\n    middle = len(a_sorted) // 2\n\n    # Calculate the median\n    if len(a_sorted) % 2 == 0:\n        median = (a_sorted[middle - 1] + a_sorted[middle]) / 2\n    else:\n        median = a_sorted[middle]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # calculate the length of the sorted numbers\n    length = len(sorted_numbers)\n    # check if the length of the sorted numbers is odd or even\n    if length % 2 == 0:\n        # if the length is even, return the average of the two middle numbers\n        middle_index = length // 2\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # if the length is odd, return the middle number\n        middle_index = length // 2\n        median = sorted_numbers[middle_index]\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = sorted([a, b, c])\n    # Calculate the length of the list\n    length = len(num_list)\n    # Determine the median based on the length of the list\n    if length % 2 == 0:\n        # If the length of the list is even, calculate the average of the middle two numbers\n        median = (num_list[length//2 - 1] + num_list[length//2]) / 2\n    else:\n        # If the length of the list is odd, return the middle number\n        median = num_list[length//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n\n    if n % 2 == 0:\n        median = (numbers[n//2-1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers\n    nums = sorted([a, b, c])\n    \n    # if the length of the sorted list is odd, return the middle number\n    if len(nums) % 2 == 1:\n        return nums[1]\n    \n    # if the length of the sorted list is even, return the average of the two middle numbers\n    else:\n        mid1 = nums[1]\n        mid2 = nums[2]\n        return (mid1 + mid2) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits of each number\n    digit_sums = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of characters\n        digits = [int(d) for d in str(num)]\n        # Use a list comprehension to add up the digits in the list\n        digit_sum = sum(digits)\n        # Add the digit sum to the list of digit sums\n        digit_sums.append(digit_sum)\n\n    # Return the list of digit sums\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_digits = sum(int(d) for d in str(num))\n        digit_sum += num_digits\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        # convert the number to a string and split into digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits\n        total += sum(digits)\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        num_digits = 0\n        while num > 0:\n            num_digits += num % 10\n            num //= 10\n        sum_of_digits += num_digits\n    return sum_of_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(max(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]) & 1)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # perform bitwise xor on the tuples\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple to be the length of the shorter tuple\n    result = (len(test_tup1) if len(test_tup1) < len(test_tup2) else len(test_tup2))\n    \n    # iterate over the elements of each tuple and perform the bitwise xor operation\n    for i in range(len(result)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n        \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # XOR the two tuples using the bitwise XOR operator\n    xor_tup = tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    return xor_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if tuple(i) in freq_dict:\n            freq_dict[tuple(i)] += 1\n        else:\n            freq_dict[tuple(i)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if (item not in freq_dict):\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n\n    unique_tuples = []\n    for key, value in freq_dict.items():\n        if value == 1:\n            unique_tuples.append(key)\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    from collections import Counter\n    freq_dict = Counter(test_list)\n    unique_freq = freq_dict.most_common(1)[0][1]\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store unique tuples\n    unique_tuples = {}\n    # Loop through the list\n    for i in test_list:\n        # Check if the tuple is already in the dictionary\n        if i in unique_tuples:\n            # Increment the count for the tuple\n            unique_tuples[i] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            unique_tuples[i] = 1\n    # Return the total count of unique tuples\n    return sum(unique_tuples.values())"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 0\n        freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize result tuple\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Append the elementwise addition of the corresponding elements of the two tuples\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Using nested loops to iterate through both the tuples and add corresponding elements\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize an empty list to store the result\n    result_list = []\n    # iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # extract the corresponding element from the second tuple\n        elem = test_tup2[i]\n        # add the two elements together and append the result to the result list\n        result_list.append(test_tup1[i] + elem)\n    # return the result list as the final result\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Find the maximum length of the tuples\n    max_length = max([len(tup) for tup in [test_tup1, test_tup2]])\n\n    # Initialize an empty result list\n    result_list = []\n\n    # Iterate over all indexes of the maximum length\n    for i in range(max_length):\n\n        # Extract the elements of the two input tuples at the current index\n        tup1_elem = test_tup1[i] if i < len(test_tup1) else None\n        tup2_elem = test_tup2[i] if i < len(test_tup2) else None\n\n        # Add the two elements and add to the result list\n        result = tup1_elem + tup2_elem if tup1_elem is not None and tup2_elem is not None else None\n        result_list.append(result)\n\n    # Return the final result list\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Iterate through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element is a tuple\n        if isinstance(test_tup1[i], tuple):\n            # Recursively add the sub-tuple with the corresponding index in the second tuple\n            test_tup1[i] = add_nested_tuples(test_tup1[i], test_tup2[i])\n        # Add the current element with the corresponding element in the second tuple\n        else:\n            test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row1 = test_tup1[i]\n        row2 = test_tup2[i]\n        new_row = []\n        for j in range(len(row1)):\n            new_row.append(row1[j] + row2[j])\n        result.append(new_row)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    total_sum = []\n    for i in range(len(test_tup1)):\n        sub_sum = []\n        for j in range(len(test_tup2[i])):\n            sub_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        total_sum.append(tuple(sub_sum))\n    return total_sum"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to hold the result\n    result = []\n    # loop through the elements of each tuple\n    for i in range(len(test_tup1)):\n        # if the current element in the first tuple is a tuple, recursively call the function on it\n        if isinstance(test_tup1[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # add the current element to the result list\n            result.append(test_tup1[i] + test_tup2[i])\n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples should have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function finds the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        print(f\"{tuple1} exists within the tuple.\")\n    else:\n        print(f\"{tuple1} does not exist within the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two tuples as input: tuplex and tuple1. \n    The function checks whether an element exists within tuple1.\n    If it does, the function returns the index of that element.\n    If it doesn't, the function returns None.\n    '''\n    for i in range(len(tuplex)): \n        if tuplex[i] in tuple1: \n            return i\n    return None"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Checks whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    This function takes two tuples as input and checks whether the element \n    exists within the second tuple.\n\n    Args:\n    tuplex: the tuple we want to search for the element in\n    tuple1: the second tuple\n\n    Returns:\n    True if the element exists in the second tuple, False otherwise\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex: \n        if x in tuple1: \n            return True \n    return False \n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even\"\n    else:\n        return \"The parity of the number is odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            parity += 1\n    if parity % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x == 0: \n        return True\n    else: \n        num_str = str(x) \n        odd_sum = 0 \n        for digit in num_str: \n            if int(digit) % 2!= 0: \n                odd_sum += int(digit) \n        if odd_sum == 0: \n            return True\n        else: \n            return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even\")\n    else: \n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The parity of the number is even.\" \n    else: \n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    def digits(n):\n        if n == 0:\n            return []\n        else:\n            return [n % 10] + digits(n // 10)\n\n    def next_bigger(digits):\n        for i in range(len(digits)):\n            if digits[i] < len(digits) - 1:\n                digits[i], digits[digits[i] + 1] = digits[digits[i] + 1], digits[i]\n                return int(\"\".join(str(d) for d in digits))\n        return None\n\n    digits_n = digits(n)\n    if digits_n[-1] > 0:\n        digits_n[-1] -= 1\n        n = int(\"\".join(str(d) for d in digits_n))\n    else:\n        digits_n[-1] = 9\n        n = next_bigger(digits_n)\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    \n    # Find the index of the maximum element in the number\n    max_index = max(range(len(num)), key=lambda i: num[i])\n    \n    # Create a new number by swapping the maximum element with the last element\n    new_num = num[0:max_index] + num[max_index+1:]\n    \n    # Convert the new number back to an integer\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    # Remove all the zeros in the number\n    n = ''.join(filter(str.isdigit, str(n)))\n    # Reverse the number\n    n = n[::-1]\n    # Find the position of the largest digit\n    max_pos = n.index(max(n))\n    # Reverse the part of the number to the left of the largest digit\n    n = n[:max_pos] + n[max_pos+1:][::-1]\n    # Combine the number and the reversed part to form the next bigger number\n    return int(n + str(max(n)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    digits = digits[::-1]\n    result = 0\n    for i in range(len(digits)):\n        result += digits[i] ** (len(digits) - i - 1)\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n\n    # Move all digits to the right of the maximum digit to the left of it\n    digits = digits[:max_index] + digits[max_index + 1:]\n\n    # Join the digits back into a string\n    result = ''.join(digits)\n\n    # Convert the result back to an integer\n    result = int(result)\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # convert the number to a string\n    num_str = str(n)\n\n    # initialize variables\n    new_num = \"\"\n    found_bigger = False\n\n    # loop through each digit of the number\n    for i in range(len(num_str)):\n\n        # get the digit\n        digit = num_str[i]\n\n        # if the digit is smaller than 9, increment it and add it to the new_num string\n        if int(digit) < 9:\n            new_num += str(int(digit) + 1)\n\n        # if the digit is 9, set found_bigger to True and break the loop\n        else:\n            found_bigger = True\n            break\n\n    # if no bigger number was found, return None\n    if not found_bigger:\n        return None\n\n    # convert the new_num string to an integer\n    new_num = int(new_num)\n\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Find the length of the number string\n    length = len(num_str)\n\n    # Initialize a new list to store the digits of the next number\n    next_digits = []\n\n    # Iterate over the digits of the number string in reverse order\n    for i in range(length-1, -1, -1):\n\n        # Check if the current digit is a 9 or a 0\n        if num_str[i] == '9' or num_str[i] == '0':\n\n            # If it is a 9, add a 1 to the next list and continue\n            if num_str[i] == '9':\n                next_digits.append(1)\n                continue\n\n            # If it is a 0, add a 1 to the next list and stop iterating\n            else:\n                next_digits.append(0)\n                break\n\n        # If the current digit is not a 9 or a 0, add it to the next list\n        else:\n            next_digits.append(int(num_str[i]))\n\n    # Convert the next digits list to an integer\n    next_num = int(''.join(map(str, next_digits)))\n\n    # Add 1 to the next number and return the result\n    return next_num + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)  # convert the number to a string\n    n_list = list(n)  # convert the string to a list of digits\n\n    # reverse the list of digits\n    n_list.reverse()\n\n    # find the first number that is greater than n\n    greater_num = ''\n    for i in range(len(n_list)):\n        if n_list[i] > int(n_list[i]):\n            greater_num += str(int(n_list[i]) + 1)\n            break\n\n    # if there is no such number, return the original number\n    if not greater_num:\n        return n\n\n    # join the digits of the greater number to form the next bigger number\n    n = ''.join(greater_num)\n\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a string and split it into a list of digits\n    digits = list(str(n))\n    \n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # convert the sorted list of digits back to a string\n    result = ''.join(digits)\n    \n    # convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize variables to keep track of the position of each digit\n    max_digit_pos = 0\n    min_digit_pos = 0\n    \n    # Loop through the string and find the positions of the maximum and minimum digits\n    for i in range(len(num_str)):\n        if num_str[i] > num_str[max_digit_pos]:\n            max_digit_pos = i\n        elif num_str[i] < num_str[min_digit_pos]:\n            min_digit_pos = i\n    \n    # Create the next bigger number by swapping the digits at the minimum and maximum positions\n    next_bigger = int(num_str[:min_digit_pos] + num_str[max_digit_pos] + num_str[min_digit_pos+1:])\n    \n    return next_bigger"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k to store the k smallest elements from the first array\n    min_heap = []\n\n    # Create a min heap of size k to store the k smallest elements from the second array\n    min_heap2 = []\n\n    # Initialize the length of the two heaps to 0\n    len_heap1 = 0\n    len_heap2 = 0\n\n    # Initialize the length of the resulting array to 0\n    result = []\n\n    # Iterate through both arrays and add the smallest elements to the two heaps\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len_heap1 < k and len_heap2 < k:\n                if nums1[i] < nums2[j]:\n                    heapq.heappush(min_heap, (-nums1[i], i, j))\n                    len_heap1 += 1\n                elif nums1[i] > nums2[j]:\n                    heapq.heappush(min_heap2, (-nums2[j], j, i))\n                    len_heap2 += 1\n            else:\n                if nums1[i] < nums2[j]:\n                    if len_heap1 < k:\n                        heapq.heappush(min_heap, (-nums1[i], i, j))\n                        len_heap1 += 1\n                    elif len_heap1 == k and -nums1[i] < min_heap[0][0]:\n                        heapq.heappop(min_heap)\n                        heapq.heappush(min_heap, (-nums1[i], i, j))\n                        len_heap1 += 1\n                else:\n                    if len_heap2 < k:\n                        heapq.heappush(min_heap2, (-nums2[j], j, i))\n                        len_heap2 += 1\n                    elif len_heap2 == k and -nums2[j] < min_heap2[0][0]:\n                        heapq.heappop(min_heap2)\n                        heapq.heappush(min_heap2, (-nums2[j], j, i))\n                        len_heap2 += 1\n\n    # Iterate through the two heaps and add the k smallest pairs to the result array\n    while len_heap1 > 0 and len_heap2 > 0:\n        if -min_heap[0][0] > -min_heap2[0][0]:\n            result.append((nums1[min_heap[0][1]], nums2[min_heap[0][2]]))\n            heapq.heappop(min_heap)\n            len_heap1 -= 1\n        else:\n            result.append((nums1[min_heap2[0][1]], nums2[min_heap2[0][2]]))\n            heapq.heappop(min_heap2)\n            len_heap2 -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    min_heap = []\n\n    # Initialize min_heap with first element of each array\n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, 0))\n\n    for num2 in nums2:\n        # If there are enough pairs in the heap, pop the minimum element\n        while len(pairs) < k and len(min_heap) > 0:\n            pair = heapq.heappop(min_heap)\n            pairs.append(pair)\n\n        # If there is still space in the heap, add the minimum element of each array\n        if len(pairs) < k:\n            min_heap.append((-num2, len(pairs)))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap to store pairs with the smallest element\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1 + num2, (num1, num2))\n            heapq.heappush(pairs, pair)\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n    \n    # return the k smallest pairs\n    result = []\n    for i in range(k):\n        pair = heapq.heappop(pairs)\n        result.append(pair[1])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Sort both arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the heap with the first element of each array\n    pq = [(nums1[0], nums2[0])]\n\n    # Initialize the result list\n    result = []\n\n    # Iterate until the heap is not empty and the result list has k elements\n    while pq and len(result) < k:\n        # Extract the minimum value from the heap\n        val1, val2 = heapq.heappop(pq)\n\n        # If the result list is not empty and the sum of the current minimum pair is greater than the maximum sum of the result list, then skip this pair\n        if result and result[-1][0] + val1 + val2 > result[-1][1]:\n            continue\n\n        # Add the current pair to the result list\n        result.append((val1, val2))\n\n        # If the current pair has a larger value on the second array, then add the current pair to the heap with the second element of the first array and the second element of the current pair\n        if val2 < nums2[-1]:\n            heapq.heappush(pq, (val1, nums2[-1]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a list of tuples containing the indices and the values of nums1 and nums2.\n    data = [(i,j) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Sort the data list based on the first element of each tuple.\n    data.sort(key=lambda x: x[0])\n\n    # Create a min heap of size k.\n    heap = []\n\n    # Initialize the count variable and the index variable.\n    count = 0\n    i = 0\n\n    # Iterate through the sorted data list.\n    while count < k:\n        # If the current index is less than the length of nums1, add it to the heap.\n        if i < len(nums1):\n            heapq.heappush(heap, (nums1[i], i, 0))\n            count += 1\n        # If the current index is equal to the length of nums1, check if the smallest element of the heap is greater than or equal to the current value of nums2[0].\n        elif heap[0][1] < len(nums1) and heap[0][0] >= nums2[0]:\n            # If it is, add the current index to the heap and increment the count variable.\n            heapq.heappush(heap, (nums1[heap[0][1]], heap[0][1], heap[0][2] + 1))\n            count += 1\n        # If the current index is greater than the length of nums1 and the smallest element of the heap is greater than or equal to the current value of nums2[0], then remove the smallest element from the heap and increment the index variable.\n        elif heap[0][0] >= nums2[0]:\n            heapq.heappop(heap)\n            i += 1\n\n    # Extract the k elements from the heap and return them as a list.\n    return [heapq.heappop(heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    This function takes in three lists: nums1, nums2, and k. It returns a list of k smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = [(-nums1[0], nums1[0], 0, 0)]\n\n    # iterate through the second list\n    for i in range(1, len(nums2)):\n        # while the size of the min heap is less than k, and the second element of nums2 is greater than the first element of nums1\n        while len(min_heap) < k and nums2[i] > min_heap[0][1]:\n            # extract the smallest pair from the heap\n            pair = heapq.heappop(min_heap)\n\n        # if the size of the min heap is less than k, or the second element of nums2 is not greater than the first element of nums1, add the current pair to the heap\n        if len(min_heap) < k or nums2[i] < min_heap[0][1]:\n            heapq.heappush(min_heap, (-nums2[i], nums2[i], i, 0))\n\n    # extract the k smallest pairs from the min heap\n    result = []\n    while len(min_heap) > 0:\n        pair = heapq.heappop(min_heap)\n        result.append(pair)\n\n    # convert the tuples in the result list to lists\n    return [list(pair) for pair in result]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest k elements\n    min_heap = [(-nums2[i], i) for i in range(len(nums2))]\n    heapq.heapify(min_heap)\n    \n    # Initialize two pointers to the start of the two arrays\n    i = 0\n    j = 0\n    \n    # Initialize a list to store the pairs of smallest elements\n    pairs = []\n    \n    # Keep adding pairs to the list until we have found k pairs\n    while k > 0:\n        # If the current element in the first array is smaller than the first element of the min heap, pop it and add the current element and its index to the pairs list\n        if nums1[i] < -min_heap[0][0]:\n            pair = (-nums1[i], -min_heap[0][1])\n            heapq.heappop(min_heap)\n            pairs.append(pair)\n            k -= 1\n        # If the current element in the first array is larger than the first element of the min heap, increment the first pointer and check the next element in the second array\n        else:\n            i += 1\n    \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap of size k\n    min_heap = []\n\n    # initialize i and j pointers for both arrays\n    i = 0\n    j = 0\n\n    # loop until k elements are found\n    while k > 0:\n        # if the current minimum element is the first element from nums1, pop it and add it to our min heap\n        if len(min_heap) == 0 or nums1[i] <= min_heap[0]:\n            heapq.heappush(min_heap, nums1[i])\n            i += 1\n\n        # if the current minimum element is the second element from nums2, pop it and add it to our min heap\n        if len(min_heap) == 0 or nums2[j] <= min_heap[0]:\n            heapq.heappush(min_heap, nums2[j])\n            j += 1\n\n        # if we have found k elements, return the minimum elements from both arrays\n        if len(min_heap) == k:\n            return [min_heap[0], min_heap[1]]\n\n        # if we have found less than k elements, pop the first element from both arrays and add the larger element to the min heap\n        elif len(min_heap) < k:\n            if nums1[i] > nums2[j]:\n                heapq.heappush(min_heap, nums1[i])\n                i += 1\n            else:\n                heapq.heappush(min_heap, nums2[j])\n                j += 1"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap for storing the pairs\n    min_heap = []\n    \n    # loop through both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # calculate the sum of the numbers\n            sum_of_numbers = num1 + num2\n            \n            # if the sum is already in the min heap, ignore this pair\n            if sum_of_numbers in min_heap:\n                continue\n            \n            # if the heap is not full, add the pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (sum_of_numbers, (num1, num2)))\n            # if the heap is full, check if the smallest pair is the new pair\n            elif sum_of_numbers < min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (sum_of_numbers, (num1, num2)))\n                \n    # extract the k smallest pairs\n    result = []\n    while len(min_heap) > 0:\n        result.append(heapq.heappop(min_heap)[1])\n        if len(min_heap) > 0:\n            heapq.heappush(min_heap, min_heap[0])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min-heap of size k\n    min_heap = []\n\n    # iterate over the two arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # if the size of the heap is less than k, add the smallest pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # if the size of the heap is greater than or equal to k, compare the smallest pair with the new pair\n            elif (num1 + num2) < min_heap[0][0]:\n                heapq.heappushpop(min_heap, (num1 + num2, (num1, num2)))\n\n    # return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function finds the minimum product from the pairs of tuples within a given list.\n\n    :param list1: A list of tuples.\n    :return: The minimum product of any pair of tuples in the list.\n    \"\"\"\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            for k in range(len(list1[i])):\n                if j!= k:\n                    product = list1[i][j] * list1[i][k]\n                    min_product = min(min_product, product)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # create a dictionary to store the products of tuples in the list\n    products = {}\n    # loop through the list of tuples\n    for tup in list1:\n        # create a tuple of the elements of the tuple\n        tup_key = tuple(tup)\n        # check if the tuple exists in the dictionary\n        if tup_key in products:\n            # if it does, add the product of the tuple with the current products value to the dictionary\n            products[tup_key] += 1\n        else:\n            # if it doesn't, add the product of the tuple to the dictionary with a value of 1\n            products[tup_key] = 1\n    # find the minimum value in the dictionary (the minimum product)\n    min_product = min(products.values())\n    # create a list of tuples with the minimum product as its value\n    min_list = [(tup[0], tup[1], min_product) for tup in list1]\n    return min_list"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize a variable to store the minimum product found\n    min_product = float('inf')\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Iterate through the remaining tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare to the current minimum\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Initialize variables for the minimum product and the number of pairs\n    min_product = list1[0] * list1[-1]\n    count = 1\n\n    # Iterate through the sorted list\n    for i in range(len(list1)-1):\n        # Check if the current element is greater than the previous element\n        if list1[i+1] > list1[i]:\n            # Add the pair of elements and increment the count\n            min_product = min(min_product, list1[i] * list1[i+1])\n            count += 1\n\n    # Return the minimum product and the count of pairs\n    return min_product, count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to be the first element of the first tuple\n    min_product = list1[0][0]\n    # Loop through the list of tuples\n    for tup in list1:\n        # Calculate the product of the first and second elements of the tuple\n        prod = tup[0] * tup[1]\n        # If the product is smaller than the current minimum product, update the minimum product\n        if prod < min_product:\n            min_product = prod\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    def product(t):\n        return t[0] * t[1]\n\n    # Sort the list of tuples by the first element (the first tuple)\n    sorted_tuples = sorted(list1, key=lambda t: t[0])\n\n    # Initialize the minimum product to be the product of the first tuple\n    min_product = product(sorted_tuples[0])\n\n    # Loop through the remaining tuples and update the minimum product if a smaller one is found\n    for i in range(1, len(sorted_tuples)):\n        # Get the current tuple and its product\n        curr_product = product(sorted_tuples[i])\n\n        # Update the minimum product if the current product is smaller\n        if curr_product < min_product:\n            min_product = curr_product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize minimum value with the first value in the list\n    min_val = listval[0]\n\n    # Iterate through the list and update minimum value if a smaller value is found\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Find the minimum value in the list\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval[1:]:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize variables\n    min_num = float('inf')\n\n    # Iterate over the list and update min_num if a smaller value is found\n    for i in listval:\n        if i < min_num:\n            min_num = i\n\n    # Return the minimum value found\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return min(listval)\n    elif isinstance(listval[0], float):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval)\n    else:\n        return None"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to infinity\n    min_value = float('inf')\n    \n    # iterate over all values in the list\n    for value in listval:\n        # check if current value is smaller than minimum value\n        if value < min_value:\n            # update minimum value if necessary\n            min_value = value\n    \n    # return the minimum value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"List is empty.\")\n        return None\n    \n    min_val = listval[0]\n    \n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # replace all underscores with spaces\n    word = re.sub(r'_','', word)\n    # split the word by spaces\n    word_list = word.split()\n    # capitalize the first letter of each word\n    camel_word = word_list[0]\n    for i in range(1, len(word_list)):\n        camel_word += word_list[i][0].upper() + word_list[i][1:]\n    # return the camel case string\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace underscores with spaces and capitalize the first letter\n    word = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    # Capitalize the first letter and join the words using camel case\n    return word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words using snake case\n    words = re.findall(r'([a-z])([A-Z])', word)\n    # Convert the list of words into camel case\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words using the underscore as the delimiter\n    words = re.findall(r'\\w+', word)\n    \n    # Convert the first word to camel case\n    camel_word = words[0].lower()\n    camel_word = re.sub(r'\\d+', '', camel_word)\n    \n    # Convert the remaining words to camel case\n    for i in range(1, len(words)):\n        camel_word += words[i].lower()[0].upper()\n        \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all underscores to camel case\n    first_part, *other_parts = re.findall(r'(?<!_)([A-Z])', word)\n    camel_case_word = ''.join(first_part.lower() + part.lower() for part in other_parts)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the string by underscores\n    words = re.findall(r'_(\\w)', word)\n    \n    # Convert the words to camel case\n    camel_case = ''.join(word.capitalize() for word in words)\n    \n    # Return the camel case string\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'([a-z])([A-Z])'\n    return re.sub(pattern, r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_([a-z])'\n    return re.sub(pattern, lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), *(word[1:].title() for word in re.findall(r'_(.)', word))])"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # initialize an empty list to store the even numbers\n    even_list = []\n    \n    # loop through the list and append even numbers to the even_list\n    for num in l:\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    # return the even_list as the result of the function\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = [num for num in l if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create an empty list to store the even numbers\n    even_list = []\n    # Loop through each number in the original list\n    for num in l:\n        # If the number is even, append it to the even_list\n        if num % 2 == 0:\n            even_list.append(num)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_nums = []\n    for num in l:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Create an empty list to store even numbers\n    new_list = []\n    \n    # Loop through the original list\n    for num in l:\n        # If the number is odd, add it to the new list\n        if num % 2!= 0:\n            new_list.append(num)\n    \n    # Return the new list containing only even numbers\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        if n == 0:\n            return tup[0]\n        n -= 1\n    return None\n"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"Invalid index\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        print(\"Index out of range.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Extract the nth element from the tuple\n        if n == 1:\n            return list1[i][0]\n        else:\n            n -= 1"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        return \"Invalid input. Please provide a list of tuples.\"\n    if n < 1 or n > len(list1):\n        return \"Invalid input. Please provide a valid index.\"\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input should be a list of tuples')\n    if not isinstance(n, int):\n        raise TypeError('n should be an integer')\n    if n < 1 or n > len(list1):\n        raise ValueError('n should be between 1 and the length of the list')\n\n    for i, elem in enumerate(list1):\n        if i == n - 1:\n            return elem\n    return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Loop through each element in the list1 and check if it is present in the list2\n    for item in list1:\n        if item in list2:\n            return True\n    # If no element in the list1 is found in the list2, then no overlapping elements are found\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n    list1 (list): a list of values to check for overlap\n    list2 (list): a list of values to check for overlap\n\n    Returns:\n    bool: True if there is a common value, False otherwise\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Using a set to remove duplicates and convert to a list to make the comparison easier\n    set1 = list(set(list1))\n    set2 = list(set(list2))\n    # Loop through the first list and check if each value exists in the second list\n    for item in set1:\n        if item in set2:\n            return True\n    # If no value in the first list exists in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Initialize a set to store the values in list2\n    set2 = set(list2)\n\n    # Iterate through each value in list1\n    for value in list1:\n        # If the value is in set2, it means it exists in list2\n        if value in set2:\n            # Return True\n            return True\n\n    # If none of the values in list1 exist in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # check if the two lists are of the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # check if any value in list1 exists in list2\n    for i in list1:\n        if i in list2:\n            return True\n\n    # if no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and checks whether any value in the first sequence \n    exists in the second sequence or not.\n\n    Args:\n    list1 (list): The first sequence to be searched.\n    list2 (list): The second sequence to be searched.\n\n    Returns:\n    bool: True if there is a common element, False otherwise.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the first list\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    # Iterate through the second list and check if each element exists in the frequency dictionary\n    for elem in list2:\n        if elem in freq_dict and freq_dict[elem] > 0:\n            del freq_dict[elem]\n        else:\n            return False\n\n    # If we reach here, all elements in list2 have been checked and found to be not overlapping\n    return True"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set from the first list and iterate over it\n    for item in set(list1):\n        # Check if the item is in the second list\n        if item in set(list2):\n            # If it is, return True\n            return True\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n\n    # Convert the input lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Find the intersection of the two sets\n    intersection = list1.intersection(list2)\n\n    # Return True if any value exists in the intersection set, otherwise False\n    return True if intersection else False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        temp_product = arr[i] * min(arr[i], arr[i-1])\n        if temp_product > max_product:\n            max_product = temp_product\n        if temp_product < min_product:\n            min_product = temp_product\n    \n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Calculate the maximum product of two elements\n    max_product = arr[0] * arr[1]\n\n    # Calculate the maximum product of three elements\n    if len(arr) >= 3:\n        min_product = arr[0] * arr[1] * arr[2]\n        for i in range(3, len(arr)):\n            min_product = min(min_product, arr[i] * arr[i - 1] * arr[i - 2])\n        max_product = max(max_product, max_product, min_product)\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    This function finds a pair with the highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()\n    max_product = arr[-1] * arr[0]\n    min_product = arr[0] * arr[1]\n    for i in range(1, len(arr)-1):\n        current_product = arr[i] * arr[i+1]\n        if current_product > max_product:\n            max_product = current_product\n            max_pair = (arr[i], arr[i+1])\n        elif current_product < min_product:\n            min_product = current_product\n            min_pair = (arr[i], arr[i+1])\n    return max_pair, min_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0]\n    first = arr[0]\n    second = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] * arr[i-1] > max_product:\n            max_product = arr[i] * arr[i-1]\n            first = arr[i]\n            second = arr[i-1]\n        elif arr[i] * arr[i-1] < max_product:\n            max_product = arr[i] * arr[i-1]\n            first = arr[i-1]\n            second = arr[i]\n        elif arr[i] * arr[i-1] == max_product:\n            first = min(first, arr[i])\n            second = max(second, arr[i])\n    \n    return (first, second, max_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # initialize max_product and max_pair to negative infinity\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n\n    # iterate over the array and calculate the product of each element with all the elements before it\n    for i in range(len(arr)):\n        product = 1\n        for j in range(i):\n            product *= arr[j]\n        if product > max_product:\n            max_product = product\n            max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n            \n    if max1 < 0:\n        return (max2, min1)\n    elif max2 < 0:\n        return (max1, min2)\n    else:\n        return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the index of the pair with the highest product.\n    '''\n    max_1 = max_2 = float('-inf')\n    max_index = 0\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n            max_index = i\n        elif arr[i] > max_2 and arr[i]!= max_1:\n            max_2 = arr[i]\n    if max_1 < 0 and max_2 < 0:\n        return None\n    return (max_index, arr.index(max(max_1, max_2)))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val1 = arr[0]\n    max_val2 = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_val1:\n            max_val2 = max_val1\n            max_val1 = arr[i]\n        elif arr[i] > max_val2:\n            max_val2 = arr[i]\n    \n    return max(max_val1 * max_val2, max_val2 * max_val1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr.sort()\n    max1 = max2 = arr[0]\n    if arr[len(arr)-1] < 0:\n        max1 = max2 = arr[len(arr)-1]\n    for i in range(1, len(arr)-1):\n        if arr[i]*arr[i+1] > max1*max2:\n            max1 = arr[i]\n            max2 = arr[i+1]\n    return max1*max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n\n    for item in Input:\n        first_element = item[0]\n        if first_element in common_elements:\n            common_elements.remove(first_element)\n        else:\n            common_elements.add(first_element)\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Iterate through the list of tuples\n    for tup in Input:\n        # Check if the first element of the tuple is equal to the first element of the previous tuple\n        if tup[0] == Input[0][0]:\n            # If yes, print the tuple and its common element\n            print(tup, \"and\", Input[0][0], \"are common.\")\n        # If the first element of the current tuple is not equal to the first element of the previous tuple, \n        # then we need to break out of the loop since we have found all the tuples with the same common element\n        else:\n            break\n    else:\n        # If we exit the loop without finding any common element, print a message\n        print(\"There are no tuples with common first element in the list.\")"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty set to store common elements\n    common_elements = set()\n    # loop through each tuple in the list\n    for tup in Input:\n        # if the first element of the tuple is not already in the set, add it\n        if tup[0] not in common_elements:\n            common_elements.add(tup[0])\n    # return the set of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize a dictionary to store common elements\n    common_elements = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n        \n        # Check if the first element is already in the dictionary\n        if first_element in common_elements:\n            # If it is, add the second element to the common element list\n            common_elements[first_element].append(tup[1])\n        else:\n            # If it's not, add the tuple to the dictionary with a list of the second element\n            common_elements[first_element] = [tup[1]]\n    \n    # Create a new list to store the output\n    output = []\n    \n    # Iterate through each common element in the dictionary\n    for key in common_elements:\n        # Add the common element and its second elements to the output list\n        output.append((key, common_elements[key]))\n    \n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for element in Input:\n        if len(set(element[0])) > 1:\n            if common_element is None:\n                common_element = element[0]\n            else:\n                common_element = None\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through the input list and add common elements to the dictionary\n    for i in Input:\n        if i[0] in common_dict:\n            common_dict[i[0]].append(i[1])\n        else:\n            common_dict[i[0]] = [i[1]]\n\n    # Create a list of tuples containing common elements and their frequency\n    common_list = []\n\n    # Loop through the dictionary and add common elements and their frequency to the list\n    for key, value in common_dict.items():\n        common_list.append((key, len(value)))\n\n    # Sort the list by frequency in descending order\n    common_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the first common element from the sorted list\n    return common_list[0][0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        elif common_element == item[0]:\n            return \"No common element found\"\n        else:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Find common first element in given list of tuples.\n    \"\"\"\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            pass\n        else:\n            return common_element\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    # List of tuples\n    lst = [(\"apple\", 3), (\"banana\", 2), (\"cherry\", 1), (\"apple\", 1), (\"kiwi\", 2), (\"banana\", 2), (\"cherry\", 2)]\n\n    # Dictionary to store the common elements and their count\n    common_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in lst: \n        # Extract the first element of the tuple\n        first_elem = tup[0]\n\n        # Check if the element is already in the dictionary\n        if first_elem in common_dict: \n            # Increment the count of the element in the dictionary\n            common_dict[first_elem] += 1\n        else: \n            # Add the element to the dictionary with count 1\n            common_dict[first_elem] = 1\n\n    # Find the maximum count of the common elements\n    max_count = max(common_dict.values())\n\n    # Find the common elements with the maximum count\n    common_elems = [key for key, value in common_dict.items() if value == max_count]\n\n    # Print the common elements and their count\n    print(\"Common elements and their count:\")\n    for elem in common_elems:\n        print(elem + \": \" + str(common_dict[elem]))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    common_first_element = None\n    for tuple_ in Input:\n        first_element = tuple_[0]\n        if common_first_element is None:\n            common_first_element = first_element\n        elif first_element == common_first_element:\n            common_first_element = None\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list with the maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    # loop through the list and check the length of each element\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    # Initialize a variable to store the maximum length of the list\n    max_len = 0\n    # Initialize a variable to store the maximum element of the list\n    max_element = ''\n    # Loop through the list and find the maximum length and maximum element\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    # Return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_ele = ''\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = ''\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(len(i) for i in lst)\n    max_elem = [elem for elem in lst if len(elem) == max_len][0]\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in range(len(lst)):\n        if len(str(lst[i])) > max_length:\n            max_length = len(str(lst[i]))\n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    total_sum = total * len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        num_rounded = round(num)\n        total += num_rounded\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and rounds every number and calculates the total sum.\n    '''\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total*len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and rounds each number using the round() function.\n    It then adds up all the rounded numbers and multiplies the result by the length of the list.\n    Finally, it prints the result.\n    '''\n    total = 0\n    for num in lst:\n        rounded_num = round(num)\n        total += rounded_num\n    result = total * len(lst)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(\"Total sum is: \" + str(total) + \" and length of the list is: \" + str(len(list1)))\n    print(\"Total sum is: {:.2f} and length of the list is: {}\".format(total, len(list1)))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize variables to store cube sum and even natural number\n    sum = 0\n    num = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(n):\n        # Calculate cube of even natural number\n        cube = num ** 3\n        \n        # Add cube to sum\n        sum += cube\n        \n        # Increment even natural number\n        num += 2\n    \n    # Return cube sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(n):\n        cube = i ** 3\n        sum_cubes += cube\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum and count\n    sum_cube = 0\n    count = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate cube of i\n        cube = i ** 3\n\n        # check if cube is even\n        if cube % 2 == 0:\n            # add cube to sum and increment count\n            sum_cube += cube\n            count += 1\n\n    # return the sum of cubes\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 1\n    while i <= n:\n        cube_sum += i**3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Concatenate each element of tuple by the delimiter.\n\n    :param test_tup: Tuple of elements to concatenate\n    :param delimiter: Delimiter to concatenate elements with\n    :return: A string containing concatenated elements\n    \"\"\"\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    This function takes in a tuple and concatenates each element of the tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \" \".join(str(x) for x in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-1]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    \n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # find the cube of i and add it to the sum of cubes\n        sum_of_cubes += i**3\n    \n    # calculate the average of cubes and return it\n    return sum_of_cubes/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i ** 3  \n    avg = sum / (n ** 2)  \n    return avg  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(n):\n        # Calculate the cube of the number\n        cube = i ** 3\n        \n        # Add the cube to the sum\n        sum += cube\n    \n    # Calculate the average of the cubes\n    average = sum / n\n    \n    # Return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum and count variables to 0\n    sum = 0\n    count = 0\n\n    # iterate n times\n    for i in range(1, n+1):\n\n        # calculate the cube of i\n        cube = i**3\n\n        # add the cube to the sum\n        sum += cube\n\n        # increment the count\n        count += 1\n\n    # calculate the average of cubes\n    average = sum/count\n\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    average = sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    average_cubes = sum_cubes / n\n    \n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / (n**3)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Initialize the sum and count variables to 0\n    sum_of_cubes = 0\n    count = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        \n        # Calculate the cube of the current number\n        cube = i**3\n        \n        # Add the cube to the sum\n        sum_of_cubes += cube\n        \n        # Increment the count variable\n        count += 1\n    \n    # Calculate the average of the cubes and return it\n    return sum_of_cubes/count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Loop through each string in the tuple\n    for i in range(len(test_tuple)):\n        # Extract the rear index element of the string\n        rear_element = test_tuple[i][-1]\n        # Add the rear index element to a new list\n        rear_list = [rear_element]\n        # Replace the original string with the new list in the tuple\n        test_tuple[i] = rear_list\n    return test_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_elements.append(element[::-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_index.append(item)\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # create a new list to store the rear index elements\n    rear_elements = []\n    # loop through each string in the tuple\n    for string in test_tuple:\n        # split the string into a list of characters and get the last character\n        rear_element = string[-1]\n        # add the rear element to the new list\n        rear_elements.append(rear_element)\n    # return the new list of rear index elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for element in test_tuple:\n        rear_list.append(element[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i, string in enumerate(test_tuple):\n        if len(string) >= 1:\n            rear_index.append(string[len(string)-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if all(x in lst for lst in list1[:i]) or all(x in lst for lst in list1[i+1:]):\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regex pattern for extracting year, month, and day\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Search for the pattern in the input date string\n    match = re.search(pattern, dt)\n    # Extract year, month, and day from the match object\n    year = int(match.group(1))\n    month = int(match.group(2))\n    day = int(match.group(3))\n    # Convert year, month, and day to dd-mm-yyyy format\n    formatted_date = f\"{day:02}-{month:02}-{year:04}\"\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() function to replace the groups in the pattern with the appropriate values\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching yyyy-mm-dd format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the pattern to match the input string\n    match = re.match(pattern, dt)\n\n    # Check if the pattern matched successfully\n    if match:\n        # Extract the year, month, and day from the matched string\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # Use string formatting to convert the date to dd-mm-yyyy format\n        dt_new = f\"{day}-{month}-{year}\"\n\n        # Return the new formatted date string\n        return dt_new\n    else:\n        # Return the original date string if pattern didn't match\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.sub() method to replace the matched pattern with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # remove hyphens from date string\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    # convert date string to datetime object\n    from datetime import datetime\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    # convert datetime object to dd-mm-yyyy format\n    return date_obj.strftime('%d-%m-%Y')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern for date format conversion\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Convert date string using re.sub() method\n    new_date = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    \n    # Return new date string in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for matching date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search the pattern in the input string and capture the groups\n    match = re.match(pattern, dt)\n    if match:\n        # Convert the matched groups to the desired output format\n        output_format = '{}-{}-{}'.format(match.group(3), match.group(2), match.group(1))\n    else:\n        raise ValueError('Invalid date format')\n\n    return output_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # define the regular expression pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use the pattern to match the date format in the input string\n    match = re.match(pattern, dt)\n\n    # extract the year, month, and day from the match object\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # create a new string with the day, month, and year in the desired format\n    new_format = day + '-' + month + '-' + year\n\n    return new_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern and replace the substrings with the desired format\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            \n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        \n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Start with a gap of 1\n    gap = n // 2\n    # While the gap is greater than 0\n    while gap > 0:\n        # Start with a low index\n        low = gap\n        # While the low index is less than n\n        while low < n:\n            # Insert the current element in its correct position\n            # using the gap sequence\n            i = low\n            j = i + gap\n            while j < n and my_list[j] < my_list[i]:\n                my_list[i], my_list[j] = my_list[j], my_list[i]\n                i = j\n                j = i + gap\n            # Move the gap to half of the previous gap\n            gap = (gap * 3) // 2\n        # Decrease the gap by half\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step size\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n\n    # Do insertion sort for each h\n    while h >= 1:\n        # Start from the beginning of the array\n        for i in range(h, n):\n            # Find the correct position to insert the element\n            j = i\n            while j >= h and my_list[j] < my_list[j-h]:\n                # Swap the elements\n                my_list[j], my_list[j-h] = my_list[j-h], my_list[j]\n                j -= h\n            # Keep the insertion sorted\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Step 1: Calculate the gap\n    gap = n // 2\n\n    # Step 2: Start the inner loop\n    while gap > 0:\n        # Step 3: Insert the gap sequence\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            # Step 4: Swap elements until the correct position is found\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        # Step 5: Decrease the gap\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Find the largest gap\n    gap = n // 2\n\n    # Begin shell sort\n    while gap > 0:\n        # Perform a single pass through the list\n        for i in range(gap, n):\n            # Move the elements of the list that are gap positions apart\n            # to their correct position\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n        # Reduce the gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and of the two tuples.\n    '''\n\n    # Convert the input tuples to lists for element-wise comparison\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Check if the length of both lists are equal\n    if len(list1)!= len(list2):\n        raise ValueError('Both input tuples must have the same length')\n\n    # Initialize the result tuple with None values\n    result_tup = (None,)*len(list1)\n\n    # Loop through the lists and perform the elementwise and\n    for i in range(len(list1)):\n        result_tup[i] = list1[i] & list2[i]\n\n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Iterate over the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Calculate the elementwise and of the corresponding elements in the two tuples\n        result = test_tup1[i] & test_tup2[i]\n\n        # Append the result to the result list\n        result_list.append(result)\n\n    # Return the result list as the output\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a new tuple containing the element-wise \n    and of the two input tuples.\n    '''\n    # check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print('Error: Both input tuples must have the same length.')\n        return None\n\n    # create a new tuple with the element-wise and of the two input tuples\n    new_tup = tuple([a and b for a,b in zip(test_tup1, test_tup2)])\n\n    return new_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n    # Check if the length of both tuples is the same\n    if len(test_tup1) == len(test_tup2):\n        # Loop through each element of the first tuple\n        for i in range(len(test_tup1)):\n            # Check if the element of both tuples is True\n            if test_tup1[i] and test_tup2[i]:\n                # Add the elementwise and tuple to the list\n                and_list.append((test_tup1[i], test_tup2[i]))\n    # Return the list of and tuples\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize empty list to store the elementwise and tuples\n    and_tup_list = []\n    # iterate through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # add the elementwise and tuple to the list\n        and_tup_list.append((test_tup1[i] & test_tup2[i], test_tup1[i], test_tup2[i]))\n    # return the list of elementwise and tuples\n    return and_tup_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i],))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elementwise and tuple from the two input tuples\n    and_tup = tuple(elem1 and elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n\n    # iterate through each tuple element in both tuples\n    for i in range(len(test_tup1)):\n        # extract the corresponding elements from each tuple\n        num1 = test_tup1[i]\n        num2 = test_tup2[i]\n        # compute the elementwise and of the two elements\n        and_val = num1 & num2\n        # append the elementwise and to the list of and_tuples\n        and_tuples_list.append(and_val)\n\n    # return the list of and_tuples\n    return and_tuples_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # If discriminant is less than 0, there is no real root\n    if discriminant < 0:\n        return \"There is no real root for the given equation.\"\n    \n    # If discriminant is 0, there is one real root\n    elif discriminant == 0:\n        return \"The directrix is: x = {}\".format((-b)/(2*a))\n    \n    # If discriminant is greater than 0, there are two real roots\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        return \"The directrix is: x = {} and x = {}\".format(root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Args:\n    a, b, c: coefficients of the parabola\n\n    Returns:\n    directrix: the value of the x-coordinate of the point where the parabola crosses the x-axis\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n\n    if discriminant >= 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n        directrix = x1 if a*x1**2 + b*x1 + c > 0 else x2\n        return directrix\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None # parabola is horizontal\n    \n    x = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the coefficients of the parabola\n    D = b**2 - 4*a*c\n    \n    # If the discriminant is negative, the parabola has two real roots\n    if D < 0:\n        return \"The parabola has no real root.\"\n    \n    # If the discriminant is zero, the parabola has one real root\n    elif D == 0:\n        x = -b/(2*a)\n        return f\"The directrix of the parabola is {x:.2f}.\\nIt has one real root.\"\n    \n    # If the discriminant is positive, the parabola has two complex roots\n    else:\n        x1 = (-b + math.sqrt(D))/(2*a)\n        x2 = (-b - math.sqrt(D))/(2*a)\n        return f\"The directrix of the parabola is {x1:.2f} and {x2:.2f}.\\nIt has two real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is between the roots: \", root1, \" and \", root2)\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"The directrix of the parabola is at the root: \", root)\n    else:\n        print(\"The equation of the parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        x1 = (-b + delta**0.5) / (2*a)\n        x2 = (-b - delta**0.5) / (2*a)\n        print(\"The directrix is:\", x1)\n        print(\"The directrix is:\", x2)\n    else:\n        print(\"The directrix is:\", \"No solution\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return None\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        x1 = x2 = -b/(2*a)\n    else:\n        x1 = x2 = None\n        \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return 'No directrix exists'\n    \n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return 'No real roots exist'\n    elif delta == 0:\n        return 'The directrix is complex'\n    else:\n        return (-b + delta**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return \"The equation has no real roots.\"\n    elif delta == 0:\n        return \"The equation has two distinct real roots: {}\".format(-b/2/a)\n    else:\n        root1 = (-b + delta**0.5)/(2*a)\n        root2 = (-b - delta**0.5)/(2*a)\n        return \"The equation has two real roots: {}, {}\".format(root1, root2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    # Iterate through each element in the first list\n    for element1 in list1:\n        # Check if the element is present in the second list\n        if element1 in list2:\n            return True\n    # If we reach this point, no common element was found\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    common = False\n\n    for i in list1:\n        if i in list2:\n            common = True\n\n    return common\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are not empty\n    if not list1 or not list2:\n        return False\n    # Find the intersection of the two lists using set intersection\n    common = list(set(list1) & set(list2))\n    # Check if the common list is not empty\n    if not common:\n        return False\n    # Return True if common list has at least one element\n    return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the sets\n    common = set1.intersection(set2)\n    # Check if the intersection is empty\n    if not common:\n        return False\n    else:\n        # Return true if there is at least one common element\n        return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    if len(list1) < len(list2):\n        # Sort the shorter list\n        list1, list2 = list2, list1\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # If the intersection is not empty, then there is a common element\n    if intersection:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    common = False\n    for num in list1:\n        if num in list2 and not common:\n            common = True\n    return common"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) * height / 2\n    \n    # Sort the lengths of the trapezium\n    sorted_lengths = sorted([base1, base2, trapezium_length])\n    \n    # Calculate the median length\n    median_length = (sorted_lengths[1] + sorted_lengths[2]) / 2\n    \n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) * height / 2\n\n    # Sort the trapezium in ascending order\n    trapezium_sorted = sorted([base1, base2, trapezium_length])\n\n    # Calculate the median length of the trapezium\n    median = trapezium_sorted[1]\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef trapezium_area(base1, base2, height):\n    '''\n    Calculate the area of a trapezium.\n    '''\n    area = (base1 + base2) / 2 * height\n    return area\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium.\n    '''\n    area = trapezium_area(base1, base2, height)\n    side1 = (base1 + base2) / 2\n    side2 = math.sqrt(area)\n    median = side1 + side2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Compute the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Compute the semi-perimeter of the trapezium\n    semi_perimeter = (base1 + base2) / 2\n\n    # Compute the length of the base of the trapezium\n    base_length = area / height\n\n    # Compute the length of the other base of the trapezium\n    other_base_length = base_length * (2 - base1 - base2) / 2\n\n    # Compute the length of the trapezium\n    trapezium_length = base_length + other_base_length\n\n    # Determine the median length of the trapezium\n    if area < height:\n        median_length = trapezium_length\n    else:\n        median_length = area / height\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1_half = base1/2\n    base2_half = base2/2\n    height_half = height/2\n\n    area1 = (base1_half ** 2)\n    area2 = (base2_half ** 2)\n    area3 = height_half * (base1_half + base2_half)\n\n    area_sum = area1 + area2 + area3\n\n    total_area = area1 + area2 + area3\n    total_area_half = total_area/2\n\n    median_area = total_area_half - (base1_half ** 2 + base2_half ** 2)\n\n    median = (area1 - area2 + area3 - median_area) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) / 2\n\n    # Sort the base lengths in ascending order\n    sorted_base_lengths = sorted([base1, base2])\n\n    # Find the index of the middle base length\n    middle_base_index = len(sorted_base_lengths) // 2\n\n    # Calculate the median length\n    median_length = (sorted_base_lengths[middle_base_index - 1] +\n                     sorted_base_lengths[middle_base_index]) / 2\n\n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the sum of the two bases and the sum of the two bases and the height\n    sum_of_bases = base1 + base2 + height\n    # Find the sum of the two squares of the bases\n    sum_of_bases_squared = (base1**2 + base2**2 + height**2)**2\n    # Calculate the difference between the two sums\n    difference_between_sums = abs(sum_of_bases - sum_of_bases_squared)\n    # Calculate the denominator\n    denominator = 2 * abs(base1 - base2)\n    # Calculate the median length\n    median = difference_between_sums / denominator\n    # Return the median length\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = base1 * 0.5\n    side2 = base2 * 0.5\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side = min(side1, side2)\n\n    # Calculate the length of the longer side of the trapezium\n    longer_side = max(side1, side2)\n\n    # Calculate the length of the shorter side of the trapezium\n    shorter_side_area = 0.5 * shorter_side * height\n    longer_side_area = 0.5 * longer_side * height\n\n    # Calculate the area of the shorter side of the trapezium\n    shorter_area = shorter_side_area - longer_side_area\n\n    # Calculate the area of the longer side of the trapezium\n    longer_area = area - shorter_area\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (shorter_side + longer_side)\n\n    # Calculate the midpoint of the shorter side\n    midpoint1 = 0.5 * shorter_side\n\n    # Calculate the midpoint of the longer side\n    midpoint2 = midpoint1 + longer_side\n\n    # Calculate the sum of the areas of the three trapezium pieces\n    total_area = shorter_area + longer_area\n\n    # Calculate the area of the trapezium with the shorter side\n    shorter_trapezium_area = shorter_area + (longer_side_area / 2)\n\n    # Calculate the area of the trapezium with the longer side\n    longer_trapezium_area = longer_area + (shorter_side_area / 2)\n\n    # Calculate the area of the trapezium with the perpendicular sides\n    perpendicular_area = (shorter_side_area + longer_side_area) / 2\n\n    # Calculate the area of the trapezium with the midpoints\n    midpoint_area1 = 0.5 * shorter_side * shorter_side\n    midpoint_area2 = 0.5 * longer_side * longer_side\n\n    # Calculate the area of the trapezium with the midpoints and the shorter side\n    midpoint_area3 = 0.5 * (shorter_side * (height - shorter_side))\n    midpoint_area4 = 0.5 * (shorter_side * (height - shorter_side))\n\n    # Calculate the total area of the trapezium\n    total_trapezium_area = shorter_trapezium_area + longer_trapezium_area + perpendicular_area + midpoint_area1 + midpoint_area2 + midpoint_area3 + midpoint_area4\n\n    # Calculate the area of the middle of the trapezium\n    middle_area = total_trapezium_area / 2\n\n    # Calculate the area of the shorter side of the trapezium from the total area\n    shorter_area_from_total = 0.5 * shorter_trapezium_area * (total_area / 4)\n\n    # Calculate the area of the longer side of the trapezium from the total area\n    longer_area_from_total = 0.5 * longer_trapezium_area * (total_area / 4)\n\n    # Calculate the area of the perpendicular sides of the trapezium from the total area\n    perpendicular_area_from_total = 0.5 * perpendicular_area * (total_area / 4)\n\n    # Calculate the area of the midpoints of the trapezium from the total area\n    midpoint_area_from_total1 = 0.5 * midpoint_area1 * (total_area / 4)\n    midpoint_area_from_total2 = 0.5 * midpoint_area2 * (total_area / 4)\n    midpoint_area_from_total3 = 0.5 * midpoint_area3 * (total_area / 4)\n    midpoint_area_from_total4 = 0.5 * midpoint_area4 * (total_area / 4)\n\n    # Calculate the total area of"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Find the length of the base of the first trapezium\n    trapezium1 = 0.5 * (base1 + base2)\n\n    # Find the length of the base of the second trapezium\n    trapezium2 = 0.5 * (base2 + base1)\n\n    # Find the length of the height of the trapezium\n    trapezium_height = height\n\n    # Find the total length of the trapezium\n    total_trapezium = trapezium1 + trapezium2 + trapezium_height\n\n    # Find the length of the trapezium above the base of the second trapezium\n    trapezium_above_base2 = 0.5 * (trapezium2 + trapezium_height)\n\n    # Find the distance between the midpoints of the two trapeziums\n    distance_trapeziums = abs(trapezium1 - trapezium2)\n\n    # Calculate the area of the trapezium above the base of the second trapezium\n    area_trapezium_above_base2 = 0.5 * trapezium_above_base2 * (distance_trapeziums + trapezium_above_base2)\n\n    # Calculate the area of the trapezium\n    area_trapezium = 0.5 * trapezium1 * (distance_trapeziums + trapezium1)\n\n    # Calculate the total area of the trapezium\n    total_area = area_trapezium + area_trapezium_above_base2\n\n    # Calculate the ratio of the total area to the square of the total length\n    area_to_length_ratio = total_area / (total_trapezium ** 2)\n\n    # Calculate the median length of the trapezium\n    median_length = 2 * area_to_length_ratio\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Calculate the median length of a trapezium using the trapezoidal rule.\n    '''\n    if base1 + base2 <= height:\n        return 0\n\n    s1 = (base1 + base2) / 2\n    s2 = height / 2\n\n    return 2 * s1 * s2"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_than = True\n            break\n    return greater_than"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for elem in arr:\n        if elem > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # iterating through the array and checking if the number is greater than the element\n    for i in range(len(arr)):\n        if number > arr[i]:\n            print(f\"The number {number} is greater than the element {arr[i]} at index {i}\")\n            return True\n    # if the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    # initialize a variable to store the result\n    result = False\n    \n    # loop through the array and compare each element with the entered number\n    for i in arr:\n        if i > number:\n            # if an element is greater than the entered number, set the result to True\n            result = True\n            break\n    \n    # return the result\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group())\n    else:\n        print('No match found')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\b\\d+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit as an integer.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer n as input and returns the last digit of n.\n    '''\n    # Using string manipulation to extract the last digit of n\n    return int(str(n)[-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of its negative numbers.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for i in list1:\n        if i < 0:\n            negative_list.append(i)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isalnum())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the new string\n    new_str = ''\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is odd, add it to the new string\n        if char % 2!= 0:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(c for c in str1 if c.isdigit() or int(c) % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += char\n        elif char.isspace():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0:j] or (test_list[i][1], test_list[j][0]) in test_list[j][0:j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create an empty dictionary to store counts\n    counts = {}\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # if it is, increment its count by 1\n            counts[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n    # iterate through the dictionary again and count bidirectional pairs\n    count_bidir = 0\n    for key, value in counts.items():\n        # check if the key is a tuple with a length of 2\n        if len(key) == 2:\n            # if it is, check if the tuple is a reverse of the other tuple\n            if key[::-1] in counts:\n                # if it is, increment the count of the original tuple by 1\n                counts[key] += 1\n                # increment the count_bidir variable by 1\n                count_bidir += 1\n    # return the final count_bidir variable\n    return count_bidir"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_integer = 1\n    for num in L:\n        single_integer *= num\n    return single_integer"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum variable\n    sum_of_multiples = 0\n    \n    # Loop through each number in the list\n    for num in L:\n        # Check if the number is a multiple of 3\n        if num % 3 == 0:\n            # If it is, add it to the sum variable\n            sum_of_multiples += num\n    \n    # Return the sum of all multiples of 3\n    return sum_of_multiples"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Regular expression pattern for finding adverbs\n    pattern = r'\\b[A-Za-z]+\\s*ed\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverbs and their positions\n    for match in matches:\n        adverb, position = match.split(' ')\n        print(f\"The first adverb '{adverb}' appeared at position {position}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern to match adverbs\n    pattern = re.compile(r\"\\b(rarely|seldom|occasionally|often|frequently|almost|very|sometimes|always|always|very|rarely|seldom|occasionally|often|frequently|almost|very|sometimes|always|never|rarely|seldom|occasionally|often|frequently|almost|very|sometimes|always|never|rarely|seldom|occasionally|often|frequently|almost|very|sometimes|always|never)\\b\")\n\n    # Find all the matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Sort the matches based on their position in the text\n    sorted_matches = sorted(matches, key=lambda x: text.find(x))\n\n    # Return the first adverb and its position\n    return sorted_matches[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regex pattern to find adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Extract all adverbs from the sentence\n    adverbs = re.findall(r'\\b\\w*ed\\b|adv\\b', text)\n    \n    # Create a dictionary to store the adverbs and their positions in the sentence\n    adverb_positions = {}\n    \n    # Iterate through the list of adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Check if the adverb is already in the dictionary\n        if adverb not in adverb_positions:\n            # If not, add the adverb and its position to the dictionary\n            adverb_positions[adverb] = [i]\n        else:\n            # If it is, append the position to the existing list of positions\n            adverb_positions[adverb].append(i)\n    \n    # Find the adverbs with the lowest number of positions\n    lowest_positions = min(adverb_positions.values(), key=lambda x: len(x))\n    \n    # Find the adverbs with the highest number of positions\n    highest_positions = max(adverb_positions.values(), key=lambda x: len(x))\n    \n    # Find the adverbs that have the same number of positions as the lowest and highest positions\n    common_positions = set(lowest_positions) & set(highest_positions)\n    \n    # Create a list of the adverbs that have the same number of positions as the lowest and highest positions\n    adverbs_with_common_positions = [adverb for adverb in adverb_positions if adverb in common_positions]\n    \n    # Create a list of the adverbs that have the highest number of positions\n    adverbs_with_highest_positions = [adverb for adverb in adverb_positions if len(adverb_positions[adverb]) == len(highest_positions)]\n    \n    # Print the results\n    print('Adverbs with the lowest number of positions:', lowest_positions)\n    print('Adverbs with the highest number of positions:', highest_positions)\n    print('Adverbs with the same number of positions as the lowest and highest positions:', common_positions)\n    print('Adverbs with the highest number of positions:', adverbs_with_common_positions)\n    print('Adverbs with the highest number of positions:', adverbs_with_highest_positions)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b\\w+(?:ly|lys?|es|ing|lys|es|ing|s|ed|ing|lys|s|ed|ing|s|ed|ing|s|ed)\\b'\n\n    # Use re.findall() function to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Iterate through the list of adverbs and their positions in the text\n    for i, adverb in enumerate(adverbs):\n        print(f'{i+1}. {adverb}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adverb\\w*\\b', text)\n\n    # Find their positions in the sentence\n    adverb_positions = []\n    for index, adverb in enumerate(adverbs):\n        # Calculate the position of the adverb in the sentence\n        position = text.find(adverb)\n        # Add the position to the list\n        adverb_positions.append(position)\n\n    # Return the list of positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a string as input, which is a sentence. It returns a tuple containing the first adverb found in the sentence and its position in the sentence. If no adverb is found, the function returns None.\n    '''\n    # Define the regular expression pattern to find adverbs\n    pattern = r'\\b(also|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|also\\s+|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b(?:adverb|adv)(?:\\s|$)'\n\n    # Use the re.findall() method to find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Loop through all matches to find the first adverb and their positions\n    for match in matches:\n        # Split the match into its components using the space as the delimiter\n        components = match.split()\n        # Check if the first component is an adverb\n        if components[0] in ['adverb', 'adv']:\n            # Return the position of the first adverb and its components\n            return match.index(components[0]), components"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs in the sentence\n    pattern = r'\\b\\w+(?:s|es|ing|ed|s)s\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Initialize an empty dictionary to store the adverbs and their positions\n    adverb_positions = {}\n    \n    # Loop through all the matches and add them to the dictionary\n    for i, match in enumerate(matches):\n        adverb_positions[match] = i\n    \n    # Find the first adverb and its position in the sentence\n    first_adverb = None\n    first_adverb_position = None\n    for adverb, position in adverb_positions.items():\n        if first_adverb is None:\n            first_adverb = adverb\n            first_adverb_position = position\n        else:\n            break\n    \n    # If no adverbs were found, return None\n    if first_adverb is None:\n        return None\n    \n    # Return the adverb and its position\n    return (first_adverb, first_adverb_position)\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    pattern = r'\\b(a|an|the|an)\\b'\n\n    # Use the re.findall() method to find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the positions of adverbs and their corresponding adverbs\n    adverb_positions = {}\n\n    # Loop through each match and add the position and corresponding adverb to the dictionary\n    for i, match in enumerate(matches):\n        adverb_positions[i] = match\n\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2 # Calculating the surface area of a cube using formula: 6 * l^2\n    return surface_area # Returning the surface area of the cube"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l + 12 * l + 8"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the surface area of the cube using the formula A = 6 * l^2\n    A = 6 * l**2\n    return A"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2  # cube of side length l has 6 faces\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l**2\n    print(\"The surface area of the cube is:\", surface_area)\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0.0\n\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n\n    return float(count) / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i', [x for x in nums if x > 0])\n    total_nums = len(positive_nums)\n    positive_ratio = total_nums / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n            \n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # convert array to list\n    nums = list(nums)\n\n    # count number of positive numbers\n    positive_count = sum(1 for num in nums if num > 0)\n\n    # calculate the ration of positive numbers\n    ration = positive_count / len(nums)\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count.itemset(0, count.item(0) + 1)\n    return count.item(0) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    neg = 0\n    for num in nums:\n        if num > 0:\n            pos += 1\n        else:\n            neg += 1\n    return pos / (pos + neg)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array to store the positive numbers\n    pos_nums = array('i')\n\n    # iterate through the input array\n    for num in nums:\n        # check if the number is positive\n        if num > 0:\n            # add the number to the array\n            pos_nums.append(num)\n\n    # calculate the length of the array\n    num_length = len(pos_nums)\n\n    # calculate the ration of positive numbers\n    pos_ration = num_length / len(nums)\n\n    # return the ration\n    return pos_ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    Parameters:\n    nums (list): a list of integers\n\n    Returns:\n    (float): the ratio of positive numbers to the total number of numbers in the array\n    \"\"\"\n    # create an array to store the positive numbers\n    positive_arr = array('i')\n    # iterate over the array of integers\n    for num in nums:\n        # if the number is positive, add it to the positive array\n        if num > 0:\n            positive_arr.append(num)\n    # calculate the total number of numbers in the array\n    total = len(nums)\n    # calculate the ratio of positive numbers to the total number of numbers\n    pos_ratio = sum(positive_arr) / total\n    # return the ratio of positive numbers to the total number of numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of integers to store the positive numbers\n    pos_arr = array('i')\n    # loop through the array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n    # calculate the ratio of positive numbers to all numbers in the array\n    ratio = pos_arr.count(0) / len(nums)\n    # return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_numbers = []\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n    return len(positive_numbers) / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1000000  #initialize the largest number as a very small number\n    \n    for num in list1: \n        if num < 0 and num > largest_num:  #if the current number is negative and greater than the largest number found so far\n            largest_num = num  #update the largest number found\n    \n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')  # initialize largest as negative infinity\n    \n    # iterate over list and find the largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as an argument and returns the largest negative number from the list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = None\n    for num in list1:\n        if num < 0:\n            if neg_num is None or num > neg_num:\n                neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return max(neg_list)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    # initialize the largest negative number to the first number in the list\n    largest = list1[0]\n\n    # loop through the list starting from the second number\n    for i in range(1, len(list1)):\n\n        # if the current number is negative and larger than the current largest negative number, update the largest negative number\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        trimmed_tuple = i[:K]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [[elem[i:] for i in range(len(elem) - K, len(elem))] for elem in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    # create an empty list to hold the trimmed tuples\n    trimmed_list = []\n    # loop through each tuple in the input list\n    for tup in test_list:\n        # create a new list to hold the elements of the tuple after trimming k elements\n        new_tup = []\n        # loop through each element in the tuple\n        for elem in tup:\n            # check if the element is less than or equal to k\n            if elem <= K:\n                # add the element to the new list\n                new_tup.append(elem)\n            else:\n                # break out of the loop and stop trimming this tuple\n                break\n        # add the new tuple to the trimmed list\n        trimmed_list.append(tuple(new_tup))\n    # return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[:K])\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                test_list[i] = test_list[i][:j]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Split the tuple into its components\n        tuple_components = tuple(test_list[i])\n        # Trim the components by k\n        trimmed_tuple = tuple([x for x in tuple_components if x > K])\n        # Replace the original tuple with the trimmed tuple\n        test_list[i] = trimmed_tuple"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Split the tuple into its elements\n        elements = tup.split(\",\")\n\n        # Trim each element by the given value of K\n        trimmed_elements = [elem.strip() for elem in elements]\n        trimmed_elements = trimmed_elements[:K]\n\n        # Join the trimmed elements back into a tuple and append to the trimmed list\n        trimmed_tup = tuple(trimmed_elements)\n        trimmed_list.append(trimmed_tup)\n\n    # Return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n    test_list (list): List of tuples to be trimmed.\n    K (int): Number of elements to be trimmed.\n\n    Returns:\n    list: List of trimmed tuples.\n    \"\"\"\n\n    def trim(t, k):\n        \"\"\"\n        Trim a tuple by k elements.\n\n        Args:\n        t (tuple): Tuple to be trimmed.\n        k (int): Number of elements to be trimmed.\n\n        Returns:\n        tuple: Trimmed tuple.\n        \"\"\"\n        return tuple(t[i] for i in range(k))\n\n    return [trim(t, K) for t in test_list]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of tuples should be same\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        print(test_tup1[i] * test_tup2[i])"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1) == len(test_tup2):\n        # Create a new tuple for storing the multiplication results\n        multiplication_results = []\n        # Iterate through each element of the two tuples\n        for i in range(len(test_tup1)):\n            # Multiply the corresponding elements and add it to the multiplication_results list\n            multiplication_results.append(test_tup1[i] * test_tup2[i])\n        # Return the multiplication_results list\n        return multiplication_results\n    else:\n        # If the length of the two tuples is not equal, return a message indicating that the two tuples cannot be multiplied\n        return \"The two tuples cannot be multiplied because they have different lengths.\""
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the result tuple with length of the first tuple\n    result_tup = (0,)*len(test_tup1)\n    \n    # perform index wise multiplication of tuple elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Calculate the index-wise multiplication of the corresponding elements in the two tuples\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize a new tuple to store the multiplication result\n    result = []\n\n    # Perform index wise multiplication of elements of the given tuples\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    count_list = []\n    for item in lst:\n        count_list.append(count_dict[item])\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # count the occurrence of each element in the tuple using Counter() function\n    count_dict = Counter(tup)\n    \n    # count the occurrence of each element in the list using Counter() function\n    count_lst = Counter(lst)\n    \n    # combine the two count dictionaries\n    count_dict.update(count_lst)\n    \n    # print the count dictionary\n    print(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    total = sum(count.values())\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {} \n    for elem in lst: \n        if elem in count_dict: \n            count_dict[elem] += 1 \n        else: \n            count_dict[elem] = 1 \n    count_list = [] \n    for elem in tup: \n        count_list.append(count_dict[elem]) \n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter() \n    for x in lst: \n        count[x] += 1 \n\n    result = [(x, count[x]) for x in lst] \n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    lst = set(lst)\n\n    # Use the Counter function from collections module to count the frequency of each element in the list\n    freq = Counter(tup)\n\n    # Use set intersection to find the common elements between the list and the tuple\n    common_elements = lst.intersection(freq)\n\n    # Count the frequency of each common element in the tuple\n    count = {elem: tup.count(elem) for elem in common_elements}\n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are the count of the occurrence of each element in the list in the tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        if item in tup:\n            count_dict[item] = count_dict.get(item, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    # count the occurrence of each element in the tuple \n    # using the Counter function from the collections module \n\n    result = {} \n    # create an empty dictionary to store the result \n\n    for elem in lst: \n        if elem in count: \n            # check if the element is present in the tuple \n            result[elem] = count[elem] \n            # if yes, store the count of the element in the dictionary \n\n    return result "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n\n    :param tup: Tuple of elements\n    :param lst: List of elements\n    :return: Dictionary containing the count of each element in the list\n    \"\"\"\n    count = {}\n    for elem in tup:\n        count[elem] = lst.count(elem)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n\n    for i in lst:\n        count_dict[i] = count_dict.get(i, 0) + 1\n\n    for i in tup:\n        if i in count_dict:\n            tup_count = tup.count(i)\n            if tup_count > 1:\n                tup = tuple(tup.replace(i, str(tup_count)))\n\n    return tup"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082, 1129, 1177, 1226, 1276, 1327, 1379, 1432, 1486, 1541, 1597, 1654, 1712, 1771, 1831, 1892, 1954, 2017, 2081, 2146, 2212, 2279, 2347, 2416, 2486, 2557, 2629, 2702, 2776, 2851, 2927, 3004, 3082, 3161, 3241, 3322, 3404, 3487, 3571, 3656, 3742, 3829, 3917, 4006, 4096, 4187, 4279, 4372, 4466, 4561, 4657, 4754, 4852, 4951, 5051, 5152, 5254, 5357, 5461, 5566, 5672, 5779, 5887, 5996, 6106, 6217, 6329, 6442, 6556, 6671, 6787, 6904, 7022, 7141, 7261, 7382, 7504, 7627, 7751, 7876, 8002, 8129, 8257, 8386, 8516, 8647, 8779, 8912, 9046, 9181, 9317, 9454, 9592, 9731, 9871, 10012, 10154, 10297, 10441, 10586, 10732, 10879, 11027, 11176, 11326, 11477, 11629, 11782, 11936, 12091, 12247, 12404, 12562, 12721, 12881, 13042, 13204, 13367, 13531, 13696, 13862, 14029, 1419"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n\n    Parameters\n    ----------\n    n : integer\n        The maximum value of the perrin numbers to be calculated.\n\n    Returns\n    -------\n    sum : float\n        The sum of the perrin numbers from 1 to n.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the perrin numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of the perrin numbers using the formula\n        sum += (i / 2.0)**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers.\n\n    Parameters:\n    n: integer\n        The upper limit of the range.\n\n    Returns:\n    float\n        The sum of the Perrin numbers from 1 to n.\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0.0\n\n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Calculate the Perrin number using the formula 2/(i^2 - 1)\n        perrin = 2/(i**2 - 1)\n        # Add the Perrin number to the sum\n        sum += perrin\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (i-1) // 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables to store the sum and perrin number\n    sum_perrin = 0\n    perrin_num = 1\n    \n    # calculate the sum of perrin numbers\n    while perrin_num <= n:\n        sum_perrin += perrin_num\n        perrin_num += 1\n    \n    # return the sum of perrin numbers\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 3, 4, 7, 9, 10]\n    return sum(perrin_nums[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (3 * i - 1) / 2\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str_list)):\n        print(str_list[i][:l])"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a specified size as input.\n    It returns a new list of strings, where each string in the original list is truncated to the specified size.\n    \"\"\"\n    extracted_str_list = []\n    for string in str_list:\n        extracted_str_list.append(string[:size])\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of string values and an integer representing the size of the strings to be extracted.\n    It returns a new list containing the extracted strings.\n    '''\n    new_list = []\n    for s in str_list:\n        new_list.append(s[:size])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and an integer as arguments.\n    It returns a list of strings that have been extracted from the original list of strings.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if i < l:\n            extracted_str.append(str_list[i])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer size as input and returns a list of strings\n    of the specified size.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input.\n    It returns a new list containing the first size strings from the original list.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    # Initialize an empty list to store the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings and extract the specified size of strings\n    for i in range(len(l)):\n        extracted_strings.append(l[i][:l[i].find(str)])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    pattern = r'\\s+'\n    text1 = re.sub(pattern, '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub('\\s+','', text1)\n    \n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespaces with a single space\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Use regex to remove whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    # Removing all whitespaces using regular expression\n    text2 = re.sub('\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        loss_amount = 0\n    else:\n        loss_amount = sale_amount - actual_cost\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number n as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum variable\n    total = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # check if i is a factor of n\n        if math.gcd(i, n) == 1:\n            # add even factors to the sum\n            total += i\n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize variables to keep track of the even factors and their total sum\n    even_factors = []\n    sum_even_factors = 0\n    \n    # Loop through the number and find the even factors\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n            sum_even_factors += i\n    \n    # Check if there are any even factors left that are not a power of 2\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            if i > 2 and i ** 2 <= n:\n                even_factors.append(i)\n                sum_even_factors += i\n    \n    # Add the last factor, if it is an even power of 2\n    if n % 2 == 0:\n        even_factors.append(n)\n        sum_even_factors += n\n    \n    # Return the sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Find the list of even factors\n    evenFactors = [x for x in range(2, int(math.sqrt(n))+1) if n % x == 0 and x % 2 == 0]\n\n    # Calculate the sum of even factors\n    sum = sum([x for x in range(2, n+1) if x % 2 == 0])\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initializing the sum of even factors as 0\n    evenSum = 0\n    \n    # looping through all odd numbers from 1 to n-1\n    for i in range(1, n+1, 2):\n        # checking if the number is divisible by i\n        if n % i == 0:\n            # if it is divisible by i, adding i to the sum\n            evenSum += i\n    \n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0 and i % 2 == 0: \n            sum += i\n\n    return sum "
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*\\z'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regex to find all words that contain 'z'\n    wordz_matches = re.findall(r'\\b\\w+z\\b', text)\n    return wordz_matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\w*z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[A-Za-z]+z\\b'\n    # Use re.findall() method to find all matches in the text\n    matches = re.findall(pattern, text)\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(monthnum2, \"does not contain 31 days.\")\n    elif monthnum2 == 2:\n        print(monthnum2, \"contains 29 days.\")\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print(monthnum2, \"contains 30 days.\")\n    else:\n        print(monthnum2, \"is not a valid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    month_num = int(monthnum2)\n    if month_num == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month = 29\n        else:\n            days_in_month = 28\n    elif month_num in [4, 6, 9, 11]:\n        days_in_month = 30\n    else:\n        days_in_month = 31\n    print(month_num, \"contains\", days_in_month, \"days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the input is a valid integer\n    try:\n        monthnum = int(monthnum)\n    except ValueError:\n        print(\"Invalid input!\")\n        return\n    # check if the input is a valid month number\n    if monthnum < 1 or monthnum > 12:\n        print(\"Invalid month number!\")\n        return\n    # check if the input is a leap year\n    if monthnum in [2, 4, 6, 9, 11]:\n        if monthnum == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                if year % 100 == 0:\n                    if year % 4000 == 0:\n                        days = 29\n                    else:\n                        days = 28\n                else:\n                    days = 29\n            else:\n                days = 28\n        else:\n            days = 30\n    else:\n        days = 31\n    # print the result\n    print(f\"{monthnum} has {days} days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is valid\n    if not (1 <= monthnum2 <= 12):\n        return \"Invalid Month Number\"\n\n    # Check if the month number contains 31 days\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return \"31 days\"\n        else:\n            return \"29 days\"\n    else:\n        return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Define the month numbers and their corresponding number of days\n    month_dict = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}\n    # Check if the input month number is present in the dictionary\n    if monthnum2 in month_dict:\n        # Check if the input month number contains 31 days or not\n        if monthnum2 in [4, 6, 9, 11]:\n            if month_dict[monthnum2]!= 31:\n                return False\n        else:\n            if month_dict[monthnum2]!= 30:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        elif monthnum2 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n            else:\n                return False\n    else:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif monthnum2 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return True\n            else:\n                return False\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string and assign it back to the list\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst: \n        if len(sublist) < min_length: \n            min_length = len(sublist) \n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    # initialize the minimum length and the index of the minimum length sublist\n    min_len = float('inf')\n    min_index = -1\n    \n    # iterate through the list and find the sublist with minimum length\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_index = i\n    \n    # return the index of the minimum length sublist\n    return min_index"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) < len(min_sublist) or (len(sublist) == len(min_sublist) and sublist < min_sublist):\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    # Initialize a variable to store the minimum length sublist\n    min_sublist = []\n\n    # Iterate over each element in the input list\n    for i in lst:\n        # Check if the current sublist is shorter than the current minimum sublist\n        if len(i) < len(min_sublist):\n            # If it is, update the minimum sublist\n            min_sublist = i\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    min_len = len(min_sublist)\n\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) < min_len:\n            min_sublist = sublist\n            min_len = len(sublist)\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Check if the list is empty\n    if len(lst) == 0: \n        return None \n    # Initialize minimum length to the first element in the list\n    min_len = len(lst[0]) \n    # Initialize minimum sublist to the first element in the list\n    min_sublist = lst[0] \n    # Loop through the list\n    for i in range(1, len(lst)): \n        # Check if the current element has smaller length than the current minimum length\n        if len(lst[i]) < min_len: \n            # Update minimum length and minimum sublist\n            min_len = len(lst[i]) \n            min_sublist = lst[i] \n    return min_sublist "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    # Sort the list in descending order based on the length of the sublist\n    lst.sort(reverse=True)\n    # Initialize the minimum length and the sublist\n    min_len = lst[0]\n    min_sublist = lst\n    # Loop through the sorted list and find the sublist with minimum length\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    # Return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings from the given string\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'[A-Z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = r'(?i)[A-Z]'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    # Remove all uppercase substrings\n    string = re.sub(r'\\b[A-Z]{2,}\\b', '', string)\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    # Use regex to match uppercase substrings and replace them with empty strings\n    str1 = re.sub(r'([A-Z]+)', r'\\1', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use the re.sub() function to replace uppercase substrings with spaces\n    str2 = re.sub(r'[A-Z]+','', str1)\n    return str2"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_element = []\n    for sublist in lst: \n        first_element.append(sublist[0]) \n    return first_element"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        print(sublist[0])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            pass\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublists = [sublist for sublist in lst] # creating a new list of sublists from the original list\n    first_elements = [sublist[0] for sublist in sublists] # using list comprehension to extract the first element of each sublist\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.append(Extract(i))\n        else:\n            result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and returns the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if isinstance(i, list):\n            result.append(i[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize counter to 0\n    ctr = 0\n    # loop through each character in the string\n    for char in str:\n        # check if the character is an uppercase letter\n        if char.isupper():\n            # increment the counter by 1\n            ctr += 1\n    # return the counter\n    return ctr"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of uppercase characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Find the length of the list\n    n = len(list1)\n\n    # Create a list to store all the combinations\n    combinations = []\n\n    # Loop through all possible pairs of elements\n    for i in range(1, n+1):\n\n        # Generate all possible combinations of the current length\n        for j in range(n-i+1):\n\n            # Create a list of the current combination\n            current_combination = list1[j:j+i]\n\n            # Add the current combination to the list of combinations\n            combinations.append(current_combination)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Loop through each element of the list\n    for i in range(len(list1)):\n\n        # Create an empty list to store the remaining elements\n        remaining_elements = list1[i+1:]\n\n        # Loop through each remaining element\n        for j in range(len(remaining_elements)):\n\n            # Add the current element and the remaining element to the combination\n            combination = [list1[i]]\n            combination.extend(remaining_elements[j:])\n\n            # Add the combination to the list of combinations\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list of lists to hold the combinations\n    comb = []\n\n    # Create a list to hold the current combination\n    curr = []\n\n    # Loop through each element of the list\n    for i in range(len(list1)):\n\n        # If the current element is not in the current combination, add it to the combination\n        if i not in curr:\n            curr.append(i)\n\n        # If all elements have been added to the combination, add it to the combinations list\n        if len(curr) == len(list1):\n            comb.append(curr[:])\n            curr.pop()\n\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to hold all combinations\n    combinations = []\n    # create a list of the range of indices for each element of the list\n    indices = [range(len(list1)) for i in range(len(list1)+1)]\n    # iterate over all possible combinations of the elements of the list\n    for i in range(1, len(list1)+1):\n        for j in indices[i]:\n            # check if the combination is valid\n            if all(j not in k for k in combinations):\n                # add the combination to the list of all combinations\n                combinations.append(list1[j])\n    # return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize variables to keep track of combinations\n    combinations = []\n    current_combination = []\n\n    # Sort the input list in ascending order\n    list1.sort()\n\n    # Iterate through the input list\n    for element in list1:\n        # If the current element is already in the current combination, skip it\n        if element in current_combination:\n            continue\n        # Add the current element to the current combination\n        current_combination.append(element)\n        # If the current combination has n elements, add it to the list of combinations\n        if len(current_combination) == len(list1):\n            combinations.append(current_combination[:])\n            current_combination.pop()\n        # If the current combination has more than n elements, backtrack by removing the last element\n        else:\n            current_combination.pop()\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n\n    result = []\n    for i in range(len(list1)+1):\n        comb = [list1[j] for j in range(len(list1))]\n        comb.sort()\n        for j in range(i):\n            comb.pop()\n        result.append(' '.join(comb))\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list and returns a list of all possible combinations of its elements.\n    \"\"\"\n    if len(lst) < 2:\n        return [lst]\n    else:\n        return [lst[0]] + combinations_list(lst[1:])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list of tuples containing each element and its index\n    index_list = [(x, i) for i, x in enumerate(list1)]\n\n    # Create a list of tuples containing the combinations\n    combinations = []\n\n    # Sort the list of tuples by the second element (the index)\n    index_list.sort(key=lambda x: x[1])\n\n    # Loop through the sorted list and create the combinations\n    for i in range(len(index_list)):\n        if i == 0 or index_list[i][1]!= index_list[i-1][1]:\n            start, end = index_list[i][1], index_list[i][1]\n            while end < len(index_list) and index_list[end][1] == end+1:\n                end += 1\n            combinations.append([x[0] for x in index_list[start:end]])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1)-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and returns the maximum product subarray.\n\n    Parameters:\n    arr (list): An array of integers.\n\n    Returns:\n    int: The maximum product subarray of the input array.\n\n    Example:\n    max_subarray_product([2, 3, -2, 4, -1, 2])\n    Output: 6\n    '''\n\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here *= arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here * arr[i], 0)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            current_product = 1\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_so_far = max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array, find the maximum product subarray.\n\n    Args:\n        arr (list): An array of numbers.\n\n    Returns:\n        int: The maximum product subarray of the given array.\n\n    Examples:\n        max_subarray_product([2, -3, 1, -2, 5, 2, -4]) # Output: 70\n        max_subarray_product([-2, 0, -1]) # Output: 0\n    \"\"\"\n\n    # Initialize two pointers: left and right\n    left, right = 0, 0\n\n    # Initialize the maximum product subarray to negative infinity\n    max_product = float('-inf')\n\n    # Loop through the array and find the maximum product subarray\n    while right < len(arr):\n        # Update the maximum product subarray\n        if arr[right] * arr[left] > max_product:\n            max_product = arr[right] * arr[left]\n\n        # If the product of the current element and the previous element is positive,\n        # shift the left pointer to the left\n        if arr[right] > 0 and arr[left] < 0:\n            left += 1\n\n        # If the product of the current element and the previous element is negative,\n        # shift the right pointer to the right\n        if arr[right] < 0 and arr[left] > 0:\n            right -= 1\n\n        # Move the right pointer to the next element\n        right += 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    max_so_far = 1\n    max_ending_here = 1\n\n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if len(arr) == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        value = list(dict.values())[0]\n        for item in list(dict.values()):\n            if item!= value:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = [value for value in dict.values()]\n    if all(value == all_values[0] for value in all_values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    for i in range(n):\n        if len(dict.values())!= 1:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if dictionary is not empty\n    if not dict:\n        return False\n    # get first value in the dictionary\n    first_value = next(iter(dict.values()))\n    # check if all values in the dictionary are same\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for key in dict.keys():\n        all_values.append(dict[key])\n    if all_values.count(all_values[0]) == len(all_values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values())"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == len(set(dict.values())):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict:\n        return False\n    else:\n        return all(dict[n] == dict[i] for i in dict if i!= n)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    max_product = float('-inf')\n    for i in range(1, len(arr)):\n        for j in range(i):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 3:\n        raise ValueError(\"Array must have at least 3 elements\")\n\n    # Create a list of sums for each increasing subsequence of the array\n    sums = [0] * n\n    sums[0] = arr[0]\n    for i in range(1, n):\n        sums[i] = sums[i - 1] + arr[i]\n\n    # Initialize the maximum product and the current subsequence product\n    max_product = float('-inf')\n    subseq_product = 1\n\n    # Iterate through the array in decreasing order and update the maximum product and subsequence product\n    for i in range(n - 1, -1, -1):\n        if sums[i] > 0:\n            # Check if updating the current subsequence product would increase the maximum product\n            if subseq_product > max_product:\n                max_product = subseq_product\n            # Update the subsequence product for the next element\n            subseq_product *= arr[i]\n        else:\n            # If the current element is negative, update the subsequence product to 1\n            subseq_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize variables to store the maximum product and the maximum subsequence\n    max_product = float('-inf')\n    max_subsequence = [0]\n\n    # Loop through the array and find the maximum subsequence\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1] * arr[i]:\n            max_subsequence.append(arr[i])\n        else:\n            max_subsequence.pop()\n\n        # Update the maximum product if the current subsequence is greater than the current maximum\n        if max(max_product, len(max_subsequence) * max(max_subsequence)) < len(arr) * max(arr):\n            max_product = max(len(max_subsequence) * max(max_subsequence), len(arr) * max(arr))\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_1 = max_2 = arr[0]\n        max_3 = max(arr[0], arr[1], arr[2])\n        for i in range(3, n):\n            temp = max(max_1 * arr[i], max_2 * arr[i], max_3 * arr[i])\n            max_1 = max_2\n            max_2 = max_3\n            max_3 = temp\n        return max_3"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)  \n    # Initialize two variables to store the maximum product and the current product\n    max_product = float('-inf')  \n    curr_product = 1  \n  \n    # Initialize an array to store the indices of the smallest element in each subsequence  \n    min_indices = [0] * n  \n    # Initialize an array to store the indices of the last element in each subsequence  \n    last_indices = [0] * n  \n    # Initialize an array to store the smallest element in each subsequence  \n    min_elements = [arr[0]] * n  \n    # Initialize an array to store the last element in each subsequence  \n    last_elements = [arr[0]] * n  \n  \n    # Traverse the array and update the minimum element, last element, and minimum index for each subsequence  \n    for i in range(1, n):  \n        min_indices[i] = min_indices[i - 1]  \n        if arr[i] < min_elements[i]:  \n            min_indices[i] = i  \n            min_elements[i] = arr[i]  \n        last_indices[i] = last_indices[i - 1]  \n        if arr[i] > last_elements[i]:  \n            last_indices[i] = i  \n            last_elements[i] = arr[i]  \n  \n    # Traverse the array again and update the maximum product for each increasing subsequence  \n    for i in range(n):  \n        if i < last_indices[i]:  \n            curr_product = arr[i] * min_elements[last_indices[i]]  \n            if curr_product > max_product:  \n                max_product = curr_product  \n        elif i > min_indices[i]:  \n            curr_product = arr[i] * max_product  \n            if curr_product > max_product:  \n                max_product = curr_product  \n  \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    def max_product_subseq(arr, index, end):\n        if index == end:\n            return 1\n        max1 = max_product_subseq(arr, index + 1, end)\n        max2 = max_product_subseq(arr, index + 1, end)\n        if arr[index] > arr[end]:\n            max1, max2 = max2, max1\n        return max(max1 * arr[index], max2 * arr[end], max1 * max2)\n\n    return max_product_subseq(arr, 0, len(arr) - 1)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = max_ending_here_prev = min_ending_here_prev = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here_prev * arr[i])\n        min_ending_here = min(arr[i], min_ending_here_prev * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        \n        max_ending_here_prev = max_ending_here\n        min_ending_here_prev = min_ending_here\n        \n    return max_so_far * min_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Create a maximum subsequence of arr that includes arr[0]\n    max_subseq = [arr[0]]\n    max_so_far = arr[0]\n\n    # Initialize a variable to store the maximum product\n    max_product = arr[0]\n\n    # Loop through the rest of the array and update the max_subseq and max_product\n    for i in range(1, n):\n        if arr[i] > max_subseq[-1]:\n            max_subseq.append(arr[i])\n        else:\n            max_subseq.append(max_subseq[-1] * arr[i])\n\n        if max_subseq[-1] > max_so_far:\n            max_so_far = max_subseq[-1]\n\n        if max_so_far > max_product:\n            max_product = max_so_far\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize max product to be negative infinity\n    max_product = float('-inf')\n\n    # Initialize left and right pointers for the increasing subsequence\n    left, right = 0, 0\n\n    # Initialize the subsequence of increasing numbers\n    subsequence = arr[left]\n\n    # Loop until the right pointer exceeds the length of the array\n    while right < len(arr):\n        # If the current element is smaller than the previous element, add it to the subsequence\n        if arr[right] < subsequence:\n            subsequence *= arr[right]\n        # If the current element is larger than the previous element, update the max product\n        elif arr[right] > subsequence:\n            max_product = max(max_product, subsequence)\n            # Remove the smallest element from the subsequence and add the new element\n            subsequence = arr[right]\n        # If the current element is equal to the previous element, do nothing\n        right += 1\n\n    # Add the last element to the subsequence\n    subsequence *= arr[right]\n    # Update the max product\n    max_product = max(max_product, subsequence)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            current_product = 1\n            for k in range(i, j):\n                current_product *= arr[k]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    total = 0\n    \n    for i in range(n-1):\n        total += test_tup[i] + test_tup[i+1]\n    \n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    elif len(test_tup) == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return add_pairwise(test_tup[1:]) + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    # loop through the tuple and add the pairwise sums to the list\n    for i in range(len(test_tup)-1):\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            print(f\"Sum of {test_tup[i]} and {test_tup[j]} is: {test_tup[i] + test_tup[j]}\")"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    neighboring_elements = []\n    for i in range(1, len(test_tup)):\n        neighboring_elements.append(test_tup[i] + test_tup[i-1])\n    return neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    result = 0\n    for i in range(length - 1):\n        result += test_tup[i] + test_tup[i + 1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    for i in range(n):\n        for j in range(i+1, n):\n            print(\"{:2d}\".format(i), \"+\", \"{:2d}\".format(j), \"=\", \"{:3d}\".format(test_tup[i] + test_tup[j]))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Get the length of the input tuple\n    length = len(test_tup)\n\n    # Loop through each element in the tuple\n    for i in range(length):\n        # Calculate the neighboring element and add it to the result tuple\n        if i == length - 1:\n            result_tup += (test_tup[i],)\n        else:\n            result_tup += (test_tup[i] + test_tup[i+1],)\n\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    return sum([test_tup[i] + test_tup[i+1] for i in range(n-1)])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1 \n    for i in range(len(arr)): \n        total = (total * arr[i]) % n\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array elements modulo n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the result to be 1\n    result = 1\n\n    # Loop through the array and multiply each element with the result\n    for i in range(len(arr)):\n        result = (result * arr[i]) % n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments - an array and an integer n.\n    It calculates the product of the array elements modulo n, \n    and returns the result.\n    '''\n    product = 1\n    for num in arr:\n        product *= num % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments:\n    arr: a list of integers\n    n: an integer\n\n    The function finds the product of the array multiplication modulo n. \n    The product is calculated by multiplying each element of the array with its index (starting from 0),\n    and summing the result modulo n.\n\n    The function returns the product modulo n.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    n = 10\n\n    The product of the array with its indices is:\n        (1 * 0) + (2 * 1) + (3 * 2) + (4 * 3) + (5 * 4) = 20\n\n    The sum of the product modulo 10 is:\n        (20 + 0) % 10 = 20\n\n    The product modulo 10 is:\n        20 % 10 = 0\n\n    Therefore, the output of the function is 0.\n    '''\n\n    product = 0\n    for i in range(len(arr)):\n        product += arr[i] * i\n    \n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer as input and returns the product \n    of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    \n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    if l[0] == l[1]:\n        return True\n    for i in range(1, len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2: \n        return False\n    if l[0] == l[1]: \n        return True\n    for i in range(1, len(l)-1): \n        if l[i] == l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) <= 1: \n        return False\n\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    if len(l) < 2: \n        return \"The list must have at least two elements to be consecutive.\" \n    elif l[0] == l[-1]: \n        return True \n    else: \n        for i in range(len(l)-1): \n            if l[i] + 1 == l[i+1]: \n                return False \n        return True "
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list and sort it based on order\n    sorted_intersection = sorted(list(intersection))\n    \n    return sorted_intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    common_elements = set(test_list1) & set(test_list2)\n\n    for element in common_elements:\n        if element not in intersection:\n            intersection.append(element)\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sort the two lists in ascending order\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n\n    # Traverse the lists using two pointers\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            common_elements.add(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Convert the set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        test_list = test_list1\n    else:\n        test_list = test_list2\n\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Iterate over both the input lists and add the common elements to the set\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                common_set.add(test_list1[i])\n\n    # Convert the set to a tuple and return it\n    return tuple(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # initialize an empty list to store the result\n    result_list = []\n    \n    # loop through each tuple in the first list\n    for i in range(len(test_list1)):\n        # initialize a boolean variable to store if the tuple is present in the second list\n        is_present = False\n        \n        # loop through each tuple in the second list\n        for j in range(len(test_list2)):\n            # if the tuple is present in the second list, add it to the result list and set the boolean variable to True\n            if test_list1[i] == test_list2[j]:\n                result_list.append(test_list1[i])\n                is_present = True\n        \n        # if the tuple is not present in the second list, skip it\n        if not is_present:\n            continue\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert both lists to sets\n    list1_set = set(test_list1)\n    list2_set = set(test_list2)\n\n    # find the intersection of the two sets\n    intersection = list1_set.intersection(list2_set)\n\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2 and item not in intersection:\n            intersection.append(item)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in test_list1:\n        if i in test_list2 and i not in intersection:\n            intersection.append(i)\n    return intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with a new character.\n    \"\"\"\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        # If the character matches the search character, replace it with the new character\n        if char == ch:\n            result += newch\n        # Otherwise, append the original character to the result\n        else:\n            result += char\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by values\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # Convert the sorted Counter object back to a dictionary\n    sorted_dict = {k:v for k,v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = sorted(sorted_dict, key=lambda x: x[1], reverse=True)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n\n    # sort the Counter object by value and return the result\n    return dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count_dict = Counter(dict1)\n    sorted_dict = dict(sorted(count_dict.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError('Array must have at least two elements.')\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"The given array has less than two elements.\"\n    else:\n        smallest = max(nums)\n        largest = min(nums)\n        return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in ascending order\n    nums.sort()\n    # return the sum of the first and last elements of the sorted array\n    return nums[0] + nums[-1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    \n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    \n    # Find the sum of the largest and smallest values\n    sum_largest_smallest = nums[-1] + nums[0]\n    \n    return sum_largest_smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the maximum and minimum values\n    max_val = nums[0]\n    min_val = nums[0]\n\n    # Iterate through the array and update the maximum and minimum values\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        elif nums[i] < min_val:\n            min_val = nums[i]\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function converts the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # iterate over each character in the string\n    for char in string:\n        # check if the character is uppercase and convert it to lowercase\n        if char.isupper():\n            string = string.replace(char, char.lower())\n        # if the character is already lowercase, do nothing\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return re.sub(pattern, '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Define regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    \n    # Find all lowercase substrings in the string\n    substrings = re.findall(pattern, string)\n    \n    # Remove the lowercase substrings from the string\n    for substring in substrings:\n        string = string.replace(substring, '')\n        \n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'\\b[a-z]+\\b')\n    return lowercase_pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # use re.sub() to remove all lowercase substrings from the string\n    str2 = pattern.sub('', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Define a regular expression pattern for matching lowercase substrings\n    pattern = r'(?i)[a-z]+'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the string\n    matches = re.findall(pattern, str1)\n    # Loop over the matches and remove them from the string using a list comprehension\n    return ''.join([c for c in str1 if c not in matches])"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    \n    # Use the re.findall() method to find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(pattern, str1)\n    \n    # Convert the list of lowercase substrings to a set to remove duplicates\n    lowercase_substrings = set(lowercase_substrings)\n    \n    # Replace all lowercase substrings with an empty string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1, flags=re.IGNORECASE)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the first digit of the number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Find the first digit of the number\n    first_digit = num[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    # Convert the number to a string\n    str_n = str(n)\n    # Return the first character of the string\n    return str_n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function finds the first digit of a given number.\n    \"\"\"\n    # Convert the number to string and extract the first character\n    first_char = str(n)[0]\n    \n    # Convert the first character to integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    # Extract the first digit of the string\n    first_digit = num[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10) + n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n // 10**len(str(n))\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        first_digit = str(n)[0]\n        return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns only the odd numbers in the list.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    Takes a list of integers and returns a new list with only the odd numbers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list "
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n\n    # sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # find difference between sum_cubes and sum_numbers\n    difference = sum_cubes - sum_numbers\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_numbers)\n\nprint(difference(10))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = sum(x**3 for x in range(1, n+1))\n    \n    # Calculate the sum of the first n natural numbers\n    total = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(cubes - total)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    natural_sum = sum(range(1, n+1))\n    return abs(cubes_sum - natural_sum)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    sum_natural = sum(range(1,n+1))\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    # calculate the sum of the cubes of the first n natural numbers\n    cubes = sum(i**3 for i in range(1, n+1))\n    # calculate the sum of the first n natural numbers\n    sums = sum(range(1, n+1))\n    # return the difference\n    return abs(cubes - sums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n**2) * (n**3) / 6\n\n    # Find the sum of the first n natural numbers\n    sum_of_natural_numbers = n * (n+1) * (2*n+1) / 6\n\n    # Find the difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n\n    # Return the difference\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the number of odd pairs in it.\n    '''\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes a list A and a value N as input and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    xor = 0\n    count = 0\n\n    for i in range(N):\n        xor ^= A[i]\n        count += (xor & 1)\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    xor = 0\n    count = 0\n\n    for i in range(N):\n        xor ^= A[i]\n\n    while xor!= 0:\n        count += 1\n        xor &= (xor - 1)\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_sum = sum(A)\n    for i in range(N):\n        xor_sum ^= A[i]\n        if xor_sum & 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count to 0\n    count = 0\n    # Initialize xor value to 0\n    xor_val = 0\n    # Loop through the array and calculate xor value\n    for i in range(N):\n        xor_val ^= A[i]\n        # If the xor value is odd, increment count\n        if xor_val % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes two lists A and N as input and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    # XOR operation to find xor value\n    xor_value = sum(A) ^ sum(N)\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate over the range of numbers from 1 to N\n    for i in range(1, N+1):\n        # XOR operation to find xor value of i and N-i\n        xor_pair = sum(A) ^ sum([i, N-i])\n        # If xor_pair is odd, increment count\n        if xor_pair % 2 == 1:\n            count += 1\n\n    # Return count of odd pairs\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([chr(ord(c.lower()) if c.isupper() else ord(c.upper())) for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.islower() else chr(ord(c) ^ 32).upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    while n1!= 0 or n2!= 0:\n        distance += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the sum of the per-digit difference\n    sum_diff = 0\n    for i in range(len(n1_digits)):\n        sum_diff += abs(n1_digits[i] - n2_digits[i])\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n    \n    # Iterate over each digit in the two numbers\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        # Extract the i-th digit from both numbers\n        d1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        d2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        \n        # Calculate the per-digit difference and add it to the result\n        result += abs(d1 - d2)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Initialize variables to store the sum of per-digit differences\n    total_diff = 0\n    # Loop through each digit of the two numbers\n    for i in range(10):\n        # Calculate the difference between the two digits and add it to the total_diff\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        total_diff += diff\n    # Return the total_diff\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference\n    diff_sum = 0\n    for i in range(len(n1_digits)):\n        diff_sum += abs(n1_digits[i] - n2_digits[i])\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize a variable to store the sum of the per-digit difference\n    total_sum = 0\n    \n    # loop through each digit of the first number\n    for digit in str(n1):\n        # subtract the corresponding digit of the second number from the first number\n        diff = int(digit) - int(str(n2)[digit])\n        \n        # add the difference to the total sum\n        total_sum += diff\n    \n    # return the total sum of the per-digit differences\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers n1 and n2 and returns the sum of the per-digit\n    differences between them.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits_n1 = [int(digit) for digit in str(n1)]\n    digits_n2 = [int(digit) for digit in str(n2)]\n    # Compute the sum of the per-digit differences between the lists of digits\n    sum_diff = 0\n    for i in range(len(digits_n1)):\n        diff = abs(digits_n1[i] - digits_n2[i])\n        sum_diff += diff * (i+1)\n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n    \n    # initialize the sum of differences\n    diff_sum = 0\n    \n    # loop through each digit of both strings\n    for i in range(len(s1)):\n        # subtract the corresponding digits from each string\n        diff = int(s1[i]) - int(s2[i])\n        \n        # add the difference to the sum\n        diff_sum += diff\n        \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the length of the input numbers\n    n1_len = len(str(n1))\n    n2_len = len(str(n2))\n    \n    # Check if the lengths are equal\n    if n1_len!= n2_len:\n        print(\"The input numbers must have the same length.\")\n        return\n    \n    # Initialize the sum\n    sum = 0\n    \n    # Loop through each digit in the input numbers\n    for i in range(n1_len):\n        # Get the corresponding digits from the input numbers\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n        \n        # Calculate the per-digit difference and add it to the sum\n        diff = abs(digit1 - digit2)\n        sum += diff\n        \n    # Return the sum of the per-digit differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the two lists\n    digit_diff = [abs(digit1 - digit2) for digit1, digit2 in zip(digit_list1, digit_list2)]\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(digit_diff)\n\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n    return max_sum, a[start:start+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the sum and the start and end indices of the current sublist\n    current_sum = 0\n    start = 0\n    end = 0\n\n    # Iterate through the list and update the current_sum and start and end indices as needed\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sum is greater than the current maximum sum, update the start and end indices\n        if current_sum > a[start]:\n            start = i\n            end = i\n\n        # If the current sum is equal to the current maximum sum, update the end index\n        elif current_sum == a[start]:\n            end = i\n\n    # Return the sum of the largest contiguous sublist\n    return a[start:end+1]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n    a: List of integers.\n    size: Integer, the length of the sublist.\n\n    Returns:\n    The sum of the largest contiguous sublist of length size in the given list a.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the list and calculate the sum of sublists of length size\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize maximum sum\n    current_sum = 0 # initialize current sum\n\n    # iterate through the list and update the current sum and maximum sum\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    # Sort the combined tuple in ascending order\n    combined_tup.sort()\n    # Print the sorted combined tuple\n    print(combined_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Create a set from the combined list to remove duplicates\n    unique_list = list(set(combined_list))\n    \n    # Sort the unique list in ascending order and print it\n    unique_list.sort()\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples\n    combined_tuple = tuple(test_tup1 + test_tup2)\n    # Convert the combined tuple into a set to remove duplicates\n    set_combined_tuple = set(combined_tuple)\n    # Convert the set back into a list and sort it\n    sorted_list = sorted(list(set_combined_tuple))\n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a new list to store the union\n    union_list = []\n\n    # add all the elements of the first tuple to the union list\n    for i in test_tup1:\n        union_list.append(i)\n\n    # add all the elements of the second tuple to the union list\n    for i in test_tup2:\n        if i not in union_list:\n            union_list.append(i)\n\n    # sort the union list in ascending order and print it\n    union_list.sort()\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # convert the set to a list and sort it in ascending order\n    sorted_union_list = sorted(list(union_set))\n    # print the sorted list\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two input tuples using set operations\n    union = test_tup1.union(test_tup2)\n\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union))\n\n    # Output the sorted union list\n    print(\"The union of the elements of the input tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_tup = tuple(set(test_tup1).union(test_tup2))\n    # Sort the union and return it\n    return sorted(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    # loop through both tuples and add unique elements to the set\n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            unique_set.add(elem)\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(unique_set))\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # find the union of the two given tuples using set operations\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n\n    # print the union of the two tuples in sorted order\n    print(\"Union of the two tuples:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create an empty set to store the union of the two input tuples\n    union_set = set()\n    # Iterate over each element in the first tuple\n    for element in test_tup1:\n        # Add the element to the set if it's not already there\n        if element not in union_set:\n            union_set.add(element)\n    # Iterate over each element in the second tuple\n    for element in test_tup2:\n        # Add the element to the set if it's not already there\n        if element not in union_set:\n            union_set.add(element)\n    # Convert the set to a list and sort it\n    sorted_list = sorted(list(union_set))\n    # Print the sorted list of union elements\n    print(sorted_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Create an empty dictionary to store the lengths of the longest sublists\n    longest = {}\n\n    # Iterate through each sublist in the list\n    for i in range(len(lst)):\n        # Check if the sublist is already in the dictionary\n        if lst[i] in longest:\n            # If it is, check if the current sublist has a longer length\n            if len(lst[i]) > longest[lst[i]]:\n                # If it does, update the longest length to that of the current sublist\n                longest[lst[i]] = len(lst[i])\n        else:\n            # If the sublist is not in the dictionary, add it with a length of 1\n            longest[lst[i]] = 1\n\n    # Iterate through the dictionary to find the length of the longest sublists\n    max_length = 0\n    for i in longest.keys():\n        if longest[i] > max_length:\n            max_length = longest[i]\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    start = 0\n\n    # Iterate through the list\n    for i in range(len(lst)):\n        # If the element is the same as the previous element, increment the current length\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            # If the current length is greater than the maximum length so far, update the maximum length\n            if current_length > max_length:\n                max_length = current_length\n            # Reset the current length to 0\n            current_length = 1\n            # Update the start index to the current index\n            start = i\n    \n    # Update the maximum length with the current length at the end of the list\n    if current_length > max_length:\n        max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list `lst` as input and returns the length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1,len(lst)):  \n            sub_list = lst[i:j]  \n            max_length = max(max_length,len(sub_list))  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_len = 1 # Set the initial value of max_len as 1\n    temp_len = 1 # Set the initial value of temp_len as 1\n    result = [] # Initialize an empty list to store the result\n\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Loop through the sublist\n        for i in range(len(sublist)):\n            # Update temp_len for the next iteration\n            temp_len += 1\n            # If the length of the sublist is greater than the current max_len, update max_len and append to the result\n            if temp_len > max_len:\n                max_len = temp_len\n                result = [sublist[i]]\n                # If the length of the sublist is equal to the current max_len, append to the result\n            elif temp_len == max_len:\n                result.append(sublist[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize the maximum length as 0\n    max_length = 0\n\n    # loop through each sublist in the list\n    for sublist in lst:\n        # loop through each element in the sublist and update the maximum length\n        for element in sublist:\n            max_length = max(max_length, len(element))\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and finds the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    sublist = []\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1]:\n            sublist.append(lst[i])\n        else:\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n            sublist = [lst[i]]\n    if len(sublist) > max_len:\n        max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    values = [match.strip() for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[\"])\\w+(?:\\w+\\s*)?(?=[\"])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'(?<!\\\\)\"([^\"]+)\"')\n    \n    # Use the re.findall() function to extract all the values between quotation marks\n    values = re.findall(pattern, text)\n    \n    # Return the list of values extracted\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]+)\"' # extracts values between double quotes\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\"|[^\"]+)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"' # regular expression pattern to match values between quotation marks\n    matches = re.findall(pattern, text) # find all matches using the pattern in the text\n    return matches # return the matches as a list of strings"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]+)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n        arr (list): A list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # Initialize a count variable to store the number of pairs\n    count = 0\n\n    # Loop through all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the two elements are not equal\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n    # Loop through the array\n    for i in range(n):\n        # For each element in the array, loop through the remaining elements and check if they are not equal\n        for j in range(i+1, n):\n            # If they are not equal, increment the counter\n            if arr[i]!= arr[j]:\n                count += 1\n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # split the word into characters and return them\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Convert n to a string and split into a list of digits\n    digits = list(str(n))\n\n    # Iterate over the list of digits and add each digit to the sum\n    for digit in digits:\n        sum += int(digit)\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # check if n is a non-negative integer\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    # initialize the sum variable\n    sum_digits = 0\n    # convert n to a string and loop through each character\n    for digit in str(n):\n        # add the integer value of each character to sum_digits\n        sum_digits += int(digit)\n    # return the sum_digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Get the digits of the input number\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the digits and add them to the sum\n    for digit in digits:\n        sum += digit\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then sum its digits\n    digit_sum = sum(int(digit) for digit in str(n))\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    else:\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of the digits\n    digit_sum = 0\n    \n    # Loop through each digit of the integer\n    while n > 0:\n        # Add the current digit to the digit_sum\n        digit_sum += n % 10\n        \n        # Remove the current digit from the integer\n        n //= 10\n    \n    # Return the digit_sum\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert integer to a string\n    num_str = str(n)\n    # Initialize sum variable\n    sum = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert each character to an integer and add it to the sum\n        sum += int(char)\n    # Return the sum\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if list is empty or has only one element\n    if len(list1) <= 1:\n        return True\n    \n    # Check if all elements in list are greater than or equal to the first element\n    for i in range(1, len(list1)):\n        if list1[i] < list1[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    return sorted(list1) == list1"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n\n    Args:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n\n    # Loop through each sublist in the input list\n    for sublist in list1:\n        # Use the sort() method to sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        if type(sublist) == list:\n            sort_sublists(sublist)\n        elif type(sublist) == str:\n            sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_nums = set()\n    \n    # Iterate through each list in the input\n    for num_list in nums:\n        # Iterate through each element in the list\n        for num in num_list:\n            # Add each element to the set\n            unique_nums.add(num)\n    \n    # Convert the set back to a list\n    unique_list = list(unique_nums)\n    \n    # Return the unique list of unique elements\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # use set to remove duplicates\n    unique_nums = set(nums)\n    # convert set back to list\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums[0])\n    for i in range(1, len(nums)):\n        unique_nums.update(nums[i])\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create a set of numbers from the input lists\n    num_set = set(nums)\n\n    # convert the set back to a list and return it\n    return list(num_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates from the list\n    unique_nums = list(set(nums))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Args:\n    nums (list): A list of lists containing integers.\n\n    Returns:\n    list: A list of lists containing unique integers.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        unique_nums.extend(set(num_list))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    \n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the unique numbers.\n    \"\"\"\n    unique_lst = []\n    for num in lst:\n        if num not in unique_lst:\n            unique_lst.append(num)\n\n    return 1 if len(unique_lst) == 1 else (unique_lst[0] * unique_product(unique_lst[1:]))"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_nums = list(set(list_data))  # Remove duplicate values and store them in a list\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    \n    product = 1\n    for num in unique_numbers:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data) # create a set of unique numbers from the list\n    product = 1 # initialize the product to 1\n\n    for num in unique_numbers:\n        product *= num # multiply the current number with the product\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    unique_list = list(unique_set)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create an empty set to store unique numbers\n    unique_numbers = set()\n    # iterate through the list\n    for num in list_data:\n        # check if the number is already in the set\n        if num not in unique_numbers:\n            # add the number to the set\n            unique_numbers.add(num)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes two arguments - radius r and height h.\n    It returns the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    surface_area = 2*3.14159*(r**2) + 2*3.14159*(h**2) - 2*3.14159*r*h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*(r**2)+(2*r*h)+(2*h**2)\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    A = 2 * pi * r * h\n    \n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder using the formula:\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * 3.1415926535 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + math.pi * r**2 + math.pi * r * h + 2 * math.pi * r**2 + 2 * math.pi * r * h + 2 *"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r*r + 2*math.pi*r*h + 2*math.pi*(r*h)**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return math.pi * r**2 + 2 * math.pi * r * h + math.pi * h**2"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            if i >= len(A):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(len(B)):\n            if B[i] not in A:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): # If B is longer, then A cannot be a sublist of B\n        return False\n    i = 0 # Initialize a pointer i to 0\n    j = 0 # Initialize another pointer j to 0\n    while j < len(B): # Iterate through B until j reaches the end of B\n        if B[j] == A[i]: # If the element at j in B matches with the element at i in A\n            i += 1 # Increment i by 1\n        j += 1 # Increment j by 1\n    return i == len(A) # If i reaches the end of A, then it means that A is a sublist of B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input, and returns True if B is a sublist of A, and False otherwise.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - (i - j + 1)\n            j = 0\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    if len(B) > len(A):\n        return False\n    # Initialize two pointers, one at the start of the two lists, the other at the start of the first list\n    i = 0\n    j = 0\n    # Initialize an array to store the LCP of the two lists\n    LCP = [0] * len(A)\n    # Loop through the first list, keeping track of the length of the longest common prefix\n    while i < len(A) and j < len(B):\n        # If the characters at the current indices are the same, increment both pointers\n        if A[i] == B[j]:\n            LCP[i] = LCP[j]\n            i += 1\n            j += 1\n        # If the characters are different, move the pointers towards the end of the list\n        else:\n            if LCP[j-1] == 0:\n                j += 1\n            else:\n                j = j - LCP[j-1] + 1\n    # If the pointers have reached the end of the first list, the two lists are a sublist\n    if i == len(A):\n        return True\n    # If the pointers have not reached the end of the first list, the two lists are not a sublist\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n\n    i = 0\n    j = 0\n    while j < len(B):\n        if B[j] == A[i]:\n            if i == len(A) - 1:\n                return True\n            i += 1\n            j += 1\n        else:\n            i = 0\n            if j < len(B) - 1:\n                j += 1\n            else:\n                return False\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists, A and B, as input and returns True if B is a sublist of A, and False otherwise.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    \n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the last digit of its factorial.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert number to string\n    s = str(n)\n    # find last digit\n    last_digit = int(s[-1])\n    # calculate factorial up to last digit\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to string\n    str_n = str(n)\n    # convert the string to integer\n    num = int(str_n)\n    # initialize the result variable\n    result = 0\n    # loop through each digit of the number\n    for digit in str_n:\n        # convert the digit to integer and add it to the result variable\n        result += int(digit)\n    # return the last digit of the result variable\n    return result%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extracting the last digit of the factorial\n    last_digit = int(factorial % 10)\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return str(fact)[-1]"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize a variable to hold the last digit of the factorial\n    last_digit = 0\n\n    # loop through each digit in the factorial of n\n    while n > 0:\n\n        # extract the last digit of n\n        last_digit = n % 10\n\n        # multiply the factorial by the last digit and subtract it from n\n        n = (n // 10) * last_digit\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved elements\n    result = []\n    # Use two for loops to iterate over the lists and add the elements to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    # Return the flattened list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the interleaved result\n    interleaved_list = []\n    \n    # loop through each element in the input lists\n    for i in range(min(len(list1), len(list2), len(list3))):\n        # add the first element of list1 to the result list\n        interleaved_list.append(list1[i])\n        # add the second element of list2 to the result list\n        interleaved_list.append(list2[i])\n        # add the third element of list3 to the result list\n        interleaved_list.append(list3[i])\n        \n    # add any remaining elements of the shortest input list to the result list\n    for i in range(len(list1), len(list2), len(list3)):\n        interleaved_list.append(list1[i])\n    for i in range(len(list1), len(list2), len(list3)):\n        interleaved_list.append(list2[i])\n    for i in range(len(list1), len(list2), len(list3)):\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    # Loop through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = list1 + list2 + list3\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Calculate the length of the result list\n    result_length = len(list1) + len(list2) + len(list3)\n\n    # Initialize the result list with zeros\n    result = [0] * result_length\n\n    # Fill the result list with elements from the input lists\n    i = 0\n    for item in list1:\n        result[i] = item\n        i += 1\n    for item in list2:\n        result[i] = item\n        i += 1\n    for item in list3:\n        result[i] = item\n        i += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == 0 and len(list2) == 0 and len(list3) == 0:\n        return []\n    elif len(list1) > 0:\n        return [list1[0]] + interleave_lists(list1[1:], list2, list3)\n    elif len(list2) > 0:\n        return [list2[0]] + interleave_lists(list1, list2[1:], list3)\n    else:\n        return [list3[0]] + interleave_lists(list1, list2, list3[1:])"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Use a nested loop to iterate through the lists and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index1, index2, index3 = 0, 0, 0\n    \n    while index1 < len(list1) and index2 < len(list2) and index3 < len(list3):\n        result.append(list1[index1])\n        result.append(list2[index2])\n        result.append(list3[index3])\n        index1 += 1\n        index2 += 1\n        index3 += 1\n    \n    if index1 < len(list1):\n        result += list1[index1:]\n    if index2 < len(list2):\n        result += list2[index2:]\n    if index3 < len(list3):\n        result += list3[index3:]\n    \n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create an empty set to store the common elements of the two tuples\n    common_elements = set()\n\n    # iterate over the elements of the first tuple\n    for element in test_tup1:\n        # check if the element is present in the second tuple\n        if element in test_tup2:\n            # add the element to the set of common elements\n            common_elements.add(element)\n\n    # create an empty set to store the dissimilar elements\n    dissimilar_elements = set()\n\n    # iterate over the elements of the second tuple\n    for element in test_tup2:\n        # check if the element is present in the first tuple and not present in the set of common elements\n        if element not in common_elements:\n            # add the element to the set of dissimilar elements\n            dissimilar_elements.add(element)\n\n    # return the set of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    # Check the length of the two tuples\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be the same.\")\n        return None\n    \n    # Iterate over the elements of the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    # Return the dissimilar elements in a list\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of the tuples to compare\n    compare_set = set([test_tup1, test_tup2])\n    # compare the tuples to find dissimilar elements\n    for tup in compare_set:\n        # remove the current tuple from the compare set\n        compare_set.remove(tup)\n        # find the elements in the current tuple that are not in the other tuples\n        dissimilar_set = tup.symmetric_difference(compare_set)\n        # return the dissimilar elements as a list\n        if dissimilar_set:\n            return list(dissimilar_set)\n    # if no dissimilar elements are found, return an empty list\n    return []"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n\n    :param test_tup1: a tuple containing elements of type int or float.\n    :param test_tup2: a tuple containing elements of type int or float.\n    :return: a list of the dissimilar elements in the two tuples.\n    \"\"\"\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Check if the element is the same in both tuples\n        if test_tup1[i] == test_tup2[i]:\n            # If the element is the same, move on to the next element\n            continue\n        # If the element is different, add it to the dissimilar list\n        else:\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n\n    # Use set intersection to find the common elements in the two tuples\n    common_elements = set(test_tup1) & set(test_tup2)\n\n    # Use set difference to find the dissimilar elements in the two tuples\n    dissimilar_elements = set(test_tup1) - set(test_tup2) - common_elements\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Find the common elements in the two tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    # Find the dissimilar elements in the two tuples\n    dissimilar_elements = set(test_tup1).difference(set(test_tup2)).union(set(test_tup2).difference(set(test_tup1)))\n    # Print the common elements, dissimilar elements and their counts\n    print(\"Common Elements: \", common_elements)\n    print(\"Dissimilar Elements: \", dissimilar_elements)\n    print(\"Count of Common Elements: \", len(common_elements))\n    print(\"Count of Dissimilar Elements: \", len(dissimilar_elements))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through each element in the first tuple\n    for item in test_tup1:\n        # Check if the element is not in the second tuple\n        if item not in test_tup2:\n            # If it is not, add it to the list of dissimilar elements\n            dissimilar.append(item)\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing all the elements in the second tuple that are not present in the first tuple.\n    '''\n    return list(set(test_tup2) - set(test_tup1))"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_uneven(x):\n        return [y for y in x if even_fnc(y)]\n\n    return [remove_uneven(x) for x in test_tuple]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize a new empty list to store the even elements\n    even_list = []\n    \n    # Iterate over each element in the tuple\n    for item in test_tuple:\n        # If the element is not a tuple, check if it is even using the given function\n        if not isinstance(item, tuple):\n            if even_fnc(item):\n                even_list.append(item)\n                \n        # If the element is a tuple, recursively call the function on it and add its elements to the even_list\n        else:\n            even_sublist = even_ele(item, even_fnc)\n            even_list.extend(even_sublist)\n            \n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the input is a nested tuple or not\n    if isinstance(test_tuple[0], tuple):\n        # loop through each sub-tuple and recursively call the even_ele function\n        for sub_tuple in test_tuple:\n            even_ele(sub_tuple, even_fnc)\n    elif isinstance(test_tuple, tuple):\n        # loop through each tuple element and apply the even_fnc function\n        for i in range(len(test_tuple)):\n            if even_fnc(test_tuple[i]):\n                # remove the even element from the tuple\n                del test_tuple[i]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            even_list.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            even_list.append(elem)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                if even_fnc(sub_item):\n                    new_tuple.append(sub_item)\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n\n\ndef even(num):\n    return num % 2 == 0\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_tuple = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result_tuple.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            result_tuple.append(element)\n    return result_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Loop through the list of tuples and check if the length is even\n    for tup in test_tuple:\n        if len(tup) % 2 == 1:\n            # Check if the function returns True for the element\n            if even_fnc(tup):\n                # Remove the uneven element from the list\n                test_tuple.remove(tup)\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            filtered_item = even_ele(item, even_fnc)\n            filtered_tuple.append(filtered_item)\n        else:\n            if even_fnc(item):\n                filtered_tuple.append(item)\n    return filtered_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Initialize a list to store even elements\n    even_list = []\n\n    # Loop through each element in the mixed tuple\n    for item in test_tuple:\n        # If the element is even, append it to the even_list\n        if even_fnc(item):\n            even_list.append(item)\n\n    # Return the even list\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * (b * b) + 2 * (b * s) + 2 * (s * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the total number of sides of the square pyramid\n    n = int(s/b)\n    # Multiply the surface area of a square with the number of sides to get the total surface area of the pyramid\n    return 4*b*s + (n-1)*(b**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    # Calculate the height of the pyramid\n    h = s / 2\n    # Calculate the surface area of the base\n    sa_base = b * b * 3\n    # Calculate the surface area of the top and bottom\n    sa_top = (h * (h + 1)) / 2\n    sa_bottom = (h * (h + 1)) / 2\n    # Calculate the total surface area of the pyramid\n    sa_pyramid = sa_base + sa_top + sa_bottom\n    # Return the surface area of the pyramid\n    return sa_pyramid"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 6*b*b + 4*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + ((b**2) * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b*s + b + s) + 6*(b*b) + 4*(b*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*s*s + b*s*s*s + 8*s*s*s*s\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the length of one side of the square pyramid\n    half_base = b/2\n    area = half_base*s\n\n    # Calculate the surface area of the pyramid\n    surface_area = (3*half_base**2) + (2*half_base*s) + (3*s**2)\n\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s) + (b * s) + ((b**2) * s**2)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(base, height): \n    ''' \n    This function calculates the surface area of a square pyramid given its base and height. \n    ''' \n    surface_area = (base * height) + (base * height) \n    return surface_area "
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n\n    Args:\n        dict1 (dict): Dictionary to check if it is empty\n\n    Returns:\n        bool: True if the dictionary is empty, False otherwise\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return \"Please enter a non-negative integer.\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        fact = [1] * (num+1)\n        for i in range(1, num+1):\n            fact[i] = 4*fact[i-1]*fact[i-2]\n        return fact[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Use matrix exponentiation to calculate the nth Catalan number\n    def matrix_multiply(a, b):\n        result = [[0, 0], [0, 0]]\n        for i in range(2):\n            for j in range(2):\n                for k in range(2):\n                    result[i][j] += a[i][k] * b[k][j]\n        return result\n\n    def matrix_power(matrix, n):\n        if n == 1:\n            return matrix\n        elif n % 2 == 0:\n            half_power = matrix_power(matrix, n // 2)\n            return matrix_multiply(half_power, half_power)\n        else:\n            return matrix_multiply(matrix, matrix_power(matrix, n - 1))\n\n    # Initialize the first row of the matrix\n    matrix = [[1, 1], [1, 0]]\n\n    # Calculate the nth Catalan number\n    for i in range(2, num + 1):\n        matrix = matrix_multiply(matrix, matrix)\n\n    return matrix[0][0]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize variables\n    n = num\n    catalan_number_n = 0\n    catalan_number_n_minus_1 = 1\n    \n    # Calculate catalan number\n    for i in range(1, n+1):\n        catalan_number_n += (i * catalan_number_n_minus_1)\n        catalan_number_n_minus_1 *= (n-i+1)\n    \n    return catalan_number_n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append(4*i*i - 2*i)\n    return catalan[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(2, num+1):\n            catalan_num += binomial(num, i)\n        return catalan_num\n\ndef binomial(n, k):\n    '''\n    Write a function which returns the binomial coefficient.\n    '''\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the n-th Catalan number using the formula:\n\n    C(n, k) = binomial(n, k) * C(n-1, k-1) + binomial(n, k-1) * C(n-1, k)\n\n    This function uses the combination formula to calculate the Catalan numbers.\n    \"\"\"\n\n    # Calculate the factorials for n and n-1\n    n_factorial = 1\n    n_minus_1_factorial = 1\n    for i in range(2, n+1):\n        n_factorial *= i\n        n_minus_1_factorial *= (n-i)\n\n    # Calculate the factorials for k and n-k\n    k_factorial = 1\n    n_minus_k_factorial = 1\n    for i in range(1, n-k+1):\n        k_factorial *= i\n        n_minus_k_factorial *= (n-i)\n\n    # Calculate the binomial coefficient\n    binomial = lambda n, k: (n_factorial // (n_minus_k_factorial * k_factorial)) * (k_factorial // k)\n\n    # Calculate and return the Catalan number\n    return binomial(n, k) * catalan_number(n-1) + binomial(n, k-1) * catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return catalan_number(n//2) * catalan_number(n//2)\n    else:\n        return 2*catalan_number(n//2) * catalan_number(n//2 + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * (2 * num - 1) // (num + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [1]\n    for i in range(1, num+1):\n        total = 0\n        for j in range(i):\n            total += catalan[j] * catalan[i-j-1]\n        catalan.append(total)\n    return catalan[-1]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'(?<![^aeiouAEIOU])(ly)\\b'\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.end(), match.group()))\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # use the re.findall() function to find all non-overlapping occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n\n    # create a list to store the positions of the adverbs\n    positions = []\n\n    # iterate over the matches and add their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # return a tuple containing the adverb and its positions\n    return (matches[0], positions)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the pattern to match for the adverb ending with \"ly\"\n    pattern = r\"\\bly\\b\"\n\n    # Find all the positions of the adverb ending with \"ly\" in the given string\n    positions = re.findall(pattern, text)\n\n    # If the list of positions is empty, return None\n    if not positions:\n        return None\n\n    # Sort the list of positions in ascending order\n    positions.sort()\n\n    # Return the first adverb ending with \"ly\" and its position\n    return positions[0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b([a-z]+)ly\\b'\n    \n    # Use the re.finditer() function to find all matches in the given text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # Initialize a list to store the adverb and its positions\n    adverbs = []\n    \n    # Loop through the matches and extract the adverb and its position\n    for match in matches:\n        # Extract the adverb from the match\n        adverb = match.group(1)\n        # Get the starting and ending positions of the adverb in the original text\n        start = match.start()\n        end = match.end()\n        \n        # Add the adverb and its positions to the list of adverbs\n        adverbs.append((adverb, start, end))\n        \n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    # Use the re.finditer() function to find all the occurrences of the pattern in the input text\n    matches = re.finditer(pattern, text)\n    # Initialize a list to store the positions and adverbs of all the matches\n    result = []\n    # Iterate over all the matches and add their positions and adverbs to the result list\n    for match in matches:\n        # Add the start and end position of the match to the result list\n        result.append((match.start(), match.end()))\n        # Add the matched text to the result list\n        result.append(match.group())\n    # Return the result list\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text)\n    for i, match in enumerate(matches):\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        print(f'Adverb: {match} at positions {start_index} and {end_index}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b([a-z]+)ly\\b'\n    \n    # use re.findall() function to find all matches in the given text\n    matches = re.findall(pattern, text)\n    \n    # initialize an empty list to store the positions of adverbs ending with ly\n    positions = []\n    \n    # loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    \n    # return the list of positions of adverbs ending with ly\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define regular expression pattern to match adverb ending with ly\n    pattern = re.compile(r'\\b[aeiou]y\\b')\n\n    # Find all occurrences of the pattern in the string\n    occurrences = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate through the occurrences and append their positions to the adverb_positions list\n    for index, occurrence in enumerate(occurrences):\n        adverb_positions.append((index, occurrence))\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    positions = []\n    for i in range(len(text)):\n        if text[i:i+3] == 'ly ':\n            positions.append(i)\n    return adverbs, positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # define regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # iterate through the matches and print the positions and adverbs\n    for i, match in enumerate(matches):\n        print(f\"Adverb {i+1}: {match}\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input.\n    The function returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    # We'll use a min heap to keep track of the n most expensive items\n    min_heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # Remove the least expensive item from the heap if we've exceeded n\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # The min heap will now contain the n most expensive items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    '''\n\n    # We can use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        # Add the item to the heap, maintaining the heap property\n        heapq.heappush(heap, -item)\n        # If the heap size is greater than n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Convert the heap to a list of items, sorted in descending order by price\n    result = [heapq.heappop(heap) for _ in range(n)]\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n\n    # Sort the dataset by price in ascending order\n    sorted_items = sorted(items, key=lambda x: x[1])\n\n    # Create a max heap of size n\n    max_heap = []\n\n    # Fill the max heap with the n most expensive items\n    for i in range(n):\n        max_heapq.heappush(max_heap, sorted_items[i])\n\n    # Extract the n most expensive items from the max heap and return them as a list\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a maximum number of items to consider as input.\n    The function returns a list of the n most expensive items.\n    '''\n    heap = [] # initialize an empty heap\n    for item in items: # iterate over the items\n        heapq.heappush(heap, item) # add the item to the heap\n        if len(heap) > n: # if the heap size is greater than the desired number of items, remove the smallest item\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    '''\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Initialize an empty list to store the n most expensive items\n    top_n_expensive = []\n\n    # Iterate over the sorted items and add the top n most expensive items to the list\n    for i in range(n):\n        top_n_expensive.append(sorted_items[i][0])\n\n    return top_n_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min-heap of the n most expensive items\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, -item)\n\n    # Update the heap with the remaining items\n    for item in items[n:]:\n        if -item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -item)\n\n    # Return the top n items in the heap\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap,item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Return the n most expensive items\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n    # Iterate over the remaining items in the dataset\n    for i in range(n,len(items)):\n        # If the current item is cheaper than the smallest item in the heap, remove the smallest item from the heap\n        if items[i] < heap[0]:\n            heapq.heappop(heap)\n        # Add the current item to the heap if it's not already there\n        if items[i] not in heap:\n            heapq.heappush(heap, items[i])\n    # Return the heap, which contains the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input,\n    and returns a list of the n most expensive items in the list.\n    '''\n\n    # Create a min heap with a lambda function to sort by price\n    heap = [(item[1], item) for item in items]\n    heapq.heapify(heap)\n\n    # Pop the n most expensive items from the heap\n    return [item[1] for _ in range(n) for item in heapq.heappop(heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and returns a list of the n most expensive items.\n    '''\n    # Use a min heap to find the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Convert the heap to a list and return it\n    return [-item for item in heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Create a new list to store the splitted elements\n    result = []\n    \n    # Split the list at the nth element and add it to the result list\n    for i in range(n):\n        result.append(l.pop(0))\n    \n    # Add the first part of the list to the result list\n    result.extend(l)\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Create a new list with the first n elements of l\n    first_n_elements = l[:n]\n    # Add the first part of l to the end of the new list\n    new_l = l[n:] + first_n_elements\n    # Return the new list\n    return new_l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0:\n        raise ValueError('n should be greater than 0')\n    if n > len(l):\n        raise ValueError('n should be less than or equal to the length of the list')\n\n    # Split the list at the nth element\n    new_list = l[:n]\n\n    # Add the first part to the end\n    new_list.extend(l[n:])\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the list length is greater than or equal to n\n    if len(l) < n:\n        return \"List length should be greater than or equal to n\"\n    else:\n        # Split the list at the nth element and return the result\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l = l.copy()  # make a copy of the original list\n    if n > len(l):\n        raise ValueError(\"n should be less than or equal to the length of the list\")\n    for i in range(n, len(l)):\n        l.pop()\n    l.extend(l[:n])  # add the first n elements to the end of the list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(n, l.pop(0)) # insert the first element at the nth position and remove it from the list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid index!\"\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    # check if the input is a list\n    if not isinstance(l, list):\n        print(\"Error: Input is not a list!\")\n        return None\n    \n    # check if the input list has at least n elements\n    if len(l) < n:\n        print(\"Error: List has less than n elements!\")\n        return None\n    \n    # split the list at the nth element\n    mid = len(l) // 2\n    l1 = l[:mid]\n    l2 = l[mid:]\n    \n    # add the first part of the original list to the end of the second part\n    l3 = l1 + l2\n    \n    # return the list with the new elements added\n    return l3"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n\n    :param listx: A list to be converted to a tuple.\n    :return: A tuple containing the elements of the list.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum value in the list\n    max_num = max(nums)\n    # Find the minimum value in the list\n    min_num = min(nums)\n    # Calculate the difference between the two values\n    diff = max_num - min_num\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"List must have at least two elements\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # calculate the difference between the two values\n    diff = largest - smallest\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Error: List is empty.\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) > 1:\n        return max(nums) - min(nums)\n    else:\n        return None"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Initialize two variables to store the maximum and minimum values in the list\n    max_num = float('-inf')\n    min_num = float('inf')\n\n    # Loop through each number in the list\n    for num in nums:\n        # If the current number is greater than the maximum, update the maximum\n        if num > max_num:\n            max_num = num\n        # If the current number is less than the minimum, update the minimum\n        if num < min_num:\n            min_num = num\n\n    # Return the difference between the maximum and minimum values\n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Find the largest number between a and b\n    largest_num = max(a, b)\n\n    # Loop through all numbers from 1 to the largest number\n    for num in range(1, largest_num+1):\n\n        # Check if the square of the number is between a and b\n        if num**2 >= a and num**2 <= b:\n            # If the square is within the given range, return the number\n            return num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = int(i**0.5)+1\n        if i == square**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list to store the perfect squares found\n    perfect_squares = []\n    \n    # Loop through each number in the range between a and b (inclusive)\n    for num in range(a, b + 1):\n        # Check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # If it is, append it to the list of perfect squares\n            perfect_squares.append(num)\n    \n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        for j in range(i, b+1, i):\n            result.append(j)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for num in range(a, b+1):\n        square = int(num**0.5)\n        if square**2 == num:\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    result = []\n    for i in range(int(a**0.5) + 1, int(b**0.5) + 1):\n        square = i ** 2\n        if square >= a and square <= b:\n            result.append(square)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize two empty lists to store the squares\n    squares_a = []\n    squares_b = []\n    \n    # Loop through each number between a and b\n    for num in range(a, b+1):\n        # Check if the square of the number is between a and b\n        if num*num >= a and num*num <= b:\n            # Append the square to the appropriate list\n            if num*num == a:\n                squares_a.append(num)\n            else:\n                squares_b.append(num)\n    \n    # Return a tuple with the two lists of perfect squares\n    return (squares_a, squares_b)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Calculate the magnitude (distance from origin) and angle (angle from x-axis)\n    magnitude = cmath.sqrt(x**2 + y**2)\n    angle = cmath.phase(x+y*1j)\n\n    # Calculate the rectangular coordinates using the formulas\n    # x = magnitude * cos(angle)\n    # y = magnitude * sin(angle)\n    x_rect = magnitude * cmath.cos(angle)\n    y_rect = magnitude * cmath.sin(angle)\n\n    # Return the result as a tuple\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): radial coordinate\n    theta (float): angle of the coordinate system\n\n    Returns:\n    x (float): rectangular x-coordinate\n    y (float): rectangular y-coordinate\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to cartesian coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    # Convert polar angle to degrees\n    theta = (theta * 180) / cmath.pi\n\n    # Calculate rectangular coordinates\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n\n    # Return the rectangular coordinates\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert polar coordinates to Cartesian coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    This function converts polar coordinates (r, phi) to rectangular coordinates.\n    \n    Args:\n    r (float): The radius of the circle.\n    phi (float): The angle in radians.\n    \n    Returns:\n    x (float): The x-coordinate of the point in rectangular coordinates.\n    y (float): The y-coordinate of the point in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    \"\"\"\n    Convert polar coordinates (r, phi) to rectangular coordinates.\n    \n    Parameters:\n    r (float): The radius of the circle.\n    phi (float): The angle between the x-axis and the polar axis (in radians).\n    \n    Returns:\n    (x, y): The rectangular coordinates (x, y) of the point (r*cos(phi), r*sin(phi)) in the x-y plane.\n    \"\"\"\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function takes in two parameters, r and theta, and returns the rectangular coordinates (x,y)\n    of the point (x,y) with polar coordinates (r,theta).\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # take the length of the list\n    length = len(newList)\n\n    # check if the list is longer than 1 element\n    if length > 1:\n        # check if the length of the list is odd or even\n        if length % 2 == 0:\n            # if the length of the list is even, swap the first and second elements\n            newList[0], newList[1] = newList[1], newList[0]\n        else:\n            # if the length of the list is odd, swap the first and third elements\n            newList[0], newList[2] = newList[2], newList[0]\n    else:\n        # if the list is empty or has only one element, do nothing\n        pass\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # get the length of the list\n    length = len(newList)\n    \n    # check if the length is greater than 1\n    if length > 1:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List must have at least two elements to swap them.\")\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    # Check if the input list is empty\n    if not newList:\n        print(\"The list is empty.\")\n        return\n    \n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has only one element\n    if length == 1:\n        print(\"The list has only one element.\")\n        return\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the modified list\n    print(\"Modified List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List must have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n\n    # swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # checking if the list has only one element\n    if len(newList) <= 1:\n        return newList\n    # swapping the first and last elements\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        return [last] + [first] + newList[:-1]"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function returns the sum of the product of consecutive binomial co-efficients.\n    The binomial coefficient C(n,k) is defined as the number of possible arrangements of n items taken k at a time.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j, n + 1):\n                sum += (n - k + j - i) * (-1) ** (k - j + i - n)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of consecutive binomial coefficients to 0\n    sum_bin_coef = 0\n\n    # Initialize the loop counter to 0\n    loop_count = 0\n\n    # Loop through the range of consecutive binomial coefficients\n    for i in range(k, n+1):\n\n        # Calculate the current binomial coefficient\n        bin_coef = (n - i + 1) * (k - loop_count) // loop_count\n\n        # Add the current binomial coefficient to the sum of consecutive binomial coefficients\n        sum_bin_coef += bin_coef\n\n        # Increment the loop counter\n        loop_count += 1\n\n    # Return the sum of consecutive binomial coefficients\n    return sum_bin_coef"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(k+1):\n        sum += (n*binomial_Coeff(n-1,i) * binomial_Coeff(i,n-i))\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n = int(n)\n    k = int(k)\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    elif k == 1:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) * (n-k+1) + binomial_Coeff(n-1,k)\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nsum_of_product = binomial_Coeff(n,k)\nprint(\"The sum of the product of consecutive binomial co-efficients is:\",sum_of_product)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k,n+1):\n        sum += i*comb(n,i)\n    return sum\n\nfrom scipy.special import comb"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    s = 0\n    \n    # Loop through the number of terms in the sum\n    for i in range(1, n+1):\n        \n        # Calculate the binomial coefficient for i and k\n        b = (n-i+1) * (k-1) // i\n        \n        # Add the binomial coefficient to the sum\n        s += b\n        \n    # Return the sum of the product of consecutive binomial co-efficients\n    return s"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,k+1):\n        sum += (n-i+1)*binomial_Coeff(n-1,i-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize the sum of the product of consecutive binomial co-efficients to zero\n    sum_product = 0\n\n    # loop through the range of consecutive binomial co-efficients (0 to k)\n    for i in range(k+1):\n\n        # calculate the binomial coefficient\n        binomial_coeff = (n+1)*n//(i*(i+1))\n\n        # add the binomial coefficient to the sum of the product of consecutive binomial co-efficients\n        sum_product += binomial_coeff\n\n    # return the sum of the product of consecutive binomial co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Using matrix exponentiation to calculate binomial coefficient\n    nCr = 1\n    for i in range(1, k+1):\n        nCr = (nCr * (n-i+1)) // i\n    return nCr"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Define regular expression pattern to match IP address with leading zeroes\n    pattern = r'^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])){3}$'\n\n    # Compile regular expression pattern\n    regex = re.compile(pattern)\n\n    # Check if the IP address matches the pattern\n    if regex.match(ip):\n        # Remove leading zeroes from the IP address\n        ip = ip.lstrip('0')\n        return ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(\\d+\\.){3}\\d+$'\n    if re.match(pattern, ip):\n        return ip.lstrip('0')\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match ip address with leading zeroes\n    pattern = re.compile(r'^(0)\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}\\.\\d{1,2}$')\n\n    # If the ip address matches the pattern, return the ip address without leading zeroes\n    if pattern.match(ip):\n        return pattern.sub(r'\\1\\2\\3\\4', ip)\n\n    # If the ip address does not match the pattern, return the original ip address\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(0+(?!$))')\n    ip_no_zero = pattern.sub('', ip)\n    return ip_no_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b\\d{1,3}\\b)\\.(\\b\\d{1,3}\\b)\\.(\\b\\d{1,3}\\b)\\.(\\b\\d{1,3}\\b)', r'\\1.\\2.\\3.\\4', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # remove leading zeroes from ip address\n    ip = re.sub('^0+([1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])', r'\\1', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0+)([0-9]+)$', r'\\2', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+(\\.\\d+){3}\\.\\d+$', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    return re.sub(r'^0+(?=.{4})', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Match all consecutive zeroes in the ip address\n    zero_matches = re.findall(r'(\\d)\\1{2,}', ip)\n    # Iterate over the matches and replace them with a single zero\n    for match in zero_matches:\n        ip = ip.replace(match[0] + '0'*len(match), '0')\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    \n    return count - 2"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        return abs(even_num - odd_num)\n    else:\n        return abs(odd_num - even_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    # Initialize variables to store even and odd numbers\n    even = 0\n    odd = 0\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If the number is even, increment even counter\n            even += 1\n        else:\n            # If the number is odd, increment odd counter\n            odd += 1\n    # Find the difference between even and odd numbers\n    diff = abs(even - odd)\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and finds the difference between the first even and first odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_sum += num\n        else:\n            odd_count += 1\n            odd_sum += num\n    \n    if even_count == 0:\n        return odd_sum\n    elif odd_count == 0:\n        return even_sum\n    else:\n        return abs(even_sum - odd_sum)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number in the list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n            even = even + i\n        else:\n            odd = odd + i\n    diff = abs(even - odd)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2!= 0]\n    if len(even_numbers) == 0 or len(odd_numbers) == 0:\n        return \"The list does not contain any even or odd numbers.\"\n    else:\n        return odd_numbers[0] - even_numbers[0]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError('Input list must have at least two elements.')\n\n    even = [x for x in list1 if x % 2 == 0][0]\n    odd = [x for x in list1 if x % 2!= 0][0]\n\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list\n    for num in list1:\n        # If the number is even and hasn't been seen yet\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        # If the number is odd and hasn't been seen yet\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    # If both even and odd numbers have been seen\n    if even_num is not None and odd_num is not None:\n        # Return the difference\n        return even_num - odd_num\n    # If only one number has been seen\n    else:\n        # Return None\n        return None"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    Args:\n        str1 (str): binary number represented as a string.\n        str2 (str): binary number represented as a string.\n\n    Returns:\n        int: minimum number of swaps required to convert one binary number represented as a string to another.\n\n    \"\"\"\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the number of swaps and the maximum number of bits\n    num_swaps = 0\n    max_bits = max(len(str1), len(str2))\n\n    # Iterate over the binary strings from right to left\n    for i in range(max_bits - 1, -1, -1):\n        # Calculate the XOR of the current bits of both binary strings\n        xor_result = num1 ^ num2\n\n        # Calculate the number of times the XOR result is 0\n        zeros_count = (xor_result >> i) & 1\n\n        # Calculate the number of swaps required to convert the current bit of both binary strings\n        swaps_count = zeros_count * (max_bits - i)\n\n        # Update the number of swaps and the number of remaining bits\n        num_swaps += swaps_count\n        max_bits -= i - zeros_count\n\n    return num_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of 0s and 1s\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n\n    # Check if the two binary strings are of equal length\n    if len(lst1)!= len(lst2):\n        return \"Both binary strings must be of equal length.\"\n\n    # Initialize a variable to keep track of the minimum number of swaps required\n    min_swaps = 0\n\n    # Iterate over the first binary string and swap elements as required\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            if lst1[i] == 0:\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n                min_swaps += 1\n            else:\n                lst1[i], lst2[i] = lst1[i], lst2[i]\n                min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input, and returns the minimum number of swaps required to convert them.\n    \"\"\"\n    n = len(str1) # length of both strings\n    \n    # convert strings to integers and store in a list\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n\n    # find the length of the smallest string\n    min_length = min(n, len(str2))\n    \n    # initialize the minimum number of swaps to be n\n    min_swaps = n\n    \n    # loop through the first string, comparing each character with its corresponding character in the second string\n    for i in range(n):\n        if lst1[i]!= lst2[i]:\n            # if the characters are different, we need to swap one of them\n            min_swaps = min(min_swaps, i+1)\n    \n    # loop through the second string, comparing each character with its corresponding character in the first string\n    for i in range(min_length):\n        if lst1[i]!= lst2[i]:\n            # if the characters are different, we need to swap one of them\n            min_swaps = min(min_swaps, n-i)\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    # convert both binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # check if the number of bits in the two numbers are equal\n    if len(bin(num1))!= len(bin(num2)):\n        return \"Invalid input\"\n\n    # initialize a counter to keep track of swaps required\n    swaps = 0\n\n    # iterate through each bit of the binary strings\n    for i in range(len(bin(num1))-1, -1, -1):\n        # if the bits are different, swap them\n        if bin(num1)[i]!= bin(num2)[i]:\n            # increment the counter of swaps required\n            swaps += 1\n            # perform the swap by shifting the binary string to the right\n            num2 = (int(bin(num2)[i:]+bin(num2)[:i]) << 1) + (int(bin(num2)[:i]+bin(num2)[i:]) >> 1)\n            # perform the swap by shifting the binary string to the left\n            num1 = (int(bin(num1)[i:]+bin(num1)[:i]) << 1) + (int(bin(num1)[:i]+bin(num1)[i:]) >> 1)\n\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert strings to binary\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # find the number of bits in the binary representation of num1 and num2\n    n1 = len(bin(num1)[2:])\n    n2 = len(bin(num2)[2:])\n\n    # initialize variables to store the number of swaps required\n    count = 0\n    swaps = 0\n\n    # swap the bits as required to convert num1 to num2\n    for i in range(n1):\n        if (num1 & (1 << i))!= (num2 & (1 << i)):\n            # if swapping bits will change the binary value, increment the count\n            swaps += 1\n            count += 1\n        # swap the bits in the binary representation of num1 and num2\n        num1 ^= (1 << i)\n        num2 ^= (1 << i)\n\n    # check if the binary representation of num1 and num2 are equal\n    if num1 == num2:\n        count = swaps\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Find lengths of both binary numbers\n    len1 = len(str1)\n    len2 = len(str2)\n    \n    # Initialize a dictionary to store the count of swaps required for each pair of digits\n    count = {}\n    \n    # Iterate through each digit in both binary numbers\n    for i in range(len1):\n        # If the digit in str1 is greater than the digit in str2, increment the count for that digit in the count dictionary\n        if int(str1[i]) > int(str2[i]):\n            if str1[i] not in count:\n                count[str1[i]] = 0\n            count[str1[i]] += 1\n            \n    # Find the minimum count of swaps required in the count dictionary\n    min_count = min(count.values())\n    \n    # Return the minimum count of swaps required\n    return min_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    if len(str1)!= len(str2):\n        return \"Error: Both strings must have same length\"\n    \n    # Initialize two variables to keep track of the number of 0 and 1 in the two binary strings\n    count1 = 0\n    count2 = 0\n    \n    # Iterate through each character in the binary strings\n    for i in range(len(str1)):\n        # If the current character in str1 is 0, increment count1\n        if str1[i] == '0':\n            count1 += 1\n        # If the current character in str2 is 0, increment count2\n        elif str2[i] == '0':\n            count2 += 1\n    \n    # Calculate the difference between the counts of 0's in str1 and str2\n    diff = abs(count1-count2)\n    \n    # Calculate the minimum number of swaps required to convert the two binary strings\n    min_swaps = 0\n    while diff > 0:\n        min_swaps += 1\n        diff >>= 1\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n1 = len(str1)\n    n2 = len(str2)\n    count = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n    \n    # Initialize a variable to keep track of the number of swaps required\n    swaps = 0\n    \n    # Convert the binary numbers to strings and keep track of the swaps required\n    while bin1!= bin2:\n        if bin1 < bin2:\n            bin1 = bin1 << 1\n            swaps += 1\n        else:\n            bin2 = bin2 << 1\n            swaps += 1\n            \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the input strings are valid binary numbers\n    for char in str1 + str2:\n        if char not in ['0', '1']:\n            raise ValueError(\"Input strings must be valid binary numbers\")\n\n    # Convert input strings to binary numbers\n    binary1 = bin(int(str1, 2))[2:]\n    binary2 = bin(int(str2, 2))[2:]\n\n    # Initialize variables to store count of swaps and current swap count\n    swap_count = 0\n    curr_swap = 0\n\n    # Iterate through the binary strings from right to left\n    for i in range(len(binary1) - 1, -1, -1):\n        # If the current characters are different, swap them\n        if binary1[i]!= binary2[i]:\n            swap_count += curr_swap\n            curr_swap = 0\n        # If the current characters are the same, do nothing\n        else:\n            curr_swap += 1\n\n    # Add the final swap count to the total\n    swap_count += curr_swap\n\n    return swap_count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"The size of the given tuple is: \")\n    sys.stdout.write(str(sys.getsizeof(tuple_list)))\n    sys.stdout.write(\"\\n\")"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        if type(tuple_list[i]) == tuple:\n            total_size += tuple_size(tuple_list[i])\n        else:\n            total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple_obj in tuple_list:\n        total_size += sys.getsizeof(tuple_obj)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert tuple_list to bytes\n    byte_list = bytearray(tuple_list)\n    # calculate the size of the byte_list\n    size = len(byte_list)\n    # convert the size to bytes and return\n    return size.to_bytes(8, byteorder='big')"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n = len(arr1)\n    m = len(arr2)\n\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == m - i:\n                return arr2[j]\n            k -= m - i\n            j += 1\n        else:\n            if k == (n - i):\n                return arr1[i]\n            k -= n - i\n            i += 1\n            j += 1\n\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k and returns the kth smallest element.\n\n    Args:\n        arr1 (list): the first sorted array.\n        arr2 (list): the second sorted array.\n        k (int): the index of the kth smallest element.\n\n    Returns:\n        int: the kth smallest element.\n\n    Raises:\n        TypeError: if arr1 or arr2 is not a list.\n        IndexError: if arr1 or arr2 is empty.\n        ValueError: if k is not a positive integer.\n    \"\"\"\n\n    if not isinstance(arr1, list) or not isinstance(arr2, list):\n        raise TypeError(\"Both arr1 and arr2 must be lists.\")\n\n    if not arr1 or not arr2:\n        raise IndexError(\"Both arr1 and arr2 must not be empty.\")\n\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError(\"k must be a positive integer.\")\n\n    if len(arr1)!= len(arr2):\n        raise IndexError(\"Both arr1 and arr2 must have the same length.\")\n\n    while len(arr1) > 1:\n        mid1 = len(arr1) // 2\n        mid2 = len(arr2) // 2\n        arr1, arr2 = arr1[:mid1], arr2[:mid2] + arr1[mid1:] + arr2[mid2:]\n\n    return arr1[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return \"Element not found\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If either array is empty, return None\n    if n1 == 0 or n2 == 0:\n        return None\n\n    # Find the maximum element of the first array\n    max_val = max(arr1[-1], arr1[-2])\n\n    # Initialize a variable to store the index of the maximum element in the second array\n    max_index = 0\n\n    # Initialize a variable to store the current index in the second array\n    current_index = 0\n\n    # Initialize a variable to store the result\n    result = None\n\n    # Iterate through the first array\n    for i in range(n1 - 1, -1, -1):\n\n        # If the element in the first array is less than or equal to the maximum element\n        if arr1[i] <= max_val:\n\n            # If the current index is less than k\n            if current_index < k:\n\n                # If the current index is less than the current maximum element in the second array\n                if current_index < max_index:\n\n                    # Move the current index to the next element in the second array\n                    current_index += 1\n\n                    # If the current index is equal to k, update the result and break\n                    if current_index == k:\n                        result = arr2[current_index]\n                        break\n\n            # If the current index is equal to k, update the result and break\n            elif current_index == k:\n                result = arr2[current_index]\n                break\n\n    # Return the result\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if i == k-1:\n                return arr1[i]\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if j == k-1:\n                return arr2[j]\n            j += 1\n        else:\n            if i == k-1:\n                return arr1[i]\n            i += 1\n            j += 1\n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    # If the length of arr1 is smaller than arr2, the kth element is in arr1[i:]\n    if i == n1:\n        return arr2[j:j+k]\n    # If the length of arr2 is smaller than arr1, the kth element is in arr2[j:]\n    else:\n        return arr1[i:i+k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge two sorted arrays\n    merged_arr = arr1 + arr2\n\n    # Find the kth element in the merged array\n    for i in range(len(merged_arr)):\n        if i == k-1:\n            return merged_arr[i]\n        elif i >= k-1:\n            return merged_arr[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the given number to a string\n    number_str = str(number)\n    # Calculate the sum of the squares of the digits of the number\n    sum_of_squares = sum([int(digit)**len(digit) for digit in number_str])\n    # Compare the given number with the sum of squares\n    if number == sum_of_squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(num):\n    # Initialize a variable to store the sum of the digits of the number\n    digit_sum = 0\n    # Convert the number to a string and then to a list of digits\n    num_str = str(num)\n    num_list = [int(d) for d in num_str]\n    # Loop through the digits of the number and add them to the digit_sum\n    for digit in num_list:\n        digit_sum += digit**len(num_str)\n    # Check if the digit_sum is equal to the original number\n    if digit_sum == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(number):\n    num_str = str(number)\n    num_list = list(num_str)\n    num_list.sort()\n    num_str = ''.join(num_list)\n    return int(num_str) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(number):\n    # Initialize a variable to store the sum of the cube of digits\n    cube_sum = 0\n    \n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Loop through each digit in the string and add its cube to the sum\n    for digit in number_str:\n        digit = int(digit)\n        cube_sum += digit ** 3\n    \n    # Return True if the sum of the cubes of the digits is equal to the original number\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the given number into a string\n    number_str = str(number)\n\n    # initialize variables\n    temp_num = number\n    arm_num = 0\n    temp_num_str = ''\n\n    # convert the given number into a list of digits\n    num_list = [int(i) for i in number_str]\n\n    # calculate the sum of the cube of each digit\n    for i in num_list:\n        temp_num_str += str(i**3)\n        arm_num += int(temp_num_str)\n        temp_num_str = ''\n\n    # check if the given number is equal to the sum of its cube\n    if number == arm_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(n)\n    total = 0\n    temp = n\n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n\n    return total == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is an Armstrong number or False otherwise.\n    \"\"\"\n    num_str = str(num)\n    num_list = [int(i) for i in num_str]\n    num_sum = sum(num_list)\n    num_squared_sum = sum([i**2 for i in num_list])\n    if num_sum == num_squared_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"Return True if n is an Armstrong number, False otherwise.\"\"\"\n    if n < 10:\n        return False\n    else:\n        total = 0\n        d = n\n        while d > 0:\n            r = d % 10\n            total += r ** 3\n            d //= 10\n        return n == total\n\ndef armstrong_number(n):\n    \"\"\"Check whether n is an Armstrong number.\"\"\"\n    return is_armstrong(n)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Find the length of the number\n    length = len(str(number))\n    # Initialize a counter variable to keep track of the digits\n    count = 0\n    # Multiply each digit of the number with the power of the length of the number\n    for digit in str(number):\n        count += int(digit) ** length\n    # Check if the count is equal to the original number\n    if count == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        total += digit ** 3\n        n //= 10\n    if number == total:\n        print(f'{number} is an armstrong number.')\n    else:\n        print(f'{number} is not an armstrong number.')"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize sum and count\n    sum = 0\n    count = 0\n\n    # loop through the first n numbers\n    for i in range(1, number+1):\n        # add the number to the sum\n        sum += i\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # print the sum and average\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if number < 1:\n        return \"Please enter a positive integer greater than or equal to 1\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        return \"Invalid input. Number should be non-negative.\"\n    \n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n\n    average = sum / number\n\n    return f\"The sum of first {number} natural numbers is: {sum}\\nThe average of first {number} natural numbers is: {average}\""
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_value = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum_value += i\n        count += 1\n    average = sum_value / count\n    print(\"Sum:\", sum_value)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    print(\"The sum of first\", number, \"natural numbers is\", total)\n    print(\"The average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # Find the sum of the first n natural numbers\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n        \n    # Calculate the average\n    average = sum / count\n\n    # Return the sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum_of_numbers = 0\n    count = 0\n    # loop through first n natural numbers\n    for i in range(1, number + 1):\n        # add each natural number to sum\n        sum_of_numbers += i\n        # increment count\n        count += 1\n    # calculate average\n    average = sum_of_numbers / count\n    # return result\n    return sum_of_numbers, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        print(n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initializing an empty dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # iterating through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # iterating through each character in the string again to find the first repeated character\n    for char in str1:\n        # if the frequency of the character is greater than 1, return the character\n        if freq[char] > 1:\n            return char\n\n    # if no character was found with a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}  # dictionary to store the count of each character in the string\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == max(char_count.values()):\n            return char\n    \n    return None  # if no repeated character is found, return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in char_count:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # loop through the dictionary and find the first repeated character\n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # dictionary to store character counts\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 2:\n            return char\n    \n    return \"There is no repeated character in the string\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character by iterating over the dictionary and returning the key of the first entry with a frequency of 2 or more\n    for char, count in freq.items():\n        if count >= 2:\n            return char\n    \n    # If no repeated character was found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_set = set()\n    for i in range(1, n+1):\n        for j in range(i, n+1, i):\n            lucid_set.add(j)\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if len(str(i)) == len(str(lucid_numbers[-1])) + 1:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize a set to store the lucid numbers\n    lucid_set = set()\n\n    # Initialize two pointers, one for the first digit and one for the second digit\n    num = n\n    first = 0\n    second = 1\n\n    # Loop until the first digit is greater than or equal to the second digit\n    while first >= second:\n        # Calculate the current lucid number\n        lucid_num = first * 10 + second\n\n        # If the current lucid number is less than or equal to n, add it to the set\n        if lucid_num <= n:\n            lucid_set.add(lucid_num)\n\n        # Calculate the next digit for the first pointer\n        first += 1\n\n        # Calculate the next digit for the second pointer\n        second += 1\n\n    # Return the set of lucid numbers\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucids.append(i)\n    return lucids\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a number is a lucid number or not.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [2]\n    for i in range(3, n+1):\n        if i%2 == 0:\n            lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    i = 1\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n            ludic_numbers.append(i)\n        i += 1\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if i % sum(map(int, str(i))) == 0:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    i = 2\n    while i <= n:\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucids.append(i)\n        i += 1\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == 4:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = [2]\n    for i in range(3, n):\n        if is_lucid(i):\n            lucid.append(i)\n    return lucid\n\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given integer is a lucid number or not.\n    \"\"\"\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove spaces from string\n    s = s.replace(' ', '')\n    # Split the string into words\n    words = s.split()\n    # Reverse the words\n    words = words[::-1]\n    # Join the words with spaces and return the reversed string\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the words back together with spaces\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove spaces from the string and split it into words\n    words = s.split()\n    # reverse each word and join them back into a string\n    reversed_words =''.join(word[::-1] for word in words)\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return''.join([word[::-1] for word in words])[::-1]"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back together with spaces\n    reversed_s =''.join(reversed_words)\n    # return the reversed string\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given integer is a prime number or not.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if the given integer is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Check if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(7)) # True\nprint(prime_num(12)) # False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree input and returns the corresponding\n    radians value.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.pi / 180 * degree\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the corresponding radian value.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return math.pi/180 * degree"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi/180*degree"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        return match, len(text) - len(match) - len(pattern), len(text) - len(match)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regular expressions to search for pattern in text\n    matches = re.finditer(pattern, text)\n\n    # Iterate through matches and extract the literals\n    literals = []\n    for match in matches:\n        literals.append(match.group(0))\n\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as input and returns a tuple containing the matching substring, the start index, and the end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Find all non-escaped literal substrings in a string that match a regex pattern.\n    Return a list of tuples, each containing the literal substring, a start index, and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        result.append((match, start, end))\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the variable to store the nth bell number\n    bell_num = 0\n    # Loop through each number from 0 to n\n    for i in range(n+1):\n        # Add the value of the bell number to the variable\n        bell_num += binomial(n, i)\n    return bell_num\n\ndef binomial(n, k): \n    '''\n    Write a python function to find the binomial coefficient.\n    '''\n    # Initialize the variable to store the binomial coefficient\n    coeff = 1\n    # Loop through each number from 0 to k\n    for i in range(k+1):\n        # Multiply the coefficient by (n-i+1) and (i+1)\n        coeff *= (n-i+1)\n        coeff *= i+1\n    return coeff"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    This function will return the nth Bell number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return (2*n) + (bell_Number(n-1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * (bell_Number(n-1)) + (bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 0\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell * i * (2*n-i) // (i+1)\n    return bell\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number.\n    '''\n    bell_numbers = [1] * (n+1)\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n\n    for i in range(2, n+1):\n        bell_numbers[i] = bell_numbers[i-1] + bell_numbers[i-2]\n\n    return bell_numbers[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n*bell_Number(n-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialize an empty list to hold the elements we want to keep\n    new_list = []\n    # loop through the list and keep only the k'th element\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return [x for i, x in enumerate(list1) if i!= L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    while k < len(list1):\n        list1[k] = list1[k + 1]\n        k += 1\n    del list1[len(list1) - 1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1) + [list1[0]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and removes the kth element from it.\n    \"\"\"\n    k = L - 1\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create an empty list to store the new list\n    new_list = []\n\n    # Loop through the list and remove the k'th element\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:L]\n    list2.append(list1[L])\n    return list2"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, this function returns the maximum value of the Nth column.\n    \"\"\"\n    max_values = []\n    for row in matrix:\n        max_values.append(max(row[N-1], key=lambda x: x))\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # calculate the length of the list\n    length = len(test_list)\n    \n    # iterate through each row in the list\n    for i in range(length):\n        # get then'th column of the row\n        nth_col = [row[N-1] for row in test_list[:i]]\n        \n        # find the maximum value in the nth column\n        max_val = max(nth_col)\n        \n        # update the maximum value in the nth column\n        test_list[i][N-1] = max_val\n    \n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Define a function that returns the max of then'th column of a matrix\n    def max_column(matrix, N):\n        # Initialize a variable to store the max value of then'th column\n        max_val = None\n        # Loop through the rows of the matrix\n        for row in matrix:\n            # If the value in then'th column is greater than the current max value, update max_val\n            if max_val is None or row[N] > max_val:\n                max_val = row[N]\n        # Return the max value of then'th column\n        return max_val\n    \n    # Initialize an empty list to store the max values of then'th column of each matrix in the list\n    max_values = []\n    # Loop through the matrices in the list\n    for matrix in test_list:\n        # If the matrix has at least one row, calculate and append the max value of then'th column to the list\n        if len(matrix) > 0:\n            max_values.append(max_column(matrix, N))\n    # Return the list of max values\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Calculate the total number of rows and columns in the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n\n    # Check if the n is within the range of valid indices\n    if N > cols or N < 1:\n        return \"Error: n is not within the valid range\"\n\n    # Initialize a variable to store the max value found so far\n    max_val = -float('inf')\n\n    # Loop through each row in the matrix\n    for i in range(rows):\n        # Check if then'th column value is greater than the current max value\n        if test_list[i][N-1] > max_val:\n            # If it is, update the max value\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows in the matrix\n    num_rows = len(test_list)\n    # Check if the N value is valid\n    if N < 1 or N > num_rows:\n        return \"Invalid N value\"\n    # Initialize the max value as negative infinity\n    max_value = float('-inf')\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Get the value of then'th column\n        value = row[N-1]\n        # Update the max value if the current value is greater than max value\n        if value > max_value:\n            max_value = value\n    # Return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # get the length of the first row\n    length = len(test_list[0])\n\n    # loop through each row\n    for i in range(len(test_list)):\n        # get then'th column\n        nth_col = [row[N-1] for row in test_list[i:i+length]]\n\n        # find the maximum value in the nth column\n        max_val = max(nth_col)\n\n        # print the maximum value of the nth column\n        print(max_val)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize an empty list to store the max values\n    max_list = []\n    \n    # Loop through each row in the matrix\n    for row in test_list:\n        # Get the nth column from the row\n        nth_col = [row[i] for i in range(len(row)) if i % N == 0]\n        # Find the maximum value in the nth column\n        max_val = max(nth_col)\n        # Append the maximum value to the max_list\n        max_list.append(max_val)\n    \n    # Return the max_list\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    \n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        first_elem = sublist[0]\n        second_elem = sublist[1]\n        merged_lst.append([first_elem, second_elem])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the sum to zero\n    cum_sum = 0\n    \n    # Iterate through the tuple list\n    for tup in test_list:\n        # Iterate through the values in the tuple\n        for val in tup:\n            # Add each value to the cumulative sum\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # Iterate through the list of tuples and add each value to the cumulative sum\n    for item in test_list:\n        cum_sum += item\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for num in test_list:\n        sum += num\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for val in test_list:\n        cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for element in test_list:\n        total_sum += element\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][0]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple) / len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    total = 0\n    count = 0\n    \n    for tup in nums:\n        total += sum(tup)\n        count += 1\n        \n    average = total / count\n    \n    return average"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    avg_list = []\n    \n    # loop through each tuple in the list\n    for tup in nums:\n        # loop through each element in the tuple\n        for elem in tup:\n            # add the element to the running sum of the averages\n            running_sum += elem\n        # divide the running sum by the length of the tuple to get the average\n        avg = running_sum / len(tup)\n        # append the average to the list of averages\n        avg_list.append(avg)\n        # reset the running sum for the next tuple\n        running_sum = 0\n        \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        average_list.append(average)\n    return average_list\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    if len(nums) == 1:\n        return [sum(x)/len(x) for x in nums]\n    else:\n        averages = []\n        for i in range(len(nums[0])):\n            sub_averages = average_tuple([x[i] for x in nums])\n            averages.append(sum(sub_averages)/len(sub_averages))\n        return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n        \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n    \n    # Perform element wise modulo\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n        \n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if both tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple lengths are not equal\"\n    \n    # perform element-wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # perform element-wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    \n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a list to store number of jumps for each step\n    jumps = []\n    # loop through the steps\n    for i in range(len(steps)):\n        # calculate the distance for each step\n        dist = steps[i] * d\n        # if the distance is greater than d, then add 1 to the number of jumps\n        if dist > d:\n            jumps.append(1)\n        # else, add the minimum number of jumps required to reach the point of form (d, 0) from origin\n        else:\n            min_jumps = (d - dist) // d\n            jumps.append(min_jumps)\n    # calculate the sum of all jumps and return it\n    return sum(jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    dp = [[float('inf')] * (d+1) for _ in range(steps+1)]\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            dp[i][j] = min(dp[i-1][j-k] + 1 if j-k > 0 else float('inf') for k in range(1, i+1))\n    return dp[steps][d]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    row, col = 0, 0\n    # Loop until row and column are equal to d and d\n    while row!= d and col!= d:\n        # Move down\n        row += 1\n        count += 1\n        # Check if row is outside the grid\n        if row == len(steps):\n            # Move right\n            col += 1\n            count += 1\n        # Check if col is outside the grid\n        if col == len(steps[0]):\n            # Move left\n            col -= 1\n            count += 1\n        # Check if (row, col) is equal to d, then stop the loop\n        if steps[row][col] == d:\n            break\n    # Return count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    x = 0\n    y = 0\n    jumps = 0\n\n    # Check if the point (x, y) is at the bottom right corner\n    if x >= steps and y >= steps:\n        return jumps\n    \n    # Check if the point (x, y) is at the bottom left corner\n    if x == 0 and y == 0:\n        return jumps\n    \n    # Check if the point (x, y) is at the top left corner\n    if x == 0 and y == steps-1:\n        return jumps\n    \n    # Check if the point (x, y) is at the top right corner\n    if x == steps-1 and y == steps-1:\n        return jumps\n    \n    # Check if the point (x, y) is on the diagonal\n    if x > 0 and y > 0:\n        dx = x-y\n        if dx <= d:\n            jumps += dx\n            return min_Jumps(steps, d)\n        else:\n            return jumps\n    \n    # If none of the above conditions are met, then check if the point (x, y) is above the origin\n    if y == 0:\n        jumps += y\n        return min_Jumps(steps, d)\n    \n    # If none of the above conditions are met, then check if the point (x, y) is left of the origin\n    if x == 0:\n        jumps += x\n        return min_Jumps(steps, d)\n    \n    # If none of the above conditions are met, then check if the point (x, y) is at the origin\n    if x == y == 0:\n        return jumps\n    \n    # If none of the above conditions are met, then the point is not reachable\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    while i < steps:\n        jumps += 1\n        if i + d >= steps:\n            break\n        i += d\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # initialize variables\n    steps = steps + 1\n    row, col = 0, 0\n    jumps = 0\n    \n    # loop through the list of steps\n    for i in range(steps):\n        # if the row is greater than or equal to d, increment the jumps count and reset the row and column to the origin\n        if row >= d:\n            row, col = 0, 0\n            jumps += 1\n            \n        # if the row is less than d, move to the next row\n        else:\n            row += 1\n            \n        # if the column is less than or equal to d, increment the column\n        elif col <= d:\n            col += 1\n            \n    # return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    current_position = 0\n    max_position = steps - 1\n    next_position = current_position + d\n    \n    while current_position <= max_position:\n        jumps += 1\n        if next_position > max_position:\n            next_position = max_position + 1\n        \n        current_position = next_position\n        next_position = current_position + d\n        \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps < d:\n        return -1\n    elif d == 1:\n        return 1\n    \n    jumps = 0\n    curr_pos = 0\n    prev_pos = 1\n    \n    while curr_pos < len(steps) - 1:\n        if steps[curr_pos] >= prev_pos:\n            prev_pos = steps[curr_pos]\n            curr_pos += 1\n            jumps += 1\n        else:\n            if curr_pos - prev_pos > d:\n                return jumps - 1\n            else:\n                prev_pos = curr_pos\n                curr_pos += 1\n    \n    if curr_pos == len(steps) - 1:\n        return jumps\n    \n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize the two pointers\n    left, right = 0, 0\n\n    # Iterate through the steps\n    for step in range(steps):\n        # If the right pointer is at the point of interest\n        if right == d:\n            return step\n        # If the right pointer is less than the point of interest\n        elif right < d:\n            # Move the right pointer to the next point\n            right += 1\n        # If the right pointer is greater than the point of interest\n        else:\n            # Move the left pointer to the next point\n            left += 1\n\n    # If the loop ends, there is no point of interest, so return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    end_pos = (0, d)\n    \n    # Iterate until the end point is reached\n    while curr_pos!= end_pos:\n        \n        # Increment jumps if current position is within the range\n        if 0 <= curr_pos[0] < steps and 0 <= curr_pos[1] < steps:\n            jumps += 1\n        \n        # Move in the direction of the end point\n        if curr_pos[1] == 0:\n            curr_pos = (curr_pos[0] - 1, curr_pos[1])\n        else:\n            curr_pos = (curr_pos[0], curr_pos[1] - 1)\n            \n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of the two lists is equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    # Divide each element of the two lists\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists should have the same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of all the digits in the string\n    nums = [char for char in test_str if char.isdigit()]\n    # sort the list of digits\n    nums.sort(key=int)\n    # join the sorted digits back into a string\n    result = ''.join(nums)\n    # return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Define a variable to store the numbers\n    nums = []\n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, append it to the nums list\n        if char.isdigit():\n            nums.append(char)\n    # Reverse the nums list to move it to the end of the string\n    nums.reverse()\n    # Join the nums list into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a variable to store the numbers\n    num_list = []\n    # loop through the characters in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n    # reverse the order of the num_list\n    num_list.reverse()\n    # join the characters of the num_list into a string\n    result = ''.join(num_list)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(test_str)\n    # Initialize two pointers, one for the start of the string and the other for the end of the string\n    start = 0\n    end = len(chars) - 1\n    # Initialize a variable to store the count of numbers in the string\n    num_count = 0\n    # Loop through the string from the start to the end\n    for i in range(start, end):\n        # If the current character is a number, add it to the count and move the pointer to the next character\n        if chars[i].isdigit():\n            num_count += 1\n            start = i + 1\n        # If the current character is not a number, move the pointer to the next character\n        else:\n            end = i\n    # Initialize another variable to store the count of digits in the string\n    digit_count = 0\n    # Loop through the string from the start to the end\n    for i in range(start, end):\n        # If the current character is a digit, add it to the count and move the pointer to the next character\n        if chars[i].isdigit():\n            digit_count += 1\n            start = i + 1\n        # If the current character is not a digit, move the pointer to the next character\n        else:\n            end = i\n    # If there are more digits than numbers in the string, move all the numbers to the end of the string\n    if digit_count > num_count:\n        for i in range(digit_count - num_count, 0, -1):\n            chars.insert(start, chars.pop(end))\n            start += 1\n            end -= 1\n    # If there are fewer digits than numbers in the string, move all the digits to the end of the string\n    else:\n        for i in range(num_count - digit_count, 0, -1):\n            chars.insert(start, chars.pop(end))\n            start += 1\n            end -= 1\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    # initialize variables to store the count of digits, letters, and other characters\n    digit_count = 0\n    letter_count = 0\n    other_count = 0\n    \n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a digit, add 1 to the digit count\n        if char.isdigit():\n            digit_count += 1\n        # if the character is a letter, add 1 to the letter count\n        elif char.isalpha():\n            letter_count += 1\n        # if the character is not a digit, letter, or other character, add 1 to the other count\n        else:\n            other_count += 1\n    \n    # move the digits to the end of the string\n    test_str = test_str.replace('0123456789', '')\n    \n    # move the letters to the end of the string\n    test_str = ''.join(sorted(test_str, key=lambda x: x.lower()))\n    \n    # move the other characters to the end of the string\n    test_str += test_str[:digit_count] + test_str[digit_count+letter_count:other_count]\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n    return test_str + numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(test_str)\n    \n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = len(chars) - 1\n    \n    # Iterate through the list until the pointers meet in the middle\n    while left < right:\n        # Check if the character at the left pointer is a number\n        if chars[left].isdigit():\n            # If it is, move it to the right\n            chars[left], chars[right] = chars[right], chars[left]\n            right -= 1\n        \n        # If the character at the right pointer is a number, move it to the left\n        elif chars[right].isdigit():\n            chars[right], chars[left] = chars[left], chars[right]\n            left += 1\n        \n        # Move both pointers to the next position\n        else:\n            left += 1\n            right -= 1\n    \n    # Convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words and iterate over each word\n    for word in test_str.split():\n        # Remove any non-numeric characters from the word\n        word = ''.join(filter(str.isdigit, word))\n        # Check if the word is a number\n        if word.isdigit():\n            # Remove the number from the original word and append it to the end of the new word\n            test_str = test_str.replace(word, '', 1)\n            test_str += word\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbers\n    nums = ''\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Add the number to the nums string\n            nums += char\n    \n    # Reverse the nums string\n    nums = nums[::-1]\n    \n    # Loop through each character in the test_str and append the numbers to the end\n    for i in range(len(test_str)):\n        # Check if the current character is a number\n        if test_str[i].isdigit():\n            # Check if the next character is a number\n            if i+1 < len(test_str) and test_str[i+1].isdigit():\n                # If both are numbers, move the numbers to the end\n                test_str = test_str[:i] + nums + test_str[i+2:]\n                break\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    test_str = test_str.replace(num_str, '')\n    test_str = test_str + num_str\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    pairs = {}\n    max_size = 0\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                pairs[(i,j)] = a[i]\n    \n    for pair in pairs:\n        size = 0\n        while pair[0] > 0:\n            size += 1\n            pair[0] -= a[pair[0]-1]\n        while pair[1] < len(a)-1:\n            size += 1\n            pair[1] += 1\n        \n        if size > max_size:\n            max_size = size\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    subset_size = 1\n    current_subset = [a[0]]\n\n    for i in range(1, len(a)):\n        if a[i] % current_subset[-1] == 0:\n            current_subset.append(a[i])\n            subset_size += 1\n        else:\n            current_subset = [a[i]]\n\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    current_size = 0\n    pairs = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                pairs.add((a[i], a[j]))\n                current_size += 1\n                if current_size > max_size:\n                    max_size = current_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the count of numbers in each subset\n    count = {}\n    # Create a set to store the numbers that make up each subset\n    subset = set()\n    # Initialize the size of the largest subset to 0\n    max_size = 0\n    # Iterate over the numbers in the list\n    for num in a:\n        # Check if the number is already in the dictionary\n        if num in count:\n            # If it is, increment the count of the number by 1\n            count[num] += 1\n        else:\n            # If it isn't, add the number to the dictionary with a count of 1\n            count[num] = 1\n        # Iterate over the numbers in the dictionary to find the largest subset\n        for key in count:\n            # If the count of the current number is greater than the count of the key, add the key to the subset and update the count of the key\n            if count[key] > count[num]:\n                subset.add(key)\n                count[key] = count[num]\n                # Check if the size of the subset is greater than the current size of the largest subset\n                if len(subset) > max_size:\n                    max_size = len(subset)\n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    n = len(a)  # get the length of the list\n\n    # initialize variables for the maximum size and the maximum subset\n    max_size = 0\n    max_subset = []\n\n    # loop through each element in the list\n    for i in range(n):\n        # initialize variables for the current subset and its size\n        subset = [a[i]]\n        current_size = 1\n\n        # loop through the remaining elements in the list\n        for j in range(i+1, n):\n            # check if the current element is divisible by the subset element\n            if a[j] % subset[-1] == 0:\n                # add the current element to the subset and increment its size\n                subset.append(a[j])\n                current_size += 1\n            else:\n                # the current element is not divisible by the subset element,\n                # so we can break the inner loop and move on to the next subset\n                break\n\n        # update the maximum size and the maximum subset if the current size is greater\n        if current_size > max_size:\n            max_size = current_size\n            max_subset = subset\n\n    # return the maximum subset\n    return max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # Initialize an empty list to store the subsets\n    subsets = []\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Loop through the sorted list\n    for i in range(len(a)):\n        # Initialize an empty list to store the current subset\n        subset = []\n\n        # Loop through the remaining elements in the list\n        for j in range(i + 1, len(a)):\n            # If the current element is divisible by the next element, add it to the subset\n            if a[j] % a[i] == 0:\n                subset.append(a[j])\n\n        # Add the current subset to the list of subsets if it has a larger size than any previous subset\n        if len(subset) > len(subsets) and len(subset) > 0:\n            subsets = [subset]\n        elif len(subset) > len(subsets) and len(subset) == 0:\n            pass\n        elif len(subset) == len(subsets) and len(subset) > 0:\n            # Add the current subset to the list of subsets if it has the same size as any previous subset\n            subsets.append(subset)\n\n    # Return the size of the largest subset found\n    return max([len(subset) for subset in subsets])"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    for i in range(n):\n        subset_size = 1\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                subset_size += 1\n            else:\n                break\n        max_size = max(max_size, subset_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # convert the list to a set to avoid duplicates and to make it more efficient for membership testing\n    set_a = set(a)\n    # initialize variables to keep track of the current largest subset size and the current maximum subset size\n    max_subset_size = 0\n    curr_subset_size = 0\n    # loop over all possible pairs of numbers in the list\n    for i in range(len(set_a)):\n        for j in range(i+1, len(set_a)):\n            # if the sum of the two numbers is divisible by 2, we found a valid pair\n            if sum(set_a[i], set_a[j]) % 2 == 0:\n                # update the maximum subset size if necessary\n                if curr_subset_size + 2 > max_subset_size:\n                    max_subset_size = curr_subset_size + 2\n                # update the current subset size\n                curr_subset_size += 2\n    # return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged = arr1 + arr2\n    \n    # Sort the merged list in ascending order\n    merged.sort()\n    \n    # Calculate the length of the list\n    length = len(merged)\n    \n    # If the length is odd, then the median is the middle element\n    if length % 2 == 1:\n        return merged[length // 2]\n    \n    # If the length is even, then the median is the average of the middle two elements\n    else:\n        return (merged[length // 2 - 1] + merged[length // 2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the size of the array is even, take the average of the two middle values\n        median = (merged_arr[n//2-1] + merged_arr[n//2]) / 2\n    else:\n        # If the size of the array is odd, take the middle value\n        median = merged_arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into a single array\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the array has an even length\n        median = (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        # If the array has an odd length\n        median = merged_arr[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Combine the two lists and sort it\n    combined_list = arr1 + arr2\n    combined_list.sort()\n\n    # Find the median\n    if len(combined_list) % 2 == 0:\n        median = (combined_list[len(combined_list) // 2 - 1] + combined_list[len(combined_list) // 2]) / 2\n    else:\n        median = combined_list[len(combined_list) // 2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one\n    merged_arr = arr1 + arr2\n\n    # Sort the merged list\n    sorted_arr = sorted(merged_arr)\n\n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2\n    else:\n        median = sorted_arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in three arrays, arr1, arr2, and n, and returns the median\n    of the two sorted lists of same size.\n\n    Args:\n        arr1 (list): List of integers.\n        arr2 (list): List of integers.\n        n (int): Length of both lists.\n\n    Returns:\n        int: The median of the two sorted lists of same size.\n    \"\"\"\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n] if n % 2 == 0 else (arr[n] + arr[n-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two lists\n    merged_arr = arr1 + arr2\n\n    # Sort the merged list\n    sorted_arr = sorted(merged_arr)\n\n    # Find the median\n    median = sorted_arr[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n    arr1 (list): First sorted list.\n    arr2 (list): Second sorted list.\n    n (int): Size of the lists.\n\n    Returns:\n    float: The median of the two sorted lists.\n    \"\"\"\n    # Merge the two lists into a single sorted list\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the middle element of the merged list\n    mid = n // 2\n    median = merged_list[mid]\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num, num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes in a list of numbers and an integer n as input.\n    It then computes the n-th power of each number in the list and returns the result as a new list.\n    '''\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each number in the input list\n    for num in nums:\n\n        # Compute the n-th power of the current number\n        nth_power = num ** n\n\n        # Append the result to the result list\n        result.append(nth_power)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums: a list of numbers\n    n: the power to compute\n\n    Returns:\n    A list of n-th powers of each number in nums.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase = string.upper()\n    return uppercase"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to check if a given string contains uppercase characters.\n    \"\"\"\n    return all(c.isupper() for c in string)"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n\n    # Convert the string to uppercase and return the result.\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the input list is not empty\n    if len(newList) > 0:\n        # Swap the first and last elements\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"Error: Input list is empty.\")\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables\n    temp = None\n    \n    # swap first and last elements of the list\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the input list is of a list type\n    if type(newList) == list:\n        # Get the length of the list\n        length = len(newList)\n        # Check if the length of the list is greater than 1\n        if length > 1:\n            # Set the first and last elements of the list\n            temp = newList[0]\n            newList[0] = newList[length-1]\n            newList[length-1] = temp\n        else:\n            print(\"The list must have at least two elements.\")\n    else:\n        print(\"The input must be a list.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # if the list has less than two elements, return the list unchanged\n    if len(newList) < 2:\n        return newList\n    # if the list has two or more elements, swap the first and last elements\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find the first and last elements in the list\n    first = newList[0]\n    last = newList[-1]\n    # Swap the first and last elements\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    base = r * 2\n    height = r * 2\n    area = 0.5 * base * height\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with radius\", r, \"is\", area)\n\ndef semicircle_circumference(r):\n    '''\n    Write a python function to calculate the circumference of a semicircle given its radius.\n    '''\n    circumference = 2 * math.pi * r\n    print(\"The circumference of a semicircle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2*r\n    a = (3*s*s)/4\n    b = (4*s*s)/3\n    c = (4*s*s)/3\n    area1 = (s*s)/2\n    area2 = (s*s)/2\n    area3 = (s*s)/2\n    area_max = max(area1, area2, area3)\n    return area_max\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Formula to calculate the area of a triangle\n    a = 0.5 * r * r\n    s = 3.14 * r * r\n    area = a / s\n    \n    # Formula to calculate the area of the largest triangle that can be inscribed in the semicircle\n    n = 20\n    x = r / n\n    y = 0.5 * r * r\n    area_max = 0.5 * x * (1 + x * y + y * y)\n    \n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(3):\n        side = 2*r*sin(acos((1-i/2)/(1-sqrt(3))))\n        area += side\n    return area/2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0.5 * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    side = r*2 # length of one side of the triangle\n    angle = 360/3 # degrees of the triangle\n    for i in range(3):\n        # calculate the length of the i-th side of the triangle\n        s = math.sin(math.radians(angle)) * side\n        area += math.pi * (r**2 - s**2) / 2\n        # increment the angle\n        angle += 360/3\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-perimeter of the semicircle\n    perimeter = 2 * r\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = perimeter * (3/2) * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(base, height):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with the given base and height.\n    '''\n    s = (base ** 2 + height ** 2) / 2\n    area = (3 * base * height) / (4 * s ** 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Formula to calculate the area of the triangle\n    area = 0.5 * r ** 2\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # area of a triangle with sides of length 1\n    area_1 = 0.5 * r ** 2\n\n    # area of a triangle with sides of length 2\n    area_2 = 0.5 * r ** 2\n\n    # area of a triangle with sides of length 2r\n    area_3 = 0.5 * r ** 4\n\n    # largest area of any triangle\n    largest_area = max(area_1, area_2, area_3)\n\n    # area of the semicircle\n    area_sc = pi * r ** 2\n\n    # the area of the largest triangle that can be inscribed in the semicircle\n    area_max = area_sc / largest_area\n\n    return area_max"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    if start >= end:\n        return start + 1\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid)\n    elif array[mid] < mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Find the minimum value in the array\n    min_value = array[0]\n    for value in array:\n        if value < min_value:\n            min_value = value\n\n    # Check if there are any gaps in the array\n    if start!= 0:\n        min_value += 1\n    elif end!= None:\n        min_value = end + 1\n\n    # Iterate over the array and check for missing values\n    for value in array:\n        if value < min_value:\n            min_value = value\n        elif value - min_value!= len(array) - array.index(value):\n            return min_value + 1\n\n    # If no missing values are found, the last value in the array will be the missing number\n    return min_value + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end):\n        if array[i] == i:\n            continue\n        elif array[i] > i:\n            return i\n        elif array[i] < i:\n            array[i], array[array[i]] = array[array[i]], array[i]\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n\n    for i in range(end,start-1,-1):\n        if array[i] == i:\n            return i\n\n    return max(array)+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n    \n    Args:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the array. Defaults to 0.\n    end (int): The ending index of the array. Defaults to None.\n    \n    Returns:\n    int: The smallest missing number in the array.\n    \"\"\"\n    \n    # check if array is sorted\n    if not all(array[i] <= array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"Array is not sorted.\")\n    \n    # if end is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n    \n    # loop through the array and find the smallest missing number\n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n            \n    # if all numbers are present in the array, return the length of the array\n    return end"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    '''\n    This function takes in a list of numbers and returns a new list containing only the even numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n\n    for i in range(max(x-1, 0), min(x+2, 9)):\n        for j in range(max(y-1, 0), min(y+2, 9)):\n            if (i, j)!= ele:\n                adj.append((i, j))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x > 0 and y < len(sub)-1:\n        adj.append((x-1, y+1))\n    if x < len(sub)-1:\n        adj.append((x+1, y))\n    if x < len(sub)-1 and y < len(sub)-1:\n        adj.append((x+1, y+1))\n    if x < len(sub)-1 and y > 0:\n        adj.append((x+1, y-1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1,y))\n    if x < len(sub)-1:\n        adj.append((x+1,y))\n    if y > 0:\n        adj.append((x,y-1))\n    if y < len(sub[0])-1:\n        adj.append((x,y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0: \n        return []\n    \n    sub.append(ele)\n    if len(sub) == 2: \n        x, y = sub\n        if x < y:\n            return [(x+1, y),(x, y-1),(x-1, y)]\n        elif x > y:\n            return [(x-1, y),(x, y+1),(x+1, y)]\n        else:\n            return [(x-1, y),(x+1, y)]\n    else:\n        return [(x+1, y) if y > x else (x-1, y) for x, y in adjac(sub[-2])] + adjac(sub[-1])"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            if x + i < 0 or x + i >= len(sub) or y + j < 0 or y + j >= len(sub[0]):\n                continue\n            adj.append((x + i, y + j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adjacent.append((i, j))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        sub.extend(result)\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(sub)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(sub[0])-1:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1,y-1))\n    if x < len(grid[0])-1 and y > 0:\n        sub.append((x+1,y-1))\n    if x > 0:\n        sub.append((x-1,y))\n    if x < len(grid[0])-1:\n        sub.append((x+1,y))\n    if x > 0 and y < len(grid)-1:\n        sub.append((x-1,y+1))\n    if x < len(grid[0])-1 and y < len(grid)-1:\n        sub.append((x+1,y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n    if ele in sub:\n        sub.remove(ele)\n    return adjacent + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    return new_text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n\n    # Convert spaces to underscores\n    text = text.replace(spaces, underscore)\n\n    # Convert underscores to spaces\n    text = text.replace(underscore, spaces)\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        elif i == \"_\":\n            new_text += \" \"\n        else:\n            new_text += i\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = text.replace(\" \", \"_\")\n    underscores = text.replace(\"_\", \" \")\n    return spaces, underscores"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Remove all whitespaces from the string\n    text = text.replace(\" \", \"_\")\n    # Convert the string back to uppercase\n    text = text.upper()\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace all underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Initialize an empty list to store the modified string\n    modified_string = []\n\n    # Loop through each character in the original string\n    for char in text:\n        # Check if the character is a whitespace\n        if char.isspace():\n            # If it is, replace it with an underscore\n            modified_string.append('_')\n        # Otherwise, add the character to the modified list\n        else:\n            modified_string.append(char)\n\n    # Return the modified string as a string\n    return ''.join(modified_string)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = len(num_list) - 1\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index = 0\n    while index < len(num_list):\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n            index = 0\n        else:\n            index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize two pointers to track the start and end of the non-zero elements\n    start = 0\n    end = 0\n\n    # loop through the list\n    while end < len(num_list):\n        # if the current element is not zero\n        if num_list[end]!= 0:\n            # increment the start pointer\n            start += 1\n\n            # move the current element to its correct position in the list\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n        # if the current element is zero\n        else:\n            # increment the end pointer\n            end += 1\n\n    # return the final list\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for i in reversed(zero_indices):\n        num_list.pop(i)\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize variables to keep track of the last non-zero value and its index\n    last_nonzero_index = len(num_list)\n    last_nonzero_value = num_list[last_nonzero_index]\n    # Iterate through the list backwards, swapping non-zero values with the last non-zero value\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            num_list[i], num_list[last_nonzero_index] = num_list[last_nonzero_index], num_list[i]\n            last_nonzero_index -= 1\n            last_nonzero_value = num_list[last_nonzero_index]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list) - 1:\n        if num_list[i] == 0 and num_list[i+1]!= 0:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            num_list.pop(i)\n        else:\n            break\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Use two pointers - one at the beginning of the list and one at the end\n    # If the current number is not zero, swap it with the number at the next pointer\n    i = 0\n    j = len(num_list) - 1\n\n    while i < j:\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list of n integers and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    # XOR operation is defined as the bitwise XOR of two numbers\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a Python function to find the sum of the xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) :\n        xor_sum ^= arr[i]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n\n    # XOR of all elements in the list\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i]\n\n    # XOR of all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list 'arr' and an integer 'n' as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += (arr[i] ^ arr[i+1])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    # xor of all pairs of numbers in the given list\n    xor_sum = sum([a^b for a in arr for b in arr if a!=b])\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the given list into a min heap\n    hq.heapify(iterable)\n    # Remove elements from the heap one by one and add them to the result list\n    result = []\n    while iterable:\n        result.append(iterable.pop())\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using the heap sort algorithm.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    n = len(lst)\n    # Build the max heap\n    for i in range(n//2 - 1, -1, -1):\n        heapify(lst, n, i)\n    # Extract elements from the heap in sorted order\n    for i in range(n-1, 0, -1):\n        # Swap the root with the last element of the heap\n        hq.heapreplace(lst, lst[0])\n        # Extract the last element from the heap\n        hq.heappop(lst)\n    # Convert the sorted list back to an iterable\n    return lst\n\ndef heapify(lst, n, i):\n    '''\n    Heapify the subarray lst[i:n] using heapify algorithm.\n    '''\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and lst[left] > lst[largest]:\n        largest = left\n    if right < n and lst[right] > lst[largest]:\n        largest = right\n    if largest!= i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        # Move current root to end\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        # call max_heapify to restore heap property\n        hq.heapify(iterable, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a list of tuples with the elements and their indices\n    heap = [(iterable[i], i) for i in range(len(iterable))]\n    # Sort the list using heapify\n    hq.heapify(heap)\n    # Build a new list from the sorted heap\n    sorted_list = [heapq.heappop(heap)[0] for _ in range(len(heap))]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using the heap sort algorithm.\n    '''\n    heap = iterable\n    while len(heap) > 1:\n        # swap the first and last elements in the heap\n        heap[0], heap[-1] = heap[-1], heap[0]\n        # remove the last element from the heap\n        hq.heappop(heap)\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable.pop(0)\n    return sorted_list\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost: \n        return True \n    else: \n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost == sale_amount:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    if actual_cost < sale_amount:\n        return False\n    elif actual_cost == sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (float): Actual cost of the items sold\n    sale_amount (float): Amount of items sold\n    \n    Returns:\n    bool: True if the given amount has no profit and no loss, False otherwise\n    '''\n\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    \n    # Check if the profit is zero and the loss is positive\n    if profit == 0 and sale_amount > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit or loss is zero\n    if profit == 0 and loss == 0:\n        return \"The given amount has no profit and no loss\"\n    else:\n        # Calculate the percentage of profit and loss\n        profit_percent = (profit / sale_amount) * 100\n        loss_percent = (loss / sale_amount) * 100\n\n        # Check if profit and loss are within 1% of each other\n        if profit_percent <= 1 and loss_percent <= 1:\n            return \"The given amount has no profit and no loss\"\n        else:\n            return \"The given amount has a profit of {:.2f}% and a loss of {:.2f}%\".format(profit_percent,loss_percent)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Calculate the profit margin\n    profit_margin = sale_amount / actual_cost\n    \n    # Check whether the profit margin is positive or negative\n    if profit_margin > 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit_margin < 0:\n        print(\"The given amount has no loss and a profit of\", abs(profit_margin))\n    else:\n        print(\"The given amount has no profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit > 0 and loss > 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (int): The actual cost of the sale.\n    sale_amount (int): The amount to be sold.\n\n    Returns:\n    bool: True if the given amount has no profit and no loss, otherwise False.\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # calculate wind chill index using the formulas\n    wci = (t_f - 42.379) * (1 + 0.0065 * v + 0.00012 * v**2)\n    wci = math.floor(wci + 0.5)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature\n    dew_point = 237.3 * (math.log(10) * (t - 273.15) / (math.log(10) * (t - 10))) + 273.15\n\n    # Calculate the wind chill index\n    wind_chill_index = (13.12 + 0.6215 * v + 11.37 * (t - 273.15) - 0.3965 * dew_point) / 10\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = math.ceil(wind_chill_index)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -10 or t > 100:\n        return \"Invalid temperature input\"\n    if v < 0 or v > 100:\n        return \"Invalid wind velocity input\"\n    c = 2 * 5 / 9\n    return math.ceil((c * (t + 273.15)) / v)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    wind_speed_in_m_per_s = v * 1.60934  # convert km/h to m/s\n    wind_speed_in_m_per_s_cubed = wind_speed_in_m_per_s ** 3\n    kelvin_to_celsius_scale = 273.15  # conversion factor from kelvin to celsius\n\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.log(wind_speed_in_m_per_s) + 0.3965 * t * (\n        math.log(wind_speed_in_m_per_s) ** 2)\n    wind_chill_index_rounded = round(wind_chill_index)\n\n    return wind_chill_index_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    wind_speed = v * 1.60934 # convert km/h to m/s\n    \n    if wind_speed >= 0.0 and wind_speed <= 2.5:\n        if t >= -5:\n            return 0\n        else:\n            return math.ceil(35.74 + 0.6215 * t + 35.75 * math.log10(wind_speed) - 0.3965 * t * math.log10(wind_speed))\n    elif wind_speed > 2.5 and wind_speed <= 6.2:\n        if t >= -5:\n            return 10\n        else:\n            return math.ceil(13.12 + 0.3965 * t + 11.37 * math.log10(wind_speed) - 0.114 * t * math.log10(wind_speed))\n    elif wind_speed > 6.2 and wind_speed <= 11.2:\n        if t >= -5:\n            return 14\n        else:\n            return math.ceil(16.9 + 0.3448 * t + 14.59 * math.log10(wind_speed) - 0.0924 * t * math.log10(wind_speed))\n    elif wind_speed > 11.2 and wind_speed <= 20.5:\n        if t >= -5:\n            return 20\n        else:\n            return math.ceil(22.96 + 0.2755 * t + 19.44 * math.log10(wind_speed) - 0.0689 * t * math.log10(wind_speed))\n    elif wind_speed > 20.5:\n        return 21"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the nearest integer for a given wind velocity and temperature.\n    '''\n    # Convert temperature to Celsius\n    t = (t - 32) * 5/9\n    \n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # calculate wind chill temperature\n    wc = 0.0065 * v + 35.74 + (0.0001 * t_f)\n    \n    # convert wind chill temperature from fahrenheit to celsius\n    wc_c = (wc - 32) * 5/9\n    \n    # calculate wind chill index\n    wci = wc_c / t_f\n    \n    # round wind chill index to the nearest integer\n    wci_int = math.ceil(wci)\n    \n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.6219718\n    f = (9/5) * t + 32\n\n    if f < 32:\n        w = (f - 32) / 1.8\n    else:\n        w = (f - 32) / 1.8 + 7\n\n    if v < 1:\n        w = math.ceil(w)\n    elif 1 <= v <= 3:\n        w = math.ceil(w * 1.1)\n    elif 3 <= v <= 8:\n        w = math.ceil(w * 1.2)\n    elif 8 <= v <= 15:\n        w = math.ceil(w * 1.3)\n    else:\n        w = math.ceil(w * 1.4)\n\n    w_c = c * w\n\n    return w_c"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate the wind chill index using the formulae from the U.S. Standard Atmosphere\n    index = math.trunc((v * 1.15) + 0.6215 * t - 11.37 * math.exp(-0.133 * t) + 0.3965 * (v * v) - 0.2246 * (v * v * v))\n    \n    # Round the index to the nearest integer\n    index = round(index)\n    \n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c = 0.621971826459 # The constant for converting Celsius to Fahrenheit\n    f = (v * 1.60934) + 32  # Convert wind velocity to knots and convert to Fahrenheit\n\n    # Calculate the wind chill index\n    wci = (f - t * (c / 2)) / (c / 2)\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum variable to 0\n    sum_length = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove any lowercase letters from the name\n        name = ''.join([char for char in name if not char.islower()])\n        # Add the length of the name to the sum\n        sum_length += len(name)\n    # Return the sum of the lengths of all the names that start with a lowercase letter\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    name_starts_with_lower_case = []\n    \n    # iterate through the given list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if the name starts with a lowercase letter, append it to the name_starts_with_lower_case list\n            name_starts_with_lower_case.append(name)\n    \n    # calculate the sum of the lengths of the names in the name_starts_with_lower_case list\n    sum_length_of_names = sum([len(name) for name in name_starts_with_lower_case])\n    \n    # return the sum of the lengths of the names in the name_starts_with_lower_case list\n    return sum_length_of_names"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the valid names\n    valid_names = []\n    \n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, append it to the valid_names list\n            valid_names.append(name)\n    \n    # Initialize a variable to store the total length of valid names\n    total_length = 0\n    \n    # Loop through each valid name and add its length to the total_length variable\n    for name in valid_names:\n        total_length += len(name)\n    \n    # Return the total_length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum variable to zero\n    total = 0\n    # loop through each name in the sample names list\n    for name in sample_names:\n        # if the first character of the name is not a lowercase letter, add its length to the total\n        if name[0].islower():\n            total += len(name)\n    # return the total length of the names that start with a lowercase letter\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            names.append(name)\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]\n    total_length = 0\n    for name in names:\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    matches = re.findall(pattern, items)\n    for match in matches:\n        items = items.replace(match, match.strip('()'))\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove all commas from the string\n    items = re.sub(r',', '', items)\n    # Remove all spaces from the string\n    items = items.replace(' ', '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]+\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regex to remove the parenthesis from the string\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Remove parenthesis from the string\n    items = re.sub(r'\\([^()]*\\)', '', items)\n\n    # Split the string into individual items\n    items = items.split()\n\n    # Remove any empty items\n    items = [item for item in items if item!= '']\n\n    # Join the remaining items back into a string\n    items =''.join(items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and removes the parenthesis and what is inbetween them.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def nonagonal(a, b):\n        return b*b - a*a\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, nonagonal(a, b)\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (n - 1)\n\ndef nth_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 21\n    else:\n        return is_nonagonal(n) + nth_nonagonal(n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 0\n    for i in range(n-1):\n        num += (i+1)*(i+1)\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize the counter variable\n    count = 0\n\n    # Loop through the number of rows\n    for i in range(1, n+1):\n        # Loop through the number of columns\n        for j in range(1, i+1):\n            # Increment the counter variable\n            count += 1\n\n    # Return the counter variable\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input.\"\n    else:\n        return (n * (n - 1)) // 2\n\nn = int(input(\"Enter the value of n: \"))\nif n < 1:\n    print(\"Invalid input.\")\nelse:\n    print(is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function checks if a number is a nonagonal number or not.\n    A nonagonal number is a number that is the sum of two consecutive diagonals.\n    \"\"\"\n    # Initialize the two diagonals as 1\n    diag1 = 1\n    diag2 = 1\n\n    # Loop till n\n    for i in range(2, n + 1):\n        # Calculate the sum of two diagonals\n        diag = diag1 + diag2\n\n        # Check if the number is a nonagonal number or not\n        if diag == i:\n            return True\n\n        # Update the diagonals\n        diag1 = diag2\n        diag2 = diag\n\n    # If the loop completes without finding a nonagonal number, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    return (2 * n - 1) ** 2 - (n - 1) ** 2\n\nprint(is_nonagonal(1))  # Output: 1\nprint(is_nonagonal(2))  # Output: 10\nprint(is_nonagonal(3))  # Output: 30"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if i*(i-1) == n:\n                return i*i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    is_nonagonal = False\n    num = 0\n    start = 1\n    step = 1\n\n    # Iterate through numbers until nth nonagonal number is found\n    for i in range(1, n+1):\n        num += start * step\n        start += 1\n        step += 1\n        # Check if nth nonagonal number is found\n        if i == n:\n            is_nonagonal = True\n            break\n\n    # Return the nth nonagonal number if found, or False if not\n    return is_nonagonal\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?<!\\w)(z)(?!\\w)\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        start, end = match.span()\n        return text[start:end]\n    else:\n        return None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b\\s*[zZ]\\s*[a-zA-Z]+\\b\\s*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)(z)([a-zA-Z0-9]*)(?!\\w)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\w+', text) # find all words in the text\n    \n    for word in words:\n        if word[0] == 'z' and word[-1] == 'z':\n            continue # if the first and last characters are 'z', skip to the next word\n        elif word[0] == 'z' or word[-1] == 'z':\n            print(f'{word} contains a \"z\" at the start or end.')\n        else:\n            print(f'{word} contains a \"z\" somewhere in the middle.')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # Use regex to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Loop through the words and check if 'z' is at the start or end of the word\n    for word in words:\n        if word[0] == 'z':\n            return True\n        if word[-1] == 'z':\n            return True\n        \n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z\\w*[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern that matches a word character followed by a 'z' character\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # Use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    # If the pattern is found, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\w)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as input and reverses the array up to k.\n    The function first splits the input array into two parts: before the kth element and after the kth element.\n    Then it reverses the elements in the before part and the after part.\n    Finally, it joins the two parts and returns the result.\n    '''\n    before_k = input[:k]\n    after_k = input[k:]\n    before_k.reverse()\n    reversed_after_k = after_k[::-1]\n    return reversed_after_k + before_k"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if the position k is valid or not\n    if k < 0 or k > len(input):\n        print(\"Invalid position\")\n        return\n\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to len(input)-1\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a new array of length k\n    new_array = [0] * k\n\n    # copy the elements from the input array to the new array upto the position k-1\n    for i in range(k-1):\n        new_array[i] = input[i]\n\n    # reverse the elements from k-1 to the end of the input array\n    for i in range(k-1, len(input)-1):\n        input[i] = input[len(input)-1-i]\n\n    # copy the remaining elements from the input array to the new array\n    for i in range(len(input)-k+1, len(input)):\n        new_array[i-k+1] = input[i]\n\n    # return the new array\n    return new_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    if k >= n:\n        return input\n    else:\n        input.reverse()\n        return input[:k] + input[k+1:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        temp = input[i]\n        input[i] = input[len(input)-1-i]\n        input[len(input)-1-i] = temp\n        \n    # Reverse the array from k to the end\n    for i in range(k, len(input)):\n        temp = input[i]\n        input[i] = input[len(input)-1-i]\n        input[len(input)-1-i] = temp"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input) \n    # Reverse the first k elements of the array \n    for i in range(k): \n        input[i], input[n-i-1] = input[n-i-1], input[i] "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array\n    reversed_array = input[::-1]\n    \n    # Reverse the array upto a given position\n    reversed_array_upto_k = reversed_array[:k]\n    reversed_array_upto_k.reverse()\n    \n    # Concatenate the two reversed arrays\n    result = reversed_array_upto_k + reversed_array[k:]\n    \n    return result"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from index 0 to k-1\n    input = input[::-1][:k]\n    # reverse the array from k to end\n    input = input[::-1]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    list_of_tuples = [(key, test_dict[key]) for key in test_dict]\n    # Append the dictionary as a tuple to the list of tuples\n    list_of_tuples.append(test_dict)\n    # Convert the list of tuples back to a tuple\n    output_tuple = tuple(list_of_tuples)\n    return output_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tup = tuple(test_tup + tuple(test_dict.items()))\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = tuple(test_tup)\n    new_tuple.update(test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with key-value pairs from the input dictionary and the input tuple\n    new_dict = dict(test_dict.items() + test_tup)\n    # convert the new dictionary to a tuple and return it\n    return tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert dictionary to list of tuples\n    test_list = [(key, value) for key, value in test_dict.items()]\n    # Add list of tuples to tuple\n    new_tup = test_tup + test_list\n    # Return new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = (test_tup + tuple(test_dict.items()))\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Combine the tuple and the dictionary into a new dictionary\n    new_dict = {**test_tup, **test_dict}\n    # Convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.values())\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N < 1:\n        raise ValueError(\"Invalid matrix size: N must be at least 1\")\n\n    # initialize variables to keep track of maximum average and path length\n    max_avg = float('-inf')\n    max_path = None\n\n    # iterate over all paths\n    for i in range(N):\n        for j in range(N):\n            # if current cell is not part of the path, skip it\n            if i == 0 and j == 0:\n                continue\n\n            # build the current path\n            path = [(i, j)]\n            while True:\n                next_i, next_j = i + 1, j\n                if next_i < N and (next_j == 0 or cost[next_i][next_j] < cost[i][j]):\n                    path.append((next_i, next_j))\n                    i, j = next_i, next_j\n                else:\n                    break\n\n            # compute the average cost of the path\n            total_cost = sum(cost[x] for x, y in path)\n            num_cells = len(path)\n            avg_cost = total_cost / num_cells\n\n            # update maximum average and path length if necessary\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path\n\n    # return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    max_path = max_cost = 0\n    for i in range(n):\n        if i == 0:\n            max_cost = cost[0][0]\n            max_path = 1\n        else:\n            max_cost += cost[i][0]\n            max_path += 1\n        max_cost += cost[n-1][i]\n        max_path += 1\n        max_cost += cost[n-1][n-1]\n        max_path += 1\n    return max_cost/max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # create a dictionary to store the maximum average and the corresponding path\n    max_avg_dict = {}\n    # create a list to store the current path\n    curr_path = []\n    # iterate over each cell\n    for i in range(N):\n        for j in range(N):\n            # initialize current cell's cost and number of visited cells\n            curr_cost = cost[i][j]\n            curr_visited = 1\n            # initialize the maximum cost and the number of visited cells for the current cell\n            max_cost = curr_cost\n            max_visited = 1\n            # check all four possible directions\n            if i+1 < N and j < N:\n                # if cell is adjacent to the right, update the maximum cost and number of visited cells for the current path\n                if curr_cost > max_cost:\n                    max_cost = curr_cost\n                    max_visited = curr_visited\n                # if cell is adjacent to the bottom, update the maximum cost and number of visited cells for the current path\n                if curr_cost > max_cost:\n                    max_cost = curr_cost\n                    max_visited = curr_visited\n                # update the current cost and number of visited cells for the adjacent cell\n                curr_cost = cost[i+1][j]\n                curr_visited = 1\n            if i+1 < N and j+1 < N:\n                # if cell is adjacent to the bottom-right, update the maximum cost and number of visited cells for the current path\n                if curr_cost > max_cost:\n                    max_cost = curr_cost\n                    max_visited = curr_visited\n                # if cell is adjacent to the right, update the maximum cost and number of visited cells for the current path\n                if curr_cost > max_cost:\n                    max_cost = curr_cost\n                    max_visited = curr_visited\n                # update the current cost and number of visited cells for the adjacent cell\n                curr_cost = cost[i+1][j+1]\n                curr_visited = 1\n            # update the maximum average and the corresponding path for the current cell\n            if max_cost == curr_cost and max_visited == curr_visited:\n                max_avg = curr_cost/curr_visited\n                if max_avg not in max_avg_dict:\n                    max_avg_dict[max_avg] = curr_path[:]\n                if curr_path not in max_avg_dict[max_avg]:\n                    max_avg_dict[max_avg].append(curr_path)\n            # add the current cell to the current path\n            curr_path.append((i,j))\n    # return the maximum average and the corresponding path\n    return max(max_avg_dict.keys()), max_avg_dict[max(max_avg_dict.keys())]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum and minimum values of the cost matrix\n    max_value = max(sum(row) for row in cost)\n    min_value = min(sum(row) for row in cost)\n\n    # Calculate the average of all the paths\n    path_count = 0\n    total_cost = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Traverse the matrix and find the path with maximum average\n            current_cell = (i, j)\n            visited_cells = [(current_cell, 1)]\n            current_cost = cost[i][j]\n            while True:\n                next_i, next_j = current_cell[0] + 1 if current_cell[0]!= len(cost) - 1 else 0, current_cell[1] + 1 if current_cell[1]!= len(cost[i]) - 1 else 0\n                if (next_i, next_j) in visited_cells:\n                    break\n                visited_cells.append((next_i, next_j))\n                current_cell = (next_i, next_j)\n                current_cost += cost[next_i][next_j]\n            path_count += 1\n            total_cost += current_cost\n\n    # Calculate the maximum average\n    max_average = total_cost / path_count\n\n    # Return the maximum average\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables\n    N = len(cost)\n    max_avg = 0\n    current_avg = 0\n    current_path = [[0,0]]\n    \n    # loop through all cells in the matrix\n    for i in range(N):\n        for j in range(N):\n            # if cell is not visited yet, add it to current path and compute average\n            if cost[i][j] == 0:\n                current_path.append([i,j])\n                current_avg = sum(cost[path[0]][path[1]] for path in current_path) / len(current_path)\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                current_path.pop()\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    max_avg = float('-inf')\n    path = [[0, 0] for _ in range(n)]  # Initialize path with top-left cell\n\n    # Iterate over all possible paths\n    for i in range(1, n):\n        for j in range(1, n):\n            # Add cell to path and update path cost\n            new_cost = cost[i][j] + path[i-1][1] + path[1][j-1] - path[i-1][0] - path[1][j-1]\n            path.append([new_cost, i, j])\n\n            # Update max average if necessary\n            if new_cost > max_avg:\n                max_avg = new_cost\n\n    # Compute average of max path\n    max_path = [cell for cost, i, j in sorted(path, key=lambda x: x[0], reverse=True)][:3]\n    total_cost = sum([cost for cost, i, j in max_path])\n    n_cells = len(max_path)\n    average_cost = total_cost / n_cells\n\n    return average_cost"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # create a dictionary to store the average of all paths\n    path_avg = {}\n\n    # create an empty dictionary to store the cell visit count\n    cell_count = {}\n\n    # initialize the path with the first cell\n    current_path = [0, 0]\n    current_avg = cost[0][0]\n    cell_count[(0, 0)] = 1\n    path_avg[(current_path, current_avg)] = 0\n\n    # iterate through each cell and calculate the average of all paths\n    for i in range(1, N):\n        for j in range(1, N):\n            # move right if the current cell is not visited and the next cell is not visited\n            if (i, j) not in cell_count and (i, j+1) not in cell_count:\n                current_path.append((i, j))\n                current_avg += cost[i][j]\n                cell_count[(i, j)] = 1\n                path_avg[(tuple(current_path), current_avg)] = 0\n            # move down if the current cell is not visited and the next cell is not visited\n            elif (i, j) not in cell_count and (i+1, j) not in cell_count:\n                current_path.append((i, j))\n                current_avg += cost[i][j]\n                cell_count[(i, j)] = 1\n                path_avg[(tuple(current_path), current_avg)] = 0\n            # if the path already exists, add to the average\n            elif (i, j) in cell_count and (i, j+1) in cell_count and (i+1, j) in cell_count:\n                path_avg[(tuple(current_path), current_avg)] += cost[i][j]\n                cell_count[(i, j)] += 1\n\n    # find the maximum average\n    max_avg = max(path_avg.values())\n\n    # return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    N = len(cost)\n    max_avg = 0\n    max_path = []\n    \n    # Iterate through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if we have reached the bottom right cell\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, cost[i][j])\n                max_path = [(i,j)]\n            # Check if we can move to the right or down\n            elif j < N-1:\n                max_avg = max(max_avg, cost[i][j] + max_avg)\n                max_path.append((i,j))\n            elif i < N-1:\n                max_avg = max(max_avg, cost[i][j] + max_avg)\n                max_path.append((i,j))\n    \n    # Compute the maximum average\n    max_avg = max_avg / len(max_path)\n    \n    return max_path, max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    max_average = 0\n    max_path = []\n    visited = set()\n\n    # For each cell (i,j)\n    for i in range(N):\n        for j in range(N):\n            # If the cell has not been visited yet\n            if (i,j) not in visited:\n                visited.add((i,j))\n                # Recursively search for the maximum average path\n                average, path = maxAverageOfPathHelper(cost, i, j, visited)\n                # Update the maximum average and path found so far\n                if average > max_average:\n                    max_average = average\n                    max_path = path\n                # Backtrack to unvisit the cell\n                visited.remove((i,j))\n    # Return the maximum average and path found\n    return max_average, max_path\n\ndef maxAverageOfPathHelper(cost, i, j, visited):\n    '''\n    Recursively search for the maximum average path starting from the given cell.\n    '''\n    # Base case: if we reach the bottom right cell\n    if i == N-1 and j == N-1:\n        # Calculate the total cost and return the average\n        total_cost = cost[i][j]\n        visited.add((i,j))\n        return total_cost / len(visited), [(i,j)]\n    # Recursive case: expand the search space in one direction (right or down)\n    elif i < N-1:\n        # Move right\n        temp_cost = cost[i][j] + maxAverageOfPathHelper(cost, i+1, j, visited)[0]\n        if temp_cost > maxAverageOfPathHelper(cost, i+1, j, visited)[0]:\n            return temp_cost, [(i,j)]\n    elif i == N-1:\n        # Move down\n        temp_cost = cost[i][j] + maxAverageOfPathHelper(cost, i, j+1, visited)[0]\n        if temp_cost > maxAverageOfPathHelper(cost, i, j+1, visited)[0]:\n            return temp_cost, [(i,j)]\n    # If we reach here, we cannot move in the given direction\n    return maxAverageOfPathHelper(cost, i, j-1, visited)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j] / (i+j+1))\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # loop through all the students\n    for name, data in students.items():\n        height, weight = data\n\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            print(f\"{name} has height {height} and weight {weight}\")"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        height, weight = students[student]\n        if height > h and weight > w:\n            filtered_students[student] = students[student]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # filter students by height and weight\n    filtered_students = {key: value for key, value in students.items() if value[0] > h and value[1] > w}\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the indices and their corresponding values\n    index_dict = {}\n    # Loop through each element in the first list\n    for i in range(len(nums1)):\n        # If the element is already in the dictionary, add the index to a list of indices that correspond to the same value\n        if nums1[i] in index_dict:\n            index_dict[nums1[i]].append(i)\n        # Otherwise, add the element to the dictionary with the index as the value\n        else:\n            index_dict[nums1[i]] = [i]\n    \n    # Initialize a counter to keep track of the number of indices that have the same value\n    count = 0\n    # Loop through each element in the second list\n    for j in range(len(nums2)):\n        # If the element is already in the dictionary, increment the counter and remove the index from the corresponding list of indices\n        if nums2[j] in index_dict:\n            index_dict[nums2[j]].remove(j)\n            count += 1\n        # Remove the element from the dictionary if it has no corresponding indices left\n        else:\n            del index_dict[nums2[j]]\n    \n    # Return the count of indices that have the same value\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and split it into digits\n    digits = [int(d) for d in str(base)]\n    \n    # initialize the sum to 0\n    total_sum = 0\n    \n    # iterate over the digits and calculate the sum to the power of each digit\n    for digit in digits:\n        total_sum += digit ** power\n    \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the base to a string so we can manipulate it easily\n    base_str = str(base)\n    \n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        digit_int = int(digit)\n        sum += digit_int ** power\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    def sum_of_digits(n):\n        '''\n        This function takes an integer n and returns the sum of its digits.\n        '''\n        return sum(int(digit) for digit in str(n))\n\n    base_sum = sum_of_digits(base)\n    return base_sum ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base[i])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    total = 0\n    for i in range(power):\n        total += int(base_str[-i-1])\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to access its individual digits\n    base_str = str(base)\n    # Initialize a variable to hold the sum of digits\n    digit_sum = 0\n    # Loop through each digit of the base string and add it to the digit sum\n    for digit in base_str:\n        digit_sum += int(digit)\n    # Calculate the sum of digits to the power of the power argument\n    result = digit_sum ** power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_str = str(base)\n    \n    for digit in base_str:\n        digit_int = int(digit)\n        sum += digit_int ** power\n        \n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum of digits to zero\n    digit_sum = 0\n    # Convert the base to a string\n    base_str = str(base)\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert each digit to an integer and add it to the digit sum\n        digit_sum += int(digit)\n    # Calculate the sum of digits raised to the power of the specified power\n    result = digit_sum ** power\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string to extract digits\n    base_str = str(base)\n    # calculate the sum of all digits raised to the power\n    sum_digits = sum(int(digit)**power for digit in base_str)\n    # return the sum\n    return sum_digits"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks \" \".\n    '''\n    # using regular expressions to extract the values between quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=^\")([^\"]+)(?=\"|\\Z)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to match values between quotation marks\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    # Using loop to print the matches\n    for match in matches:\n        print(match)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function takes a string as input and extracts all the values between quotation marks.\n    \"\"\"\n    pattern = r'(?<=[\"\\'])(.*?)(?=[\"\\'])'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the input tuple\n    N = len(test_tup)\n\n    # Create a new tuple of length N with the multiplied elements\n    result_tup = tuple(test_tup[i] * test_tup[i+1] for i in range(N-1))\n\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define a variable to store the product of all elements in the tuple\n    product = 1\n    # Loop through the tuple and multiply each element with the product\n    for num in test_tup:\n        product *= num\n    # Return the tuple with the product of all elements multiplied by each other\n    return tuple(product)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize a variable to store the result\n    result = []\n    # loop through each element of the input tuple\n    for i in range(len(test_tup)-1):\n        # add the product of the current element and the next element to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    # return the result tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [0] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Get the length of the input tuple\n    N = len(test_tup)\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    # Loop through the input tuple and multiply each element with the next one\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(i * (test_tup[i+1] if i < N-1 else test_tup[0]) for i in range(N))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result_tup = ()\n    for i in range(n):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        print(\"The two lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    for group in groupby(nums):\n        if len(list(group)) > 1:\n            for num in group:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if key == len(group):\n            result.append(group[0])\n        elif key == 0:\n            pass\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == 0:\n            yield from group\n        else:\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(nums)) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return [list(g) for k, g in groupby(sorted(nums)) if k == 0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [next(group) for key, group in groupby(sorted(nums)) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3)*math.pi*r**2*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    area = math.pi * r * r * h / 3\n    \n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)+(2*r*h)+(2*r*h*(2*math.tan(math.pi/3)))\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes in two arguments, radius r and height h, and calculates the lateral surface area of a cone.\n    '''\n    area = math.pi * r ** 2 # formula for cone lateral surface area\n    lateral_surface_area = area * h # calculate the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given radius r and the height h.\n    The lateral surface area of a cone is defined as the area of a closed polygon that touches the base of the cone.\n    The number of sides of the polygon is equal to the ratio of the height to the radius.\n    Thus, the lateral surface area is given by:\n    \n    Lateral Surface Area = 2 * pi * radius * (h / r)\n    \n    This solution uses the formula provided in the problem statement to calculate the lateral surface area of a cone.\n    '''\n    sides = h/r\n    lateral_area = 2 * math.pi * r * sides\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0.5 * r * h * math.tan(math.pi/4)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2*math.pi*r*h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the surface area of the cone using the formula:\n    # S = pi * r^2 * h\n    S = math.pi * r**2 * h\n\n    # Return the surface area\n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Using the Law of Cosines\n    # Lateral surface area = (h / 2) * pi * r^2\n    # where h is the height of the cone and r is the radius of the cone\n    return (h / 2) * math.pi * (r ** 2)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define the regular expression pattern for spaces, commas, and dots\n    pattern = r'[\\s,\\.]+'\n\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    This function takes a string as input and replaces all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace all commas with a semicolon\n    text = re.sub(r',', ';', text)\n    # Replace all dots with a period\n    text = re.sub(r'\\.', '.', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^a-zA-Z0-9 ]+', '', text)\n    text = re.sub(r'[^\\w]+', '', text)\n    text = re.sub(r'[^\\w\\s]+', '', text)\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"([,\\.])\", r\":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function takes in a string and replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n\n    # Regular expression pattern to match all spaces, commas, and dots in the text\n    pattern = re.compile(r'\\s+|,|\\.')\n\n    # Replace all matches in the text with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[\\s,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,.]')\n    return special_chars.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define a regular expression pattern to match all the special characters\n    pattern = re.compile(r'[\\s,\\.]')\n    # replace all the matches with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace special characters with a colon\n    text = re.sub(r'[^A-Za-z0-9\\s]+', ':', text)\n    \n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # check if array is empty\n    if len(A) == 0:\n        return -1\n    \n    # initialize variables\n    left = 0\n    right = len(A) - 1\n    found = False\n    \n    # loop through array\n    while left <= right and not found:\n        mid = left + (right - left) // 2\n        \n        # if element is present at the middle of the array\n        if A[mid] == x:\n            found = True\n            index = mid\n        # if element is smaller than mid element\n        elif A[mid] < x:\n            left = mid + 1\n        # if element is greater than mid element\n        else:\n            right = mid - 1\n    \n    # if element is not found\n    if not found:\n        return -1\n    \n    # loop through array again to find index of first occurrence of x\n    first_occurrence = -1\n    for i in range(index):\n        if A[i] == x:\n            first_occurrence = i\n            break\n    \n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    -----------\n    A : list\n        A sorted array.\n    x : int\n        The number to find the index of the first occurrence of.\n\n    Returns:\n    --------\n    int\n        The index of the first occurrence of x in A, or -1 if x is not found in A.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not found in A, the function returns -1.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left pointer to the beginning of the array\n    left = 0\n\n    # Initialize the right pointer to the end of the array\n    right = len(A) - 1\n\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Loop while both left and right pointers are within the bounds of the array\n    while left <= right:\n        # Calculate the middle index of the current range\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, update first_occurrence_index\n        if A[mid] == x:\n            first_occurrence_index = mid\n            right = mid - 1 # Move the right pointer to the left of the middle element\n        # If the middle element is less than x, update left to the right of the current range\n        elif A[mid] < x:\n            left = mid + 1\n        # If the middle element is greater than x, update right to the left of the current range\n        else:\n            right = mid - 1\n\n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the index variable to -1\n    index = -1\n\n    # Iterate through the array\n    for i in range(len(A)):\n        # Check if the current element is equal to x\n        if A[i] == x:\n            # If yes, update the index variable to the current index\n            index = i\n            # Break out of the loop since we found the first occurrence of x\n            break\n\n    # Return the index of the first occurrence of x\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # create a table to store the sum of products of subarrays ending at i\n    # each cell will store the sum of products of all subarrays ending at i-k\n    table = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        table[i][i] = arr[i-1]\n    # fill the table using the formula: sum(arr[i-k]*table[k][j])\n    for k in range(2, n+1):\n        for i in range(1, n-k+2):\n            j = i+k-1\n            table[i][j] = arr[i-1]*table[i+1][j] + arr[j]*table[i][j-1] - arr[i-1]*arr[j]*table[i+1][j-1]\n    # return the sum of products of all subarrays\n    return table[1][n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = 1\n            for k in range(i, j+1):\n                curr_sum *= arr[k]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n\n    # Create all sublists of length 1, 2, 3,... n\n    for i in range(n):\n        sublist = [arr[i]]\n        for j in range(1, i+1):\n            sublist.append(arr[i-j])\n        for k in range(2, i+1):\n            sublist.append(arr[i-k])\n\n        # Calculate sum of products of sublists\n        prod = 1\n        for sub in sublist:\n            prod *= sub\n        res += prod\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_prod = [1] * n\n\n    for i in range(1, n):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray_prod = prefix_prod[j] / prefix_prod[i]\n            result += subarray_prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a variable to store sum of products\n    total_sum = 0\n\n    # Calculate the cumulative sum of the array\n    for i in range(n):\n        arr[i] = arr[i] + arr[i - 1]\n\n    # Calculate the products of all possible sublists\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            product = 1\n            for k in range(i, j):\n                product = product * arr[k]\n            total_sum = total_sum + product\n\n    return total_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize variables\n    n = len(arr)\n    sum_list = []\n\n    # Calculate product of each subarray\n    for i in range(1, n):\n        for j in range(i):\n            prod = 1\n            for k in range(j, i):\n                prod *= arr[k]\n            sum_list.append(prod)\n\n    # Find the sum of products of all possible sublists\n    sublist_sum = sum(sum_list)\n    return sublist_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n\n    # Calculate product of each subarray\n    prod_arr = [1] * n\n    for i in range(1, n):\n        prod_arr[i] = prod_arr[i-1] * arr[i]\n\n    # Calculate sum of products\n    for i in range(n):\n        for j in range(i, n):\n            sum_prod += prod_arr[j]\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize a hash table to store the cumulative product of subarrays\n    cum_prod = [1] * (n + 1)\n    for i in range(1, n + 1):\n        cum_prod[i] = cum_prod[i - 1] * arr[i - 1]\n    # Initialize the sum of products of subarrays\n    subarray_sum = 0\n    # Traverse through the array and for each subarray, find the sum of products\n    for i in range(1, n + 1):\n        for j in range(i):\n            subarray_sum += cum_prod[j] * cum_prod[n - i + j]\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 1000000007\n    prod = 1\n    max_len = 1\n    for i in range(n):\n        prod = (prod * arr[i]) % MOD\n        if i == max_len:\n            max_len += 1\n        else:\n            while arr[i] * arr[i-max_len] > arr[i+max_len]:\n                max_len += 1\n    sublist_sum = 0\n    for i in range(n-max_len+1):\n        sublist_sum = (sublist_sum + prod * arr[i] * arr[i+max_len-1]) % MOD\n    return sublist_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product_sum = 0\n    \n    # Find the sum of products of all subarrays\n    for i in range(n):\n        product_sum += arr[i]*(i+1)\n    \n    return product_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Initialize variables for first and last bits\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # Toggle all bits except the first and last bit\n    toggled_bits = n ^ (first_bit | last_bit)\n    \n    # Set the first and last bits to their original values\n    toggled_bits = toggled_bits & ~(first_bit | last_bit)\n    toggled_bits = toggled_bits | (first_bit << 31) | (last_bit >> 31)\n    \n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    # get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (num_bits - 1))\n    # set the middle bits to opposite of the first and last bits\n    middle_bits = ~(first_bit | last_bit)\n    # toggle the middle bits\n    middle_bits = middle_bits ^ n & middle_bits\n    # combine the middle bits with the first and last bits\n    result = (n & ~(middle_bits | first_bit | last_bit)) | middle_bits\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Check if n is negative or zero\n    if n < 0:\n        n = 2**32 + n\n\n    # Get the binary representation of n\n    binary_n = bin(n)[2:]\n\n    # Get the length of the binary representation of n\n    n_length = len(binary_n)\n\n    # Toggle the bits except the first and last bit\n    if n_length > 2:\n        binary_n = binary_n[:1] + '0' + binary_n[1:-1] + '1' + binary_n[-1:]\n\n    # Convert the binary string to an integer\n    return int(binary_n, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Find the index of the first and last bits\n    first_bit_index = 0\n    last_bit_index = 0\n    while n & 1 == 0:\n        n >>= 1\n        first_bit_index += 1\n    while n & 1 == 1:\n        n <<= 1\n        last_bit_index += 1\n\n    # Toggle the middle bits\n    n = (n ^ ((1 << (first_bit_index + last_bit_index + 1)) - 1)) & ((1 << (first_bit_index + last_bit_index + 1)) - 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & (1 << 0)\n    last_bit = n & (1 << 31)\n    toggle_bit = first_bit ^ last_bit\n    n = n ^ toggle_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # create a copy of the number\n    num = n\n    \n    # get the bits of the number except the first and last bit\n    bits = bin(num & ((1 << 32) - 1))[2:].zfill(32)\n    \n    # loop through the bits and toggle them except for the first and last bit\n    for i in range(1, 31):\n        if i == 0 or i == 31:\n            continue\n        if bits[i] == '1':\n            bits[i] = '0'\n        else:\n            bits[i] = '1'\n    \n    # convert the bits back to an integer\n    num = int(''.join(bits), 2)\n    \n    # return the number\n    return num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    # initialize the new bit values\n    new_bit_1 = not first_bit\n    new_bit_2 = not last_bit\n    # compute the new number by toggling the middle bits\n    new_n = n ^ (new_bit_1 << 1) ^ (new_bit_2 << 31)\n    # return the new number\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # get the last and second to last bits\n    last_bit = n & 1\n    second_to_last_bit = (n >> 1) & 1\n\n    # toggle the middle bits\n    middle_bit = (last_bit + second_to_last_bit) % 2\n\n    # combine the last and middle bits and the second to last bit\n    return (n ^ (middle_bit << 1)) | (middle_bit << 1)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Separate the first and last bit into two variables\n    bit0 = (n & 1)\n    bitN = (n >> (bit0 * 31)) & 1\n    \n    # Toggle the bits of the number except the first and the last bit\n    n ^= bit0 << (bit0 * 31)\n    n ^= bitN << (bitN * 31)\n    \n    # Combine the first and last bit back into a single number\n    n |= bit0 << (bit0 * 31)\n    n |= bitN << (bitN * 31)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Split the binary representation of n into two parts: first part is all zeros, second part is all ones\n    first_part, second_part = bin(n)[2:].split('1')\n    # Toggle each bit in the second part except the first and last\n    for i in range(len(second_part)-2):\n        second_part = second_part[:i+1] + '0' + second_part[i+1:]\n    # Combine the first part with the toggled second part\n    return int(first_part, 2) + int(second_part, 2)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect.bisect_left to find the index of the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If the index is 0, it means x is already in the list, so the left insertion point is the index itself\n    if index == 0:\n        return index\n    # Otherwise, find the leftmost element that is greater than x\n    elif a[index-1] < x:\n        return index-1\n    # If all else fails, return index\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif i < len(a) and a[i] == x:\n        return i\n    else:\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n\n    # Binary search to find the insertion point of x\n    i = bisect.bisect_left(a, x)\n\n    # If the value is already present in the array, return the index\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # Find the leftmost element greater than x\n    i -= 1\n\n    # Check if the leftmost element is equal to x\n    if i!= -1 and a[i] == x:\n        return i\n\n    # Return the index of the leftmost element greater than x\n    return i + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return \"The string starts with a vowel.\"\n    else:\n        return \"The string does not start with a vowel.\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(\"The given string starts with a vowel.\")\n    else:\n        print(\"The given string does not start with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string starts with a vowel, otherwise it returns False.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return (n-1) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 0\n    \n    # recursive case\n    return n * (1 - (1/n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    :param n: the number of terms to use in the series\n    :return: the geometric sum of n-1\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. \n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_two_triangular(n):\n    a = 1\n    b = 1\n    for i in range(n-1):\n        a += 1\n        b += a\n    return b"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    smallest_triangular = math.ceil(math.sqrt(5 * n + 1) / 2) - 1\n    largest_triangular = 5 * n - 1\n\n    for i in range(smallest_triangular, largest_triangular):\n        if i % 10 == n - 1:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "Here is the Python code for the same:"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    def triangular(n):\n        num = 1\n        for i in range(1, n+1):\n            num *= i\n        return num\n\n    def triangular_list(n):\n        result = []\n        num = triangular(n)\n        while num > 0:\n            result.append(num)\n            num = triangular(n-1) + num\n        return result\n\n    index_list = triangular_list(n)\n    index = index_list[-1]\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize the smallest triangular number with n digits\n    index = int(math.pow(10, n))\n\n    # Initialize the next smallest triangular number with n-1 digits\n    next_index = int(math.pow(10, n - 1))\n\n    # Loop until we find the index of the smallest triangular number\n    while True:\n        # Check if the current index is the smallest triangular number with n digits\n        if is_triangular(index, n):\n            # Return the index of the smallest triangular number with n digits\n            return index\n\n        # If the next index is the smallest triangular number with n-1 digits, increment it\n        if is_triangular(next_index, n - 1):\n            next_index += 1\n        else:\n            # Otherwise, decrement the next index and try again\n            next_index -= 1\n\n        # If the index overflows, reset it to 1\n        if next_index == 0:\n            next_index = 1\n\n        index += next_index\n\ndef is_triangular(num, n):\n    '''\n    Check if a number is a triangular number with n digits\n    '''\n    triangular_num = 0\n    triangular_num_digits = len(str(triangular_num))\n    while triangular_num_digits < n:\n        triangular_num *= 10\n        triangular_num_digits += 1\n\n    return num == triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize a list of the smallest triangular number with n digits\n    triangular_numbers = []\n    # Define the smallest triangular number with n digits\n    smallest_triangular_number = 10**(n-1)\n    # Define the step size\n    step = 10**n\n    # Start with the smallest triangular number\n    current_triangular_number = smallest_triangular_number\n    # Loop until we have added all triangular numbers with n digits\n    while len(triangular_numbers) < step:\n        # Add the current triangular number to the list of triangular numbers\n        triangular_numbers.append(current_triangular_number)\n        # Increment the current triangular number by 1\n        current_triangular_number += 1\n    # Find the index of the smallest triangular number with n digits\n    index = triangular_numbers.index(smallest_triangular_number)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    # Function to find the index of smallest triangular number with n digits\n    # We can use the formula: index = n*(n+1)/2 - 1\n    # where n is the number of digits\n    index = n * (n + 1) // 2 - 1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n):\n    \"\"\"\n    Returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the smallest triangular number with n digits and the index to -1\n    smallest = 10 ** (n - 1)\n    index = -1\n\n    # Iterate from 1 to the square root of the smallest triangular number with n digits\n    for i in range(1, int(math.sqrt(smallest)) + 1):\n        # Calculate the current triangular number\n        current = i * (i + 1) // 2\n\n        # Check if the current triangular number is smaller than the smallest triangular number\n        if current < smallest:\n            # Update the smallest triangular number and its index\n            smallest = current\n            index = i\n\n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # finding the sum of digits of n \n    sum = 0 \n    while n > 0: \n        sum += n % 10 \n        n = n // 10 \n    # finding the index of the smallest triangular number with n digits\n    index = math.log10(sum) * 3 - 2\n    # returning the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # base case \n    if n == 1: \n        return 0 \n    elif n == 2: \n        return 2 \n    else: \n        # find the smallest triangular number with n digits \n        triangular = math.ceil(2**n / (math.log(2)*n)) \n        # calculate the index of the smallest triangular number \n        index = math.ceil(triangular / math.log(2)) \n        return index "
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict[key] = value\n        i += 2\n    return dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary to store the key-value pairs\n    dict_obj = {}\n    # Loop through each element in the tuple\n    for i in range(len(test_tup)-1):\n        # Append the adjacent elements as a tuple to the key\n        key = (test_tup[i], test_tup[i+1])\n        # Append the key-value pair to the dictionary\n        dict_obj[key] = i\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Get the number of elements in the tuple\n    n = len(test_tup)\n    # Loop through the tuple and add each element as a key-value pair to the dictionary\n    for i in range(0, n, 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n    # iterate over the tuple and add key-value pairs\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The tuple should have an even length.\")\n        return None\n    else:\n        dict_data = {}\n        for i in range(len(test_tup) // 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_data[key] = value\n        return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key = 0\n    result_dict = {}\n    while key < len(test_tup):\n        result_dict[key] = test_tup[key+1]\n        key += 2\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(0, len(test_tup), 2):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # checking if the length of the string is 0\n    if len(s) == 0:\n        return True\n    \n    # getting the first character of the string\n    first_char = s[0]\n    \n    # looping through the rest of the characters in the string\n    for char in s[1:]:\n        # checking if the current character is same as the first character\n        if char!= first_char:\n            return False\n    \n    # returning True if all the characters are same, else False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for i in s[1:]:\n        if i!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, otherwise False.\n    \"\"\"\n    # Check if the string is empty\n    if not s:\n        return False\n    # Get the first character of the string\n    first_char = s[0]\n    # Iterate over the string and compare each character to the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    # If all the characters are the same, return True\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Get the first character of the string\n    char = s[0]\n    # Loop through the string\n    for i in range(1, len(s)):\n        # If the character is not same as the first character, return False\n        if s[i]!= char:\n            return False\n    # If we reach here, all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count.values()"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side * (side + 1) * (side + 2)) ** 0.5\n    return math.sqrt(s * (s - side) * (s - side - 1) * (s - side - 2))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the perimeter of the tetrahedron\n    perimeter = side * (3 + math.sqrt(5)) / 2\n\n    # calculate the area of the tetrahedron\n    area = math.sqrt(perimeter ** 2 - (side / 2) ** 2)\n\n    # return the area of the tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    area = (1/6) * side ** 2 * math.sqrt(5)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes a side length as input and returns the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side*side + side*side + side*side + side*side) ** 0.5\n\n    # Calculate the area of the tetrahedron\n    area = (s * (s - side) * (s - side) * (s - side) * (s - side)) ** 0.5\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    return (math.sqrt(3) / 4) * s * s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    semi_perimeter = side/3\n    \n    # calculate the area using the Heron's formula\n    area = math.sqrt(semi_perimeter**2 * (1 + math.sqrt(1 + 16/semi_perimeter**2)))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    return math.sqrt(s)\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * side * side * side\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and the number of items to rotate to the right\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # if m > n, then no rotation is needed\n    if m > n:\n        return list\n    \n    # calculate the number of rotations required\n    rotations = n - m\n    # if m is zero, then rotation is done by swapping all elements\n    if m == 0:\n        return list\n    \n    # if m is greater than zero, then swap the first m elements of the list with the last n-m elements\n    list[:m] = [list[-i] for i in range(m, n)]\n    # rotate the list by rotations\n    list.rotate(rotations)\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function will rotate the list by n items to the right direction.\n    \"\"\"\n    # Create a copy of the list\n    lst_copy = lst[:]\n    # Calculate the length of the original list\n    original_length = len(lst)\n    # Calculate the number of rotations required\n    rotations = n % original_length\n    # If rotations are required, reverse the first n items of the original list\n    if rotations > 0:\n        lst_copy = lst_copy[-rotations:] + lst_copy[:-rotations]\n    # Return the rotated list\n    return lst_copy"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # calculate the new list size\n    new_size = n - m\n    # calculate the starting index for the new list\n    starting_index = m\n    # create a new empty list to store the rotated list\n    rotated_list = []\n    # loop through the original list and append the elements to the rotated list\n    for i in range(n):\n        rotated_list.append(list[(i + starting_index) % n])\n    # return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst = lst[m:]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    length = len(lst)\n\n    # If n is greater than the length of the list, swap the values of n and the length\n    if n > length:\n        n = n % length\n\n    # Reverse the first n elements of the list\n    lst = lst[-n:] + lst[:-n]\n\n    # Reverse the entire list\n    lst = lst[::-1]\n\n    return lst\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # Handle case when m is greater than n\n    if m > n:\n        m = m % n\n    # Handle case when m is zero or negative\n    if m == 0:\n        return list\n    # Reverse first m elements of the list\n    reversed_list = list[n-m:n]\n    reversed_list.reverse()\n    # Reverse the entire list\n    list[n-m:n].reverse()\n    # Concatenate the two reversed lists\n    result = reversed_list + list[:n-m]\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate the given list `lst` to the right by `n` items.\n\n    Parameters:\n    - lst: list - the list to be rotated.\n    - n: int - the number of items to rotate the list to the right.\n\n    Returns:\n    - rotated_lst: list - the rotated list.\n    \"\"\"\n    # calculate the number of rotations needed\n    rotations = n // len(lst)\n    # calculate the number of items to be rotated for each rotation\n    shift = n % len(lst)\n    # create a new list with the items to be rotated\n    rotated_lst = lst[-shift:] + lst[:-shift]\n    # concatenate the original list and the rotated list\n    return rotated_lst + lst[:shift]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function takes a list and an integer m as input, and rotates the list\n    by m items to the right direction. It works by replacing the first m items\n    with the last m items in the original list, and then replacing the last m\n    items with the first m items in the original list.\n\n    Parameters:\n    list (list): The list to be rotated.\n    m (int): The number of items to be rotated to the right.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n\n    # If m is greater than the length of the list, return the original list\n    if m > len(list):\n        return list\n\n    # Copy the first m items to the end of the list\n    list[-m:] = list[:m]\n\n    # Copy the last m items to the beginning of the list\n    list[:m] = list[-m:]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n\n    def is_divisible(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return True\n\n    return filter(is_divisible, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = set(str(num))\n        for digit in digits:\n            if int(digit) not in digits:\n                return False\n        return True\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(num % int(d) == 0 for d in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits_list = [int(d) for d in str(num)]\n        return all(num % d == 0 for d in digits_list)\n\n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n    startnum (int): Starting number.\n    endnum (int): Ending number.\n\n    Returns:\n    list: List of numbers that are divisible by every digit in the range.\n\n    \"\"\"\n    return list(filter(lambda x: all(int(d) % int(x % 10) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digits(n):\n        return all(n % digit == 0 for digit in set(str(n)))\n    return [n for n in range(startnum, endnum+1) if is_divisible_by_digits(n)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two arguments, startnum and endnum, which represent the range of numbers to search in.\n    The function returns a list of all the numbers within the given range that are divisible by every digit in that number.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(d % 10 == digits.count(d) for d in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        if all(int(digit) % num == 0 for digit in str(num)):\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda num: all(int(digit) % num == 0 for digit in str(num)), range(startnum, endnum+1))\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * r * math.sin(math.radians(a))\n        return round(area, 2)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/180"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is within the valid range\n    if a > 360:\n        return None\n\n    # Calculate the area using the formula\n    area = math.pi * r * r * math.sin(math.radians(a/360))\n\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    s = 2*math.pi*r*math.sin(math.radians(a/360))\n    return s"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        return None\n    # Calculate the area using the formula A = pi * r^2 * sin(a/180*pi)\n    area = math.pi * r**2 * math.sin(a/180*math.pi)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi*(r**2)*a/180\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function takes three strings X, Y, and Z and returns the longest common subsequence. \n    The length of the longest common subsequence is equal to the length of the shortest string in the three.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    T = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                T[i][j] = T[i - 1][j - 1] + 1\n            else:\n                T[i][j] = max(T[i - 1][j], T[i][j - 1])\n\n    return T[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences X, Y and Z as input and returns the longest common subsequence.\n\n    The function first defines a function to calculate the length of the longest common subsequence of two strings. \n    Then, it calculates the length of the longest common subsequence of all three strings and returns the maximum of the three lengths.\n\n    The function then defines a recursive function to find the longest common subsequence of two strings. \n    The recursive function takes two strings as input and returns the length of the longest common subsequence.\n    If the two strings are equal, the function returns 1.\n    Otherwise, the function returns the maximum of the two lengths calculated by calling the recursive function for the two substrings.\n    The function then adds the length of the common substring to the length of the longest common subsequence of the two substrings.\n\n    The function then defines a recursive function to find the longest common subsequence of all three strings. \n    The recursive function takes three strings as input and returns the length of the longest common subsequence.\n    The function first calculates the length of the longest common subsequence of the two substrings by calling the recursive function for the two substrings.\n    Then, the function adds the length of the longest common subsequence of the two substrings to the length of the longest common subsequence of the third substring.\n    Finally, the function returns the length of the longest common subsequence of the two substrings plus the length of the third substring.\n\n    \"\"\"\n    # Function to calculate the length of the longest common subsequence of two strings\n    def lcs_len(x, y):\n        if x == \"\":\n            return len(y)\n        if y == \"\":\n            return len(x)\n        if x[0] == y[0]:\n            return 1 + lcs_len(x[1:], y[1:])\n        return max(lcs_len(x[1:], y), lcs_len(x, y[1:]))\n\n    # Calculating the length of the longest common subsequence of all three strings\n    len_X = lcs_len(X, X)\n    len_Y = lcs_len(Y, Y)\n    len_Z = lcs_len(Z, Z)\n\n    # Returning the maximum of the three lengths\n    return max(len_X, len_Y, len_Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a dictionary to store the length of the longest common subsequence ending at each point of the strings\n    dp = {}\n\n    # iterate over all possible substrings of the first string\n    for i in range(len(X) + 1):\n        dp[i] = [0] * (len(Y) + 1)\n\n    # fill the dictionary with the length of the longest common subsequence ending at each point\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # backtrack to find the longest common subsequence ending at the last point of the strings\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # return the longest common subsequence\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0] * (o+1) for j in range(m+1)] for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    max_len = dp[n][m][o]\n    lcs = []\n\n    i = n\n    j = m\n    k = o\n\n    while i > 0 and j > 0 and k > 0:\n        if X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]:\n            lcs.append(X[j-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k]:\n            i -= 1\n        else:\n            j -= 1\n        if dp[i-1][j][k] > dp[i][j][k-1]:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0]*(m+1) for i in range(n+1)] \n  \n    # Calculate LCS length in bottom-up fashion \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1\n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n  \n    # Backtrack to get the LCS sequence \n    lcs = \"\" \n    i = n \n    j = m \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    # Function to calculate LCS of two strings\n    def lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n\n        # Creating a table to store lengths of LCS of subsequences of X[0..m-1] and Y[0..n-1]\n        dp = [[0] * (n+1) for i in range(m+1)]\n\n        # Fill entries of dp[][] in bottom up manner. Note that LCS of empty string is always 0\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if X[i-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n        return dp[m][n]\n\n    # Finding the length of LCS of X and Y\n    m = len(X)\n    n = len(Y)\n\n    # Creating a table to store lengths of LCS of subsequences of X[0..m-1] and Y[0..n-1]\n    dp = [[0] * (n+1) for i in range(m+1)]\n\n    # Fill entries of dp[][] in bottom up manner. Note that LCS of empty string is always 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Finding the LCS of X and Y\n    LCS = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS = X[i-1] + LCS\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Table to store lengths of longest common subsequences of X[0..i], Y[0..j], and Z[0..k]\n    l = [[[0 for j in range(len(Z)+1)] for i in range(len(X)+1)] for k in range(len(Y)+1)]\n\n    # Fill table l[][] in bottom up fashion\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    l[i][j][k] = l[i-1][j-1][k-1] + 1\n                else:\n                    l[i][j][k] = max(l[i-1][j][k], l[i][j-1][k], l[i][j][k-1])\n\n    # Backtrack to find the LCS\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif l[i-1][j][k] == l[i][j-1][k]:\n            i -= 1\n        elif l[i][j-1][k] == l[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences as input and returns the longest common subsequence (LCS) of these sequences.\n    \"\"\"\n    # Create a 2D table to store lengths of LCS for all prefixes of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    table = [[[0 for j in range(o+1)] for k in range(m+1)] for l in range(n+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    table[i][j][k] = table[i-1][j][k]\n                elif X[i-1] == Z[k-1]:\n                    table[i][j][k] = table[i][j-1][k]\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k])\n\n    # Print the table to get the LCS\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if table[i][j][k] == table[i-1][j-1][k-1] + 1:\n                    print(X[i-1], end='')\n\n    return None"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. \n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    max_length = 0\n    max_subseq = \"\"\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n                if p[i][j] > max_length:\n                    max_length = p[i][j]\n                    max_subseq = X[i - 1] * p[i][j]\n            else:\n                p[i][j] = 0\n\n    return max_subseq[:max_length]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize a 2D table to store lengths of LCS for all prefixes of X,Y,Z\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    lcs = [[0] * (m+1) for _ in range(n+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                # If X[i] is present at current index of X,Y,Z\n                if i>0 and X[i-1] == Z[k-1]:\n                    lcs[i][j] = max(lcs[i][j], lcs[i-1][j]+1)\n                # If Y[j] is present at current index of X,Y,Z\n                if j>0 and Y[j-1] == Z[k-1]:\n                    lcs[i][j] = max(lcs[i][j], lcs[i][j-1]+1)\n\n    # Initialize an empty list to store the LCS\n    lcs_list = []\n    # Traverse the LCS table and fill the list in reverse order\n    i = n\n    j = m\n    k = p\n\n    while i>0 and j>0 and k>0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_list.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j] > lcs[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the list and return it\n    return ''.join(lcs_list[::-1])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = str1.split()\n    # Iterate over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = words[i].capitalize()\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    # Initialize an empty list to store the words with spaces between them\n    result = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter of the word is capital\n        if word[0].isupper():\n            # If it is, add a space to the end of the word\n            result.append(word +'')\n        else:\n            # Otherwise, add the word as it is\n            result.append(word)\n    # Join the words back into a string with no spaces between them\n    return ''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string)\n    \n    # Capitalize the first letter of each word and join them with spaces\n    capitalized_words =''.join([word.capitalize() for word in words])\n    \n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'(?<=[a-z])[A-Z](?=[a-z])')\n    \n    # replace all occurrences of words starting with capital letters with spaces\n    new_str = pattern.sub(' ', str1)\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase to handle cases where words are capitalized but not spaces\n    str1 = str1.lower()\n    \n    # Find all the words in the string using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each word and add a space before it if it is capitalized\n    for word in words:\n        if word[0].isupper():\n            result +='' + word\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to match words with capital letters at the beginning of a line and replace them with spaces\n    str2 = re.sub(r'^[A-Z][a-z]+', lambda x: x.group().replace('_',''), str1)\n    # Use regular expressions to match words with capital letters and replace them with spaces\n    str3 = re.sub(r'[A-Z]', lambda x:'' + x.group(), str2)\n    # Remove the extra space at the beginning of the string\n    str4 = str3.lstrip()\n    # Return the modified string\n    return str4"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Convert string to lowercase\n    string = string.lower()\n    # Split string into words\n    words = re.findall(r'\\b\\w+\\b', string)\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the capitalized words back together into a string\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Remove all the special characters and convert the string to lowercase\n    str1 = re.sub('[^A-Za-z0-9]+','', str1).lower()\n\n    # Split the string into words\n    words = str1.split()\n\n    # Iterate over the words and replace the first letter with a space if it is capital\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n\n    # Join the words back into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Join the words with spaces\n    output =''.join(words)\n    return output"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to lists of digits\n    nums_list = [list(str(num)) for num in nums_str]\n    # Convert all lists of digits to integers\n    nums_list = [int(''.join(num)) for num in nums_list]\n    # Sort the integers using the built-in `sorted()` function\n    nums_list.sort()\n    # Convert the sorted integers back to lists of digits\n    nums_list = [list(str(num)) for num in nums_list]\n    # Join the lists of digits back into strings and return the sorted list of strings\n    return [str(''.join(num)) for num in nums_list]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Parameters:\n    nums_str (list of str): List of strings representing numbers.\n\n    Returns:\n    list of str: Sorted list of strings representing numbers.\n    \"\"\"\n\n    # Define a function to check if a string contains only digits\n    def is_numeric(s):\n        return s.isdigit()\n\n    # Filter out non-numeric strings\n    nums = list(filter(is_numeric, nums_str))\n\n    # Convert the numeric strings to integers and sort them\n    nums = sorted(list(map(int, nums)))\n\n    # Convert the sorted integers back to strings and return them\n    return list(map(str, nums))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all strings to floats\n    nums = [float(num) for num in nums_str]\n    # sort the list in ascending order\n    nums.sort()\n    # convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings in the list to numeric values\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of numeric values in ascending order\n    nums.sort()\n\n    # Convert the sorted list of numeric values back to strings\n    sorted_nums_str = [str(num) for num in nums]\n\n    # Return the sorted list of numeric values as a list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) for s in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings of numbers and returns a list of strings sorted numerically.\n    '''\n    # Convert all the strings in the list to integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(s) for s in nums_str if s.isdigit()]\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Adding the tuple to the list using list comprehension\n    test_list.extend([x for x in test_tup])\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    for num in test_tup:\n        test_list.append(num)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Concatenate the given list and the given tuple\n    new_list = test_list + test_tup\n    \n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            return True\n    return False"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i // 2]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == len(arr):\n        return True\n    if not is_min_heap(arr[:i]):\n        return False\n    return check_min_heap_helper(arr, i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    if i > len(arr) // 2:\n        # If the current index is greater than half of the array, then it is a min heap.\n        return True\n    else:\n        # Otherwise, check if the left and right child are min heaps or not.\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n        # Recursively call the function for the left and right children.\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    if i == 0: # base case\n        return True\n    \n    parent = (i-1)//2 # parent index\n    if arr[parent] > arr[i]: # if parent is greater than child, it's not a min heap\n        return False\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    if i == 0:\n        return True\n    else:\n        left = 2 * i\n        right = 2 * i + 1\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        elif right < len(arr) and arr[right] < arr[i]:\n            return False\n        else:\n            return True\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the index is not equal to the length of the array\n    if i >= len(arr):\n        # If the index is equal to the length of the array, the array is already a min heap\n        return True\n    # Check if the left child is smaller than the current element\n    if i * 2 + 1 < len(arr) and arr[i * 2 + 1] > arr[i]:\n        # If the left child is smaller than the current element, the array is not a min heap\n        return False\n    # Check if the right child is smaller than the current element\n    if i * 2 + 2 < len(arr) and arr[i * 2 + 2] > arr[i]:\n        # If the right child is smaller than the current element, the array is not a min heap\n        return False\n    # If both the left and right child are smaller than the current element, the array is a min heap\n    return check_min_heap_helper(arr, i * 2 + 1)\n\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if the array represents a min heap or False otherwise.\n    '''\n    # Call the helper function recursively with the start index\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n\n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n    elif arr[i] >= arr[2*i+1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2*i+1)\n\n\ndef check_min_heap(arr):\n    if len(arr) % 2!= 0:\n        return False\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        j = 1\n        for i in range(3, n+1, 2):\n            j = (2*j) + 1\n        return j\n    else:\n        j = 1\n        for i in range(3, n+1, 2):\n            j = (2*j) - 1\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num_list = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_num_list.append(jacobsthal_num_list[i-1] + jacobsthal_num_list[i-2])\n    return jacobsthal_num_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize variables\n    a = 0  # 0\n    b = 1  # 1\n    c = 1  # 1\n\n    # Calculate the nth Jacobsthal number\n    for i in range(1, n+1):\n        c = (a + b) % 10  # Calculate the current digit\n        if i % 2 == 1:\n            c = 10 - c  # If odd, convert to decimal\n        a = b  # Update variables\n        b = c  # Update variables\n\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal = 0\n        lucas = 1\n        for i in range(2, n+1):\n            jacobsthal = (jacobsthal + lucas) % 7\n            lucas = (lucas * lucas + 1) % 7\n        return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n\n    jacobsthal_num = 0\n    jacobsthal_prev = 1\n\n    for i in range(n):\n        jacobsthal_num = (jacobsthal_num + jacobsthal_prev) % 1000000007\n        jacobsthal_prev = (jacobsthal_num + jacobsthal_prev) % 1000000007\n\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n\n    # Initialize the first two values of the sequence\n    jacob = [0, 1]\n\n    # Calculate the remaining values of the sequence\n    for i in range(2, n+1):\n        jacob.append(jacob[i-1] + jacob[i-2])\n\n    # Return the nth value of the sequence\n    return jacob[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    jacobsthal_list = [0, 1, 1]\n    count = 3\n\n    while count < n:\n        current_num = jacobsthal_list[-2] + jacobsthal_list[-1]\n        jacobsthal_list.append(current_num)\n        count += 1\n\n    return jacobsthal_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev_num = 1\n        num = 1\n        count = 1\n        while count < n:\n            prev_num, num = num, prev_num + num\n            count += 1\n        return num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    The function should take a list of tuples and an integer K as input. \n    The function should return the minimum K records from the list of tuples.\n    If there are less than K records in the list, the function should return the entire list.\n    If there are not enough records in the list, the function should return None.\n    '''\n    if len(test_list) < K:\n        return None\n    min_records = sorted(test_list, key=lambda x: x[0])[:K]\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sorting the list of tuples based on second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initializing minimum value and count of minimum records\n    min_val = float('inf')\n    count = 0\n\n    # Traversing through the sorted list\n    for i in range(K):\n        # Updating count of minimum records\n        count += 1\n\n        # Updating minimum value if current record is smaller\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n\n    # Returning the count of minimum records\n    return count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a tuple list (test_list) and an integer K as input.\n    It then iterates through the tuple list and returns the minimum K records found so far.\n    If there are less than K records found so far, it returns all the records.\n    '''\n    min_list = []\n    count = 0\n    for i in range(len(test_list)):\n        if count < K:\n            if len(min_list) == 0 or test_list[i][1] < min_list[-1][1]:\n                min_list.append(test_list[i])\n                count += 1\n            elif len(min_list) == K and test_list[i][1] < min_list[-1][1]:\n                min_list.pop()\n                min_list.append(test_list[i])\n                count += 1\n        elif count == K:\n            if test_list[i][1] < min_list[-1][1]:\n                min_list.pop()\n                min_list.append(test_list[i])\n        else:\n            break\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()  # Sort the tuple list\n    min_k_records = []  # Create an empty list to store minimum k records\n    \n    # Loop through the sorted tuple list and add minimum k records to the list\n    for i in range(len(test_list)-K+1):\n        min_k_records.append(test_list[i])\n        \n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort the list based on the second element of each tuple\n    min_list = []\n    for i in range(K):\n        min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list in ascending order based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum k records\n    min_list = []\n\n    # Initialize an index variable for the minimum k records\n    index = 0\n\n    # Traverse the sorted list from left to right\n    for i in range(len(sorted_list)):\n\n        # If the number of records in the current index is less than k,\n        # then move to the next index\n        if len(min_list) < K:\n            index += 1\n\n        # If the number of records in the current index is equal to or greater than k,\n        # then add the minimum k records to the min_list and move to the next index\n        else:\n            min_list.append(sorted_list[i])\n            index += 1\n\n        # If the number of records in the current index is greater than or equal to k,\n        # then check if the minimum k records are the last k records in the sorted list\n        if len(min_list) == K:\n            if sorted_list[i][1] == min_list[-1][1]:\n                min_list.pop()\n            else:\n                break\n\n    # Return the minimum k records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    min_index = 0\n    min_val = test_list[min_index][-1]\n\n    for i in range(1, n):\n        if test_list[i][-1] < min_val:\n            min_val = test_list[i][-1]\n            min_index = i\n\n    return test_list[min_index][:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sorting the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initializing min_k to the first element of the first tuple in the sorted list\n    min_k = test_list[0][0]\n\n    # Looping through the list to find the minimum k records\n    for i in range(1, len(test_list)):\n        # Checking if the current tuple's first element is less than min_k\n        if test_list[i][0] < min_k:\n            # Updating min_k to the current tuple's first element\n            min_k = test_list[i][0]\n\n        # If the current tuple's first element is greater than or equal to min_k and the length of the list is less than or equal to K, then adding the tuple to the result list\n        if i == len(test_list) - 1 or test_list[i][0] >= min_k or len(test_list) <= K:\n            result = test_list[:i+1]\n            break\n\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    min_k_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i][0] <= min_list[-1][0]:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n            else:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n            if len(min_list) == K:\n                min_k_list.append(min_list)\n                min_list = []\n    return min_k_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            result.append(l1[i])\n    return result"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # iterate through each index of the first list\n    for i in range(len(l1)):\n        # check if the element at the current index is also in the second list and third list\n        if l1[i] in l2 and l1[i] in l3:\n            # if it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    This function returns a list containing all common elements from three lists.\n    \"\"\"\n    # create an empty set to store common elements\n    common_set = set()\n\n    # loop through each index in l1\n    for i in range(len(l1)):\n        # check if the element at this index is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # if the element is in both lists, add it to the common set\n            common_set.add(l1[i])\n\n    # convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    if len(sorted_numbers) < 2:\n        return None\n    else:\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        min1 = float('inf')\n        min2 = float('inf')\n        for num in numbers:\n            if num < min1:\n                min2 = min1\n                min1 = num\n            elif num < min2:\n                min2 = num\n        return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        # Sort the list in ascending order\n        numbers.sort()\n        # Return the second element of the sorted list\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return min(numbers[1:], key=lambda x: abs(x - numbers[0]))"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\b\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    # Define the regular expression pattern\n    pattern = r'ab+'\n    \n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b*)')\n    match = pattern.match(text)\n    if match:\n        groups = match.groups()\n        if groups:\n            b_group = groups[0]\n            if b_group:\n                return True\n    return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    # Sort the list\n    test_list.sort()\n    # Traverse the list\n    for i in range(n):\n        # If current element is greater than the next element, then it is a reverse pair\n        if i < n-1 and test_list[i] > test_list[i+1]:\n            count += n-i-1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\n\ndef is_reverse(string):\n    return string == string[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    \n    # Iterate through each string in the list\n    for i in range(n):\n        # If the string is not a palindrome, skip it\n        if not is_palindrome(test_list[i]):\n            continue\n        \n        # Find the left and right indices of the string\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            # If the left and right characters are not equal, they cannot form a pair\n            if test_list[left]!= test_list[right]:\n                left += 1\n                right -= 1\n            else:\n                # If the characters are equal, add to the count and move the left and right pointers towards each other\n                count += (right - left)\n                left += 1\n                right -= 1\n                \n    return count\n\n\ndef is_palindrome(s):\n    '''\n    Check if a given string is a palindrome.\n    '''\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    reverse_dict = {}\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            reverse_string = string[::-1]\n            if reverse_string in reverse_dict:\n                count += reverse_dict[reverse_string]\n            reverse_dict[string] = i + 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        string = string.lower()\n        reversed_string = string[::-1]\n        if string!= reversed_string:\n            for i in range(len(string)):\n                for j in range(i+1, len(string)):\n                    if string[i:j+1] == reversed_string[j:i+1]:\n                        count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each sublist\n    count_dict = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count_dict:\n            # if it is, increment the count by 1\n            count_dict[tuple(sublist)] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tuple(sublist)] = 1\n    # return the dictionary of count of sublists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = []\n    for lst in list1:\n        list_tuples.append((tuple(lst), lst.count(lst)))\n    unique_list_tuples = set(list_tuples)\n    unique_dict = {}\n    for lst in unique_list_tuples:\n        unique_dict[lst[0]] = lst[1]\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n\n    # Iterate over each element of the list1\n    for i in range(len(list1)):\n        # Convert the current element to a tuple\n        sublist = tuple(list1[i])\n        # Check if the tuple is already in the dictionary\n        if sublist in sublist_count:\n            # If it is, increment the count of its occurrences\n            sublist_count[sublist] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            sublist_count[sublist] = 1\n\n    # Return the dictionary containing the count of unique sublists\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert each list to a tuple\n    tuples_list = [tuple(x) for x in list1]\n    # Create an empty dictionary\n    count_dict = {}\n    # Iterate over each tuple and increment its value in the dictionary\n    for tup in tuples_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count_dict = {}\n    for item in list1:\n        item_tuple = tuple(item)\n        if item_tuple in count_dict:\n            count_dict[item_tuple] += 1\n        else:\n            count_dict[item_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    # Iterate over each element in the set\n    for element in set1:\n        # Count the number of occurrences of the list in the original list\n        count = list1.count(element)\n        # Add the count to the dictionary with the list as the key and the count as the value\n        count_dict[element] = count\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the counts of unique sublists\n    count_dict = {}\n    \n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Convert each element to a tuple and check if it's already in the dictionary\n        if tuple(list1[i]) in count_dict:\n            # If it is, increment its count\n            count_dict[tuple(list1[i])] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[tuple(list1[i])] = 1\n            \n    # Return the dictionary containing the counts of unique sublists\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    list1_unique = []\n    for item in list1:\n        if tuple(item) not in list1_unique:\n            list1_unique.append(tuple(item))\n    \n    sublists_counts = {}\n    for item in list1:\n        sublists = []\n        for subitem in item:\n            sublists.append(tuple(subitem))\n        for sublist in sublists:\n            if sublist in sublists_counts:\n                sublists_counts[sublist] += 1\n            else:\n                sublists_counts[sublist] = 1\n    \n    return sublists_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        for sublist in item:\n            tuple_str = tuple(sublist)\n            if tuple_str not in count:\n                count[tuple_str] = 1\n            else:\n                count[tuple_str] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_pattern = r'^[-+]?[0-9]+(\\.[0-9]+)?$'\n    decimal_pattern_compiled = re.compile(decimal_pattern)\n    if decimal_pattern_compiled.match(num):\n        decimal_number = float(num)\n        if decimal_number % 1 == 0:\n            if decimal_number >= 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    if '.' not in num.split('.')[1]:\n        return False\n    if len(num.split('.')[1]) > 2:\n        return False\n    for digit in num.split('.')[1]:\n        if digit.isdigit() and int(digit) >= 10:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if the given string is a decimal number\n    if '.' in num:\n        # split the decimal number into integer and fractional parts\n        integer_part, fractional_part = num.split('.')\n\n        # check if the integer part is valid\n        try:\n            integer_part = int(integer_part)\n        except ValueError:\n            return False\n\n        # check if the fractional part is valid\n        if len(fractional_part) > 2:\n            return False\n        else:\n            for char in fractional_part:\n                if char not in '0123456789':\n                    return False\n\n    # if the given string is a decimal number, check its precision\n    else:\n        # check if the integer part is valid\n        try:\n            integer_part = int(num)\n        except ValueError:\n            return False\n\n        # check if the fractional part is valid\n        if num.startswith('0') and len(num) > 1:\n            return False\n        else:\n            for char in num:\n                if char not in '0123456789':\n                    return False\n\n    # if the given string is a valid decimal number, return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the string is a decimal number\n    try:\n        float(num)\n        # Check if the float is a decimal number with a precision of 2\n        if '.' not in num and abs(float(num)) % 1 == 0 and abs(float(num)) % 0.1 == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Check if the input string has a precision of 2\n    if len(num) > 2:\n        return False\n\n    # Check if the input string contains a decimal point\n    if '.' not in num:\n        return False\n\n    # Split the input string into integer and decimal parts\n    int_part, dec_part = num.split('.')\n\n    # Check if the integer part is a decimal number\n    try:\n        int(int_part)\n    except ValueError:\n        return False\n\n    # Check if the decimal part is exactly 2 characters long\n    if len(dec_part)!= 2:\n        return False\n\n    # Check if the decimal part contains only digits\n    if not all(char.isdigit() for char in dec_part):\n        return False\n\n    # Convert the decimal part to an integer\n    dec_part = int(dec_part)\n\n    # Check if the decimal part is within the range of a 2-digit number\n    if dec_part < 0 or dec_part > 99:\n        return False\n\n    # If all checks pass, the input string is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(\",\", \"\")\n    if '.' not in num:\n        return False\n    if '.' in num:\n        if len(num.split('.')[1])!= 2:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        decimal_num = float(num)\n        if decimal_num % 1!= 0:\n            raise ValueError(\"Not a decimal number with a precision of 2\")\n        return True\n    except ValueError as ve:\n        print(ve)\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    This function takes a string as input and checks whether it is a decimal number with a precision of 2.\n    \"\"\"\n    num = num.replace(\",\", \"\") # Remove commas from the number string\n    num = num.replace(\".\", \"\") # Remove periods from the number string\n    num = num.replace(\" \", \"\") # Remove spaces from the number string\n    num = num.replace(\"-\", \"\") # Remove hyphens from the number string\n    if num.isdecimal() and \".\" in num: # Check if the number contains a period\n        parts = num.split(\".\") # Split the number into parts\n        if len(parts) == 2 and len(parts[0]) <= 5 and len(parts[1]) <= 2: # Check if the parts have a precision of 2\n            decimal_places = parts[1].count(\".\") # Count the number of decimal places in the second part of the number\n            if decimal_places == 2: # Check if there are exactly 2 decimal places in the second part of the number\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            if num.is_integer() == False and num == int(num):\n                return True\n            else:\n                return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) < 2:\n        return False\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains multiple distinct elements\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes in a list of numbers and checks if there is only one distinct element in the list or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a set of elements in the list\n    set_elements = set(arr)\n\n    # Check if the set has only one element\n    if len(set_elements) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0 or len(arr) > 10**6:\n        return False\n\n    count = 0\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n        count += 1\n\n    if count!= len(seen):\n        return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Initialize a set to store unique elements\n    unique = set()\n\n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique.add(element)\n\n    # Check if the set has only one element or not\n    if len(unique) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    count = 0\n    for i in arr:\n        if arr.count(i) > 1:\n            unique = False\n        count += 1\n    if unique:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        print(\"The month number\", monthnum3, \"contains 30 days.\")\n    else:\n        print(\"The month number\", monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        days = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        days = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    return days[monthnum3 - 1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1,13):\n        return days_in_months[monthnum-1] == 30\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n            if monthnum3 % 2 == 0:\n                return \"30 days\"\n            else:\n                return \"29 days\"\n        else:\n            if monthnum3 % 2 == 0:\n                return \"29 days\"\n            else:\n                return \"28 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30 days\"\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return \"31 days\"\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 3:\n        return True\n    elif 4 <= monthnum3 <= 6:\n        return True\n    elif 7 <= monthnum3 <= 9:\n        return True\n    elif 10 <= monthnum3 <= 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    # check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n    # check if the month number has 30 days\n    if monthnum3 % 2 == 0:\n        return \"Month does not have 30 days\"\n    else:\n        return \"Month has 30 days\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_month[1] = 29\n        else:\n            days_in_month[1] = 28\n    if monthnum in [4, 6, 9, 11]:\n        days_in_month[monthnum-1] = 30\n    return days_in_month[monthnum-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check if the month number is in the range of 1 to 12\n    if not 1 <= monthnum <= 12:\n        return \"Invalid month number\"\n\n    # check if the month number contains 30 days\n    if monthnum in [4, 6, 9, 11]:\n        return \"True\"\n    elif monthnum in [2, 3, 5, 7, 8, 10, 12]:\n        return \"False\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the given month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    \n    # Check if the given month number has 30 days\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = arr[1] - arr[0]\n\n    # Iterate over the array from the second element\n    for i in range(1, n-1):\n        # Calculate the difference between the current and next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and the size of the array as input.\n    It then finds the minimum difference between any two elements in the array.\n    '''\n    # initialize two variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # iterate through the array to find the minimum and maximum values\n    for i in range(n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    # initialize a variable to store the minimum difference between any two elements in the array\n    min_diff = max_val - min_val\n\n    # iterate through the array again to calculate the minimum difference between any two elements\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of n elements and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n):\n        # Iterate through the remaining elements of the array\n        for j in range(i + 1, n):\n            # Calculate the difference between the current element and the next element\n            diff = arr[i] - arr[j]\n\n            # Update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n): \n    # sort the array in ascending order \n    arr.sort() \n\n    # initialize two variables to store minimum difference and current difference \n    min_diff = arr[1] - arr[0] \n    curr_diff = arr[1] - arr[0] \n\n    # iterate through the array starting from the second element \n    for i in range(1, n): \n\n        # calculate current difference between current element and the next element \n        curr_diff = arr[i] - arr[i - 1] \n\n        # update minimum difference if current difference is smaller than the current minimum \n        if curr_diff < min_diff: \n            min_diff = curr_diff \n\n    # return the minimum difference \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        if abs(arr[i] - arr[i-1]) < diff:\n            diff = abs(arr[i] - arr[i-1])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort() # Sort the array in ascending order\n    \n    # Initialize the minimum difference as infinite\n    min_diff = float('inf')\n    \n    # Traverse through the array and find the minimum difference\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n\n    # find the minimum difference\n    min_diff = arr[-1] - arr[0]\n\n    # check the rest of the array\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    return (math.pow(n, 3) + 10 * math.pow(n, 2) - 7 * n + 5) / 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is a polite number and False otherwise.\n\n    A polite number is a number that is either:\n    - less than 200,\n    - divisible by 20, and\n    - neither divisible by 3 nor divisible by 5.\n\n    A polite number is defined as the 20th polite number if it is less than 200, divisible by 20, and neither divisible by 3 nor divisible by 5.\n\n    If the input number is less than 200, then it is a polite number. Otherwise, it is not a polite number if it is divisible by 20 and neither divisible by 3 nor by 5. Therefore, we can check if the input number is divisible by 20 and if it is not divisible by 3 or 5 to see if it is a polite number.\n    \"\"\"\n\n    if n < 200:\n        return True\n    else:\n        if n % 20 == 0:\n            if n % 3!= 0 and n % 5!= 0:\n                return True\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_square(num):\n        return num == int(num**0.5) ** 2\n\n    def is_happy(num):\n        n = num\n        sum = 0\n        while n!= 1:\n            sum += n % 10 ** 2\n            n //= 10\n        return sum == 1\n\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    polite_numbers = []\n    for i in range(1, n+1):\n        if is_prime(i) and is_square(i) and is_happy(i) and is_palindrome(i):\n            polite_numbers.append(i)\n\n    return polite_numbers\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function checks if the input number is a polite number or not.\n    A polite number is a number that is a perfect square and is divisible by 4.\n    \"\"\"\n    if math.sqrt(n) % 1 == 0 and n % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n\n    def nth_polite(k):\n        \"\"\"\n        Helper function to find nth polite number.\n        \"\"\"\n\n        def is_prime(num):\n            \"\"\"\n            Helper function to check if a number is prime or not.\n            \"\"\"\n            if num < 2:\n                return False\n            for i in range(2, int(math.sqrt(num)) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def gcd(a, b):\n            \"\"\"\n            Helper function to find gcd of two numbers.\n            \"\"\"\n            if b == 0:\n                return a\n            else:\n                return gcd(b, a % b)\n\n        def lcm(a, b):\n            \"\"\"\n            Helper function to find lcm of two numbers.\n            \"\"\"\n            return (a * b) // gcd(a, b)\n\n        def is_lcm_prime(a, b):\n            \"\"\"\n            Helper function to check if a number is prime and lcm of a and b is prime or not.\n            \"\"\"\n            if is_prime(a) and is_prime(b) and is_prime(lcm(a, b)):\n                return True\n            else:\n                return False\n\n        i = 2\n        while i <= k:\n            if is_lcm_prime(i, k):\n                return i\n            i += 1\n\n        return None\n\n    return nth_polite(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n    \n    # Iterate through the sequence of numbers\n    while count < n:\n        # Check if the current number is a polite number\n        if num % 2 == 0 and num % 7!= 0:\n            # If it is, increment the count\n            count += 1\n        # Increment the number\n        num += 1\n    \n    # Return the number\n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        count = 1\n        i = 1\n        while count < n:\n            if is_prime(i):\n                count += 1\n            i += 1\n        return i - 1\n\n    return nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n\n    Args:\n    n: int, the index of the polite number to find.\n\n    Returns:\n    int, the nth polite number.\n    \"\"\"\n    # The first polite number is 25\n    if n == 1:\n        return 25\n\n    # Calculate the nth polite number\n    base = 25\n    count = 1\n    while count < n:\n        base += 1\n        count += 1\n\n    # Check if the nth polite number is a palindrome\n    i = 0\n    temp = base\n    while temp > 0:\n        digit = temp % 10\n        i = (i * 10) + digit\n        temp //= 10\n\n    # If the nth polite number is a palindrome, return it\n    if i == base:\n        return base\n\n    # If the nth polite number is not a palindrome, return None\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        \"\"\"\n        A function to find the nth polite number.\n        \"\"\"\n        polite = 1\n        i = 1\n        while i <= n:\n            if is_prime(polite):\n                polite += 1\n            i += 1\n        return polite - 1\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = math.sqrt(n)\n    b = math.sqrt(n) + 1\n    return int(a + b)"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    if len(l1) < 2:\n        return []\n    \n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    \n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the count of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    set1 = set(li1)\n    set2 = set(li2)\n    diff_set = set1.symmetric_difference(set2)\n    return list(diff_set)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists and returns the difference between them.\n    \"\"\"\n    return [x for x in li1 if x not in li2]\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    count = 0\n    odd_sum = 0\n    while count < n:\n        count += 1\n        num = count\n        while num % 2 == 0:\n            num //= 2\n        odd_sum += num ** 4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Iterate over first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate fourth power of the number\n        fourth_power = i ** 4\n        # Add fourth power to sum\n        sum += fourth_power\n    \n    # Return the sum\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_pow = 0\n    for i in range(1, n+1, 2):\n        sum_of_pow += i**4\n    return sum_of_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing sum variable to 0\n    sum_of_fourth_powers = 0\n\n    # iterating through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculating the fourth power of the current number\n        fourth_power = i**4\n\n        # adding the fourth power to the sum_of_fourth_powers variable\n        sum_of_fourth_powers += fourth_power\n\n    # returning the sum of fourth powers of odd natural numbers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of fourth power of odd numbers\n    sum_fourth_power = 0\n\n    # Loop through odd numbers from 1 to n and calculate their fourth power\n    for i in range(1, n+1, 2):\n        fourth_power = i ** 4\n        sum_fourth_power += fourth_power\n\n    # Return the sum of fourth power of odd numbers\n    return sum_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_powers += i**4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # iterate through first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # calculate fourth power of the current odd number\n        power = i**4\n        # add the fourth power to the sum variable\n        sum += power\n        \n    # return the sum of fourth power of odd natural numbers\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack or stack.pop()!= opening_brackets.index(bracket):\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in ')]}' and stack:\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n        else:\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isalnum() or i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0 or stack.pop()!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= '(':\n                return False\n\n    if len(stack)!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if not top:\n                return False\n            if i-top-1!= 0:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for c in exp:\n        if c in ['(', '{', '[']:\n            stack.append(c)\n        elif c in [')', '}', ']']:\n            if not stack:\n                return False\n            if c == ')' and stack[-1] == '(':\n                stack.pop()\n            elif c == '}' and stack[-1] == '{':\n                stack.pop()\n            elif c == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char == ')' or char == ']' or char == '}':\n            if not stack:\n                return \"False\"\n            if char == ')' and stack[-1]!= '(':\n                return \"False\"\n            elif char == ']' and stack[-1]!= '[':\n                return \"False\"\n            elif char == '}' and stack[-1]!= '{':\n                return \"False\"\n            stack.pop()\n    \n    return \"True\" if not stack else \"False\""
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Iterate through the list of words\n    for i in range(len(words)):\n        # Check if the length of the word is equal to K\n        if len(words[i]) == K:\n            # If it is, remove the word from the list of words\n            words.pop(i)\n            # Decrement the index to avoid removing the current word again\n            i -= 1\n\n    # Join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # convert the string to a list of words\n    words = test_str.split()\n    \n    # loop through each word and check if its length is greater than K\n    for i in range(len(words)):\n        if len(words[i]) > K:\n            # if so, remove the word from the list\n            words.pop(i)\n            i -= 1 # decrement i so that we don't remove the wrong word\n    \n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the non-K-length words\n    non_K_words = []\n\n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is not K\n        if len(word)!= K:\n            # Add the word to the non-K-length words list\n            non_K_words.append(word)\n\n    # Join the non-K-length words back into a string\n    result =''.join(non_K_words)\n\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split() # split the string into words\n    \n    for i in range(len(test_str)):\n        if len(test_str[i]) == K: # if the length of a word is K\n            del test_str[i] # remove the word from the list\n            \n    return''.join(test_str) # join the list of words back into a string with spaces in between"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create a set to store the words with length greater than K\n    words_to_remove = set()\n\n    # Iterate over the list of words and add those with length K to the set\n    for word in words:\n        if len(word) == K:\n            words_to_remove.add(word)\n\n    # Remove the words from the list of words\n    for word in words:\n        if word in words_to_remove:\n            words.remove(word)\n\n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        return [match[0], matches.index(match[0])]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    This function takes two arguments, the text string and the pattern string. \n    It uses regular expressions to search for the pattern in the text string and returns a tuple containing the number of occurrences and the index of the first occurrence. \n    If the pattern is not found in the text string, the function returns None.\n    '''\n    # Use regular expressions to search for pattern in text\n    matches = re.finditer(pattern, text)\n    if matches:\n        # Count the number of occurrences and find the index of the first occurrence\n        count = len(list(matches))\n        start = matches.start()\n    else:\n        # If pattern is not found in text, return None\n        return None\n    \n    return (count, start)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return (m.group(), m.start(), m.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    # find all occurrences of the pattern in the text\n    occurrences = re.findall(pattern, text)\n    \n    # if there are no occurrences, return None\n    if not occurrences:\n        return None\n    \n    # loop through the occurrences and find their position in the text\n    positions = []\n    for i, occurrence in enumerate(occurrences):\n        positions.append((occurrence, text.find(occurrence)))\n    \n    # sort the occurrences and positions by their position in the text\n    positions.sort(key=lambda x: x[1])\n    \n    # return the occurrences and positions\n    return positions"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether every odd index contains odd numbers\n    is_odd = True\n    \n    # Loop through the list and check if every odd index contains odd numbers\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                is_odd = False\n                break\n    \n    # Return whether every odd index contains odd numbers\n    return is_odd"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            print(\"The number at index\", i, \"is not odd.\")\n            return False\n    print(\"All numbers are odd in odd indices.\")\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    n = len(nums)\n    for i in range(1, n+1, 2):\n        count = sum(nums[i-1:i+1:2])\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # create an empty list to store the odd numbers\n    odd_nums = []\n    # loop through the list and check if the index is odd\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            # if the index is odd, check if the number at that index is odd\n            if nums[i] % 2!= 0:\n                odd_nums.append(nums[i])\n    # check if all the odd numbers in the list are present at odd positions\n    if len(odd_nums) == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not any(x % 2 == 1 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            print(f\"The odd index {i} does not contain odd numbers.\")\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                odd_count += 1\n        else:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # initialize a variable to keep track of the number of odd numbers\n    odd_count = 0\n\n    # loop through the list of numbers\n    for num in nums:\n        # if the number is odd, increment the count\n        if num % 2 == 1:\n            odd_count += 1\n    \n    # return True if there are an equal number of odd and even numbers in every odd index, False otherwise\n    return odd_count == len(nums) // 2"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] in vowels) and (i == len(test_str)-1 or test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Removing duplicates from the list using set\n    arr = list(set(arr))\n\n    # Initializing the sum variable with the first element in the list\n    sum = arr[0]\n\n    # Looping through the remaining elements in the list\n    for i in range(1, len(arr)):\n        # Subtracting the first element from the current element and adding it to the sum variable\n        sum += arr[i]\n\n    # Returning the sum of non-repeated elements in the list\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Find the sum of non-repeated elements in the dictionary\n    non_repeating_sum = 0\n    for num in arr:\n        if freq[num] == 1:\n            non_repeating_sum += num\n\n    return non_repeating_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set of unique elements in the list\n    unique_elements = set(arr)\n    \n    # Convert the set back to a list\n    unique_list = list(unique_elements)\n    \n    # Initialize a variable to keep track of the sum\n    sum_of_unique_elements = 0\n    \n    # Loop through the unique list and add the elements to the sum\n    for element in unique_list:\n        sum_of_unique_elements += element\n        \n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Initialize a set to keep track of the elements in the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of the unique elements\n    unique_sum = 0\n    # Loop through the unique elements and add them to the sum\n    for element in unique_elements:\n        unique_sum += element\n    # Return the sum of the unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n        \n    # Convert the set to a list and return the sum of its elements\n    return sum(list(unique_set))"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n    \n    # Sum up the unique elements\n    unique_sum = sum(unique_elements)\n    \n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # sum all unique elements\n    unique_sum = sum(unique_set)\n    # return the unique sum\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create an empty dictionary to store unique elements and their counts\n    unique_elements = {}\n    for num in arr:\n        # check if the element is already in the dictionary\n        if num in unique_elements:\n            # increment the count of the element in the dictionary\n            unique_elements[num] += 1\n        else:\n            # add the element to the dictionary with a count of 1\n            unique_elements[num] = 1\n    \n    # find the sum of non-repeated elements in the dictionary\n    sum_of_non_repeated = sum([num for num, count in unique_elements.items() if count == 1])\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # iterate over the list and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # iterate over the dictionary and add up all the non-repeated elements\n    for num in freq:\n        if freq[num] == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as an argument and returns the sum of all the elements in the list,\n    except those that are repeated.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n    \n    # Find the sum of unique elements\n    sum_unique = sum(unique_elements)\n    \n    # Return the sum of all elements in the list, except those that are repeated\n    return sum_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n    list1 (list): a list of elements.\n\n    Returns:\n    list: a list of sublists where each sublist contains consecutive duplicates of the input list elements.\n    \"\"\"\n    # use the itertools groupby() function to group the elements of the list by the elements they share\n    grouped_list = list(groupby(list1))\n    # initialize an empty list to store the sublists\n    sublists = []\n    # loop through the grouped list and append consecutive duplicates to a sublist\n    for key, group in grouped_list:\n        if group:\n            sublists.append([x for x in group])\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    result = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            result.extend([list(group)] * (len(list(group)) - 1))\n        else:\n            result.extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby function from itertools to group the list elements\n    grouped_list = groupby(list1)\n    \n    # Initialize an empty list to store the packed sublists\n    packed_list = []\n    \n    # Iterate through the grouped list\n    for item in grouped_list:\n        # Check if the length of the group is greater than 1\n        if len(list(item)) > 1:\n            # Add the first element of the group to the packed list\n            packed_list.append(list(item)[0])\n            \n            # Add the subsequent elements of the group to the packed list\n            for element in list(item)[1:]:\n                packed_list.append(element)\n            \n    # Return the packed list\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create a generator function that groups consecutive duplicates of the input list\n    groups = groupby(enumerate(list1), key=lambda x: x[1])\n\n    # convert the groups into a list of sublists\n    result = [list(g) for g in groups]\n\n    # remove the last sublist (i.e., the one with the last element)\n    result.pop()\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list elements by their indices and use the itertools.groupby() function\n    # to create a generator of groups of consecutive duplicates\n    groups = groupby(enumerate(list1), lambda x: x[0] == x[1] - 1)\n    # iterate over the groups and pack the consecutive duplicates into sublists\n    packed = [list(g) for _, g in groups]\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of sublists, where each sublist contains consecutive duplicates of the original list.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        if key == lst[0]:\n            result.append([key])\n        else:\n            if key == lst[1]:\n                result.append([key])\n            else:\n                result.append([key, next(group)])\n                break\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            item = tuple(item)\n            if item in sublists:\n                sublists[item] += 1\n            else:\n                sublists[item] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in lst:\n        if sublist not in count:\n            count[tuple(sublist)] = 1\n        else:\n            count[tuple(sublist)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert each list to a tuple and check if it's already in the dictionary\n        if (tuple(sublist),) not in count_dict:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[(tuple(sublist),)] = 1\n        else:\n            # If it's already in the dictionary, increment its count\n            count_dict[(tuple(sublist),)] += 1\n    \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert list to tuple\n    list1 = tuple(list1)\n    \n    # Create empty dictionary\n    count_dict = {}\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Get the current tuple\n        current_tuple = list1[i]\n        \n        # Check if the current tuple is already in the dictionary\n        if current_tuple in count_dict:\n            # If it is, increment its count\n            count_dict[current_tuple] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            count_dict[current_tuple] = 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, turn it into a tuple and add it to the counts dictionary\n        if isinstance(element, list):\n            counts[tuple(element)] = counts.get(tuple(element), 0) + 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for elem in list1:\n        if elem not in counts:\n            counts[elem] = 1\n        else:\n            counts[elem] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through the elements of the list\n    for element in list1:\n        # if the element is a list, turn it into a tuple and add it to the dictionary\n        if isinstance(element, list):\n            element = tuple(element)\n            if element in counts:\n                counts[element] += 1\n            else:\n                counts[element] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Define a dictionary to store the unique sublists\n    unique_dict = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it is already in the dictionary\n        if tuple(sublist) in unique_dict:\n            # Increment the count of the tuple in the dictionary\n            unique_dict[tuple(sublist)] += 1\n        else:\n            # Add the sublist to the dictionary with a count of 1\n            unique_dict[tuple(sublist)] = 1\n\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n\n    # Loop through each element in the list\n    for element in list1:\n\n        # If the element is a list, convert it to a tuple and check if it's already in the dictionary\n        if isinstance(element, list):\n            if tuple(element) in sublist_count:\n                sublist_count[tuple(element)] += 1\n            else:\n                sublist_count[tuple(element)] = 1\n\n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list in ascending order\n    test_list.sort()\n    # create a set to store unique tuples\n    unique_tuples = set()\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each tuple starting from the next index\n        for j in range(i+1, len(test_list)):\n            # add the tuple to the set if its sum is equal to the current index of the list\n            if test_list[i][0]+test_list[j][0] == test_list[i][1]:\n                unique_tuples.add(tuple(sorted((test_list[i][0], test_list[j][0]))))\n    # create a list to store the combinations of tuples\n    combinations_list = []\n    # loop through each unique tuple\n    for tup in unique_tuples:\n        # loop through each combination of tuples\n        for combo in combinations(tup, len(tup)):\n            # add the combination to the list\n            combinations_list.append(tuple(combo))\n    # return the list of combinations of tuples\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        combination = tuple(test_list[i] + test_list[j] + test_list[k] + test_list[l] + test_list[m])\n                        combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    for m in range(l+1, n):\n                        combinations_list.append((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(tuple(test_list[i]), tuple(test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Combinations of tuples with sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(test_list[i], test_list[j])\n"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Combine all the tuples in the list\n    combined_list = [tuple(x) for x in test_list]\n\n    # Find the combinations of sums\n    for combination in combinations(combined_list, r=2):\n        # Check if the sum is present in the list\n        if (sum(combination) in test_list):\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    comb_list = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            comb = tuple(sorted(test_list[i] + test_list[k] for k in range(j-i)))\n            comb_list.append(comb)\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    tuples = []\n    for item in test_list:\n        if isinstance(item, tuple):\n            tuples.append(item)\n    # Loop through all possible pairs of tuples in the list\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            # Check if the sum of the two tuples is present in the list\n            if tuples[i][0] + tuples[j][0] in test_list:\n                # Check if the two tuples are already present in the list of combinations\n                if (tuples[i], tuples[j]) not in combinations:\n                    # Create a new list of combinations\n                    combinations.append((tuples[i], tuples[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def is_subset(set1, set2):\n        \"\"\"\n        Check if set2 is a subset of set1\n        \"\"\"\n        return set2.issubset(set1)\n    \n    def find_combinations_helper(combinations, test_list, target):\n        if len(combinations) == len(test_list):\n            if sum(combinations) == target:\n                print(combinations)\n            return\n        for i in range(len(test_list)):\n            if test_list[i] not in combinations and is_subset(combinations, test_list[i]):\n                combinations.append(test_list[i])\n                find_combinations_helper(combinations, test_list, target)\n                combinations.pop()\n    \n    test_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    target = 10\n    combinations = []\n    find_combinations_helper(combinations, test_list, target)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Helper function to find the sum of a given list of tuples\n    def sum_of_tuples(lst):\n        return sum(x[0] + x[1] for x in lst)\n\n    # Helper function to find the combinations of sums of two given lists\n    def combinations_of_sums(lst1, lst2):\n        return combinations(sum(lst1), 2)\n\n    # Find all combinations of sums that include tuples in the given list\n    for tup in test_list:\n        for comb in combinations_of_sums(tup, test_list):\n            if comb[0] in tup and comb[1] in tup:\n                print(comb)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even, else False.\n    '''\n    # initialize variables\n    count = 0\n    divisor = 2\n\n    # loop through the odd numbers from 3 to n-1\n    while divisor <= n - 1:\n        # check if n is divisible by divisor\n        if n % divisor == 0:\n            count += 1\n        # update the divisor\n        divisor += 2\n\n    # return True if count is even, else False\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n    return count "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            i += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # function to find the number of divisors of a number\n    def count_divisors(n): \n        divisor_count = 0 \n        for i in range(1, int(math.sqrt(n))+1): \n            if n % i == 0: \n                divisor_count += 2\n        if n > 2: \n            divisor_count += 1 \n        return divisor_count \n\n    # find the count of divisors of n\n    divisor_count = count_divisors(n) \n\n    # check whether the count of divisors is even or not\n    if divisor_count % 2 == 0: \n        print(str(n) + \" has even number of divisors.\") \n    else: \n        print(str(n) + \" has odd number of divisors.\") "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n):\n    print(n, \"is prime\")\nelse:\n    print(n, \"is not prime\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    if len(divisors) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number.\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 2\n    if n > 1 and n % 2!= 0:\n        divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                return False\n    return True"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum_odd = 0\n    for i in range(len(arr)):\n        if i%2!=0:\n            count+=1\n            sum_odd+=arr[i]\n        if count==1:\n            continue\n        elif count%2!=0:\n            sum_odd-=arr[i-count]\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += arr[j-2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    subarray_sum = 0\n    for i in range(len(arr)):\n        if i == 0:\n            subarray_sum = arr[i]\n        elif i % 2!= 0:\n            subarray_sum += arr[i]\n        else:\n            subarray_sum -= arr[i - 1]\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n-2):\n        if i == 0 or (i > 0 and arr[i] == arr[i-1]):\n            for j in range(i+3, n, 2):\n                if j == n-1 or (j+1 < n and arr[j] == arr[j+1]):\n                    sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum_arr = [0] * (len(arr) // 2 + 1)\n    for i in range(1, len(arr) - 1):\n        if len(arr[i:]) % 2 == 1:\n            sub_sum = sum(arr[i:i+len(arr[i:])//2+1])\n            sum_arr[len(arr[i:]) // 2] += sub_sum\n    return sum_arr"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n-1):\n        if i % 2 == 0:\n            continue\n        for j in range(i+2, n+1, 2):\n            sum += arr[j-2]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all odd length subarrays\n    sum_odd = 0\n\n    # Loop through the list of subarrays\n    for i in range(len(arr) - 1):\n        # Check if the length of the current subarray is odd\n        if len(arr[i:i+2]) % 2 == 1:\n            # If the length of the current subarray is odd, add its sum to the sum_odd variable\n            sum_odd += sum(arr[i:i+2])\n\n    # Return the sum_odd variable\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers and returns the sum of all odd-length subarrays in the array.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_odd = 0\n\n    # Initialize a variable to keep track of the current length of subarray being processed\n    current_length = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is odd, add it to the sum and increase the length by 1\n        if arr[i] % 2!= 0:\n            sum_odd += arr[i]\n            current_length += 1\n\n        # If the current length becomes greater than or equal to 3, subtract the first element of the subarray\n        # and reset the length to 1\n        if current_length >= 3:\n            sum_odd -= arr[i - current_length + 1]\n            current_length = 1\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_of_subarrays = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j-i)%2!= 0:\n                sum_of_subarrays += sum(arr[i:j])\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            total += arr[j]\n    return total"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_val - min_val\n    \n    # Calculate hue and saturation\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate value\n    value = max_val\n    \n    # Return hsv values\n    return [hue * 60, saturation, value]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    if max_val!= 0:\n        s = (max_val - min_val) / max_val\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / (max_val - min_val)\n        elif g == max_val:\n            h = 2 + (b - r) / (max_val - min_val)\n        elif b == max_val:\n            h = 4 + (r - g) / (max_val - min_val)\n        h *= 60\n        if h < 0:\n            h += 360\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    elif cmax == b:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    v = cmax\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2*cmax - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    # Handle grayscale color\n    if delta == 0:\n        h = s = 0\n    else:\n        s = delta / cmax\n    \n    # Handle color with max value\n    if cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    # Convert HSV to HSL\n    h *= 60\n    if h < 0:\n        h += 360\n    \n    # Convert HSL to HSV\n    h /= 360\n    s *= 100\n    v = cmax * 100\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    \n    # Convert RGB to float values\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n    \n    # Find greatest and smallest values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find difference between max and min values\n    delta = max_val - min_val\n    \n    # Find the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # Find the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Find the value\n    value = max_val\n    \n    # Convert HSV values to float and multiply by 360 to get degrees\n    hue = round(hue * 60) % 360\n    saturation *= max_val\n    value *= max_val\n    \n    # Return the HSV color as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color\n\n    :param r: red color component (0-255)\n    :param g: green color component (0-255)\n    :param b: blue color component (0-255)\n    :return: Hue, Saturation, Value in the range of 0-1\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_component = max(r, g, b)\n    min_component = min(r, g, b)\n    delta = max_component - min_component\n    if max_component == min_component:\n        hue = 0  # achromatic colors\n    else:\n        if max_component == r:\n            hue = (g - b) / delta\n        elif max_component == g:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n        hue = hue * 60.0 if hue < 0 else hue * 60.0\n        if hue < 0:\n            hue += 360.0\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / (max_component + min_component)\n    value = max_component\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color model.\n    \"\"\"\n    \n    # Convert RGB to linear RGB\n    r_linear = r / 255.0\n    g_linear = g / 255.0\n    b_linear = b / 255.0\n    \n    # Find maximum and minimum values\n    max_value = max(r_linear, g_linear, b_linear)\n    min_value = min(r_linear, g_linear, b_linear)\n    \n    # Find distance between maximum and minimum values\n    delta = max_value - min_value\n    \n    # Calculate hue\n    if max_value == r_linear and min_value == b_linear:\n        hue = (g_linear - b_linear) / delta\n    elif max_value == g_linear and min_value == b_linear:\n        hue = 2.0 + (b_linear - r_linear) / delta\n    elif max_value == b_linear and min_value == r_linear:\n        hue = 4.0 + (r_linear - g_linear) / delta\n    \n    if hue < 0.0:\n        hue += 6.0\n    \n    # Calculate saturation\n    if max_value == 0.0:\n        saturation = 0.0\n    else:\n        saturation = delta / max_value\n    \n    # Calculate value\n    value = max_value\n    \n    # Convert HSV to RGB\n    h = hue / 6.0\n    if h == 0.0:\n        r_color = value\n        g_color = value\n        b_color = value\n    elif h == 1.0:\n        r_color = value\n        g_color = 0.0\n        b_color = 0.0\n    elif h == 2.0:\n        r_color = 0.0\n        g_color = value\n        b_color = 0.0\n    elif h == 3.0:\n        r_color = 0.0\n        g_color = 0.0\n        b_color = value\n    elif h == 4.0:\n        r_color = value\n        g_color = 0.0\n        b_color = 0.0\n    else:\n        r_color = 0.0\n        g_color = value\n        b_color = 0.0\n    \n    r_color = r_color * 255.0\n    g_color = g_color * 255.0\n    b_color = b_color * 255.0\n    \n    return r_color, g_color, b_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three RGB color values (r, g, b) as input and returns a tuple containing the Hue (H), Saturation (S) and Value (V) of the input color.\n\n    The Hue value is calculated as the angle between the vector from the red, green and blue color values (r, g, b) and the X axis. In other words, Hue is the angle formed by the three color values when looking at the X axis in a triangle.\n\n    The Saturation value is the proportion of the total color spectrum that the color belongs to. In other words, it represents the percentage of the color spectrum that the color is in.\n\n    The Value value represents the brightness of the color. It represents the percentage of the light intensity that the color reflects.\n\n    This function was inspired by the following link:\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n    \"\"\"\n\n    # Convert the RGB values to the range of 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Find the minimum and maximum RGB values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find the difference between the maximum and minimum RGB values\n    delta = max_val - min_val\n\n    # If the maximum and minimum values are equal, then there is no difference between the Hue and Saturation values\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate the Hue value\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # Convert the Hue value to the range of 0-6\n        h = h * 60\n\n        # If the Hue value is negative, add 360 to it\n        if h < 0:\n            h += 360\n\n        # Calculate the Saturation value\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n\n        # If the Saturation value is negative, set it to 0\n        if s < 0:\n            s = 0\n\n    # Calculate the Value value\n    v = max_val\n\n    # Return a tuple containing the Hue, Saturation and Value values\n    return int(h), int(s*255), int(v*255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color model.\n\n    :param r: Red color component (0-255)\n    :param g: Green color component (0-255)\n    :param b: Blue color component (0-255)\n    :return: Tuple (hue, saturation, value) representing the HSV color model.\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    hue = 0\n    saturation = 0\n\n    if max_value == min_value:\n        hue = 0\n        saturation = 0\n    else:\n        delta = max_value - min_value\n        saturation = delta / max_value * 100\n\n        if max_value == r:\n            hue = (g - b) / delta * 60\n        elif max_value == g:\n            hue = (b - r) / delta * 60 + 120\n        else:\n            hue = (r - g) / delta * 60 + 240\n\n        if hue < 0:\n            hue += 360\n\n        if saturation == 0:\n            hue = 0\n\n    value = max_value / 255 * 100\n\n    return (int(hue), int(saturation), int(value))\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes red, green and blue color values as input and returns the corresponding HSV color values.\n    \n    Hue (H): It is the color angle, where 0 degrees represents red color and 360 degrees represents blue color.\n    \n    Saturation (S): It is the brightness of the color, where 0 represents no color and 100 represents full color.\n    \n    Value (V): It is the intensity of the color, where 0 represents black and 100 represents white.\n    \n    \"\"\"\n    # Convert RGB to R, G, B values to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Calculate max and min values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Calculate hue\n    if max_value == r:\n        hue = 60 * ((g - b) / (max_value - min_value))\n    elif max_value == g:\n        hue = 60 * (2 + (b - r) / (max_value - min_value))\n    else:\n        hue = 60 * (4 + (r - g) / (max_value - min_value))\n    \n    # Convert hue value to degrees\n    hue = hue if hue >= 0 else hue + 360\n    \n    # Calculate saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = 100 * (max_value - min_value) / max_value\n    \n    # Calculate value\n    value = 100 * max_value\n    \n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    product = 1\n    for i in lst:\n        if i % 2 == 0:\n            product *= i\n        elif i % 2!= 0:\n            product *= i\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return 0\n    else:\n        return odd_count * even_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0:\n        return 0\n    else:\n        return list1[0] * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    '''\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    # iterate through the list\n    for num in lst:\n        # check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        # check if both even and odd counts are present\n        if even_count > 0 and odd_count > 0:\n            # multiply the result by the product of the even and odd counts\n            result *= even_count * odd_count\n    \n    # return the result\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    if even_num == 0:\n        if odd_num == 0:\n            return None\n        else:\n            return odd_num\n    else:\n        return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    result = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            result *= num\n        else:\n            odd_count += 1\n            result *= num\n\n    if even_count > 0 and odd_count > 0:\n        return result\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count * odd_count!= 0:\n            return list1[0] * list1[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n\n    # Initialize variables to store even and odd product\n    even_product = 1\n    odd_product = 1\n\n    # Iterate through the list to find the product of even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n\n    # Return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even = 1\n    odd = 1\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n\n    product = even * odd\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        if isinstance(test_str, tuple):\n            return tuple(int(i) for i in test_str)\n        else:\n            raise TypeError(\"Input must be a tuple\")\n    except ValueError:\n        raise ValueError(\"All elements in the input tuple must be convertible to integer\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma\n    tuple_str = test_str.split(',')\n    # Initialize an empty list for integer tuple\n    int_tuple = []\n    # Loop through the list of tuples\n    for tup in tuple_str:\n        # Split each tuple by space\n        tup_list = tup.split()\n        # Convert each integer in the tuple to an integer\n        int_tup = tuple([int(x) for x in tup_list])\n        # Add the converted tuple to the integer tuple list\n        int_tuple.append(int_tup)\n    # Return the integer tuple list\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string into a list of strings\n    test_list = test_str.split(',')\n    # Convert each string to an integer\n    test_tuple = tuple(int(i.strip()) for i in test_list)\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = ()\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result += (int(test_str[i]),)\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple of string and integer values to a tuple of integers.\n    '''\n    return tuple(map(int, test_str))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to list\n    test_list = list(map(int, test_str))\n    # convert list to tuple\n    test_tuple = tuple(test_list)\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a tuple string as input and returns a tuple of integers.\n    '''\n    # Split the tuple string into individual elements\n    elements = test_str.split(',')\n    \n    # Convert each element to an integer and add it to a new tuple\n    new_tuple = tuple(int(x) for x in elements)\n    \n    return new_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty integer tuple\n    int_tuple = ()\n    # Loop through the words and add each word to the tuple\n    for word in words:\n        try:\n            int_tuple += (int(word),)\n        except ValueError:\n            pass # Skip non-integer words\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (tuple): Tuple of strings\n\n    Returns:\n        int_tuple (tuple): Tuple of integers\n    \"\"\"\n    int_tuple = ()\n    for string in test_str:\n        try:\n            int_tuple += (int(string),)\n        except ValueError:\n            continue\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Find the right insertion point for a value in a sorted list.\n\n    Parameters:\n    a: list\n        A sorted list of values.\n    x: float\n        The value to be inserted.\n\n    Returns:\n    int\n        The index of the right insertion point.\n\n    Raises:\n    TypeError\n        If `a` is not a list.\n    \"\"\"\n    if not isinstance(a, list):\n        raise TypeError(\"`a` must be a list.\")\n\n    i = bisect.bisect_left(a, x)\n\n    # If x is equal to the last element of the list, we need to insert at i+1.\n    if i == len(a) - 1 and a[i] == x:\n        i += 1\n\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    \n    if a[index] == x:\n        return index\n    elif a[index] < x:\n        return right_insertion(a[index:], x)\n    else:\n        return right_insertion(a[:index], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the insertion point\n    i = bisect.bisect_left(a, x)\n    # Check if the value is already present in the list\n    if a[i] == x:\n        return i\n    else:\n        # If the value is not present, return the insertion point\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba(?=.*b{3})\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\w{2}b')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r\"a.*b{3}\")\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"(?<=a)b{3}\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of numbers.\n        test_str (str): A string of characters.\n\n    Returns:\n        A new tuple containing the elements of `test_list` and `test_str`.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    test_tuple = tuple(test_str) + tuple(test_list)\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    \n    # Create a new tuple with the characters and the list of characters\n    new_tuple = tuple(char_list + test_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = [test_str] + test_list\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): The list of elements to be included in the new tuple.\n    test_str (str): The string to be included in the new tuple.\n\n    Returns:\n    tuple: A new tuple with the elements of `test_list` and `test_str`.\n    \"\"\"\n\n    # Combine the two input strings and lists into a single tuple\n    new_tuple = (test_str, *test_list)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list + (test_str, ), )"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n    \n    # Combine the list with the tuple\n    new_tuple = tuple(test_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[j] % 2 == 0 for j in range(i, len(nums), 2)):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        else:\n            if nums[i] % 2 == 0:\n                odd_count += 1\n            else:\n                even_count += 1\n\n    return (even_count == odd_count)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                else:\n                    break\n            if even_count == len(nums):\n                return True\n            else:\n                even_count = 0\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether the function has found an even position\n    found_even = False\n    \n    # Loop through the indices of the list\n    for i in range(len(nums)):\n        # If the index is even, check if its value is even\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            # If the value is even, set the boolean variable to True and break out of the loop\n            found_even = True\n            break\n            \n    # Return the boolean variable indicating whether the function has found an even position\n    return found_even"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i:] if num % 2 == 0]) % 2 == 0:\n            print(f\"Index {i} contains even numbers\")\n        else:\n            print(f\"Index {i} does not contain even numbers\")\n    return None"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [elem for tup in test_tup for elem in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes all the nested tuples from it.\n    '''\n    while len(test_tup) > 1:\n        if type(test_tup[0]) == tuple:\n            test_tup = test_tup[0]\n        else:\n            break\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create an empty list to hold the output\n    new_list = []\n    # iterate through the input tuple\n    for item in test_tup:\n        # if the item is not a tuple, add it to the new list\n        if type(item)!= tuple:\n            new_list.append(item)\n        # if the item is a tuple, remove it and recursively call the function\n        else:\n            new_list.extend(remove_nested(item))\n    # return the new list\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Recursive function to remove nested tuples\n    def remove_nested_helper(test_tup, output_list):\n        if isinstance(test_tup, tuple):\n            for elem in test_tup:\n                remove_nested_helper(elem, output_list)\n        elif isinstance(test_tup, list):\n            for elem in test_tup:\n                remove_nested_helper(elem, output_list)\n        elif isinstance(test_tup, str):\n            pass\n        else:\n            output_list.append(test_tup)\n\n    # Create a new list to store the output\n    new_list = []\n\n    # Call the recursive function to remove tuples\n    remove_nested_helper(test_tup, new_list)\n\n    # Return the new list with tuples removed\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = test_tup[0]\n    while isinstance(nested_tup, tuple):\n        nested_tup = nested_tup[0]\n    return nested_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    This function takes a sorted array and an element x as input and returns the last index of the element x in the array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif arr[0] == x:\n        return 0\n    elif arr[-1] == x:\n        return len(arr)-1\n    else:\n        return last(arr[1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: the sorted array and the element to search for. \n    It returns the last position of the element in the array. If the element is not present in the array, it returns -1.\n    '''\n    \n    # Initialize a variable to store the last position of the element\n    last_position = -1\n    \n    # Loop through the array until we find the last position of the element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n    \n    # Return the last position of the element\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the index of the last occurrence of the element in the array. If the element is not found in the array, it returns -1.\n    \"\"\"\n    # Initialize the last index to -1\n    last_index = -1\n    \n    # Iterate through the array using a for loop\n    for i in range(len(arr)):\n        # If the current element is equal to the target element, update the last index\n        if arr[i] == x:\n            last_index = i\n    \n    # Return the last index if it is still -1, which indicates that the element was not found in the array\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last index of the element in the array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0] == x:\n        return 0\n    i = 0\n    while i < len(arr) and arr[i]!= x:\n        i += 1\n    return i-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Check if the array is empty or not\n    if len(arr) == 0:\n        return -1\n    \n    # Find the leftmost index of the element x in the array\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # If the element x is not found, return -1\n    if left > right or arr[left]!= x:\n        return -1\n        \n    # Return the last index of the element x\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0] > x:\n        return 0\n    elif arr[len(arr)-1] < x:\n        return len(arr)-1\n    else:\n        return bisect_left(arr, x) - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n            \n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if arr == []:\n        return None\n    if arr[0] == x:\n        return 0\n    if arr[-1] == x:\n        return len(arr) - 1\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            right = mid\n    return right"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b$')\n    result = pattern.match(text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?)b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?i)^(?P<a>\\w)a.*\\b(?P<b>\\w)b$')\n    match = pattern.match(text)\n    if match:\n        a = match.group('a')\n        b = match.group('b')\n        return f\"{a} and {b}\"\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?P<anything>.*)b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group('anything')\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"^a.*b$\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for item in dictionary.values():\n        sum_of_items += item\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_of_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_of_odd += i\n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    print(\"The sum of all odd natural numbers between\", l, \"and\", r, \"is:\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # use a generator expression to generate all odd natural numbers within the range\n    odd_numbers = (n for n in range(l, r+1) if n % 2!= 0)\n\n    # use a generator expression to calculate the sum of all odd numbers in the range\n    return sum(odd_numbers)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    # initialize the sum variable to zero\n    total = 0\n    # loop through the range from l to r (inclusive)\n    for i in range(l, r+1):\n        # if the number is odd, add it to the total\n        if i % 2!= 0:\n            total += i\n    # return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n\n    while l <= r:\n        sum += l\n        l += 2\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): lower limit of the range\n    r (int): upper limit of the range\n\n    Returns:\n    int: the sum of all odd natural numbers within the range l and r\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through all numbers in the range\n    for i in range(l, r+1):\n        # if the number is odd, add it to the sum\n        if i % 2!= 0:\n            sum += i\n\n    # return the final sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum of odd numbers to zero\n    total = 0\n    # loop through the range from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the sum of odd numbers\n            total += i\n    # return the total sum of odd numbers\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):   # function name starts with underscore to avoid naming conflicts\n    '''\n    This function takes an array as input and returns the sum of all elements in the array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & ((2**32) - 1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert number to binary string\n    bin_str = bin(n)[2:]\n    # pad binary string with leading zeros if length is less than d\n    while len(bin_str) < d:\n        bin_str = '0' + bin_str\n    # extract the last d bits and shift them to the left\n    last_d_bits = bin_str[-d:]\n    bin_str = bin_str[:-d]\n    # concatenate last d bits with the new bits shifted to the left\n    rotated_bin_str = last_d_bits + bin_str\n    # convert the rotated binary string back to an integer\n    rotated_int = int(rotated_bin_str, 2)\n    return rotated_int"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Shift the bits to the left by d bits\n    mask = (1 << d) - 1\n    n = (n << d) & mask\n    # Shift the bits to the right by n-d bits\n    n = (n >> (n-d)) & ((1 << n)-1)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d)))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \"\"\"\n    mask = (1 << 32) - 1\n    n = n & mask  # Mask out bits outside the 32-bit range.\n    d = d % 32  # Limit d to the range of 0 to 31.\n    return ((n << d) | (n >> (32 - d))) & mask  # Perform the left rotation."
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32 # To handle negative values of d\n    mask = (1 << d) - 1 # To get the mask for d bits\n    rotated_number = ((n & mask) << d) | (n >> (32 - d)) # Perform the rotation\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    n &= mask\n    n = ((n << d) | (n >> (32 - d))) & mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the binary number to an integer\n    num = int(n, 2)\n    # Calculate the number of bits to shift\n    shift = d % 32\n    # Calculate the number of bits to rotate\n    rotate = d // 32\n    # Perform the rotation\n    shifted_num = (num << shift) | (num >> (32 - shift))\n    # Convert the rotated number back to a binary string\n    rotated_num = bin(shifted_num)[2:].zfill(32)\n    # Return the rotated binary string\n    return rotated_num"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    \"\"\"\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # Initialize variables to keep track of number of equal numbers and the last number seen\n    count = 0\n    last_number = None\n\n    # Loop through the list of numbers\n    for number in [x, y, z]:\n\n        # If this is the first number seen or if the current number is not equal to the last seen number, increment the count\n        if last_number is None or last_number!= number:\n            count += 1\n\n        # Update the last number seen\n        last_number = number\n\n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, min(x, y, z) + 1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y):\n        for j in range(i,y):\n            for k in range(j,y):\n                if i == j == k or i == k == j or j == k == i:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers.\n    \"\"\"\n    count = 0\n    for i in range(x, z+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    \n    # loop through the three given integers\n    for i in [x,y,z]:\n        # loop through the other two integers and check if they are equal to the current integer\n        for j in [x,y,z] if i!= j else [y,z]:\n            if i == j:\n                count += 1\n    \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function counts the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(1, x+1):\n        if i == y or i == z or i == x:\n            continue\n        elif i == x:\n            count += 1\n        elif i == y:\n            count += 1\n        elif i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(100):  # use a loop to check every possible value from 0 to 99\n        if x == i or y == i or z == i:  # check if the number is equal to x, y, or z\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, z+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # if array is already sorted return 0\n    if arr == sorted(arr):\n        return 0\n    # initialize variables\n    max_swap = 0\n    count = 0\n    # loop through array and count rotations\n    for i in range(n-1):\n        # calculate the number of swaps required to sort the array\n        temp = n - i - 1\n        count += temp // 2\n        # update max_swap if required\n        max_swap = max(max_swap, temp - count * 2)\n    # return count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array to find the smallest element and its index\n    min_val = arr[0]\n    min_index = 0\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_index = i\n    # Swap the smallest element with the last element of the array\n    arr[n-1], arr[min_index] = arr[min_index], arr[n-1]\n    # Iterate through the array and count the number of inversions\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += n-i\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # find the smallest element in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # count the number of rotations required\n    count = 0\n    for i in range(1, n):\n        if arr[i] < min_val:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            count += 1\n            j = i+1\n            while j < n and arr[i] < arr[j]:\n                j += 1\n            if j == n:\n                break\n            arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # To count number of rotations required to sort the array\n    count = 0\n    # Traverse through the array and find the first non-increasing element\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            break\n        # If the element is not in increasing order, then we need to rotate the array\n        count += 1\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # find the largest and smallest elements in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    # initialize two pointers, one at the beginning and the other at the end of the array\n    i = 0\n    j = n-1\n    # count the number of rotations required to generate a sorted array\n    count = 0\n    while i < j:\n        # check if the elements at the two pointers are in ascending order\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n            count += 1\n    # check if the elements at the two pointers are in ascending order\n    if i == n or arr[i] >= max_val:\n        # if the elements are in ascending order, then the array is already sorted\n        return count\n    else:\n        # otherwise, the array needs to be rotated\n        count += 1\n        return count_rotation(arr[n-i:])"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    # Function to count the number of rotations required to generate a sorted array\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize two pointers, one starting from the beginning of the array and the other starting from the end\n    i = 0\n    j = n - 1\n    # Keep rotating the pointers until the pointers meet in the middle of the array\n    while i < j:\n        # Swap the elements pointed by the two pointers\n        arr[i], arr[j] = arr[j], arr[i]\n        # Move the pointers towards each other\n        i += 1\n        j -= 1\n    # At this point, the array is sorted in ascending order\n    # Now, move the two pointers towards each other and count the number of times they meet\n    count = 0\n    while i < j:\n        if arr[i] < arr[j]:\n            count += 1\n            i += 1\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # find the position of first occurrence of largest element\n    max_pos = arr.index(max(arr))\n    # initialize count to 0\n    count = 0\n    # loop till the end of the array\n    while arr[max_pos] < arr[n-1]:\n        # check if the next element is greater than the last element in the array\n        if arr[max_pos+1] > arr[n-1]:\n            # if so, increment count and move the first element to the end of the array\n            count += 1\n            arr[max_pos], arr[n-1] = arr[n-1], arr[max_pos]\n        # otherwise, move the leftmost element to the right\n        else:\n            # check if the next element is the first element in the array\n            if arr[max_pos+1] == arr[0]:\n                # if so, increment count and move the first element to the end of the array\n                count += 1\n                arr[max_pos], arr[0] = arr[0], arr[max_pos]\n            # if not, move the first element to the left\n            else:\n                # find the position of the first occurrence of the next element\n                first_occurrence = arr.index(arr[max_pos+1])\n                # move the first element to the end of the array\n                arr[max_pos], arr[first_occurrence] = arr[first_occurrence], arr[max_pos]\n                # move the first occurrence of the next element to the end of the array\n                arr[first_occurrence], arr[max_pos+1] = arr[max_pos+1], arr[first_occurrence]\n                # move the first element to the left\n                arr[0] = arr[max_pos]\n                # update max_pos and n\n                max_pos = arr.index(max(arr))\n                n -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    # Traverse the array from left to right and check if the array is already sorted\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            # If the array is not sorted, then perform a right rotation\n            if count % 2 == 1:\n                arr[i], arr[n-1-i] = arr[n-1-i], arr[i]\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Use the trial division method to check if n is a perfect square\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the number is less than 0 or not a positive integer, return False.\n    if n < 0 or not isinstance(n, int):\n        return False\n    \n    # If the number is 1, it is a perfect square.\n    if n == 1:\n        return True\n    \n    # Initialize the square root of n.\n    sqrt_n = int(n ** 0.5) + 1\n    \n    # If the square root of n is equal to the number, it is a perfect square.\n    if sqrt_n ** 2 == n:\n        return True\n    \n    # If the square root of n is not equal to the number, it is not a perfect square.\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    # Check if the number is a perfect square using the math.isqrt function\n    root = math.isqrt(n)\n    return root*root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    a = 0\n    b = n\n    while a <= b:\n        c = (a + b) // 2\n        if c*c == n:\n            return True\n        elif c*c < n:\n            a = c + 1\n        else:\n            b = c - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        elif i * i < n:\n            i += 1\n        else:\n            i -= 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    def get_sqrt(x):\n        \"\"\"\n        Returns the square root of a given number using Newton's method.\n        \"\"\"\n        y = 1\n        while y < x:\n            y = (y + x // y) // 2\n        return y\n\n    # Check if the given number is a perfect square or not\n    if get_sqrt(n) * get_sqrt(n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    sqrt_n = math.sqrt(n)\n    for i in range(1, int(sqrt_n)+1):\n        if i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Start from 1 and check if n/i is a perfect square\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n\n    return True\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n\n    # Find the square root of n using the Babylonian method\n    sqrt_n = 0\n    x = n\n    while x > sqrt_n:\n        sqrt_n = (sqrt_n + x) / 2\n        x = (sqrt_n + n / sqrt_n) / 2\n\n    # Check if sqrt_n * sqrt_n is equal to n\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(n**0.5)\n    for i in range(sqrt_n+1):\n        if n % (i*i) == 0:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product is even.\"\n    else:\n        return \"The product is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even\")\n    else:\n        print(\"The product of the numbers is odd\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if not arr:\n        return False\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    product = 1\n    for i in arr: \n        product *= i \n        \n    if product % 2 == 0: \n        return True\n    else: \n        return False "
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize max_sum and max_list as None\n    max_sum = None\n    max_list = None\n\n    # Loop through each list in the input list of lists\n    for lst in lists:\n\n        # Initialize the sum of the list as 0\n        current_sum = 0\n\n        # Loop through each element in the list\n        for num in lst:\n\n            # Add the current element to the sum\n            current_sum += num\n\n        # If the current sum is greater than max_sum or if max_sum is None, update max_sum and max_list\n        if current_sum > max_sum or max_sum is None:\n            max_sum = current_sum\n            max_list = lst\n\n    # Return the list with the highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for sublist in lists:\n        if len(sublist) > 0:\n            sublist_sum = sum(sublist)\n            if sublist_sum > max_sum:\n                max_sum = sublist_sum\n                max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize a variable to keep track of the maximum sum\n    max_sum = float('-inf')\n    # Initialize a variable to keep track of the current sum\n    current_sum = 0\n    # Initialize a variable to keep track of the current list\n    current_list = None\n    # Loop through each list in the list of lists\n    for lst in lists:\n        # Loop through each element in the current list\n        for elem in lst:\n            # Add the element to the current sum\n            current_sum += elem\n            # If the current sum is greater than the maximum sum, update both variables\n            if current_sum > max_sum:\n                max_sum = current_sum\n                current_list = lst\n        # Reset the current sum and list to start a new list\n        current_sum = 0\n        current_list = None\n    # Return the maximum sum list\n    return current_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_sum_list = []\n    for i in range(len(lists)):\n        sum_of_elements = 0\n        for j in range(len(lists[i])):\n            sum_of_elements += lists[i][j]\n        if sum_of_elements > max_sum:\n            max_sum = sum_of_elements\n            max_sum_list = [lists[i]]\n        elif sum_of_elements == max_sum:\n            max_sum_list.append(lists[i])\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    def dfs(nodes, index, max_sum, current_sum):\n        \"\"\"\n        Helper function to traverse the list of lists and find the max sum.\n        \"\"\"\n        if index == len(nodes):\n            if current_sum > max_sum:\n                max_sum = current_sum\n            return max_sum\n        \n        current_sum += nodes[index][0]\n        current_sum = max(current_sum, dfs(nodes, index+1, max_sum, current_sum))\n        current_sum -= nodes[index][0]\n        \n        return dfs(nodes, index+1, max_sum, current_sum)\n    \n    def find_max_sum(lists):\n        \"\"\"\n        Helper function to find the max sum among all the possible lists.\n        \"\"\"\n        max_sum = 0\n        for i in range(len(lists)):\n            dfs(lists, i, max_sum, 0)\n        return max_sum\n    \n    return find_max_sum(lists)"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            temp_sum = 0\n            for k in range(len(lists[i][j])):\n                temp_sum += lists[i][j][k]\n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_list = [lists[i][j]]\n            elif temp_sum == max_sum:\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize variables\n    max_sum = 0\n    max_list = []\n\n    # Iterate through each list in the list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        current_sum = sum(lst)\n\n        # If the current sum is greater than the current maximum sum, update the maximum sum and the list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n\n    for i in range(len(lists)):\n        sum_list = sum(lists[i])\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to store current run and maximum run found so far\n    run = 1\n    max_run = 0\n\n    # Iterate through each character in the string\n    for i in range(len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, increment the run count\n            run += 1\n        else:\n            # If it's not, reset the run count and check if it's longer than the previous maximum run\n            if run > max_run:\n                max_run = run\n            # Reset the run count to 1\n            run = 1\n    \n    # Check if the last run was longer than the previous maximum run\n    if run > max_run:\n        max_run = run\n    \n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables to store the maximum run of uppercase characters\n    start_index = 0\n    max_run = 0\n    max_run_index = 0\n\n    # loop through each character in the string\n    for index, char in enumerate(test_str):\n        # if the character is uppercase and the current run of uppercase characters is longer than the previous one\n        if char.isupper() and index > start_index + max_run:\n            # update the start index of the current run and set the max run\n            start_index = index\n            max_run = 1\n        # if the character is not uppercase and the current run of uppercase characters is longer than the previous one\n        elif not char.isupper() and index > start_index + max_run:\n            # update the start index of the current run and increment the max run\n            start_index = index\n            max_run += 1\n\n        # if the current run of uppercase characters is longer than the previous max run, update the max run and its index\n        if index > start_index + max_run:\n            max_run = 1\n            max_run_index = index\n\n    # return the maximum run of uppercase characters\n    return max_run_index - start_index"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    curr_char = \"\"\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            curr_run = 0\n        if curr_run > max_run:\n            max_run = curr_run\n            curr_char = char\n    return curr_char * max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    run = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            if count > run:\n                max_run = run\n            run = 0\n            count = 0\n    if count > run:\n        max_run = run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    max_run = 0\n    max_index = -1\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i - start + 1 > max_run:\n                max_run = i - start + 1\n                max_index = start\n\n        if i == len(test_str) - 1:\n            if i - start + 1 > max_run:\n                max_run = i - start + 1\n                max_index = start\n\n    return test_str[max_index:max_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n    for char in test_str:\n        # If the current character is uppercase, increment the run count\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the run count and previous character\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            prev_char = None\n    # If the last run was greater than the current max run, update the max run\n    if current_run > max_run:\n        max_run = current_run\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the next character is lowercase, increment the current run\n        if test_str[i].isupper() and not test_str[i+1].islower():\n            current_run += 1\n        else:\n            # If the current character is not uppercase, reset the current run\n            current_run = 0\n        # Update the maximum run if the current run is greater than the current maximum run\n        if current_run > max_run:\n            max_run = current_run\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    prev_char = None\n    curr_char = None\n\n    for char in test_str:\n        if char.isupper():\n            if prev_char and prev_char.isupper():\n                curr_run = 1\n                while curr_char and not curr_char.isupper():\n                    curr_run += 1\n                    curr_char = next(iter(test_str[curr_run:]))\n                if curr_run > max_run:\n                    max_run = curr_run\n            else:\n                curr_run = 1\n            prev_char = char\n        else:\n            prev_char = None\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_start = 0\n    run_end = 0\n    run_length = 0\n    max_run = 0\n    current_run_length = 0\n    is_uppercase = False\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if is_uppercase:\n                current_run_length += 1\n            else:\n                is_uppercase = True\n                current_run_length = 1\n                run_start = i\n        else:\n            if is_uppercase:\n                if current_run_length > max_run:\n                    max_run = current_run_length\n                current_run_length = 0\n                is_uppercase = False\n            else:\n                current_run_length = 0\n        run_end = i\n    if is_uppercase:\n        if current_run_length > max_run:\n            max_run = current_run_length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    curr_run = 1\n    prev_char = test_str[0].lower()\n    \n    # loop through the string\n    for i in range(1, len(test_str)):\n        curr_char = test_str[i].lower()\n        if curr_char == prev_char:\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 1\n        prev_char = curr_char\n    \n    # check for the last character\n    if curr_run > max_run:\n        max_run = curr_run\n    \n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Returns the first odd number in a list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 2:\n        if K in test_tup[0] or K in test_tup[1]:\n            return True\n        else:\n            return False\n    elif len(test_tup) == 3:\n        if K in test_tup[0] or K in test_tup[1] or K in test_tup[2]:\n            return True\n        else:\n            return False\n    elif len(test_tup) == 4:\n        if K in test_tup[0] or K in test_tup[1] or K in test_tup[2] or K in test_tup[3]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        print(K, \"is present in\", test_tup)\n    else:\n        print(K, \"is not present in\", test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    if count >= len(test_tup) / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in two parameters, test_tup and K.\n    The function checks if the first element in each tuple in the list\n    contains the value K. If K is present, the function returns True.\n    Otherwise, it returns False.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a K value.\n    It returns True if the tuple contains the K, otherwise it returns False.\n    '''\n    for tup in test_tup:\n        if tup == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a value K and returns True if the tuple contains the value K, False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"False\")\n            return\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"True\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples is not equal.\")\n        return None\n    \n    # Loop through the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Element at index\", i, \"in the second tuple is smaller than its corresponding element in the first tuple.\")\n            return None\n    \n    # If all elements are smaller, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    }
]